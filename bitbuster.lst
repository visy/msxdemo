ASxxxx Assembler V01.75 + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 1.



                              1 ;
                              2 ; In: HL = source
                              3 ;     DE = destination
                              4 ;
   0000                       5 unPack12V:	
   0000 DD E5                 6 		push ix
   0002 DD 21 00 00           7 		ld ix,#0
   0006 DD 39                 8 		add ix,sp
                              9 
                             10 		; src
   0008 DD 6E 04             11 		ld l,4(ix)
   000B DD 66 05             12 		ld h,5(ix)
                             13 
                             14 		; dest
   000E DD 5E 06             15 		ld e,6(ix)
   0011 DD 56 07             16 		ld d,7(ix)
                             17 
   0014 CD 7E 00             18 		call	vram_init
                             19 
   0017 23                   20 		inc	hl		; skip original file length
   0018 23                   21 		inc	hl
   0019 23                   22 		inc	hl
   001A 23                   23 		inc	hl
                             24 
   001B 3E 80                25 		ld	a,#128
                             26 
   001D D9                   27 		exx
   001E 11 01 00             28 		ld	de,#1
   0021 D9                   29 		exx
                             30 
   0022 CD 78 00             31 unpack_loop:		call	getBit		; get compression type bit
   0025 38 07                32 		jr	c,.outCompress	; if set, we got lz77 compression
   0027 0E 98                33 		ld	c,#0x98		; copy byte from compressed data to destination
   0029 ED A3                34 		outi
   002B 13                   35 		inc	de
                             36 ;unrolled for extra speed
                             37 ;		call	getBit		; get compression type bit
                             38 ;		jr	c,.outCompress	; if set, we got lz77 compression
                             39 ;		ld	c,#0x98		; copy byte from compressed data to destination
                             40 ;		outi
                             41 ;		inc	de
                             42 ;		call	getBit		; get compression type bit
                             43 ;		jr	c,.outCompress	; if set, we got lz77 compression
                             44 ;		ld	c,#0x98		; copy byte from compressed data to destination
                             45 ;		outi
                             46 ;		inc	de
                             47 
   002C 18 F4                48 		jr	unpack_loop
                             49 
   002E 4E                   50 .outCompress:	ld	c,(hl)		; get lowest 7 bits of offset, plus offset
                             51 					; extension bit
   002F 23                   52 		inc	hl
                             53 
   0030 06 00                54 .outMatch:	ld	b,#0
   0032 CB 79                55 		bit	#7,c
   0034 28 16                56 		jr	z,.outMatch1	; no need to get extra bits if carry not set
ASxxxx Assembler V01.75 + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 2.



                             57 
   0036 CD 78 00             58 		call	getBit		; get offset bit 10 
   0039 CB 10                59 		rl	b
   003B CD 78 00             60 		call	getBit		; get offset bit 9
   003E CB 10                61 		rl	b
   0040 CD 78 00             62 		call	getBit		; get offset bit 8
   0043 CB 10                63 		rl	b
   0045 CD 78 00             64 		call	getBit		; get offset bit 7
                             65 
   0048 38 02                66 		jr	c,.outMatch1	; since extension mark already makes bit 7 set 
   004A CB B9                67 		res	#7,c		; only clear it if the bit should be cleared
   004C 03                   68 .outMatch1:	inc	bc
                             69 ;
   004D D9                   70 GetGammaValue:	exx			; to second register set!
   004E 62                   71 		ld	h,d
   004F 6B                   72 		ld	l,e             ; initial length to 1
   0050 43                   73 		ld	b,e		; bitcount to 1
                             74 
   0051 D9                   75 .size:		exx
   0052 CD 78 00             76 		call	getBit		; get more bits
   0055 D9                   77 		exx
   0056 30 0A                78 		jr	nc,.sizeEnd	; if bit not set, bitlength of remaining is known
   0058 04                   79 		inc	b		; increase bitcount
   0059 18 F6                80 		jr	.size
                             81 
   005B D9                   82 .bits:		exx
   005C CD 78 00             83 		call	getBit		; get next bit of value from bitstream
   005F D9                   84 		exx
   0060 ED 6A                85 		adc	hl,hl		; insert new bit in HL
   0062 10 F7                86 .sizeEnd: 	djnz	.bits		; repeat if more bits to go
                             87 
   0064 23                   88 .end:		inc	hl		; length was stored as length-2 so correct this
   0065 D9                   89 		exx			; back to normal register set
   0066 D8                   90 		ret	c
                             91 
   0067 E5                   92 		push	hl		; address compressed data on stack
   0068 D9                   93 		exx
   0069 E5                   94 		push	hl		; match length on stack
   006A D9                   95 		exx
   006B 62                   96 		ld	h,d
   006C 6B                   97 		ld	l,e		; destination address in HL...
   006D ED 42                98 		sbc	hl,bc		; calculate source address
                             99 
   006F C1                  100 		pop	bc		; match length from stack
                            101 
   0070 F5                  102 		push	af
   0071 CD 9D 00            103 		call	vram_ldir	; transfer data
   0074 F1                  104 		pop	af
                            105 
   0075 E1                  106 		pop	hl		; address compressed data back from stack
                            107 ;unrolled for extra speed
                            108 ;		call	getBit		; get compression type bit
                            109 ;		jr	c,unPack12V.outCompress	; if set, we got lz77 compression
                            110 ;		ld	c,$98		; copy byte from compressed data to destination
                            111 ;		outi
                            112 ;		inc	de
ASxxxx Assembler V01.75 + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 3.



                            113 ;		call	getBit		; get compression type bit
                            114 ;		jr	c,unPack12V.outCompress	; if set, we got lz77 compression
                            115 ;		ld	c,$98		; copy byte from compressed data to destination
                            116 ;		outi
                            117 ;		inc	de
                            118 
   0076 18 AA               119 		jr	unpack_loop
                            120 ;
   0078 87                  121 getBit:		add	a,a		; shift out new bit
   0079 C0                  122 		ret	nz		; if remaining value isn't zere, we're done
                            123 
   007A 7E                  124 		ld	a,(hl)		; get 8 bits from bitstream
   007B 23                  125 		inc	hl		; increase source data address
                            126 
   007C 17                  127 		rla			; (bit 0 will be set!!!!)
   007D C9                  128 		ret
                            129 ;
   007E                     130 vram:
                            131 ;
                            132 ; VRAM stuff (init andLDIR replacements)
                            133 ;
   007E 7A                  134 vram_init:		ld	a,d
   007F 17                  135 		rla
   0080 17                  136 		rla
   0081 17                  137 		rla
   0082 E6 07               138 		and	#7
   0084 D3 99               139 		out	(0x99),a
   0086 E6 04               140 		and	#4
   0088 32 A4 00            141 		ld	(.readPnt+1),a
   008B 32 BD 00            142 		ld	(.writePnt+1),a
   008E 3E 8E               143 		ld	a,#128+ 14
   0090 D3 99               144 		out	(0x99),a
   0092 7B                  145 		ld	a,e
   0093 D3 99               146 		out	(0x99),a
   0095 7A                  147 		ld	a,d
   0096 E6 3F               148 		and	#63
   0098 F6 40               149 		or	#64
   009A D3 99               150 		out	(0x99),a
   009C C9                  151 		ret
                            152 ;
   009D F3                  153 vram_ldir:		di
   009E 7C                  154 .ldir_loop:	ld	a,h
   009F E6 C0               155 		and	#192
   00A1 07                  156 		rlca
   00A2 07                  157 		rlca
   00A3 F6 00               158 .readPnt:	or	#0
   00A5 D3 99               159 		out	(0x99),a
   00A7 3E 8E               160 		ld	a,#128+ 14
   00A9 D3 99               161 		out	(0x99),a
   00AB 7D                  162 		ld	a,l
   00AC D3 99               163 		out	(0x99),a
   00AE 7C                  164 		ld	a,h
   00AF E6 3F               165 		and	#63
   00B1 D3 99               166 		out	(0x99),a
   00B3 23                  167 		inc	hl
   00B4 DB 98               168 		in	a,(0x98)
ASxxxx Assembler V01.75 + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 4.



   00B6 F5                  169 		push	af
   00B7 7A                  170 		ld	a,d
   00B8 E6 C0               171 		and	#192
   00BA 07                  172 		rlca
   00BB 07                  173 		rlca
   00BC F6 00               174 .writePnt:	or	#0
   00BE D3 99               175 		out	(0x99),a
   00C0 3E 8E               176 		ld	a,#128+ 14
   00C2 D3 99               177 		out	(0x99),a
   00C4 7B                  178 		ld	a,e
   00C5 D3 99               179 		out	(0x99),a
   00C7 7A                  180 		ld	a,d
   00C8 E6 3F               181 		and	#63
   00CA F6 40               182 		or	#64
   00CC D3 99               183 		out	(0x99),a
   00CE 13                  184 		inc	de
   00CF F1                  185 		pop	af
   00D0 D3 98               186 		out	(0x98),a
   00D2 0B                  187 		dec	bc
   00D3 79                  188 		ld	a,c
   00D4 B0                  189 		or	b
   00D5 20 C7               190 		jr	nz,.ldir_loop
   00D7 FB                  191 		ei
   00D8 DD E1               192 		pop ix
   00DA C9                  193 		ret
                            194 ;
ASxxxx Assembler V01.75 + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 5.

Symbol Table

  0 .bits                                                          005B R
  0 .end                                                           0064 R
  0 .ldir_loop                                                     009E R
  0 .outCompress                                                   002E R
  0 .outMatch                                                      0030 R
  0 .outMatch1                                                     004C R
  0 .readPnt                                                       00A3 R
  0 .size                                                          0051 R
  0 .sizeEnd                                                       0062 R
  0 .writePnt                                                      00BC R
  0 GetGammaValue                                                  004D R
  0 getBit                                                         0078 R
  0 unPack12V                                                      0000 R
  0 unpack_loop                                                    0022 R
  0 vram                                                           007E R
  0 vram_init                                                      007E R
  0 vram_ldir                                                      009D R

ASxxxx Assembler V01.75 + SDCC mods  (Zilog Z80 / Hitachi HD64180), page 6.

Area Table

   0 _CODE                                                          size   DB   flags 0
