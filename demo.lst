                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Mar 22 2009) (Mac OS X i386)
                              4 ; This file was generated Wed Feb  7 19:01:00 2018
                              5 ;--------------------------------------------------------
                              6 	.module demo
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _fadein
                             14 	.globl _cls
                             15 	.globl _pause
                             16 	.globl _pal_load
                             17 	.globl _ge5_load
                             18 	.globl _my_isr
                             19 	.globl _tick
                             20 	.globl _vbicount
                             21 	.globl _cur_palette
                             22 	.globl _scratch
                             23 ;--------------------------------------------------------
                             24 ; special function registers
                             25 ;--------------------------------------------------------
                             26 ;--------------------------------------------------------
                             27 ;  ram data
                             28 ;--------------------------------------------------------
                             29 	.area _DATA
   0000                      30 _scratch::
   0000                      31 	.ds 128
   0080                      32 _cur_palette::
   0080                      33 	.ds 32
   00A0                      34 _vbicount::
   00A0                      35 	.ds 2
   00A2                      36 _tick::
   00A2                      37 	.ds 2
                             38 ;--------------------------------------------------------
                             39 ; overlayable items in  ram 
                             40 ;--------------------------------------------------------
                             41 	.area _OVERLAY
                             42 ;--------------------------------------------------------
                             43 ; external initialized ram data
                             44 ;--------------------------------------------------------
                             45 ;--------------------------------------------------------
                             46 ; global & static initialisations
                             47 ;--------------------------------------------------------
                             48 	.area _HOME
                             49 	.area _GSINIT
                             50 	.area _GSFINAL
                             51 	.area _GSINIT
                             52 ;demo.c:37: volatile int vbicount=0;
   0000 FD 21rA0s00          53 	ld	iy,#_vbicount
   0004 FD 36 00 00          54 	ld	0 (iy),#0x00
   0008 FD 21rA0s00          55 	ld	iy,#_vbicount
   000C FD 36 01 00          56 	ld	1 (iy),#0x00
                             57 ;demo.c:38: volatile int tick=0;
   0010 FD 21rA2s00          58 	ld	iy,#_tick
   0014 FD 36 00 00          59 	ld	0 (iy),#0x00
   0018 FD 21rA2s00          60 	ld	iy,#_tick
   001C FD 36 01 00          61 	ld	1 (iy),#0x00
                             62 ;--------------------------------------------------------
                             63 ; Home
                             64 ;--------------------------------------------------------
                             65 	.area _HOME
                             66 	.area _HOME
                             67 ;--------------------------------------------------------
                             68 ; code
                             69 ;--------------------------------------------------------
                             70 	.area _CODE
                             71 ;demo.c:40: void my_isr(void) interrupt
                             72 ;	---------------------------------
                             73 ; Function my_isr
                             74 ; ---------------------------------
   0000                      75 _my_isr_start::
   0000                      76 _my_isr:
   0000 F5                   77 	push	af
   0001 C5                   78 	push	bc
   0002 D5                   79 	push	de
   0003 E5                   80 	push	hl
   0004 FD E5                81 	push	iy
                             82 ;demo.c:42: DI;
   0006 F3                   83 		di 
                             84 ;demo.c:43: READ_VDP_STATUS;
   0007 DB 99                85 		in a,(#0x99) 
                             86 ;demo.c:45: PLY_Play();
   0009 CDr00s00             87 	call	_PLY_Play
                             88 ;demo.c:46: PLY_SendRegisters();
   000C CDr00s00             89 	call	_PLY_SendRegisters
                             90 ;demo.c:48: vbicount++;
   000F FD 21rA0s00          91 	ld	iy,#_vbicount
   0013 FD 34 00             92 	inc	0 (iy)
   0016 20 07                93 	jr	NZ,00103$
   0018 FD 21rA0s00          94 	ld	iy,#_vbicount
   001C FD 34 01             95 	inc	1 (iy)
   001F                      96 00103$:
                             97 ;demo.c:49: tick++;
   001F FD 21rA2s00          98 	ld	iy,#_tick
   0023 FD 34 00             99 	inc	0 (iy)
   0026 20 07               100 	jr	NZ,00104$
   0028 FD 21rA2s00         101 	ld	iy,#_tick
   002C FD 34 01            102 	inc	1 (iy)
   002F                     103 00104$:
                            104 ;demo.c:51: EI;
   002F FB                  105 		ei 
   0030 FD E1               106 	pop	iy
   0032 E1                  107 	pop	hl
   0033 D1                  108 	pop	de
   0034 C1                  109 	pop	bc
   0035 F1                  110 	pop	af
   0036 ED 4D               111 	reti
   0038                     112 _my_isr_end::
                            113 ;demo.c:54: uint8_t ge5_load(char *file_name, uint8_t vramh, uint16_t vraml) {
                            114 ;	---------------------------------
                            115 ; Function ge5_load
                            116 ; ---------------------------------
   0038                     117 _ge5_load_start::
   0038                     118 _ge5_load:
   0038 DD E5               119 	push	ix
   003A DD 21 00 00         120 	ld	ix,#0
   003E DD 39               121 	add	ix,sp
   0040 21 D2 FF            122 	ld	hl,#-46
   0043 39                  123 	add	hl,sp
   0044 F9                  124 	ld	sp,hl
                            125 ;demo.c:58: memset((uint8_t *) &f, 0, sizeof(fcb));
   0045 21 00 00            126 	ld	hl,#0x0000
   0048 39                  127 	add	hl,sp
   0049 4D                  128 	ld	c,l
   004A 44                  129 	ld	b,h
   004B 21 2E 00            130 	ld	hl,#0x002E
   004E E5                  131 	push	hl
   004F 3E 00               132 	ld	a,#0x00
   0051 F5                  133 	push	af
   0052 33                  134 	inc	sp
   0053 C5                  135 	push	bc
   0054 CDr00s00            136 	call	_memset
   0057 F1                  137 	pop	af
   0058 F1                  138 	pop	af
   0059 33                  139 	inc	sp
                            140 ;demo.c:60: f.record_size = 128;
   005A 21 00 00            141 	ld	hl,#0x0000
   005D 39                  142 	add	hl,sp
   005E 4D                  143 	ld	c,l
   005F 44                  144 	ld	b,h
   0060 21 0F 00            145 	ld	hl,#0x000F
   0063 09                  146 	add	hl,bc
   0064 EB                  147 	ex	de,hl
   0065 3E 80               148 	ld	a,#0x80
   0067 12                  149 	ld	(de),a
                            150 ;demo.c:61: f.drive = 0;
   0068 3E 00               151 	ld	a,#0x00
   006A 02                  152 	ld	(bc),a
                            153 ;demo.c:63: memcpy(f.name, file_name, 11);
   006B DD 5E 04            154 	ld	e,4 (ix)
   006E DD 56 05            155 	ld	d,5 (ix)
   0071 03                  156 	inc	bc
   0072 21 0B 00            157 	ld	hl,#0x000B
   0075 E5                  158 	push	hl
   0076 D5                  159 	push	de
   0077 C5                  160 	push	bc
   0078 CDr00s00            161 	call	_memcpy
   007B F1                  162 	pop	af
   007C F1                  163 	pop	af
   007D F1                  164 	pop	af
                            165 ;demo.c:65: if (open(&f) != 0) return 0;
   007E 21 00 00            166 	ld	hl,#0x0000
   0081 39                  167 	add	hl,sp
   0082 E5                  168 	push	hl
   0083 CDr00s00            169 	call	_open
   0086 F1                  170 	pop	af
   0087 AF                  171 	xor	a,a
   0088 B5                  172 	or	a,l
   0089 28 05               173 	jr	Z,00102$
   008B 2E 00               174 	ld	l,#0x00
   008D C3r1Bs01            175 	jp	00117$
   0090                     176 00102$:
                            177 ;demo.c:66: vdp_set_write_address(vramh, vraml);
   0090 DD 6E 07            178 	ld	l,7 (ix)
   0093 DD 66 08            179 	ld	h,8 (ix)
   0096 E5                  180 	push	hl
   0097 DD 7E 06            181 	ld	a,6 (ix)
   009A F5                  182 	push	af
   009B 33                  183 	inc	sp
   009C CDr00s00            184 	call	_vdp_set_write_address
   009F F1                  185 	pop	af
   00A0 33                  186 	inc	sp
                            187 ;demo.c:68: for (i = 0; i < 212; i++) {
   00A1 0E 00               188 	ld	c,#0x00
   00A3                     189 00110$:
   00A3 79                  190 	ld	a,c
   00A4 D6 D4               191 	sub	a,#0xD4
   00A6 D2rFAs00            192 	jp	NC,00125$
                            193 ;demo.c:69: if (block_set_data_ptr(scratch) != 0) return 0;
   00A9 C5                  194 	push	bc
   00AA 21r00s00            195 	ld	hl,#_scratch
   00AD E5                  196 	push	hl
   00AE CDr00s00            197 	call	_block_set_data_ptr
   00B1 F1                  198 	pop	af
   00B2 7D                  199 	ld	a,l
   00B3 C1                  200 	pop	bc
   00B4 47                  201 	ld	b,a
   00B5 B7                  202 	or	a,a
   00B6 28 05               203 	jr	Z,00104$
   00B8 2E 00               204 	ld	l,#0x00
   00BA C3r1Bs01            205 	jp	00117$
   00BD                     206 00104$:
                            207 ;demo.c:70: if (block_read(&f) != 0) return 0;
   00BD 21 00 00            208 	ld	hl,#0x0000
   00C0 39                  209 	add	hl,sp
   00C1 C5                  210 	push	bc
   00C2 E5                  211 	push	hl
   00C3 CDr00s00            212 	call	_block_read
   00C6 F1                  213 	pop	af
   00C7 7D                  214 	ld	a,l
   00C8 C1                  215 	pop	bc
   00C9 47                  216 	ld	b,a
   00CA B7                  217 	or	a,a
   00CB 28 05               218 	jr	Z,00106$
   00CD 2E 00               219 	ld	l,#0x00
   00CF C3r1Bs01            220 	jp	00117$
   00D2                     221 00106$:
                            222 ;demo.c:72: if (i == 0) vdp_load_screen(scratch + 7, 121);   // to skip GE5 header
   00D2 AF                  223 	xor	a,a
   00D3 B1                  224 	or	a,c
   00D4 20 11               225 	jr	NZ,00108$
   00D6 11r07s00            226 	ld	de,#_scratch + 7
   00D9 C5                  227 	push	bc
   00DA 3E 79               228 	ld	a,#0x79
   00DC F5                  229 	push	af
   00DD 33                  230 	inc	sp
   00DE D5                  231 	push	de
   00DF CDr00s00            232 	call	_vdp_load_screen
   00E2 F1                  233 	pop	af
   00E3 33                  234 	inc	sp
   00E4 C1                  235 	pop	bc
   00E5 18 0F               236 	jr	00112$
   00E7                     237 00108$:
                            238 ;demo.c:73: else vdp_load_screen(scratch, 128);
   00E7 C5                  239 	push	bc
   00E8 3E 80               240 	ld	a,#0x80
   00EA F5                  241 	push	af
   00EB 33                  242 	inc	sp
   00EC 21r00s00            243 	ld	hl,#_scratch
   00EF E5                  244 	push	hl
   00F0 CDr00s00            245 	call	_vdp_load_screen
   00F3 F1                  246 	pop	af
   00F4 33                  247 	inc	sp
   00F5 C1                  248 	pop	bc
   00F6                     249 00112$:
                            250 ;demo.c:68: for (i = 0; i < 212; i++) {
   00F6 0C                  251 	inc	c
   00F7 C3rA3s00            252 	jp	00110$
                            253 ;demo.c:77: for (i = 0; i < 48; i++) {
   00FA                     254 00125$:
   00FA 0E 30               255 	ld	c,#0x30
   00FC                     256 00116$:
                            257 ;demo.c:78: vdp_load_screen(scratch, 128);	
   00FC C5                  258 	push	bc
   00FD 3E 80               259 	ld	a,#0x80
   00FF F5                  260 	push	af
   0100 33                  261 	inc	sp
   0101 21r00s00            262 	ld	hl,#_scratch
   0104 E5                  263 	push	hl
   0105 CDr00s00            264 	call	_vdp_load_screen
   0108 F1                  265 	pop	af
   0109 33                  266 	inc	sp
   010A C1                  267 	pop	bc
   010B 0D                  268 	dec	c
                            269 ;demo.c:77: for (i = 0; i < 48; i++) {
   010C AF                  270 	xor	a,a
   010D B1                  271 	or	a,c
   010E 20 EC               272 	jr	NZ,00116$
                            273 ;demo.c:81: close(&f);
   0110 21 00 00            274 	ld	hl,#0x0000
   0113 39                  275 	add	hl,sp
   0114 E5                  276 	push	hl
   0115 CDr00s00            277 	call	_close
   0118 F1                  278 	pop	af
                            279 ;demo.c:83: return 1;
   0119 2E 01               280 	ld	l,#0x01
   011B                     281 00117$:
   011B DD F9               282 	ld	sp,ix
   011D DD E1               283 	pop	ix
   011F C9                  284 	ret
   0120                     285 _ge5_load_end::
                            286 ;demo.c:86: uint8_t pal_load(char *file_name) {
                            287 ;	---------------------------------
                            288 ; Function pal_load
                            289 ; ---------------------------------
   0120                     290 _pal_load_start::
   0120                     291 _pal_load:
   0120 DD E5               292 	push	ix
   0122 DD 21 00 00         293 	ld	ix,#0
   0126 DD 39               294 	add	ix,sp
   0128 21 D2 FF            295 	ld	hl,#-46
   012B 39                  296 	add	hl,sp
   012C F9                  297 	ld	sp,hl
                            298 ;demo.c:89: memset((uint8_t *) &f, 0, sizeof(fcb));
   012D 21 00 00            299 	ld	hl,#0x0000
   0130 39                  300 	add	hl,sp
   0131 4D                  301 	ld	c,l
   0132 44                  302 	ld	b,h
   0133 21 2E 00            303 	ld	hl,#0x002E
   0136 E5                  304 	push	hl
   0137 3E 00               305 	ld	a,#0x00
   0139 F5                  306 	push	af
   013A 33                  307 	inc	sp
   013B C5                  308 	push	bc
   013C CDr00s00            309 	call	_memset
   013F F1                  310 	pop	af
   0140 F1                  311 	pop	af
   0141 33                  312 	inc	sp
                            313 ;demo.c:90: memset((uint8_t *) &scratch, 0, 128);
   0142 21 80 00            314 	ld	hl,#0x0080
   0145 E5                  315 	push	hl
   0146 3E 00               316 	ld	a,#0x00
   0148 F5                  317 	push	af
   0149 33                  318 	inc	sp
   014A 21r00s00            319 	ld	hl,#_scratch
   014D E5                  320 	push	hl
   014E CDr00s00            321 	call	_memset
   0151 F1                  322 	pop	af
   0152 F1                  323 	pop	af
   0153 33                  324 	inc	sp
                            325 ;demo.c:92: f.record_size = 32;
   0154 21 00 00            326 	ld	hl,#0x0000
   0157 39                  327 	add	hl,sp
   0158 4D                  328 	ld	c,l
   0159 44                  329 	ld	b,h
   015A 21 0F 00            330 	ld	hl,#0x000F
   015D 09                  331 	add	hl,bc
   015E EB                  332 	ex	de,hl
   015F 3E 20               333 	ld	a,#0x20
   0161 12                  334 	ld	(de),a
                            335 ;demo.c:93: f.drive = 0;
   0162 3E 00               336 	ld	a,#0x00
   0164 02                  337 	ld	(bc),a
                            338 ;demo.c:95: memcpy(f.name, file_name, 11);
   0165 DD 5E 04            339 	ld	e,4 (ix)
   0168 DD 56 05            340 	ld	d,5 (ix)
   016B 03                  341 	inc	bc
   016C 21 0B 00            342 	ld	hl,#0x000B
   016F E5                  343 	push	hl
   0170 D5                  344 	push	de
   0171 C5                  345 	push	bc
   0172 CDr00s00            346 	call	_memcpy
   0175 F1                  347 	pop	af
   0176 F1                  348 	pop	af
   0177 F1                  349 	pop	af
                            350 ;demo.c:97: if (open(&f) != 0) return 0;
   0178 21 00 00            351 	ld	hl,#0x0000
   017B 39                  352 	add	hl,sp
   017C E5                  353 	push	hl
   017D CDr00s00            354 	call	_open
   0180 F1                  355 	pop	af
   0181 AF                  356 	xor	a,a
   0182 B5                  357 	or	a,l
   0183 28 04               358 	jr	Z,00102$
   0185 2E 00               359 	ld	l,#0x00
   0187 18 3E               360 	jr	00107$
   0189                     361 00102$:
                            362 ;demo.c:98: if (block_set_data_ptr(scratch) != 0) return 0;
   0189 21r00s00            363 	ld	hl,#_scratch
   018C E5                  364 	push	hl
   018D CDr00s00            365 	call	_block_set_data_ptr
   0190 F1                  366 	pop	af
   0191 AF                  367 	xor	a,a
   0192 B5                  368 	or	a,l
   0193 28 04               369 	jr	Z,00104$
   0195 2E 00               370 	ld	l,#0x00
   0197 18 2E               371 	jr	00107$
   0199                     372 00104$:
                            373 ;demo.c:99: if (block_read(&f) != 0) return 0;
   0199 21 00 00            374 	ld	hl,#0x0000
   019C 39                  375 	add	hl,sp
   019D E5                  376 	push	hl
   019E CDr00s00            377 	call	_block_read
   01A1 F1                  378 	pop	af
   01A2 AF                  379 	xor	a,a
   01A3 B5                  380 	or	a,l
   01A4 28 04               381 	jr	Z,00106$
   01A6 2E 00               382 	ld	l,#0x00
   01A8 18 1D               383 	jr	00107$
   01AA                     384 00106$:
                            385 ;demo.c:101: memcpy(cur_palette, scratch+7, 32);
   01AA 01r07s00            386 	ld	bc,#_scratch + 7
   01AD 21 20 00            387 	ld	hl,#0x0020
   01B0 E5                  388 	push	hl
   01B1 C5                  389 	push	bc
   01B2 21r80s00            390 	ld	hl,#_cur_palette
   01B5 E5                  391 	push	hl
   01B6 CDr00s00            392 	call	_memcpy
   01B9 F1                  393 	pop	af
   01BA F1                  394 	pop	af
   01BB F1                  395 	pop	af
                            396 ;demo.c:103: close(&f);
   01BC 21 00 00            397 	ld	hl,#0x0000
   01BF 39                  398 	add	hl,sp
   01C0 E5                  399 	push	hl
   01C1 CDr00s00            400 	call	_close
   01C4 F1                  401 	pop	af
                            402 ;demo.c:104: return 1;
   01C5 2E 01               403 	ld	l,#0x01
   01C7                     404 00107$:
   01C7 DD F9               405 	ld	sp,ix
   01C9 DD E1               406 	pop	ix
   01CB C9                  407 	ret
   01CC                     408 _pal_load_end::
                            409 ;demo.c:107: void pause() {
                            410 ;	---------------------------------
                            411 ; Function pause
                            412 ; ---------------------------------
   01CC                     413 _pause_start::
   01CC                     414 _pause:
                            415 ;demo.c:108: uint8_t i,j,k = 0;
                            416 ;demo.c:109: for (i = 0; i < 255; i++) {	
   01CC 01 00 00            417 	ld	bc,#0x0000
   01CF                     418 00104$:
   01CF 78                  419 	ld	a,b
   01D0 D6 FF               420 	sub	a,#0xFF
   01D2 D0                  421 	ret	NC
                            422 ;demo.c:110: for (j = 0; j < 255; j++) {
   01D3 59                  423 	ld	e,c
   01D4 16 FF               424 	ld	d,#0xFF
   01D6                     425 00103$:
                            426 ;demo.c:111: k++;
   01D6 1C                  427 	inc	e
   01D7 15                  428 	dec	d
                            429 ;demo.c:110: for (j = 0; j < 255; j++) {
   01D8 AF                  430 	xor	a,a
   01D9 B2                  431 	or	a,d
   01DA 20 FA               432 	jr	NZ,00103$
                            433 ;demo.c:109: for (i = 0; i < 255; i++) {	
   01DC 4B                  434 	ld	c,e
   01DD 04                  435 	inc	b
   01DE 18 EF               436 	jr	00104$
   01E0                     437 _pause_end::
                            438 ;demo.c:116: void cls(uint8_t vramh, uint16_t vraml) {
                            439 ;	---------------------------------
                            440 ; Function cls
                            441 ; ---------------------------------
   01E0                     442 _cls_start::
   01E0                     443 _cls:
   01E0 DD E5               444 	push	ix
   01E2 DD 21 00 00         445 	ld	ix,#0
   01E6 DD 39               446 	add	ix,sp
                            447 ;demo.c:117: vdp_set_write_address(vramh, vraml);
   01E8 DD 6E 05            448 	ld	l,5 (ix)
   01EB DD 66 06            449 	ld	h,6 (ix)
   01EE E5                  450 	push	hl
   01EF DD 7E 04            451 	ld	a,4 (ix)
   01F2 F5                  452 	push	af
   01F3 33                  453 	inc	sp
   01F4 CDr00s00            454 	call	_vdp_set_write_address
   01F7 F1                  455 	pop	af
   01F8 33                  456 	inc	sp
                            457 ;demo.c:118: memset((uint8_t *) &scratch, 0, 128);
   01F9 21 80 00            458 	ld	hl,#0x0080
   01FC E5                  459 	push	hl
   01FD 3E 00               460 	ld	a,#0x00
   01FF F5                  461 	push	af
   0200 33                  462 	inc	sp
   0201 21r00s00            463 	ld	hl,#_scratch
   0204 E5                  464 	push	hl
   0205 CDr00s00            465 	call	_memset
   0208 F1                  466 	pop	af
   0209 F1                  467 	pop	af
   020A 33                  468 	inc	sp
                            469 ;demo.c:119: vdp_load_screen(scratch, 128);
   020B 3E 80               470 	ld	a,#0x80
   020D F5                  471 	push	af
   020E 33                  472 	inc	sp
   020F 21r00s00            473 	ld	hl,#_scratch
   0212 E5                  474 	push	hl
   0213 CDr00s00            475 	call	_vdp_load_screen
   0216 F1                  476 	pop	af
   0217 33                  477 	inc	sp
   0218 DD E1               478 	pop	ix
   021A C9                  479 	ret
   021B                     480 _cls_end::
                            481 ;demo.c:122: void fadein() {
                            482 ;	---------------------------------
                            483 ; Function fadein
                            484 ; ---------------------------------
   021B                     485 _fadein_start::
   021B                     486 _fadein:
   021B DD E5               487 	push	ix
   021D DD 21 00 00         488 	ld	ix,#0
   0221 DD 39               489 	add	ix,sp
   0223 F5                  490 	push	af
                            491 ;demo.c:125: if (tick < 4) return;
   0224 3ArA2s00            492 	ld	a,(#_tick+0)
   0227 D6 04               493 	sub	a,#0x04
   0229 3ArA3s00            494 	ld	a,(#_tick+1)
   022C DE 00               495 	sbc	a,#0x00
   022E F2r34s02            496 	jp	P,00102$
   0231 C3rE2s02            497 	jp	00113$
   0234                     498 00102$:
                            499 ;demo.c:127: tick = 0;
   0234 21rA2s00            500 	ld	hl,#_tick + 0
   0237 36 00               501 	ld	(hl), #0x00
   0239 21rA3s00            502 	ld	hl,#_tick + 1
   023C 36 00               503 	ld	(hl), #0x00
                            504 ;demo.c:129: for(i = 0; i < 32; i+=2) {
   023E 0E 00               505 	ld	c,#0x00
   0240                     506 00109$:
   0240 79                  507 	ld	a,c
   0241 D6 20               508 	sub	a,#0x20
   0243 D2rDAs02            509 	jp	NC,00112$
                            510 ;demo.c:130: uint8_t r = scratch[i] >> 4;
   0246 3Er00               511 	ld	a,#<_scratch
   0248 81                  512 	add	a,c
   0249 5F                  513 	ld	e,a
   024A 3Es00               514 	ld	a,#>_scratch
   024C CE 00               515 	adc	a,#0x00
   024E 57                  516 	ld	d,a
   024F 1A                  517 	ld	a,(de)
   0250 47                  518 	ld	b,a
   0251 58                  519 	ld	e,b
   0252 CB 3B               520 	srl	e
   0254 CB 3B               521 	srl	e
   0256 CB 3B               522 	srl	e
   0258 CB 3B               523 	srl	e
                            524 ;demo.c:131: uint8_t b = scratch[i] & 0xf;
   025A 78                  525 	ld	a,b
   025B E6 0F               526 	and	a,#0x0F
   025D DD 77 FF            527 	ld	-1 (ix),a
                            528 ;demo.c:132: uint8_t g = scratch[i+1];
   0260 51                  529 	ld	d,c
   0261 14                  530 	inc	d
   0262 3Er00               531 	ld	a,#<_scratch
   0264 82                  532 	add	a,d
   0265 6F                  533 	ld	l,a
   0266 3Es00               534 	ld	a,#>_scratch
   0268 CE 00               535 	adc	a,#0x00
   026A 67                  536 	ld	h,a
   026B 56                  537 	ld	d,(hl)
   026C DD 72 FE            538 	ld	-2 (ix),d
                            539 ;demo.c:134: if (r < (cur_palette[i] >> 4)) r++;
   026F 3Er80               540 	ld	a,#<_cur_palette
   0271 81                  541 	add	a,c
   0272 6F                  542 	ld	l,a
   0273 3Es00               543 	ld	a,#>_cur_palette
   0275 CE 00               544 	adc	a,#0x00
   0277 67                  545 	ld	h,a
   0278 56                  546 	ld	d,(hl)
   0279 CB 3A               547 	srl	d
   027B CB 3A               548 	srl	d
   027D CB 3A               549 	srl	d
   027F CB 3A               550 	srl	d
   0281 7B                  551 	ld	a,e
   0282 92                  552 	sub	a,d
   0283 30 01               553 	jr	NC,00104$
   0285 1C                  554 	inc	e
   0286                     555 00104$:
                            556 ;demo.c:135: if (b < (cur_palette[i] & 0xf)) b++;
   0286 3Er80               557 	ld	a,#<_cur_palette
   0288 81                  558 	add	a,c
   0289 6F                  559 	ld	l,a
   028A 3Es00               560 	ld	a,#>_cur_palette
   028C CE 00               561 	adc	a,#0x00
   028E 67                  562 	ld	h,a
   028F 7E                  563 	ld	a,(hl)
   0290 E6 0F               564 	and	a,#0x0F
   0292 47                  565 	ld	b,a
   0293 DD 7E FF            566 	ld	a,-1 (ix)
   0296 90                  567 	sub	a,b
   0297 30 03               568 	jr	NC,00106$
   0299 DD 34 FF            569 	inc	-1 (ix)
   029C                     570 00106$:
                            571 ;demo.c:137: scratch[i] = (r << 4) | b;
   029C 3Er00               572 	ld	a,#<_scratch
   029E 81                  573 	add	a,c
   029F 47                  574 	ld	b,a
   02A0 3Es00               575 	ld	a,#>_scratch
   02A2 CE 00               576 	adc	a,#0x00
   02A4 57                  577 	ld	d,a
   02A5 7B                  578 	ld	a,e
   02A6 07                  579 	rlca
   02A7 07                  580 	rlca
   02A8 07                  581 	rlca
   02A9 07                  582 	rlca
   02AA E6 F0               583 	and	a,#0xF0
   02AC DD B6 FF            584 	or	a,-1 (ix)
   02AF 68                  585 	ld	l,b
   02B0 62                  586 	ld	h,d
   02B1 77                  587 	ld	(hl),a
                            588 ;demo.c:138: if (g < cur_palette[i+1]) scratch[i+1]++;
   02B2 41                  589 	ld	b,c
   02B3 04                  590 	inc	b
   02B4 3Er80               591 	ld	a,#<_cur_palette
   02B6 80                  592 	add	a,b
   02B7 5F                  593 	ld	e,a
   02B8 3Es00               594 	ld	a,#>_cur_palette
   02BA CE 00               595 	adc	a,#0x00
   02BC 57                  596 	ld	d,a
   02BD 1A                  597 	ld	a,(de)
   02BE 5F                  598 	ld	e,a
   02BF DD 7E FE            599 	ld	a,-2 (ix)
   02C2 93                  600 	sub	a,e
   02C3 30 10               601 	jr	NC,00111$
   02C5 3Er00               602 	ld	a,#<_scratch
   02C7 80                  603 	add	a,b
   02C8 47                  604 	ld	b,a
   02C9 3Es00               605 	ld	a,#>_scratch
   02CB CE 00               606 	adc	a,#0x00
   02CD 5F                  607 	ld	e,a
   02CE 68                  608 	ld	l,b
   02CF 67                  609 	ld	h,a
   02D0 7E                  610 	ld	a,(hl)
   02D1 3C                  611 	inc	a
   02D2 68                  612 	ld	l,b
   02D3 63                  613 	ld	h,e
   02D4 77                  614 	ld	(hl),a
   02D5                     615 00111$:
                            616 ;demo.c:129: for(i = 0; i < 32; i+=2) {
   02D5 0C                  617 	inc	c
   02D6 0C                  618 	inc	c
   02D7 C3r40s02            619 	jp	00109$
   02DA                     620 00112$:
                            621 ;demo.c:142: vdp_load_palette(scratch);
   02DA 21r00s00            622 	ld	hl,#_scratch
   02DD E5                  623 	push	hl
   02DE CDr00s00            624 	call	_vdp_load_palette
   02E1 F1                  625 	pop	af
   02E2                     626 00113$:
   02E2 DD F9               627 	ld	sp,ix
   02E4 DD E1               628 	pop	ix
   02E6 C9                  629 	ret
   02E7                     630 _fadein_end::
                            631 ;demo.c:145: void main() {
                            632 ;	---------------------------------
                            633 ; Function main
                            634 ; ---------------------------------
   02E7                     635 _main_start::
   02E7                     636 _main:
                            637 ;demo.c:146: unsigned char quit=0;
   02E7 0E 00               638 	ld	c,#0x00
                            639 ;demo.c:148: spindown();
   02E9 C5                  640 	push	bc
   02EA CDr00s00            641 	call	_spindown
   02ED C1                  642 	pop	bc
                            643 ;demo.c:150: puts("demo init\r\n\r\n");
   02EE C5                  644 	push	bc
   02EF 21rF0s03            645 	ld	hl,#__str_0
   02F2 E5                  646 	push	hl
   02F3 CDr00s00            647 	call	_puts
   02F6 F1                  648 	pop	af
   02F7 C1                  649 	pop	bc
                            650 ;demo.c:152: puts("music init...");
   02F8 C5                  651 	push	bc
   02F9 21rFEs03            652 	ld	hl,#__str_1
   02FC E5                  653 	push	hl
   02FD CDr00s00            654 	call	_puts
   0300 F1                  655 	pop	af
   0301 C1                  656 	pop	bc
                            657 ;demo.c:154: PLY_SongPtr = (char *)0x0103;
   0302 21r00s00            658 	ld	hl,#_PLY_SongPtr + 0
   0305 36 03               659 	ld	(hl), #0x03
   0307 21r01s00            660 	ld	hl,#_PLY_SongPtr + 1
   030A 36 01               661 	ld	(hl), #0x01
                            662 ;demo.c:155: PLY_Init();
   030C C5                  663 	push	bc
   030D CDr00s00            664 	call	_PLY_Init
   0310 C1                  665 	pop	bc
                            666 ;demo.c:156: puts("done.\n\n");
   0311 C5                  667 	push	bc
   0312 21r0Cs04            668 	ld	hl,#__str_2
   0315 E5                  669 	push	hl
   0316 CDr00s00            670 	call	_puts
   0319 F1                  671 	pop	af
   031A C1                  672 	pop	bc
                            673 ;demo.c:158: if(isvdp2())
   031B C5                  674 	push	bc
   031C CDr00s00            675 	call	_isvdp2
   031F 7D                  676 	ld	a,l
   0320 C1                  677 	pop	bc
   0321 47                  678 	ld	b,a
   0322 B7                  679 	or	a,a
   0323 28 0A               680 	jr	Z,00102$
                            681 ;demo.c:160: msx2_sethz(50);
   0325 C5                  682 	push	bc
   0326 3E 32               683 	ld	a,#0x32
   0328 F5                  684 	push	af
   0329 33                  685 	inc	sp
   032A CDr00s00            686 	call	_msx2_sethz
   032D 33                  687 	inc	sp
   032E C1                  688 	pop	bc
   032F                     689 00102$:
                            690 ;demo.c:164: vdp_set_screen5();
   032F C5                  691 	push	bc
   0330 CDr00s00            692 	call	_vdp_set_screen5
   0333 C1                  693 	pop	bc
                            694 ;demo.c:165: pal_load("KETTU16 PL5");
   0334 C5                  695 	push	bc
   0335 21r14s04            696 	ld	hl,#__str_3
   0338 E5                  697 	push	hl
   0339 CDr20s01            698 	call	_pal_load
   033C F1                  699 	pop	af
   033D C1                  700 	pop	bc
                            701 ;demo.c:169: memset((uint8_t *) &scratch, 0, 128);
   033E C5                  702 	push	bc
   033F 21 80 00            703 	ld	hl,#0x0080
   0342 E5                  704 	push	hl
   0343 3E 00               705 	ld	a,#0x00
   0345 F5                  706 	push	af
   0346 33                  707 	inc	sp
   0347 21r00s00            708 	ld	hl,#_scratch
   034A E5                  709 	push	hl
   034B CDr00s00            710 	call	_memset
   034E F1                  711 	pop	af
   034F F1                  712 	pop	af
   0350 33                  713 	inc	sp
   0351 C1                  714 	pop	bc
                            715 ;demo.c:170: vdp_load_palette(scratch);
   0352 C5                  716 	push	bc
   0353 21r00s00            717 	ld	hl,#_scratch
   0356 E5                  718 	push	hl
   0357 CDr00s00            719 	call	_vdp_load_palette
   035A F1                  720 	pop	af
   035B C1                  721 	pop	bc
                            722 ;demo.c:172: ge5_load("KETTU16 SC5", 0, 0x0000);
   035C C5                  723 	push	bc
   035D 21 00 00            724 	ld	hl,#0x0000
   0360 E5                  725 	push	hl
   0361 3E 00               726 	ld	a,#0x00
   0363 F5                  727 	push	af
   0364 33                  728 	inc	sp
   0365 21r20s04            729 	ld	hl,#__str_4
   0368 E5                  730 	push	hl
   0369 CDr38s00            731 	call	_ge5_load
   036C F1                  732 	pop	af
   036D F1                  733 	pop	af
   036E 33                  734 	inc	sp
   036F C1                  735 	pop	bc
                            736 ;demo.c:174: memset((uint8_t *) &scratch, 0, 128);
   0370 C5                  737 	push	bc
   0371 21 80 00            738 	ld	hl,#0x0080
   0374 E5                  739 	push	hl
   0375 3E 00               740 	ld	a,#0x00
   0377 F5                  741 	push	af
   0378 33                  742 	inc	sp
   0379 21r00s00            743 	ld	hl,#_scratch
   037C E5                  744 	push	hl
   037D CDr00s00            745 	call	_memset
   0380 F1                  746 	pop	af
   0381 F1                  747 	pop	af
   0382 33                  748 	inc	sp
   0383 C1                  749 	pop	bc
                            750 ;demo.c:176: install_isr(my_isr);
   0384 C5                  751 	push	bc
   0385 21r00s00            752 	ld	hl,#_my_isr
   0388 E5                  753 	push	hl
   0389 CDr00s00            754 	call	_install_isr
   038C F1                  755 	pop	af
   038D C1                  756 	pop	bc
                            757 ;demo.c:178: while (!quit) {
   038E                     758 00108$:
   038E AF                  759 	xor	a,a
   038F B1                  760 	or	a,c
   0390 20 38               761 	jr	NZ,00110$
                            762 ;demo.c:179: waitVB();
   0392 76                  763 		halt 
                            764 ;demo.c:181: if (vbicount < 256) fadein();
   0393 3ArA0s00            765 	ld	a,(#_vbicount+0)
   0396 D6 00               766 	sub	a,#0x00
   0398 3ArA1s00            767 	ld	a,(#_vbicount+1)
   039B DE 01               768 	sbc	a,#0x01
   039D F2rA7s03            769 	jp	P,00104$
   03A0 C5                  770 	push	bc
   03A1 CDr1Bs02            771 	call	_fadein
   03A4 C1                  772 	pop	bc
   03A5 18 10               773 	jr	00105$
   03A7                     774 00104$:
                            775 ;demo.c:183: vdp_register(VDP_VOFFSET,vbicount & 255);
   03A7 21rA0s00            776 	ld	hl,#_vbicount + 0
   03AA 46                  777 	ld	b,(hl)
   03AB C5                  778 	push	bc
   03AC C5                  779 	push	bc
   03AD 33                  780 	inc	sp
   03AE 3E 17               781 	ld	a,#0x17
   03B0 F5                  782 	push	af
   03B1 33                  783 	inc	sp
   03B2 CDr00s00            784 	call	_vdp_register
   03B5 F1                  785 	pop	af
   03B6 C1                  786 	pop	bc
   03B7                     787 00105$:
                            788 ;demo.c:186: if(space())
   03B7 C5                  789 	push	bc
   03B8 21 08 01            790 	ld	hl,#0x0108
   03BB E5                  791 	push	hl
   03BC CDr00s00            792 	call	_ispressed
   03BF F1                  793 	pop	af
   03C0 7D                  794 	ld	a,l
   03C1 C1                  795 	pop	bc
   03C2 47                  796 	ld	b,a
   03C3 B7                  797 	or	a,a
   03C4 28 C8               798 	jr	Z,00108$
                            799 ;demo.c:187: quit=1;
   03C6 0E 01               800 	ld	c,#0x01
   03C8 18 C4               801 	jr	00108$
   03CA                     802 00110$:
                            803 ;demo.c:190: getchar();
   03CA CDr00s00            804 	call	_getchar
                            805 ;demo.c:192: waitVB();
   03CD 76                  806 		halt 
                            807 ;demo.c:193: uninstall_isr();
   03CE CDr00s00            808 	call	_uninstall_isr
                            809 ;demo.c:194: PLY_Stop();
   03D1 CDr00s00            810 	call	_PLY_Stop
                            811 ;demo.c:195: PLY_SendRegisters();
   03D4 CDr00s00            812 	call	_PLY_SendRegisters
                            813 ;demo.c:197: screen(0);
   03D7 3E 00               814 	ld	a,#0x00
   03D9 F5                  815 	push	af
   03DA 33                  816 	inc	sp
   03DB CDr00s00            817 	call	_screen
   03DE 33                  818 	inc	sp
                            819 ;demo.c:199: puts("demo exit\r\n\r\n");
   03DF 21r2Cs04            820 	ld	hl,#__str_5
   03E2 E5                  821 	push	hl
   03E3 CDr00s00            822 	call	_puts
   03E6 F1                  823 	pop	af
                            824 ;demo.c:201: exit(0);
   03E7 3E 00               825 	ld	a,#0x00
   03E9 F5                  826 	push	af
   03EA 33                  827 	inc	sp
   03EB CDr00s00            828 	call	_exit
   03EE 33                  829 	inc	sp
   03EF C9                  830 	ret
   03F0                     831 _main_end::
   03F0                     832 __str_0:
   03F0 64 65 6D 6F 20 69   833 	.ascii "demo init"
        6E 69 74
   03F9 0D                  834 	.db 0x0D
   03FA 0A                  835 	.db 0x0A
   03FB 0D                  836 	.db 0x0D
   03FC 0A                  837 	.db 0x0A
   03FD 00                  838 	.db 0x00
   03FE                     839 __str_1:
   03FE 6D 75 73 69 63 20   840 	.ascii "music init..."
        69 6E 69 74 2E 2E
        2E
   040B 00                  841 	.db 0x00
   040C                     842 __str_2:
   040C 64 6F 6E 65 2E      843 	.ascii "done."
   0411 0A                  844 	.db 0x0A
   0412 0A                  845 	.db 0x0A
   0413 00                  846 	.db 0x00
   0414                     847 __str_3:
   0414 4B 45 54 54 55 31   848 	.ascii "KETTU16 PL5"
        36 20 50 4C 35
   041F 00                  849 	.db 0x00
   0420                     850 __str_4:
   0420 4B 45 54 54 55 31   851 	.ascii "KETTU16 SC5"
        36 20 53 43 35
   042B 00                  852 	.db 0x00
   042C                     853 __str_5:
   042C 64 65 6D 6F 20 65   854 	.ascii "demo exit"
        78 69 74
   0435 0D                  855 	.db 0x0D
   0436 0A                  856 	.db 0x0A
   0437 0D                  857 	.db 0x0D
   0438 0A                  858 	.db 0x0A
   0439 00                  859 	.db 0x00
                            860 	.area _CODE
                            861 	.area _CABS
