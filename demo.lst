                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.0 #9615 (Mac OS X x86_64)
                              4 ;--------------------------------------------------------
                              5 	.module demo
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _ge5_load
                             13 	.globl _strcat
                             14 	.globl _vdp_load_screen
                             15 	.globl _vdp_set_write_address
                             16 	.globl _vdp_set_text
                             17 	.globl _vdp_set_screen5
                             18 	.globl _memcpy
                             19 	.globl _exit
                             20 	.globl _block_read
                             21 	.globl _block_set_data_ptr
                             22 	.globl _close
                             23 	.globl _open
                             24 	.globl _puts
                             25 	.globl _getchar
                             26 	.globl _scratch
                             27 ;--------------------------------------------------------
                             28 ; special function registers
                             29 ;--------------------------------------------------------
                             30 ;--------------------------------------------------------
                             31 ; ram data
                             32 ;--------------------------------------------------------
                             33 	.area _DATA
   0000                      34 _scratch::
   0000                      35 	.ds 128
                             36 ;--------------------------------------------------------
                             37 ; ram data
                             38 ;--------------------------------------------------------
                             39 	.area _INITIALIZED
                             40 ;--------------------------------------------------------
                             41 ; absolute external ram data
                             42 ;--------------------------------------------------------
                             43 	.area _DABS (ABS)
                             44 ;--------------------------------------------------------
                             45 ; global & static initialisations
                             46 ;--------------------------------------------------------
                             47 	.area _HOME
                             48 	.area _GSINIT
                             49 	.area _GSFINAL
                             50 	.area _GSINIT
                             51 ;--------------------------------------------------------
                             52 ; Home
                             53 ;--------------------------------------------------------
                             54 	.area _HOME
                             55 	.area _HOME
                             56 ;--------------------------------------------------------
                             57 ; code
                             58 ;--------------------------------------------------------
                             59 	.area _CODE
                             60 ;demo.c:10: char *strcat(char *dest, char *src)
                             61 ;	---------------------------------
                             62 ; Function strcat
                             63 ; ---------------------------------
   0000                      64 _strcat::
   0000 CDr00r00      [17]   65 	call	___sdcc_enter_ix
                             66 ;demo.c:12: char *rdest = dest;
   0003 DD 4E 04      [19]   67 	ld	c,4 (ix)
   0006 DD 46 05      [19]   68 	ld	b,5 (ix)
                             69 ;demo.c:14: while (*dest)
   0009 C5            [11]   70 	push	bc
   000A FD E1         [14]   71 	pop	iy
   000C                      72 00101$:
   000C FD 7E 00      [19]   73 	ld	a, 0 (iy)
   000F B7            [ 4]   74 	or	a, a
   0010 28 04         [12]   75 	jr	Z,00111$
                             76 ;demo.c:15: dest++;
   0012 FD 23         [10]   77 	inc	iy
   0014 18 F6         [12]   78 	jr	00101$
                             79 ;demo.c:16: while (*dest++ = *src++)
   0016                      80 00111$:
   0016 DD 5E 06      [19]   81 	ld	e,6 (ix)
   0019 DD 56 07      [19]   82 	ld	d,7 (ix)
   001C                      83 00104$:
   001C 1A            [ 7]   84 	ld	a,(de)
   001D 13            [ 6]   85 	inc	de
   001E FD 77 00      [19]   86 	ld	0 (iy), a
   0021 FD 23         [10]   87 	inc	iy
   0023 B7            [ 4]   88 	or	a, a
   0024 20 F6         [12]   89 	jr	NZ,00104$
                             90 ;demo.c:18: return rdest;
   0026 69            [ 4]   91 	ld	l, c
   0027 60            [ 4]   92 	ld	h, b
   0028 DD E1         [14]   93 	pop	ix
   002A C9            [10]   94 	ret
                             95 ;demo.c:21: uint8_t ge5_load(char *file_name, uint8_t vramh, uint16_t vraml) {
                             96 ;	---------------------------------
                             97 ; Function ge5_load
                             98 ; ---------------------------------
   002B                      99 _ge5_load::
   002B CDr00r00      [17]  100 	call	___sdcc_enter_ix
   002E 21 D1 FF      [10]  101 	ld	hl,#-47
   0031 39            [11]  102 	add	hl,sp
   0032 F9            [ 6]  103 	ld	sp,hl
                            104 ;demo.c:25: f.record_size = 128;
   0033 21 00 00      [10]  105 	ld	hl,#0x0000
   0036 39            [11]  106 	add	hl,sp
   0037 4D            [ 4]  107 	ld	c,l
   0038 44            [ 4]  108 	ld	b,h
   0039 21 0F 00      [10]  109 	ld	hl,#0x000f
   003C 09            [11]  110 	add	hl,bc
   003D 36 80         [10]  111 	ld	(hl),#0x80
                            112 ;demo.c:26: f.drive = 0;
   003F AF            [ 4]  113 	xor	a, a
   0040 02            [ 7]  114 	ld	(bc),a
                            115 ;demo.c:27: f.name[0] = '\0';
   0041 59            [ 4]  116 	ld	e, c
   0042 50            [ 4]  117 	ld	d, b
   0043 13            [ 6]  118 	inc	de
   0044 AF            [ 4]  119 	xor	a, a
   0045 12            [ 7]  120 	ld	(de),a
                            121 ;demo.c:28: f.name[1] = '\0';
   0046 69            [ 4]  122 	ld	l, c
   0047 60            [ 4]  123 	ld	h, b
   0048 23            [ 6]  124 	inc	hl
   0049 23            [ 6]  125 	inc	hl
   004A 36 00         [10]  126 	ld	(hl),#0x00
                            127 ;demo.c:29: f.name[2] = '\0';
   004C 69            [ 4]  128 	ld	l, c
   004D 60            [ 4]  129 	ld	h, b
   004E 23            [ 6]  130 	inc	hl
   004F 23            [ 6]  131 	inc	hl
   0050 23            [ 6]  132 	inc	hl
   0051 36 00         [10]  133 	ld	(hl),#0x00
                            134 ;demo.c:30: f.name[3] = '\0';
   0053 21 04 00      [10]  135 	ld	hl,#0x0004
   0056 09            [11]  136 	add	hl,bc
   0057 36 00         [10]  137 	ld	(hl),#0x00
                            138 ;demo.c:31: f.name[4] = '\0';
   0059 21 05 00      [10]  139 	ld	hl,#0x0005
   005C 09            [11]  140 	add	hl,bc
   005D 36 00         [10]  141 	ld	(hl),#0x00
                            142 ;demo.c:32: f.name[5] = '\0';
   005F 21 06 00      [10]  143 	ld	hl,#0x0006
   0062 09            [11]  144 	add	hl,bc
   0063 36 00         [10]  145 	ld	(hl),#0x00
                            146 ;demo.c:33: f.name[6] = '\0';
   0065 21 07 00      [10]  147 	ld	hl,#0x0007
   0068 09            [11]  148 	add	hl,bc
   0069 36 00         [10]  149 	ld	(hl),#0x00
                            150 ;demo.c:34: f.name[7] = '\0';
   006B 21 08 00      [10]  151 	ld	hl,#0x0008
   006E 09            [11]  152 	add	hl,bc
   006F 36 00         [10]  153 	ld	(hl),#0x00
                            154 ;demo.c:35: f.name[8] = '\0';
   0071 21 09 00      [10]  155 	ld	hl,#0x0009
   0074 09            [11]  156 	add	hl,bc
   0075 36 00         [10]  157 	ld	(hl),#0x00
                            158 ;demo.c:36: f.name[9] = '\0';
   0077 21 0A 00      [10]  159 	ld	hl,#0x000a
   007A 09            [11]  160 	add	hl,bc
   007B 36 00         [10]  161 	ld	(hl),#0x00
                            162 ;demo.c:37: f.name[10] = '\0';
   007D 21 0B 00      [10]  163 	ld	hl,#0x000b
   0080 09            [11]  164 	add	hl,bc
   0081 36 00         [10]  165 	ld	(hl),#0x00
                            166 ;demo.c:39: memcpy(f.name, file_name, 11);    
   0083 D5            [11]  167 	push	de
   0084 FD E1         [14]  168 	pop	iy
   0086 C5            [11]  169 	push	bc
   0087 D5            [11]  170 	push	de
   0088 21 0B 00      [10]  171 	ld	hl,#0x000b
   008B E5            [11]  172 	push	hl
   008C DD 6E 04      [19]  173 	ld	l,4 (ix)
   008F DD 66 05      [19]  174 	ld	h,5 (ix)
   0092 E5            [11]  175 	push	hl
   0093 FD E5         [15]  176 	push	iy
   0095 CDr00r00      [17]  177 	call	_memcpy
   0098 F1            [10]  178 	pop	af
   0099 F1            [10]  179 	pop	af
   009A 21r46r01      [10]  180 	ld	hl, #___str_0
   009D E3            [19]  181 	ex	(sp),hl
   009E CDr00r00      [17]  182 	call	_puts
   00A1 F1            [10]  183 	pop	af
   00A2 CDr00r00      [17]  184 	call	_puts
   00A5 21r56r01      [10]  185 	ld	hl, #___str_1
   00A8 E3            [19]  186 	ex	(sp),hl
   00A9 CDr00r00      [17]  187 	call	_puts
   00AC F1            [10]  188 	pop	af
   00AD CDr00r00      [17]  189 	call	_getchar
   00B0 CDr00r00      [17]  190 	call	_vdp_set_screen5
   00B3 C1            [10]  191 	pop	bc
                            192 ;demo.c:50: if (open(&f) != 0)
   00B4 59            [ 4]  193 	ld	e, c
   00B5 50            [ 4]  194 	ld	d, b
   00B6 C5            [11]  195 	push	bc
   00B7 D5            [11]  196 	push	de
   00B8 CDr00r00      [17]  197 	call	_open
   00BB F1            [10]  198 	pop	af
   00BC C1            [10]  199 	pop	bc
   00BD 7D            [ 4]  200 	ld	a,l
   00BE B7            [ 4]  201 	or	a, a
   00BF 28 05         [12]  202 	jr	Z,00102$
                            203 ;demo.c:51: return 0;
   00C1 2E 00         [ 7]  204 	ld	l,#0x00
   00C3 C3r41r01      [10]  205 	jp	00113$
   00C6                     206 00102$:
                            207 ;demo.c:53: vdp_set_write_address(vramh, vraml);
   00C6 C5            [11]  208 	push	bc
   00C7 DD 6E 07      [19]  209 	ld	l,7 (ix)
   00CA DD 66 08      [19]  210 	ld	h,8 (ix)
   00CD E5            [11]  211 	push	hl
   00CE DD 7E 06      [19]  212 	ld	a,6 (ix)
   00D1 F5            [11]  213 	push	af
   00D2 33            [ 6]  214 	inc	sp
   00D3 CDr00r00      [17]  215 	call	_vdp_set_write_address
   00D6 F1            [10]  216 	pop	af
   00D7 33            [ 6]  217 	inc	sp
   00D8 C1            [10]  218 	pop	bc
                            219 ;demo.c:55: for (i = 0; i < 213; i++) {
   00D9 59            [ 4]  220 	ld	e, c
   00DA 50            [ 4]  221 	ld	d, b
   00DB DD 36 FF 00   [19]  222 	ld	-1 (ix),#0x00
   00DF                     223 00111$:
                            224 ;demo.c:56: if (block_set_data_ptr(scratch) != 0)
   00DF C5            [11]  225 	push	bc
   00E0 D5            [11]  226 	push	de
   00E1 21r00r00      [10]  227 	ld	hl,#_scratch
   00E4 E5            [11]  228 	push	hl
   00E5 CDr00r00      [17]  229 	call	_block_set_data_ptr
   00E8 F1            [10]  230 	pop	af
   00E9 D1            [10]  231 	pop	de
   00EA C1            [10]  232 	pop	bc
   00EB 7D            [ 4]  233 	ld	a,l
   00EC B7            [ 4]  234 	or	a, a
   00ED 28 04         [12]  235 	jr	Z,00104$
                            236 ;demo.c:57: return 0;
   00EF 2E 00         [ 7]  237 	ld	l,#0x00
   00F1 18 4E         [12]  238 	jr	00113$
   00F3                     239 00104$:
                            240 ;demo.c:58: if (block_read(&f) != 0)
   00F3 6B            [ 4]  241 	ld	l, e
   00F4 62            [ 4]  242 	ld	h, d
   00F5 C5            [11]  243 	push	bc
   00F6 D5            [11]  244 	push	de
   00F7 E5            [11]  245 	push	hl
   00F8 CDr00r00      [17]  246 	call	_block_read
   00FB F1            [10]  247 	pop	af
   00FC D1            [10]  248 	pop	de
   00FD C1            [10]  249 	pop	bc
   00FE 7D            [ 4]  250 	ld	a,l
   00FF B7            [ 4]  251 	or	a, a
   0100 28 04         [12]  252 	jr	Z,00106$
                            253 ;demo.c:59: return 0;
   0102 2E 00         [ 7]  254 	ld	l,#0x00
   0104 18 3B         [12]  255 	jr	00113$
   0106                     256 00106$:
                            257 ;demo.c:60: if (i == 0)
   0106 DD 7E FF      [19]  258 	ld	a,-1 (ix)
   0109 B7            [ 4]  259 	or	a, a
   010A 20 13         [12]  260 	jr	NZ,00108$
                            261 ;demo.c:61: vdp_load_screen(scratch + 7, 121);   // to skip GE5 header
   010C C5            [11]  262 	push	bc
   010D D5            [11]  263 	push	de
   010E 3E 79         [ 7]  264 	ld	a,#0x79
   0110 F5            [11]  265 	push	af
   0111 33            [ 6]  266 	inc	sp
   0112 21r07r00      [10]  267 	ld	hl,#(_scratch + 0x0007)
   0115 E5            [11]  268 	push	hl
   0116 CDr00r00      [17]  269 	call	_vdp_load_screen
   0119 F1            [10]  270 	pop	af
   011A 33            [ 6]  271 	inc	sp
   011B D1            [10]  272 	pop	de
   011C C1            [10]  273 	pop	bc
   011D 18 11         [12]  274 	jr	00112$
   011F                     275 00108$:
                            276 ;demo.c:63: vdp_load_screen(scratch, 128);
   011F C5            [11]  277 	push	bc
   0120 D5            [11]  278 	push	de
   0121 3E 80         [ 7]  279 	ld	a,#0x80
   0123 F5            [11]  280 	push	af
   0124 33            [ 6]  281 	inc	sp
   0125 21r00r00      [10]  282 	ld	hl,#_scratch
   0128 E5            [11]  283 	push	hl
   0129 CDr00r00      [17]  284 	call	_vdp_load_screen
   012C F1            [10]  285 	pop	af
   012D 33            [ 6]  286 	inc	sp
   012E D1            [10]  287 	pop	de
   012F C1            [10]  288 	pop	bc
   0130                     289 00112$:
                            290 ;demo.c:55: for (i = 0; i < 213; i++) {
   0130 DD 34 FF      [23]  291 	inc	-1 (ix)
   0133 DD 7E FF      [19]  292 	ld	a,-1 (ix)
   0136 D6 D5         [ 7]  293 	sub	a, #0xd5
   0138 38 A5         [12]  294 	jr	C,00111$
                            295 ;demo.c:66: close(&f);
   013A C5            [11]  296 	push	bc
   013B CDr00r00      [17]  297 	call	_close
   013E F1            [10]  298 	pop	af
                            299 ;demo.c:68: return 1;
   013F 2E 01         [ 7]  300 	ld	l,#0x01
   0141                     301 00113$:
   0141 DD F9         [10]  302 	ld	sp, ix
   0143 DD E1         [14]  303 	pop	ix
   0145 C9            [10]  304 	ret
   0146                     305 ___str_0:
   0146 6F 70 65 6E 69 6E   306 	.ascii "opening file: '"
        67 20 66 69 6C 65
        3A 20 27
   0155 00                  307 	.db 0x00
   0156                     308 ___str_1:
   0156 27                  309 	.ascii "'"
   0157 0D                  310 	.db 0x0d
   0158 0A                  311 	.db 0x0a
   0159 00                  312 	.db 0x00
                            313 ;demo.c:71: void main(char** argv, int argc) {
                            314 ;	---------------------------------
                            315 ; Function main
                            316 ; ---------------------------------
   015A                     317 _main::
                            318 ;demo.c:73: puts("demo init\r\n");
   015A 21r80r01      [10]  319 	ld	hl,#___str_2
   015D E5            [11]  320 	push	hl
   015E CDr00r00      [17]  321 	call	_puts
                            322 ;demo.c:75: ge5_load("KETTU16 SC5", 0, 0x0000);        // load at visible VRAM
   0161 21 00 00      [10]  323 	ld	hl, #0x0000
   0164 E3            [19]  324 	ex	(sp),hl
   0165 AF            [ 4]  325 	xor	a, a
   0166 F5            [11]  326 	push	af
   0167 33            [ 6]  327 	inc	sp
   0168 21r8Cr01      [10]  328 	ld	hl,#___str_3
   016B E5            [11]  329 	push	hl
   016C CDr2Br00      [17]  330 	call	_ge5_load
   016F F1            [10]  331 	pop	af
   0170 F1            [10]  332 	pop	af
   0171 33            [ 6]  333 	inc	sp
                            334 ;demo.c:77: getchar();
   0172 CDr00r00      [17]  335 	call	_getchar
                            336 ;demo.c:78: vdp_set_text();
   0175 CDr00r00      [17]  337 	call	_vdp_set_text
                            338 ;demo.c:80: exit(0);
   0178 AF            [ 4]  339 	xor	a, a
   0179 F5            [11]  340 	push	af
   017A 33            [ 6]  341 	inc	sp
   017B CDr00r00      [17]  342 	call	_exit
   017E 33            [ 6]  343 	inc	sp
   017F C9            [10]  344 	ret
   0180                     345 ___str_2:
   0180 64 65 6D 6F 20 69   346 	.ascii "demo init"
        6E 69 74
   0189 0D                  347 	.db 0x0d
   018A 0A                  348 	.db 0x0a
   018B 00                  349 	.db 0x00
   018C                     350 ___str_3:
   018C 4B 45 54 54 55 31   351 	.ascii "KETTU16 SC5"
        36 20 53 43 35
   0197 00                  352 	.db 0x00
                            353 	.area _CODE
                            354 	.area _INITIALIZER
                            355 	.area _CABS (ABS)
