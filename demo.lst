                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Mar 22 2009) (Mac OS X i386)
                              4 ; This file was generated Wed Feb  7 20:20:58 2018
                              5 ;--------------------------------------------------------
                              6 	.module demo
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _fadein
                             14 	.globl _cls
                             15 	.globl _pause
                             16 	.globl _pal_load
                             17 	.globl _ge5_load
                             18 	.globl _my_isr
                             19 	.globl _tick
                             20 	.globl _vbicount
                             21 	.globl _cur_palette
                             22 	.globl _scratch
                             23 	.globl _sintab
                             24 ;--------------------------------------------------------
                             25 ; special function registers
                             26 ;--------------------------------------------------------
                             27 ;--------------------------------------------------------
                             28 ;  ram data
                             29 ;--------------------------------------------------------
                             30 	.area _DATA
   0000                      31 _sintab::
   0000                      32 	.ds 256
   0100                      33 _scratch::
   0100                      34 	.ds 128
   0180                      35 _cur_palette::
   0180                      36 	.ds 32
   01A0                      37 _vbicount::
   01A0                      38 	.ds 2
   01A2                      39 _tick::
   01A2                      40 	.ds 2
                             41 ;--------------------------------------------------------
                             42 ; overlayable items in  ram 
                             43 ;--------------------------------------------------------
                             44 	.area _OVERLAY
                             45 ;--------------------------------------------------------
                             46 ; external initialized ram data
                             47 ;--------------------------------------------------------
                             48 ;--------------------------------------------------------
                             49 ; global & static initialisations
                             50 ;--------------------------------------------------------
                             51 	.area _HOME
                             52 	.area _GSINIT
                             53 	.area _GSFINAL
                             54 	.area _GSINIT
                             55 ;demo.c:11: signed char sintab[256]={
   0000 21r00s00             56 	ld	hl,#_sintab
   0003 CDr00s00             57 	call	__initrleblock
   0006 3B                   58 	.db	59
   0007 00 03 06 09 0C 0F    59 	.db	0x00, 0x03, 0x06, 0x09, 0x0C, 0x0F, 0x12, 0x15
        12 15
   000F 18 1B 1E 21 24 27    60 	.db	0x18, 0x1B, 0x1E, 0x21, 0x24, 0x27, 0x2A, 0x2D
        2A 2D
   0017 30 33 36 39 3B 3E    61 	.db	0x30, 0x33, 0x36, 0x39, 0x3B, 0x3E, 0x41, 0x43
        41 43
   001F 46 49 4B 4E 50 52    62 	.db	0x46, 0x49, 0x4B, 0x4E, 0x50, 0x52, 0x55, 0x57
        55 57
   0027 59 5B 5E 60 62 64    63 	.db	0x59, 0x5B, 0x5E, 0x60, 0x62, 0x64, 0x66, 0x67
        66 67
   002F 69 6B 6C 6E 70 71    64 	.db	0x69, 0x6B, 0x6C, 0x6E, 0x70, 0x71, 0x72, 0x74
        72 74
   0037 75 76 77 78 79 7A    65 	.db	0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7B
        7B 7B
   003F 7C 7D 7D             66 	.db	0x7C, 0x7D, 0x7D
   0042 FB 7E                67 	.db	#-5,#0x7E
   0044 01                   68 	.db	1
   0045 7F                   69 	.db	0x7F
   0046 FB 7E                70 	.db	#-5,#0x7E
   0048 75                   71 	.db	117
   0049 7D 7D 7C 7B 7B 7A    72 	.db	0x7D, 0x7D, 0x7C, 0x7B, 0x7B, 0x7A, 0x79, 0x78
        79 78
   0051 77 76 75 74 72 71    73 	.db	0x77, 0x76, 0x75, 0x74, 0x72, 0x71, 0x70, 0x6E
        70 6E
   0059 6C 6B 69 67 66 64    74 	.db	0x6C, 0x6B, 0x69, 0x67, 0x66, 0x64, 0x62, 0x60
        62 60
   0061 5E 5B 59 57 55 52    75 	.db	0x5E, 0x5B, 0x59, 0x57, 0x55, 0x52, 0x50, 0x4E
        50 4E
   0069 4B 49 46 43 41 3E    76 	.db	0x4B, 0x49, 0x46, 0x43, 0x41, 0x3E, 0x3B, 0x39
        3B 39
   0071 36 33 30 2D 2A 27    77 	.db	0x36, 0x33, 0x30, 0x2D, 0x2A, 0x27, 0x24, 0x21
        24 21
   0079 1E 1B 18 15 12 0F    78 	.db	0x1E, 0x1B, 0x18, 0x15, 0x12, 0x0F, 0x0C, 0x09
        0C 09
   0081 06 03 00 FD FA F7    79 	.db	0x06, 0x03, 0x00, 0xFD, 0xFA, 0xF7, 0xF4, 0xF1
        F4 F1
   0089 EE EB E8 E5 E2 DF    80 	.db	0xEE, 0xEB, 0xE8, 0xE5, 0xE2, 0xDF, 0xDC, 0xD9
        DC D9
   0091 D6 D3 D0 CD CA C7    81 	.db	0xD6, 0xD3, 0xD0, 0xCD, 0xCA, 0xC7, 0xC5, 0xC2
        C5 C2
   0099 BF BD BA B7 B5 B2    82 	.db	0xBF, 0xBD, 0xBA, 0xB7, 0xB5, 0xB2, 0xB0, 0xAE
        B0 AE
   00A1 AB A9 A7 A5 A2 A0    83 	.db	0xAB, 0xA9, 0xA7, 0xA5, 0xA2, 0xA0, 0x9E, 0x9C
        9E 9C
   00A9 9A 99 97 95 94 92    84 	.db	0x9A, 0x99, 0x97, 0x95, 0x94, 0x92, 0x90, 0x8F
        90 8F
   00B1 8E 8C 8B 8A 89 88    85 	.db	0x8E, 0x8C, 0x8B, 0x8A, 0x89, 0x88, 0x87, 0x86
        87 86
   00B9 85 85 84 83 83       86 	.db	0x85, 0x85, 0x84, 0x83, 0x83
   00BE FB 82                87 	.db	#-5,#0x82
   00C0 01                   88 	.db	1
   00C1 81                   89 	.db	0x81
   00C2 FB 82                90 	.db	#-5,#0x82
   00C4 3A                   91 	.db	58
   00C5 83 83 84 85 85 86    92 	.db	0x83, 0x83, 0x84, 0x85, 0x85, 0x86, 0x87, 0x88
        87 88
   00CD 89 8A 8B 8C 8E 8F    93 	.db	0x89, 0x8A, 0x8B, 0x8C, 0x8E, 0x8F, 0x90, 0x92
        90 92
   00D5 94 95 97 99 9A 9C    94 	.db	0x94, 0x95, 0x97, 0x99, 0x9A, 0x9C, 0x9E, 0xA0
        9E A0
   00DD A2 A5 A7 A9 AB AE    95 	.db	0xA2, 0xA5, 0xA7, 0xA9, 0xAB, 0xAE, 0xB0, 0xB2
        B0 B2
   00E5 B5 B7 BA BD BF C2    96 	.db	0xB5, 0xB7, 0xBA, 0xBD, 0xBF, 0xC2, 0xC5, 0xC7
        C5 C7
   00ED CA CD D0 D3 D6 D9    97 	.db	0xCA, 0xCD, 0xD0, 0xD3, 0xD6, 0xD9, 0xDC, 0xDF
        DC DF
   00F5 E2 E5 E8 EB EE F1    98 	.db	0xE2, 0xE5, 0xE8, 0xEB, 0xEE, 0xF1, 0xF4, 0xF7
        F4 F7
   00FD FA FD                99 	.db	0xFA, 0xFD
   00FF 00                  100 	.db	0
                            101 ;demo.c:30: volatile int vbicount=0;
   0100 FD 21rA0s01         102 	ld	iy,#_vbicount
   0104 FD 36 00 00         103 	ld	0 (iy),#0x00
   0108 FD 21rA0s01         104 	ld	iy,#_vbicount
   010C FD 36 01 00         105 	ld	1 (iy),#0x00
                            106 ;demo.c:31: volatile int tick=0;
   0110 FD 21rA2s01         107 	ld	iy,#_tick
   0114 FD 36 00 00         108 	ld	0 (iy),#0x00
   0118 FD 21rA2s01         109 	ld	iy,#_tick
   011C FD 36 01 00         110 	ld	1 (iy),#0x00
                            111 ;--------------------------------------------------------
                            112 ; Home
                            113 ;--------------------------------------------------------
                            114 	.area _HOME
                            115 	.area _HOME
                            116 ;--------------------------------------------------------
                            117 ; code
                            118 ;--------------------------------------------------------
                            119 	.area _CODE
                            120 ;demo.c:33: void my_isr(void) interrupt
                            121 ;	---------------------------------
                            122 ; Function my_isr
                            123 ; ---------------------------------
   0000                     124 _my_isr_start::
   0000                     125 _my_isr:
   0000 F5                  126 	push	af
   0001 C5                  127 	push	bc
   0002 D5                  128 	push	de
   0003 E5                  129 	push	hl
   0004 FD E5               130 	push	iy
                            131 ;demo.c:35: DI;
   0006 F3                  132 		di 
                            133 ;demo.c:36: READ_VDP_STATUS;
   0007 DB 99               134 		in a,(#0x99) 
                            135 ;demo.c:38: PLY_Play();
   0009 CDr00s00            136 	call	_PLY_Play
                            137 ;demo.c:39: PLY_SendRegisters();
   000C CDr00s00            138 	call	_PLY_SendRegisters
                            139 ;demo.c:41: vbicount++;
   000F FD 21rA0s01         140 	ld	iy,#_vbicount
   0013 FD 34 00            141 	inc	0 (iy)
   0016 20 07               142 	jr	NZ,00103$
   0018 FD 21rA0s01         143 	ld	iy,#_vbicount
   001C FD 34 01            144 	inc	1 (iy)
   001F                     145 00103$:
                            146 ;demo.c:42: tick++;
   001F FD 21rA2s01         147 	ld	iy,#_tick
   0023 FD 34 00            148 	inc	0 (iy)
   0026 20 07               149 	jr	NZ,00104$
   0028 FD 21rA2s01         150 	ld	iy,#_tick
   002C FD 34 01            151 	inc	1 (iy)
   002F                     152 00104$:
                            153 ;demo.c:44: EI;
   002F FB                  154 		ei 
   0030 FD E1               155 	pop	iy
   0032 E1                  156 	pop	hl
   0033 D1                  157 	pop	de
   0034 C1                  158 	pop	bc
   0035 F1                  159 	pop	af
   0036 ED 4D               160 	reti
   0038                     161 _my_isr_end::
                            162 ;demo.c:47: uint8_t ge5_load(char *file_name, uint8_t vramh, uint16_t vraml) {
                            163 ;	---------------------------------
                            164 ; Function ge5_load
                            165 ; ---------------------------------
   0038                     166 _ge5_load_start::
   0038                     167 _ge5_load:
   0038 DD E5               168 	push	ix
   003A DD 21 00 00         169 	ld	ix,#0
   003E DD 39               170 	add	ix,sp
   0040 21 D2 FF            171 	ld	hl,#-46
   0043 39                  172 	add	hl,sp
   0044 F9                  173 	ld	sp,hl
                            174 ;demo.c:51: memset((uint8_t *) &f, 0, sizeof(fcb));
   0045 21 00 00            175 	ld	hl,#0x0000
   0048 39                  176 	add	hl,sp
   0049 4D                  177 	ld	c,l
   004A 44                  178 	ld	b,h
   004B 21 2E 00            179 	ld	hl,#0x002E
   004E E5                  180 	push	hl
   004F 3E 00               181 	ld	a,#0x00
   0051 F5                  182 	push	af
   0052 33                  183 	inc	sp
   0053 C5                  184 	push	bc
   0054 CDr00s00            185 	call	_memset
   0057 F1                  186 	pop	af
   0058 F1                  187 	pop	af
   0059 33                  188 	inc	sp
                            189 ;demo.c:53: f.record_size = 128;
   005A 21 00 00            190 	ld	hl,#0x0000
   005D 39                  191 	add	hl,sp
   005E 4D                  192 	ld	c,l
   005F 44                  193 	ld	b,h
   0060 21 0F 00            194 	ld	hl,#0x000F
   0063 09                  195 	add	hl,bc
   0064 EB                  196 	ex	de,hl
   0065 3E 80               197 	ld	a,#0x80
   0067 12                  198 	ld	(de),a
                            199 ;demo.c:54: f.drive = 0;
   0068 3E 00               200 	ld	a,#0x00
   006A 02                  201 	ld	(bc),a
                            202 ;demo.c:56: memcpy(f.name, file_name, 11);
   006B DD 5E 04            203 	ld	e,4 (ix)
   006E DD 56 05            204 	ld	d,5 (ix)
   0071 03                  205 	inc	bc
   0072 21 0B 00            206 	ld	hl,#0x000B
   0075 E5                  207 	push	hl
   0076 D5                  208 	push	de
   0077 C5                  209 	push	bc
   0078 CDr00s00            210 	call	_memcpy
   007B F1                  211 	pop	af
   007C F1                  212 	pop	af
   007D F1                  213 	pop	af
                            214 ;demo.c:58: if (open(&f) != 0) return 0;
   007E 21 00 00            215 	ld	hl,#0x0000
   0081 39                  216 	add	hl,sp
   0082 E5                  217 	push	hl
   0083 CDr00s00            218 	call	_open
   0086 F1                  219 	pop	af
   0087 AF                  220 	xor	a,a
   0088 B5                  221 	or	a,l
   0089 28 05               222 	jr	Z,00102$
   008B 2E 00               223 	ld	l,#0x00
   008D C3r04s01            224 	jp	00114$
   0090                     225 00102$:
                            226 ;demo.c:59: vdp_set_write_address(vramh, vraml);
   0090 DD 6E 07            227 	ld	l,7 (ix)
   0093 DD 66 08            228 	ld	h,8 (ix)
   0096 E5                  229 	push	hl
   0097 DD 7E 06            230 	ld	a,6 (ix)
   009A F5                  231 	push	af
   009B 33                  232 	inc	sp
   009C CDr00s00            233 	call	_vdp_set_write_address
   009F F1                  234 	pop	af
   00A0 33                  235 	inc	sp
                            236 ;demo.c:61: for (i = 0; i < 213; i++) {
   00A1 0E 00               237 	ld	c,#0x00
   00A3                     238 00110$:
   00A3 79                  239 	ld	a,c
   00A4 D6 D5               240 	sub	a,#0xD5
   00A6 D2rF9s00            241 	jp	NC,00113$
                            242 ;demo.c:62: if (block_set_data_ptr(scratch) != 0) return 0;
   00A9 C5                  243 	push	bc
   00AA 21r00s01            244 	ld	hl,#_scratch
   00AD E5                  245 	push	hl
   00AE CDr00s00            246 	call	_block_set_data_ptr
   00B1 F1                  247 	pop	af
   00B2 7D                  248 	ld	a,l
   00B3 C1                  249 	pop	bc
   00B4 47                  250 	ld	b,a
   00B5 B7                  251 	or	a,a
   00B6 28 05               252 	jr	Z,00104$
   00B8 2E 00               253 	ld	l,#0x00
   00BA C3r04s01            254 	jp	00114$
   00BD                     255 00104$:
                            256 ;demo.c:63: if (block_read(&f) != 0) return 0;
   00BD 21 00 00            257 	ld	hl,#0x0000
   00C0 39                  258 	add	hl,sp
   00C1 C5                  259 	push	bc
   00C2 E5                  260 	push	hl
   00C3 CDr00s00            261 	call	_block_read
   00C6 F1                  262 	pop	af
   00C7 7D                  263 	ld	a,l
   00C8 C1                  264 	pop	bc
   00C9 47                  265 	ld	b,a
   00CA B7                  266 	or	a,a
   00CB 28 04               267 	jr	Z,00106$
   00CD 2E 00               268 	ld	l,#0x00
   00CF 18 33               269 	jr	00114$
   00D1                     270 00106$:
                            271 ;demo.c:65: if (i == 0) vdp_load_screen(scratch + 7, 121);   // to skip GE5 header
   00D1 AF                  272 	xor	a,a
   00D2 B1                  273 	or	a,c
   00D3 20 11               274 	jr	NZ,00108$
   00D5 11r07s01            275 	ld	de,#_scratch + 7
   00D8 C5                  276 	push	bc
   00D9 3E 79               277 	ld	a,#0x79
   00DB F5                  278 	push	af
   00DC 33                  279 	inc	sp
   00DD D5                  280 	push	de
   00DE CDr00s00            281 	call	_vdp_load_screen
   00E1 F1                  282 	pop	af
   00E2 33                  283 	inc	sp
   00E3 C1                  284 	pop	bc
   00E4 18 0F               285 	jr	00112$
   00E6                     286 00108$:
                            287 ;demo.c:66: else vdp_load_screen(scratch, 128);
   00E6 C5                  288 	push	bc
   00E7 3E 80               289 	ld	a,#0x80
   00E9 F5                  290 	push	af
   00EA 33                  291 	inc	sp
   00EB 21r00s01            292 	ld	hl,#_scratch
   00EE E5                  293 	push	hl
   00EF CDr00s00            294 	call	_vdp_load_screen
   00F2 F1                  295 	pop	af
   00F3 33                  296 	inc	sp
   00F4 C1                  297 	pop	bc
   00F5                     298 00112$:
                            299 ;demo.c:61: for (i = 0; i < 213; i++) {
   00F5 0C                  300 	inc	c
   00F6 C3rA3s00            301 	jp	00110$
   00F9                     302 00113$:
                            303 ;demo.c:69: close(&f);
   00F9 21 00 00            304 	ld	hl,#0x0000
   00FC 39                  305 	add	hl,sp
   00FD E5                  306 	push	hl
   00FE CDr00s00            307 	call	_close
   0101 F1                  308 	pop	af
                            309 ;demo.c:71: return 1;
   0102 2E 01               310 	ld	l,#0x01
   0104                     311 00114$:
   0104 DD F9               312 	ld	sp,ix
   0106 DD E1               313 	pop	ix
   0108 C9                  314 	ret
   0109                     315 _ge5_load_end::
                            316 ;demo.c:74: uint8_t pal_load(char *file_name) {
                            317 ;	---------------------------------
                            318 ; Function pal_load
                            319 ; ---------------------------------
   0109                     320 _pal_load_start::
   0109                     321 _pal_load:
   0109 DD E5               322 	push	ix
   010B DD 21 00 00         323 	ld	ix,#0
   010F DD 39               324 	add	ix,sp
   0111 21 D2 FF            325 	ld	hl,#-46
   0114 39                  326 	add	hl,sp
   0115 F9                  327 	ld	sp,hl
                            328 ;demo.c:77: memset((uint8_t *) &f, 0, sizeof(fcb));
   0116 21 00 00            329 	ld	hl,#0x0000
   0119 39                  330 	add	hl,sp
   011A 4D                  331 	ld	c,l
   011B 44                  332 	ld	b,h
   011C 21 2E 00            333 	ld	hl,#0x002E
   011F E5                  334 	push	hl
   0120 3E 00               335 	ld	a,#0x00
   0122 F5                  336 	push	af
   0123 33                  337 	inc	sp
   0124 C5                  338 	push	bc
   0125 CDr00s00            339 	call	_memset
   0128 F1                  340 	pop	af
   0129 F1                  341 	pop	af
   012A 33                  342 	inc	sp
                            343 ;demo.c:78: memset((uint8_t *) &scratch, 0, 128);
   012B 21 80 00            344 	ld	hl,#0x0080
   012E E5                  345 	push	hl
   012F 3E 00               346 	ld	a,#0x00
   0131 F5                  347 	push	af
   0132 33                  348 	inc	sp
   0133 21r00s01            349 	ld	hl,#_scratch
   0136 E5                  350 	push	hl
   0137 CDr00s00            351 	call	_memset
   013A F1                  352 	pop	af
   013B F1                  353 	pop	af
   013C 33                  354 	inc	sp
                            355 ;demo.c:80: f.record_size = 32;
   013D 21 00 00            356 	ld	hl,#0x0000
   0140 39                  357 	add	hl,sp
   0141 4D                  358 	ld	c,l
   0142 44                  359 	ld	b,h
   0143 21 0F 00            360 	ld	hl,#0x000F
   0146 09                  361 	add	hl,bc
   0147 EB                  362 	ex	de,hl
   0148 3E 20               363 	ld	a,#0x20
   014A 12                  364 	ld	(de),a
                            365 ;demo.c:81: f.drive = 0;
   014B 3E 00               366 	ld	a,#0x00
   014D 02                  367 	ld	(bc),a
                            368 ;demo.c:83: memcpy(f.name, file_name, 11);
   014E DD 5E 04            369 	ld	e,4 (ix)
   0151 DD 56 05            370 	ld	d,5 (ix)
   0154 03                  371 	inc	bc
   0155 21 0B 00            372 	ld	hl,#0x000B
   0158 E5                  373 	push	hl
   0159 D5                  374 	push	de
   015A C5                  375 	push	bc
   015B CDr00s00            376 	call	_memcpy
   015E F1                  377 	pop	af
   015F F1                  378 	pop	af
   0160 F1                  379 	pop	af
                            380 ;demo.c:85: if (open(&f) != 0) return 0;
   0161 21 00 00            381 	ld	hl,#0x0000
   0164 39                  382 	add	hl,sp
   0165 E5                  383 	push	hl
   0166 CDr00s00            384 	call	_open
   0169 F1                  385 	pop	af
   016A AF                  386 	xor	a,a
   016B B5                  387 	or	a,l
   016C 28 04               388 	jr	Z,00102$
   016E 2E 00               389 	ld	l,#0x00
   0170 18 3E               390 	jr	00107$
   0172                     391 00102$:
                            392 ;demo.c:86: if (block_set_data_ptr(scratch) != 0) return 0;
   0172 21r00s01            393 	ld	hl,#_scratch
   0175 E5                  394 	push	hl
   0176 CDr00s00            395 	call	_block_set_data_ptr
   0179 F1                  396 	pop	af
   017A AF                  397 	xor	a,a
   017B B5                  398 	or	a,l
   017C 28 04               399 	jr	Z,00104$
   017E 2E 00               400 	ld	l,#0x00
   0180 18 2E               401 	jr	00107$
   0182                     402 00104$:
                            403 ;demo.c:87: if (block_read(&f) != 0) return 0;
   0182 21 00 00            404 	ld	hl,#0x0000
   0185 39                  405 	add	hl,sp
   0186 E5                  406 	push	hl
   0187 CDr00s00            407 	call	_block_read
   018A F1                  408 	pop	af
   018B AF                  409 	xor	a,a
   018C B5                  410 	or	a,l
   018D 28 04               411 	jr	Z,00106$
   018F 2E 00               412 	ld	l,#0x00
   0191 18 1D               413 	jr	00107$
   0193                     414 00106$:
                            415 ;demo.c:89: memcpy(cur_palette, scratch+7, 32);
   0193 01r07s01            416 	ld	bc,#_scratch + 7
   0196 21 20 00            417 	ld	hl,#0x0020
   0199 E5                  418 	push	hl
   019A C5                  419 	push	bc
   019B 21r80s01            420 	ld	hl,#_cur_palette
   019E E5                  421 	push	hl
   019F CDr00s00            422 	call	_memcpy
   01A2 F1                  423 	pop	af
   01A3 F1                  424 	pop	af
   01A4 F1                  425 	pop	af
                            426 ;demo.c:91: close(&f);
   01A5 21 00 00            427 	ld	hl,#0x0000
   01A8 39                  428 	add	hl,sp
   01A9 E5                  429 	push	hl
   01AA CDr00s00            430 	call	_close
   01AD F1                  431 	pop	af
                            432 ;demo.c:92: return 1;
   01AE 2E 01               433 	ld	l,#0x01
   01B0                     434 00107$:
   01B0 DD F9               435 	ld	sp,ix
   01B2 DD E1               436 	pop	ix
   01B4 C9                  437 	ret
   01B5                     438 _pal_load_end::
                            439 ;demo.c:95: void pause() {
                            440 ;	---------------------------------
                            441 ; Function pause
                            442 ; ---------------------------------
   01B5                     443 _pause_start::
   01B5                     444 _pause:
                            445 ;demo.c:96: uint8_t i,j,k = 0;
                            446 ;demo.c:97: for (i = 0; i < 255; i++) {	
   01B5 01 00 00            447 	ld	bc,#0x0000
   01B8                     448 00104$:
   01B8 78                  449 	ld	a,b
   01B9 D6 FF               450 	sub	a,#0xFF
   01BB D0                  451 	ret	NC
                            452 ;demo.c:98: for (j = 0; j < 255; j++) {
   01BC 59                  453 	ld	e,c
   01BD 16 FF               454 	ld	d,#0xFF
   01BF                     455 00103$:
                            456 ;demo.c:99: k++;
   01BF 1C                  457 	inc	e
   01C0 15                  458 	dec	d
                            459 ;demo.c:98: for (j = 0; j < 255; j++) {
   01C1 AF                  460 	xor	a,a
   01C2 B2                  461 	or	a,d
   01C3 20 FA               462 	jr	NZ,00103$
                            463 ;demo.c:97: for (i = 0; i < 255; i++) {	
   01C5 4B                  464 	ld	c,e
   01C6 04                  465 	inc	b
   01C7 18 EF               466 	jr	00104$
   01C9                     467 _pause_end::
                            468 ;demo.c:104: void cls(uint8_t vramh, uint16_t vraml) {
                            469 ;	---------------------------------
                            470 ; Function cls
                            471 ; ---------------------------------
   01C9                     472 _cls_start::
   01C9                     473 _cls:
   01C9 DD E5               474 	push	ix
   01CB DD 21 00 00         475 	ld	ix,#0
   01CF DD 39               476 	add	ix,sp
                            477 ;demo.c:105: vdp_set_write_address(vramh, vraml);
   01D1 DD 6E 05            478 	ld	l,5 (ix)
   01D4 DD 66 06            479 	ld	h,6 (ix)
   01D7 E5                  480 	push	hl
   01D8 DD 7E 04            481 	ld	a,4 (ix)
   01DB F5                  482 	push	af
   01DC 33                  483 	inc	sp
   01DD CDr00s00            484 	call	_vdp_set_write_address
   01E0 F1                  485 	pop	af
   01E1 33                  486 	inc	sp
                            487 ;demo.c:106: memset((uint8_t *) &scratch, 0, 128);
   01E2 21 80 00            488 	ld	hl,#0x0080
   01E5 E5                  489 	push	hl
   01E6 3E 00               490 	ld	a,#0x00
   01E8 F5                  491 	push	af
   01E9 33                  492 	inc	sp
   01EA 21r00s01            493 	ld	hl,#_scratch
   01ED E5                  494 	push	hl
   01EE CDr00s00            495 	call	_memset
   01F1 F1                  496 	pop	af
   01F2 F1                  497 	pop	af
   01F3 33                  498 	inc	sp
                            499 ;demo.c:107: vdp_load_screen(scratch, 128);
   01F4 3E 80               500 	ld	a,#0x80
   01F6 F5                  501 	push	af
   01F7 33                  502 	inc	sp
   01F8 21r00s01            503 	ld	hl,#_scratch
   01FB E5                  504 	push	hl
   01FC CDr00s00            505 	call	_vdp_load_screen
   01FF F1                  506 	pop	af
   0200 33                  507 	inc	sp
   0201 DD E1               508 	pop	ix
   0203 C9                  509 	ret
   0204                     510 _cls_end::
                            511 ;demo.c:110: void fadein() {
                            512 ;	---------------------------------
                            513 ; Function fadein
                            514 ; ---------------------------------
   0204                     515 _fadein_start::
   0204                     516 _fadein:
   0204 DD E5               517 	push	ix
   0206 DD 21 00 00         518 	ld	ix,#0
   020A DD 39               519 	add	ix,sp
   020C F5                  520 	push	af
                            521 ;demo.c:113: if (tick < 4) return;
   020D 3ArA2s01            522 	ld	a,(#_tick+0)
   0210 D6 04               523 	sub	a,#0x04
   0212 3ArA3s01            524 	ld	a,(#_tick+1)
   0215 DE 00               525 	sbc	a,#0x00
   0217 F2r1Ds02            526 	jp	P,00102$
   021A C3rCBs02            527 	jp	00113$
   021D                     528 00102$:
                            529 ;demo.c:115: tick = 0;
   021D 21rA2s01            530 	ld	hl,#_tick + 0
   0220 36 00               531 	ld	(hl), #0x00
   0222 21rA3s01            532 	ld	hl,#_tick + 1
   0225 36 00               533 	ld	(hl), #0x00
                            534 ;demo.c:117: for(i = 0; i < 32; i+=2) {
   0227 0E 00               535 	ld	c,#0x00
   0229                     536 00109$:
   0229 79                  537 	ld	a,c
   022A D6 20               538 	sub	a,#0x20
   022C D2rC3s02            539 	jp	NC,00112$
                            540 ;demo.c:118: uint8_t r = scratch[i] >> 4;
   022F 3Er00               541 	ld	a,#<_scratch
   0231 81                  542 	add	a,c
   0232 5F                  543 	ld	e,a
   0233 3Es01               544 	ld	a,#>_scratch
   0235 CE 00               545 	adc	a,#0x00
   0237 57                  546 	ld	d,a
   0238 1A                  547 	ld	a,(de)
   0239 47                  548 	ld	b,a
   023A 58                  549 	ld	e,b
   023B CB 3B               550 	srl	e
   023D CB 3B               551 	srl	e
   023F CB 3B               552 	srl	e
   0241 CB 3B               553 	srl	e
                            554 ;demo.c:119: uint8_t b = scratch[i] & 0xf;
   0243 78                  555 	ld	a,b
   0244 E6 0F               556 	and	a,#0x0F
   0246 DD 77 FF            557 	ld	-1 (ix),a
                            558 ;demo.c:120: uint8_t g = scratch[i+1];
   0249 51                  559 	ld	d,c
   024A 14                  560 	inc	d
   024B 3Er00               561 	ld	a,#<_scratch
   024D 82                  562 	add	a,d
   024E 6F                  563 	ld	l,a
   024F 3Es01               564 	ld	a,#>_scratch
   0251 CE 00               565 	adc	a,#0x00
   0253 67                  566 	ld	h,a
   0254 56                  567 	ld	d,(hl)
   0255 DD 72 FE            568 	ld	-2 (ix),d
                            569 ;demo.c:122: if (r < (cur_palette[i] >> 4)) r++;
   0258 3Er80               570 	ld	a,#<_cur_palette
   025A 81                  571 	add	a,c
   025B 6F                  572 	ld	l,a
   025C 3Es01               573 	ld	a,#>_cur_palette
   025E CE 00               574 	adc	a,#0x00
   0260 67                  575 	ld	h,a
   0261 56                  576 	ld	d,(hl)
   0262 CB 3A               577 	srl	d
   0264 CB 3A               578 	srl	d
   0266 CB 3A               579 	srl	d
   0268 CB 3A               580 	srl	d
   026A 7B                  581 	ld	a,e
   026B 92                  582 	sub	a,d
   026C 30 01               583 	jr	NC,00104$
   026E 1C                  584 	inc	e
   026F                     585 00104$:
                            586 ;demo.c:123: if (b < (cur_palette[i] & 0xf)) b++;
   026F 3Er80               587 	ld	a,#<_cur_palette
   0271 81                  588 	add	a,c
   0272 6F                  589 	ld	l,a
   0273 3Es01               590 	ld	a,#>_cur_palette
   0275 CE 00               591 	adc	a,#0x00
   0277 67                  592 	ld	h,a
   0278 7E                  593 	ld	a,(hl)
   0279 E6 0F               594 	and	a,#0x0F
   027B 47                  595 	ld	b,a
   027C DD 7E FF            596 	ld	a,-1 (ix)
   027F 90                  597 	sub	a,b
   0280 30 03               598 	jr	NC,00106$
   0282 DD 34 FF            599 	inc	-1 (ix)
   0285                     600 00106$:
                            601 ;demo.c:125: scratch[i] = (r << 4) | b;
   0285 3Er00               602 	ld	a,#<_scratch
   0287 81                  603 	add	a,c
   0288 47                  604 	ld	b,a
   0289 3Es01               605 	ld	a,#>_scratch
   028B CE 00               606 	adc	a,#0x00
   028D 57                  607 	ld	d,a
   028E 7B                  608 	ld	a,e
   028F 07                  609 	rlca
   0290 07                  610 	rlca
   0291 07                  611 	rlca
   0292 07                  612 	rlca
   0293 E6 F0               613 	and	a,#0xF0
   0295 DD B6 FF            614 	or	a,-1 (ix)
   0298 68                  615 	ld	l,b
   0299 62                  616 	ld	h,d
   029A 77                  617 	ld	(hl),a
                            618 ;demo.c:126: if (g < cur_palette[i+1]) scratch[i+1]++;
   029B 41                  619 	ld	b,c
   029C 04                  620 	inc	b
   029D 3Er80               621 	ld	a,#<_cur_palette
   029F 80                  622 	add	a,b
   02A0 5F                  623 	ld	e,a
   02A1 3Es01               624 	ld	a,#>_cur_palette
   02A3 CE 00               625 	adc	a,#0x00
   02A5 57                  626 	ld	d,a
   02A6 1A                  627 	ld	a,(de)
   02A7 5F                  628 	ld	e,a
   02A8 DD 7E FE            629 	ld	a,-2 (ix)
   02AB 93                  630 	sub	a,e
   02AC 30 10               631 	jr	NC,00111$
   02AE 3Er00               632 	ld	a,#<_scratch
   02B0 80                  633 	add	a,b
   02B1 47                  634 	ld	b,a
   02B2 3Es01               635 	ld	a,#>_scratch
   02B4 CE 00               636 	adc	a,#0x00
   02B6 5F                  637 	ld	e,a
   02B7 68                  638 	ld	l,b
   02B8 67                  639 	ld	h,a
   02B9 7E                  640 	ld	a,(hl)
   02BA 3C                  641 	inc	a
   02BB 68                  642 	ld	l,b
   02BC 63                  643 	ld	h,e
   02BD 77                  644 	ld	(hl),a
   02BE                     645 00111$:
                            646 ;demo.c:117: for(i = 0; i < 32; i+=2) {
   02BE 0C                  647 	inc	c
   02BF 0C                  648 	inc	c
   02C0 C3r29s02            649 	jp	00109$
   02C3                     650 00112$:
                            651 ;demo.c:130: vdp_load_palette(scratch);
   02C3 21r00s01            652 	ld	hl,#_scratch
   02C6 E5                  653 	push	hl
   02C7 CDr00s00            654 	call	_vdp_load_palette
   02CA F1                  655 	pop	af
   02CB                     656 00113$:
   02CB DD F9               657 	ld	sp,ix
   02CD DD E1               658 	pop	ix
   02CF C9                  659 	ret
   02D0                     660 _fadein_end::
                            661 ;demo.c:133: void main() {
                            662 ;	---------------------------------
                            663 ; Function main
                            664 ; ---------------------------------
   02D0                     665 _main_start::
   02D0                     666 _main:
                            667 ;demo.c:134: unsigned char quit=0;
   02D0 0E 00               668 	ld	c,#0x00
                            669 ;demo.c:136: spindown();
   02D2 C5                  670 	push	bc
   02D3 CDr00s00            671 	call	_spindown
   02D6 C1                  672 	pop	bc
                            673 ;demo.c:138: puts("demo init\r\n\r\n");
   02D7 C5                  674 	push	bc
   02D8 21rE1s03            675 	ld	hl,#__str_0
   02DB E5                  676 	push	hl
   02DC CDr00s00            677 	call	_puts
   02DF F1                  678 	pop	af
   02E0 C1                  679 	pop	bc
                            680 ;demo.c:140: puts("music init...");
   02E1 C5                  681 	push	bc
   02E2 21rEFs03            682 	ld	hl,#__str_1
   02E5 E5                  683 	push	hl
   02E6 CDr00s00            684 	call	_puts
   02E9 F1                  685 	pop	af
   02EA C1                  686 	pop	bc
                            687 ;demo.c:142: PLY_SongPtr = (char *)0x0103;
   02EB 21r00s00            688 	ld	hl,#_PLY_SongPtr + 0
   02EE 36 03               689 	ld	(hl), #0x03
   02F0 21r01s00            690 	ld	hl,#_PLY_SongPtr + 1
   02F3 36 01               691 	ld	(hl), #0x01
                            692 ;demo.c:143: PLY_Init();
   02F5 C5                  693 	push	bc
   02F6 CDr00s00            694 	call	_PLY_Init
   02F9 C1                  695 	pop	bc
                            696 ;demo.c:144: puts("done.\n\n");
   02FA C5                  697 	push	bc
   02FB 21rFDs03            698 	ld	hl,#__str_2
   02FE E5                  699 	push	hl
   02FF CDr00s00            700 	call	_puts
   0302 F1                  701 	pop	af
   0303 C1                  702 	pop	bc
                            703 ;demo.c:146: if(isvdp2())
   0304 C5                  704 	push	bc
   0305 CDr00s00            705 	call	_isvdp2
   0308 7D                  706 	ld	a,l
   0309 C1                  707 	pop	bc
   030A 47                  708 	ld	b,a
   030B B7                  709 	or	a,a
   030C 28 0A               710 	jr	Z,00102$
                            711 ;demo.c:148: msx2_sethz(50);
   030E C5                  712 	push	bc
   030F 3E 32               713 	ld	a,#0x32
   0311 F5                  714 	push	af
   0312 33                  715 	inc	sp
   0313 CDr00s00            716 	call	_msx2_sethz
   0316 33                  717 	inc	sp
   0317 C1                  718 	pop	bc
   0318                     719 00102$:
                            720 ;demo.c:152: vdp_set_screen5();
   0318 C5                  721 	push	bc
   0319 CDr00s00            722 	call	_vdp_set_screen5
   031C C1                  723 	pop	bc
                            724 ;demo.c:153: pal_load("KETTU16 PL5");
   031D C5                  725 	push	bc
   031E 21r05s04            726 	ld	hl,#__str_3
   0321 E5                  727 	push	hl
   0322 CDr09s01            728 	call	_pal_load
   0325 F1                  729 	pop	af
   0326 C1                  730 	pop	bc
                            731 ;demo.c:157: memset((uint8_t *) &scratch, 0, 128);
   0327 C5                  732 	push	bc
   0328 21 80 00            733 	ld	hl,#0x0080
   032B E5                  734 	push	hl
   032C 3E 00               735 	ld	a,#0x00
   032E F5                  736 	push	af
   032F 33                  737 	inc	sp
   0330 21r00s01            738 	ld	hl,#_scratch
   0333 E5                  739 	push	hl
   0334 CDr00s00            740 	call	_memset
   0337 F1                  741 	pop	af
   0338 F1                  742 	pop	af
   0339 33                  743 	inc	sp
   033A C1                  744 	pop	bc
                            745 ;demo.c:158: vdp_load_palette(scratch);
   033B C5                  746 	push	bc
   033C 21r00s01            747 	ld	hl,#_scratch
   033F E5                  748 	push	hl
   0340 CDr00s00            749 	call	_vdp_load_palette
   0343 F1                  750 	pop	af
   0344 C1                  751 	pop	bc
                            752 ;demo.c:160: ge5_load("KETTU16 SC5", 0, 0x0000);
   0345 C5                  753 	push	bc
   0346 21 00 00            754 	ld	hl,#0x0000
   0349 E5                  755 	push	hl
   034A 3E 00               756 	ld	a,#0x00
   034C F5                  757 	push	af
   034D 33                  758 	inc	sp
   034E 21r11s04            759 	ld	hl,#__str_4
   0351 E5                  760 	push	hl
   0352 CDr38s00            761 	call	_ge5_load
   0355 F1                  762 	pop	af
   0356 F1                  763 	pop	af
   0357 33                  764 	inc	sp
   0358 C1                  765 	pop	bc
                            766 ;demo.c:162: memset((uint8_t *) &scratch, 0, 128);
   0359 C5                  767 	push	bc
   035A 21 80 00            768 	ld	hl,#0x0080
   035D E5                  769 	push	hl
   035E 3E 00               770 	ld	a,#0x00
   0360 F5                  771 	push	af
   0361 33                  772 	inc	sp
   0362 21r00s01            773 	ld	hl,#_scratch
   0365 E5                  774 	push	hl
   0366 CDr00s00            775 	call	_memset
   0369 F1                  776 	pop	af
   036A F1                  777 	pop	af
   036B 33                  778 	inc	sp
   036C C1                  779 	pop	bc
                            780 ;demo.c:164: install_isr(my_isr);
   036D C5                  781 	push	bc
   036E 21r00s00            782 	ld	hl,#_my_isr
   0371 E5                  783 	push	hl
   0372 CDr00s00            784 	call	_install_isr
   0375 F1                  785 	pop	af
   0376 C1                  786 	pop	bc
                            787 ;demo.c:166: while (!quit) {
   0377                     788 00108$:
   0377 AF                  789 	xor	a,a
   0378 B1                  790 	or	a,c
   0379 20 40               791 	jr	NZ,00110$
                            792 ;demo.c:167: waitVB();
   037B 76                  793 		halt 
                            794 ;demo.c:169: if (vbicount < 256) fadein();
   037C 3ArA0s01            795 	ld	a,(#_vbicount+0)
   037F D6 00               796 	sub	a,#0x00
   0381 3ArA1s01            797 	ld	a,(#_vbicount+1)
   0384 DE 01               798 	sbc	a,#0x01
   0386 F2r90s03            799 	jp	P,00104$
   0389 C5                  800 	push	bc
   038A CDr04s02            801 	call	_fadein
   038D C1                  802 	pop	bc
   038E 18 18               803 	jr	00105$
   0390                     804 00104$:
                            805 ;demo.c:171: vdp_register(VDP_VOFFSET,sintab[vbicount & 255]);
   0390 21rA0s01            806 	ld	hl,#_vbicount + 0
   0393 5E                  807 	ld	e,(hl)
   0394 16 00               808 	ld	d,#0x00
   0396 21r00s00            809 	ld	hl,#_sintab
   0399 19                  810 	add	hl,de
   039A 7E                  811 	ld	a,(hl)
   039B 47                  812 	ld	b,a
   039C C5                  813 	push	bc
   039D C5                  814 	push	bc
   039E 33                  815 	inc	sp
   039F 3E 17               816 	ld	a,#0x17
   03A1 F5                  817 	push	af
   03A2 33                  818 	inc	sp
   03A3 CDr00s00            819 	call	_vdp_register
   03A6 F1                  820 	pop	af
   03A7 C1                  821 	pop	bc
   03A8                     822 00105$:
                            823 ;demo.c:174: if(space())
   03A8 C5                  824 	push	bc
   03A9 21 08 01            825 	ld	hl,#0x0108
   03AC E5                  826 	push	hl
   03AD CDr00s00            827 	call	_ispressed
   03B0 F1                  828 	pop	af
   03B1 7D                  829 	ld	a,l
   03B2 C1                  830 	pop	bc
   03B3 47                  831 	ld	b,a
   03B4 B7                  832 	or	a,a
   03B5 28 C0               833 	jr	Z,00108$
                            834 ;demo.c:175: quit=1;
   03B7 0E 01               835 	ld	c,#0x01
   03B9 18 BC               836 	jr	00108$
   03BB                     837 00110$:
                            838 ;demo.c:178: getchar();
   03BB CDr00s00            839 	call	_getchar
                            840 ;demo.c:180: waitVB();
   03BE 76                  841 		halt 
                            842 ;demo.c:181: uninstall_isr();
   03BF CDr00s00            843 	call	_uninstall_isr
                            844 ;demo.c:182: PLY_Stop();
   03C2 CDr00s00            845 	call	_PLY_Stop
                            846 ;demo.c:183: PLY_SendRegisters();
   03C5 CDr00s00            847 	call	_PLY_SendRegisters
                            848 ;demo.c:185: screen(0);
   03C8 3E 00               849 	ld	a,#0x00
   03CA F5                  850 	push	af
   03CB 33                  851 	inc	sp
   03CC CDr00s00            852 	call	_screen
   03CF 33                  853 	inc	sp
                            854 ;demo.c:187: puts("demo exit\r\n\r\n");
   03D0 21r1Ds04            855 	ld	hl,#__str_5
   03D3 E5                  856 	push	hl
   03D4 CDr00s00            857 	call	_puts
   03D7 F1                  858 	pop	af
                            859 ;demo.c:189: exit(0);
   03D8 3E 00               860 	ld	a,#0x00
   03DA F5                  861 	push	af
   03DB 33                  862 	inc	sp
   03DC CDr00s00            863 	call	_exit
   03DF 33                  864 	inc	sp
   03E0 C9                  865 	ret
   03E1                     866 _main_end::
   03E1                     867 __str_0:
   03E1 64 65 6D 6F 20 69   868 	.ascii "demo init"
        6E 69 74
   03EA 0D                  869 	.db 0x0D
   03EB 0A                  870 	.db 0x0A
   03EC 0D                  871 	.db 0x0D
   03ED 0A                  872 	.db 0x0A
   03EE 00                  873 	.db 0x00
   03EF                     874 __str_1:
   03EF 6D 75 73 69 63 20   875 	.ascii "music init..."
        69 6E 69 74 2E 2E
        2E
   03FC 00                  876 	.db 0x00
   03FD                     877 __str_2:
   03FD 64 6F 6E 65 2E      878 	.ascii "done."
   0402 0A                  879 	.db 0x0A
   0403 0A                  880 	.db 0x0A
   0404 00                  881 	.db 0x00
   0405                     882 __str_3:
   0405 4B 45 54 54 55 31   883 	.ascii "KETTU16 PL5"
        36 20 50 4C 35
   0410 00                  884 	.db 0x00
   0411                     885 __str_4:
   0411 4B 45 54 54 55 31   886 	.ascii "KETTU16 SC5"
        36 20 53 43 35
   041C 00                  887 	.db 0x00
   041D                     888 __str_5:
   041D 64 65 6D 6F 20 65   889 	.ascii "demo exit"
        78 69 74
   0426 0D                  890 	.db 0x0D
   0427 0A                  891 	.db 0x0A
   0428 0D                  892 	.db 0x0D
   0429 0A                  893 	.db 0x0A
   042A 00                  894 	.db 0x00
                            895 	.area _CODE
                            896 	.area _CABS
