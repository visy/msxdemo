                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Mar 22 2009) (Mac OS X i386)
                              4 ; This file was generated Mon Feb 12 14:42:39 2018
                              5 ;--------------------------------------------------------
                              6 	.module demo
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _do_blocks
                             14 	.globl _do_ymmm
                             15 	.globl _fadein
                             16 	.globl _raw_load
                             17 	.globl _pause
                             18 	.globl _pal_load
                             19 	.globl _scratch_clear
                             20 	.globl _ge5_load
                             21 	.globl _my_isr
                             22 	.globl _flof
                             23 	.globl _btab
                             24 	.globl _bty
                             25 	.globl _btx
                             26 	.globl _bsy
                             27 	.globl _bsx
                             28 	.globl _block_init
                             29 	.globl _cc
                             30 	.globl _yo
                             31 	.globl _tick
                             32 	.globl _vbicount
                             33 	.globl _sample_buf
                             34 	.globl _block_palette
                             35 	.globl _cur_palette
                             36 	.globl _scratch
                             37 	.globl _packbuffer
                             38 	.globl _sintab
                             39 	.globl _sintabx
                             40 ;--------------------------------------------------------
                             41 ; special function registers
                             42 ;--------------------------------------------------------
                             43 ;--------------------------------------------------------
                             44 ;  ram data
                             45 ;--------------------------------------------------------
                             46 	.area _DATA
   0000                      47 _sintab::
   0000                      48 	.ds 256
   0100                      49 _packbuffer::
   0100                      50 	.ds 5000
   1488                      51 _scratch::
   1488                      52 	.ds 128
   1508                      53 _cur_palette::
   1508                      54 	.ds 32
   1528                      55 _block_palette::
   1528                      56 	.ds 32
   1548                      57 _sample_buf::
   1548                      58 	.ds 32000
   9248                      59 _vbicount::
   9248                      60 	.ds 2
   924A                      61 _tick::
   924A                      62 	.ds 2
   924C                      63 _yo::
   924C                      64 	.ds 1
   924D                      65 _cc::
   924D                      66 	.ds 1
   924E                      67 _flipper:
   924E                      68 	.ds 2
   9250                      69 _ymmmf:
   9250                      70 	.ds 2
   9252                      71 _block_init::
   9252                      72 	.ds 1
   9253                      73 _bsx::
   9253                      74 	.ds 2
   9255                      75 _bsy::
   9255                      76 	.ds 2
   9257                      77 _btx::
   9257                      78 	.ds 2
   9259                      79 _bty::
   9259                      80 	.ds 2
   925B                      81 _btab::
   925B                      82 	.ds 32
   927B                      83 _flof::
   927B                      84 	.ds 2
                             85 ;--------------------------------------------------------
                             86 ; overlayable items in  ram 
                             87 ;--------------------------------------------------------
                             88 	.area _OVERLAY
                             89 ;--------------------------------------------------------
                             90 ; external initialized ram data
                             91 ;--------------------------------------------------------
                             92 ;--------------------------------------------------------
                             93 ; global & static initialisations
                             94 ;--------------------------------------------------------
                             95 	.area _HOME
                             96 	.area _GSINIT
                             97 	.area _GSFINAL
                             98 	.area _GSINIT
                             99 ;types.h:27: signed char sintab[256]={
   0000 21r00s00            100 	ld	hl,#_sintab
   0003 CDr00s00            101 	call	__initrleblock
   0006 3B                  102 	.db	59
   0007 00 03 06 09 0C 0F   103 	.db	0x00, 0x03, 0x06, 0x09, 0x0C, 0x0F, 0x12, 0x15
        12 15
   000F 18 1B 1E 21 24 27   104 	.db	0x18, 0x1B, 0x1E, 0x21, 0x24, 0x27, 0x2A, 0x2D
        2A 2D
   0017 30 33 36 39 3B 3E   105 	.db	0x30, 0x33, 0x36, 0x39, 0x3B, 0x3E, 0x41, 0x43
        41 43
   001F 46 49 4B 4E 50 52   106 	.db	0x46, 0x49, 0x4B, 0x4E, 0x50, 0x52, 0x55, 0x57
        55 57
   0027 59 5B 5E 60 62 64   107 	.db	0x59, 0x5B, 0x5E, 0x60, 0x62, 0x64, 0x66, 0x67
        66 67
   002F 69 6B 6C 6E 70 71   108 	.db	0x69, 0x6B, 0x6C, 0x6E, 0x70, 0x71, 0x72, 0x74
        72 74
   0037 75 76 77 78 79 7A   109 	.db	0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7B
        7B 7B
   003F 7C 7D 7D            110 	.db	0x7C, 0x7D, 0x7D
   0042 FB 7E               111 	.db	#-5,#0x7E
   0044 01                  112 	.db	1
   0045 7F                  113 	.db	0x7F
   0046 FB 7E               114 	.db	#-5,#0x7E
   0048 75                  115 	.db	117
   0049 7D 7D 7C 7B 7B 7A   116 	.db	0x7D, 0x7D, 0x7C, 0x7B, 0x7B, 0x7A, 0x79, 0x78
        79 78
   0051 77 76 75 74 72 71   117 	.db	0x77, 0x76, 0x75, 0x74, 0x72, 0x71, 0x70, 0x6E
        70 6E
   0059 6C 6B 69 67 66 64   118 	.db	0x6C, 0x6B, 0x69, 0x67, 0x66, 0x64, 0x62, 0x60
        62 60
   0061 5E 5B 59 57 55 52   119 	.db	0x5E, 0x5B, 0x59, 0x57, 0x55, 0x52, 0x50, 0x4E
        50 4E
   0069 4B 49 46 43 41 3E   120 	.db	0x4B, 0x49, 0x46, 0x43, 0x41, 0x3E, 0x3B, 0x39
        3B 39
   0071 36 33 30 2D 2A 27   121 	.db	0x36, 0x33, 0x30, 0x2D, 0x2A, 0x27, 0x24, 0x21
        24 21
   0079 1E 1B 18 15 12 0F   122 	.db	0x1E, 0x1B, 0x18, 0x15, 0x12, 0x0F, 0x0C, 0x09
        0C 09
   0081 06 03 00 FD FA F7   123 	.db	0x06, 0x03, 0x00, 0xFD, 0xFA, 0xF7, 0xF4, 0xF1
        F4 F1
   0089 EE EB E8 E5 E2 DF   124 	.db	0xEE, 0xEB, 0xE8, 0xE5, 0xE2, 0xDF, 0xDC, 0xD9
        DC D9
   0091 D6 D3 D0 CD CA C7   125 	.db	0xD6, 0xD3, 0xD0, 0xCD, 0xCA, 0xC7, 0xC5, 0xC2
        C5 C2
   0099 BF BD BA B7 B5 B2   126 	.db	0xBF, 0xBD, 0xBA, 0xB7, 0xB5, 0xB2, 0xB0, 0xAE
        B0 AE
   00A1 AB A9 A7 A5 A2 A0   127 	.db	0xAB, 0xA9, 0xA7, 0xA5, 0xA2, 0xA0, 0x9E, 0x9C
        9E 9C
   00A9 9A 99 97 95 94 92   128 	.db	0x9A, 0x99, 0x97, 0x95, 0x94, 0x92, 0x90, 0x8F
        90 8F
   00B1 8E 8C 8B 8A 89 88   129 	.db	0x8E, 0x8C, 0x8B, 0x8A, 0x89, 0x88, 0x87, 0x86
        87 86
   00B9 85 85 84 83 83      130 	.db	0x85, 0x85, 0x84, 0x83, 0x83
   00BE FB 82               131 	.db	#-5,#0x82
   00C0 01                  132 	.db	1
   00C1 81                  133 	.db	0x81
   00C2 FB 82               134 	.db	#-5,#0x82
   00C4 3A                  135 	.db	58
   00C5 83 83 84 85 85 86   136 	.db	0x83, 0x83, 0x84, 0x85, 0x85, 0x86, 0x87, 0x88
        87 88
   00CD 89 8A 8B 8C 8E 8F   137 	.db	0x89, 0x8A, 0x8B, 0x8C, 0x8E, 0x8F, 0x90, 0x92
        90 92
   00D5 94 95 97 99 9A 9C   138 	.db	0x94, 0x95, 0x97, 0x99, 0x9A, 0x9C, 0x9E, 0xA0
        9E A0
   00DD A2 A5 A7 A9 AB AE   139 	.db	0xA2, 0xA5, 0xA7, 0xA9, 0xAB, 0xAE, 0xB0, 0xB2
        B0 B2
   00E5 B5 B7 BA BD BF C2   140 	.db	0xB5, 0xB7, 0xBA, 0xBD, 0xBF, 0xC2, 0xC5, 0xC7
        C5 C7
   00ED CA CD D0 D3 D6 D9   141 	.db	0xCA, 0xCD, 0xD0, 0xD3, 0xD6, 0xD9, 0xDC, 0xDF
        DC DF
   00F5 E2 E5 E8 EB EE F1   142 	.db	0xE2, 0xE5, 0xE8, 0xEB, 0xEE, 0xF1, 0xF4, 0xF7
        F4 F7
   00FD FA FD               143 	.db	0xFA, 0xFD
   00FF 00                  144 	.db	0
                            145 ;demo.c:36: uint8_t packbuffer[5000] = {0};
   0100 21r00s01            146 	ld	hl,#_packbuffer
   0103 CDr00s00            147 	call	__initrleblock
   0106 81 00               148 	.db	#-127,#0x00
   0108 81 00               149 	.db	#-127,#0x00
   010A 81 00               150 	.db	#-127,#0x00
   010C 81 00               151 	.db	#-127,#0x00
   010E 81 00               152 	.db	#-127,#0x00
   0110 81 00               153 	.db	#-127,#0x00
   0112 81 00               154 	.db	#-127,#0x00
   0114 81 00               155 	.db	#-127,#0x00
   0116 81 00               156 	.db	#-127,#0x00
   0118 81 00               157 	.db	#-127,#0x00
   011A 81 00               158 	.db	#-127,#0x00
   011C 81 00               159 	.db	#-127,#0x00
   011E 81 00               160 	.db	#-127,#0x00
   0120 81 00               161 	.db	#-127,#0x00
   0122 81 00               162 	.db	#-127,#0x00
   0124 81 00               163 	.db	#-127,#0x00
   0126 81 00               164 	.db	#-127,#0x00
   0128 81 00               165 	.db	#-127,#0x00
   012A 81 00               166 	.db	#-127,#0x00
   012C 81 00               167 	.db	#-127,#0x00
   012E 81 00               168 	.db	#-127,#0x00
   0130 81 00               169 	.db	#-127,#0x00
   0132 81 00               170 	.db	#-127,#0x00
   0134 81 00               171 	.db	#-127,#0x00
   0136 81 00               172 	.db	#-127,#0x00
   0138 81 00               173 	.db	#-127,#0x00
   013A 81 00               174 	.db	#-127,#0x00
   013C 81 00               175 	.db	#-127,#0x00
   013E 81 00               176 	.db	#-127,#0x00
   0140 81 00               177 	.db	#-127,#0x00
   0142 81 00               178 	.db	#-127,#0x00
   0144 81 00               179 	.db	#-127,#0x00
   0146 81 00               180 	.db	#-127,#0x00
   0148 81 00               181 	.db	#-127,#0x00
   014A 81 00               182 	.db	#-127,#0x00
   014C 81 00               183 	.db	#-127,#0x00
   014E 81 00               184 	.db	#-127,#0x00
   0150 81 00               185 	.db	#-127,#0x00
   0152 81 00               186 	.db	#-127,#0x00
   0154 D1 00               187 	.db	#-47,#0x00
   0156 00                  188 	.db	0
                            189 ;demo.c:42: uint8_t sample_buf[32000] = {0};
   0157 21r48s15            190 	ld	hl,#_sample_buf
   015A CDr00s00            191 	call	__initrleblock
   015D 81 00               192 	.db	#-127,#0x00
   015F 81 00               193 	.db	#-127,#0x00
   0161 81 00               194 	.db	#-127,#0x00
   0163 81 00               195 	.db	#-127,#0x00
   0165 81 00               196 	.db	#-127,#0x00
   0167 81 00               197 	.db	#-127,#0x00
   0169 81 00               198 	.db	#-127,#0x00
   016B 81 00               199 	.db	#-127,#0x00
   016D 81 00               200 	.db	#-127,#0x00
   016F 81 00               201 	.db	#-127,#0x00
   0171 81 00               202 	.db	#-127,#0x00
   0173 81 00               203 	.db	#-127,#0x00
   0175 81 00               204 	.db	#-127,#0x00
   0177 81 00               205 	.db	#-127,#0x00
   0179 81 00               206 	.db	#-127,#0x00
   017B 81 00               207 	.db	#-127,#0x00
   017D 81 00               208 	.db	#-127,#0x00
   017F 81 00               209 	.db	#-127,#0x00
   0181 81 00               210 	.db	#-127,#0x00
   0183 81 00               211 	.db	#-127,#0x00
   0185 81 00               212 	.db	#-127,#0x00
   0187 81 00               213 	.db	#-127,#0x00
   0189 81 00               214 	.db	#-127,#0x00
   018B 81 00               215 	.db	#-127,#0x00
   018D 81 00               216 	.db	#-127,#0x00
   018F 81 00               217 	.db	#-127,#0x00
   0191 81 00               218 	.db	#-127,#0x00
   0193 81 00               219 	.db	#-127,#0x00
   0195 81 00               220 	.db	#-127,#0x00
   0197 81 00               221 	.db	#-127,#0x00
   0199 81 00               222 	.db	#-127,#0x00
   019B 81 00               223 	.db	#-127,#0x00
   019D 81 00               224 	.db	#-127,#0x00
   019F 81 00               225 	.db	#-127,#0x00
   01A1 81 00               226 	.db	#-127,#0x00
   01A3 81 00               227 	.db	#-127,#0x00
   01A5 81 00               228 	.db	#-127,#0x00
   01A7 81 00               229 	.db	#-127,#0x00
   01A9 81 00               230 	.db	#-127,#0x00
   01AB 81 00               231 	.db	#-127,#0x00
   01AD 81 00               232 	.db	#-127,#0x00
   01AF 81 00               233 	.db	#-127,#0x00
   01B1 81 00               234 	.db	#-127,#0x00
   01B3 81 00               235 	.db	#-127,#0x00
   01B5 81 00               236 	.db	#-127,#0x00
   01B7 81 00               237 	.db	#-127,#0x00
   01B9 81 00               238 	.db	#-127,#0x00
   01BB 81 00               239 	.db	#-127,#0x00
   01BD 81 00               240 	.db	#-127,#0x00
   01BF 81 00               241 	.db	#-127,#0x00
   01C1 81 00               242 	.db	#-127,#0x00
   01C3 81 00               243 	.db	#-127,#0x00
   01C5 81 00               244 	.db	#-127,#0x00
   01C7 81 00               245 	.db	#-127,#0x00
   01C9 81 00               246 	.db	#-127,#0x00
   01CB 81 00               247 	.db	#-127,#0x00
   01CD 81 00               248 	.db	#-127,#0x00
   01CF 81 00               249 	.db	#-127,#0x00
   01D1 81 00               250 	.db	#-127,#0x00
   01D3 81 00               251 	.db	#-127,#0x00
   01D5 81 00               252 	.db	#-127,#0x00
   01D7 81 00               253 	.db	#-127,#0x00
   01D9 81 00               254 	.db	#-127,#0x00
   01DB 81 00               255 	.db	#-127,#0x00
   01DD 81 00               256 	.db	#-127,#0x00
   01DF 81 00               257 	.db	#-127,#0x00
   01E1 81 00               258 	.db	#-127,#0x00
   01E3 81 00               259 	.db	#-127,#0x00
   01E5 81 00               260 	.db	#-127,#0x00
   01E7 81 00               261 	.db	#-127,#0x00
   01E9 81 00               262 	.db	#-127,#0x00
   01EB 81 00               263 	.db	#-127,#0x00
   01ED 81 00               264 	.db	#-127,#0x00
   01EF 81 00               265 	.db	#-127,#0x00
   01F1 81 00               266 	.db	#-127,#0x00
   01F3 81 00               267 	.db	#-127,#0x00
   01F5 81 00               268 	.db	#-127,#0x00
   01F7 81 00               269 	.db	#-127,#0x00
   01F9 81 00               270 	.db	#-127,#0x00
   01FB 81 00               271 	.db	#-127,#0x00
   01FD 81 00               272 	.db	#-127,#0x00
   01FF 81 00               273 	.db	#-127,#0x00
   0201 81 00               274 	.db	#-127,#0x00
   0203 81 00               275 	.db	#-127,#0x00
   0205 81 00               276 	.db	#-127,#0x00
   0207 81 00               277 	.db	#-127,#0x00
   0209 81 00               278 	.db	#-127,#0x00
   020B 81 00               279 	.db	#-127,#0x00
   020D 81 00               280 	.db	#-127,#0x00
   020F 81 00               281 	.db	#-127,#0x00
   0211 81 00               282 	.db	#-127,#0x00
   0213 81 00               283 	.db	#-127,#0x00
   0215 81 00               284 	.db	#-127,#0x00
   0217 81 00               285 	.db	#-127,#0x00
   0219 81 00               286 	.db	#-127,#0x00
   021B 81 00               287 	.db	#-127,#0x00
   021D 81 00               288 	.db	#-127,#0x00
   021F 81 00               289 	.db	#-127,#0x00
   0221 81 00               290 	.db	#-127,#0x00
   0223 81 00               291 	.db	#-127,#0x00
   0225 81 00               292 	.db	#-127,#0x00
   0227 81 00               293 	.db	#-127,#0x00
   0229 81 00               294 	.db	#-127,#0x00
   022B 81 00               295 	.db	#-127,#0x00
   022D 81 00               296 	.db	#-127,#0x00
   022F 81 00               297 	.db	#-127,#0x00
   0231 81 00               298 	.db	#-127,#0x00
   0233 81 00               299 	.db	#-127,#0x00
   0235 81 00               300 	.db	#-127,#0x00
   0237 81 00               301 	.db	#-127,#0x00
   0239 81 00               302 	.db	#-127,#0x00
   023B 81 00               303 	.db	#-127,#0x00
   023D 81 00               304 	.db	#-127,#0x00
   023F 81 00               305 	.db	#-127,#0x00
   0241 81 00               306 	.db	#-127,#0x00
   0243 81 00               307 	.db	#-127,#0x00
   0245 81 00               308 	.db	#-127,#0x00
   0247 81 00               309 	.db	#-127,#0x00
   0249 81 00               310 	.db	#-127,#0x00
   024B 81 00               311 	.db	#-127,#0x00
   024D 81 00               312 	.db	#-127,#0x00
   024F 81 00               313 	.db	#-127,#0x00
   0251 81 00               314 	.db	#-127,#0x00
   0253 81 00               315 	.db	#-127,#0x00
   0255 81 00               316 	.db	#-127,#0x00
   0257 81 00               317 	.db	#-127,#0x00
   0259 81 00               318 	.db	#-127,#0x00
   025B 81 00               319 	.db	#-127,#0x00
   025D 81 00               320 	.db	#-127,#0x00
   025F 81 00               321 	.db	#-127,#0x00
   0261 81 00               322 	.db	#-127,#0x00
   0263 81 00               323 	.db	#-127,#0x00
   0265 81 00               324 	.db	#-127,#0x00
   0267 81 00               325 	.db	#-127,#0x00
   0269 81 00               326 	.db	#-127,#0x00
   026B 81 00               327 	.db	#-127,#0x00
   026D 81 00               328 	.db	#-127,#0x00
   026F 81 00               329 	.db	#-127,#0x00
   0271 81 00               330 	.db	#-127,#0x00
   0273 81 00               331 	.db	#-127,#0x00
   0275 81 00               332 	.db	#-127,#0x00
   0277 81 00               333 	.db	#-127,#0x00
   0279 81 00               334 	.db	#-127,#0x00
   027B 81 00               335 	.db	#-127,#0x00
   027D 81 00               336 	.db	#-127,#0x00
   027F 81 00               337 	.db	#-127,#0x00
   0281 81 00               338 	.db	#-127,#0x00
   0283 81 00               339 	.db	#-127,#0x00
   0285 81 00               340 	.db	#-127,#0x00
   0287 81 00               341 	.db	#-127,#0x00
   0289 81 00               342 	.db	#-127,#0x00
   028B 81 00               343 	.db	#-127,#0x00
   028D 81 00               344 	.db	#-127,#0x00
   028F 81 00               345 	.db	#-127,#0x00
   0291 81 00               346 	.db	#-127,#0x00
   0293 81 00               347 	.db	#-127,#0x00
   0295 81 00               348 	.db	#-127,#0x00
   0297 81 00               349 	.db	#-127,#0x00
   0299 81 00               350 	.db	#-127,#0x00
   029B 81 00               351 	.db	#-127,#0x00
   029D 81 00               352 	.db	#-127,#0x00
   029F 81 00               353 	.db	#-127,#0x00
   02A1 81 00               354 	.db	#-127,#0x00
   02A3 81 00               355 	.db	#-127,#0x00
   02A5 81 00               356 	.db	#-127,#0x00
   02A7 81 00               357 	.db	#-127,#0x00
   02A9 81 00               358 	.db	#-127,#0x00
   02AB 81 00               359 	.db	#-127,#0x00
   02AD 81 00               360 	.db	#-127,#0x00
   02AF 81 00               361 	.db	#-127,#0x00
   02B1 81 00               362 	.db	#-127,#0x00
   02B3 81 00               363 	.db	#-127,#0x00
   02B5 81 00               364 	.db	#-127,#0x00
   02B7 81 00               365 	.db	#-127,#0x00
   02B9 81 00               366 	.db	#-127,#0x00
   02BB 81 00               367 	.db	#-127,#0x00
   02BD 81 00               368 	.db	#-127,#0x00
   02BF 81 00               369 	.db	#-127,#0x00
   02C1 81 00               370 	.db	#-127,#0x00
   02C3 81 00               371 	.db	#-127,#0x00
   02C5 81 00               372 	.db	#-127,#0x00
   02C7 81 00               373 	.db	#-127,#0x00
   02C9 81 00               374 	.db	#-127,#0x00
   02CB 81 00               375 	.db	#-127,#0x00
   02CD 81 00               376 	.db	#-127,#0x00
   02CF 81 00               377 	.db	#-127,#0x00
   02D1 81 00               378 	.db	#-127,#0x00
   02D3 81 00               379 	.db	#-127,#0x00
   02D5 81 00               380 	.db	#-127,#0x00
   02D7 81 00               381 	.db	#-127,#0x00
   02D9 81 00               382 	.db	#-127,#0x00
   02DB 81 00               383 	.db	#-127,#0x00
   02DD 81 00               384 	.db	#-127,#0x00
   02DF 81 00               385 	.db	#-127,#0x00
   02E1 81 00               386 	.db	#-127,#0x00
   02E3 81 00               387 	.db	#-127,#0x00
   02E5 81 00               388 	.db	#-127,#0x00
   02E7 81 00               389 	.db	#-127,#0x00
   02E9 81 00               390 	.db	#-127,#0x00
   02EB 81 00               391 	.db	#-127,#0x00
   02ED 81 00               392 	.db	#-127,#0x00
   02EF 81 00               393 	.db	#-127,#0x00
   02F1 81 00               394 	.db	#-127,#0x00
   02F3 81 00               395 	.db	#-127,#0x00
   02F5 81 00               396 	.db	#-127,#0x00
   02F7 81 00               397 	.db	#-127,#0x00
   02F9 81 00               398 	.db	#-127,#0x00
   02FB 81 00               399 	.db	#-127,#0x00
   02FD 81 00               400 	.db	#-127,#0x00
   02FF 81 00               401 	.db	#-127,#0x00
   0301 81 00               402 	.db	#-127,#0x00
   0303 81 00               403 	.db	#-127,#0x00
   0305 81 00               404 	.db	#-127,#0x00
   0307 81 00               405 	.db	#-127,#0x00
   0309 81 00               406 	.db	#-127,#0x00
   030B 81 00               407 	.db	#-127,#0x00
   030D 81 00               408 	.db	#-127,#0x00
   030F 81 00               409 	.db	#-127,#0x00
   0311 81 00               410 	.db	#-127,#0x00
   0313 81 00               411 	.db	#-127,#0x00
   0315 81 00               412 	.db	#-127,#0x00
   0317 81 00               413 	.db	#-127,#0x00
   0319 81 00               414 	.db	#-127,#0x00
   031B 81 00               415 	.db	#-127,#0x00
   031D 81 00               416 	.db	#-127,#0x00
   031F 81 00               417 	.db	#-127,#0x00
   0321 81 00               418 	.db	#-127,#0x00
   0323 81 00               419 	.db	#-127,#0x00
   0325 81 00               420 	.db	#-127,#0x00
   0327 81 00               421 	.db	#-127,#0x00
   0329 81 00               422 	.db	#-127,#0x00
   032B 81 00               423 	.db	#-127,#0x00
   032D 81 00               424 	.db	#-127,#0x00
   032F 81 00               425 	.db	#-127,#0x00
   0331 81 00               426 	.db	#-127,#0x00
   0333 81 00               427 	.db	#-127,#0x00
   0335 81 00               428 	.db	#-127,#0x00
   0337 81 00               429 	.db	#-127,#0x00
   0339 81 00               430 	.db	#-127,#0x00
   033B 81 00               431 	.db	#-127,#0x00
   033D 81 00               432 	.db	#-127,#0x00
   033F 81 00               433 	.db	#-127,#0x00
   0341 81 00               434 	.db	#-127,#0x00
   0343 81 00               435 	.db	#-127,#0x00
   0345 81 00               436 	.db	#-127,#0x00
   0347 81 00               437 	.db	#-127,#0x00
   0349 81 00               438 	.db	#-127,#0x00
   034B 81 00               439 	.db	#-127,#0x00
   034D 81 00               440 	.db	#-127,#0x00
   034F 81 00               441 	.db	#-127,#0x00
   0351 81 00               442 	.db	#-127,#0x00
   0353 85 00               443 	.db	#-123,#0x00
   0355 00                  444 	.db	0
                            445 ;demo.c:44: volatile int vbicount=0;
   0356 FD 21r48s92         446 	ld	iy,#_vbicount
   035A FD 36 00 00         447 	ld	0 (iy),#0x00
   035E FD 21r48s92         448 	ld	iy,#_vbicount
   0362 FD 36 01 00         449 	ld	1 (iy),#0x00
                            450 ;demo.c:45: volatile int tick=0;
   0366 FD 21r4As92         451 	ld	iy,#_tick
   036A FD 36 00 00         452 	ld	0 (iy),#0x00
   036E FD 21r4As92         453 	ld	iy,#_tick
   0372 FD 36 01 00         454 	ld	1 (iy),#0x00
                            455 ;demo.c:188: uint8_t yo = 0;
   0376 FD 21r4Cs92         456 	ld	iy,#_yo
   037A FD 36 00 00         457 	ld	0 (iy),#0x00
                            458 ;demo.c:189: uint8_t cc = 0;
   037E FD 21r4Ds92         459 	ld	iy,#_cc
   0382 FD 36 00 00         460 	ld	0 (iy),#0x00
                            461 ;demo.c:190: static int flipper = 0;
   0386 FD 21r4Es92         462 	ld	iy,#_flipper
   038A FD 36 00 00         463 	ld	0 (iy),#0x00
   038E FD 21r4Es92         464 	ld	iy,#_flipper
   0392 FD 36 01 00         465 	ld	1 (iy),#0x00
                            466 ;demo.c:191: static int ymmmf = 0;
   0396 FD 21r50s92         467 	ld	iy,#_ymmmf
   039A FD 36 00 00         468 	ld	0 (iy),#0x00
   039E FD 21r50s92         469 	ld	iy,#_ymmmf
   03A2 FD 36 01 00         470 	ld	1 (iy),#0x00
                            471 ;demo.c:223: char block_init = 0;
   03A6 FD 21r52s92         472 	ld	iy,#_block_init
   03AA FD 36 00 00         473 	ld	0 (iy),#0x00
                            474 ;demo.c:225: int bsx = 0;
   03AE FD 21r53s92         475 	ld	iy,#_bsx
   03B2 FD 36 00 00         476 	ld	0 (iy),#0x00
   03B6 FD 21r53s92         477 	ld	iy,#_bsx
   03BA FD 36 01 00         478 	ld	1 (iy),#0x00
                            479 ;demo.c:226: int bsy = 0;
   03BE FD 21r55s92         480 	ld	iy,#_bsy
   03C2 FD 36 00 00         481 	ld	0 (iy),#0x00
   03C6 FD 21r55s92         482 	ld	iy,#_bsy
   03CA FD 36 01 00         483 	ld	1 (iy),#0x00
                            484 ;demo.c:227: int btx = 0;
   03CE FD 21r57s92         485 	ld	iy,#_btx
   03D2 FD 36 00 00         486 	ld	0 (iy),#0x00
   03D6 FD 21r57s92         487 	ld	iy,#_btx
   03DA FD 36 01 00         488 	ld	1 (iy),#0x00
                            489 ;demo.c:228: int bty = 0;
   03DE FD 21r59s92         490 	ld	iy,#_bty
   03E2 FD 36 00 00         491 	ld	0 (iy),#0x00
   03E6 FD 21r59s92         492 	ld	iy,#_bty
   03EA FD 36 01 00         493 	ld	1 (iy),#0x00
                            494 ;demo.c:230: int btab[16] = {0};
   03EE 21r5Bs92            495 	ld	hl,#_btab
   03F1 CDr00s00            496 	call	__initrleblock
   03F4 E0 00               497 	.db	#-32,#0x00
   03F6 00                  498 	.db	0
                            499 ;demo.c:232: int flof = 0;
   03F7 FD 21r7Bs92         500 	ld	iy,#_flof
   03FB FD 36 00 00         501 	ld	0 (iy),#0x00
   03FF FD 21r7Bs92         502 	ld	iy,#_flof
   0403 FD 36 01 00         503 	ld	1 (iy),#0x00
                            504 ;--------------------------------------------------------
                            505 ; Home
                            506 ;--------------------------------------------------------
                            507 	.area _HOME
                            508 	.area _HOME
                            509 ;--------------------------------------------------------
                            510 ; code
                            511 ;--------------------------------------------------------
                            512 	.area _CODE
                            513 ;demo.c:51: void my_isr(void) interrupt
                            514 ;	---------------------------------
                            515 ; Function my_isr
                            516 ; ---------------------------------
   0000                     517 _my_isr_start::
   0000                     518 _my_isr:
   0000 F5                  519 	push	af
   0001 C5                  520 	push	bc
   0002 D5                  521 	push	de
   0003 E5                  522 	push	hl
   0004 FD E5               523 	push	iy
                            524 ;demo.c:53: DI;
   0006 F3                  525 		di 
                            526 ;demo.c:54: READ_VDP_STATUS;
   0007 DB 99               527 		in a,(#0x99) 
                            528 ;demo.c:56: PLY_Play();
   0009 CDr00s00            529 	call	_PLY_Play
                            530 ;demo.c:57: PLY_SendRegisters();
   000C CDr00s00            531 	call	_PLY_SendRegisters
                            532 ;demo.c:59: vbicount++;
   000F FD 21r48s92         533 	ld	iy,#_vbicount
   0013 FD 34 00            534 	inc	0 (iy)
   0016 20 07               535 	jr	NZ,00103$
   0018 FD 21r48s92         536 	ld	iy,#_vbicount
   001C FD 34 01            537 	inc	1 (iy)
   001F                     538 00103$:
                            539 ;demo.c:60: tick++;
   001F FD 21r4As92         540 	ld	iy,#_tick
   0023 FD 34 00            541 	inc	0 (iy)
   0026 20 07               542 	jr	NZ,00104$
   0028 FD 21r4As92         543 	ld	iy,#_tick
   002C FD 34 01            544 	inc	1 (iy)
   002F                     545 00104$:
                            546 ;demo.c:62: EI;
   002F FB                  547 		ei 
   0030 FD E1               548 	pop	iy
   0032 E1                  549 	pop	hl
   0033 D1                  550 	pop	de
   0034 C1                  551 	pop	bc
   0035 F1                  552 	pop	af
   0036 ED 4D               553 	reti
   0038                     554 _my_isr_end::
   0038                     555 _sintabx:
   0038 78 00               556 	.dw #0x0078
   003A 7A 00               557 	.dw #0x007A
   003C 7D 00               558 	.dw #0x007D
   003E 80 00               559 	.dw #0x0080
   0040 83 00               560 	.dw #0x0083
   0042 86 00               561 	.dw #0x0086
   0044 89 00               562 	.dw #0x0089
   0046 8C 00               563 	.dw #0x008C
   0048 8F 00               564 	.dw #0x008F
   004A 92 00               565 	.dw #0x0092
   004C 95 00               566 	.dw #0x0095
   004E 98 00               567 	.dw #0x0098
   0050 9A 00               568 	.dw #0x009A
   0052 9D 00               569 	.dw #0x009D
   0054 A0 00               570 	.dw #0x00A0
   0056 A3 00               571 	.dw #0x00A3
   0058 A5 00               572 	.dw #0x00A5
   005A A8 00               573 	.dw #0x00A8
   005C AB 00               574 	.dw #0x00AB
   005E AD 00               575 	.dw #0x00AD
   0060 B0 00               576 	.dw #0x00B0
   0062 B3 00               577 	.dw #0x00B3
   0064 B5 00               578 	.dw #0x00B5
   0066 B8 00               579 	.dw #0x00B8
   0068 BA 00               580 	.dw #0x00BA
   006A BD 00               581 	.dw #0x00BD
   006C BF 00               582 	.dw #0x00BF
   006E C1 00               583 	.dw #0x00C1
   0070 C4 00               584 	.dw #0x00C4
   0072 C6 00               585 	.dw #0x00C6
   0074 C8 00               586 	.dw #0x00C8
   0076 CA 00               587 	.dw #0x00CA
   0078 CC 00               588 	.dw #0x00CC
   007A CE 00               589 	.dw #0x00CE
   007C D0 00               590 	.dw #0x00D0
   007E D2 00               591 	.dw #0x00D2
   0080 D4 00               592 	.dw #0x00D4
   0082 D6 00               593 	.dw #0x00D6
   0084 D8 00               594 	.dw #0x00D8
   0086 DA 00               595 	.dw #0x00DA
   0088 DB 00               596 	.dw #0x00DB
   008A DD 00               597 	.dw #0x00DD
   008C DE 00               598 	.dw #0x00DE
   008E E0 00               599 	.dw #0x00E0
   0090 E1 00               600 	.dw #0x00E1
   0092 E3 00               601 	.dw #0x00E3
   0094 E4 00               602 	.dw #0x00E4
   0096 E5 00               603 	.dw #0x00E5
   0098 E6 00               604 	.dw #0x00E6
   009A E7 00               605 	.dw #0x00E7
   009C E8 00               606 	.dw #0x00E8
   009E E9 00               607 	.dw #0x00E9
   00A0 EA 00               608 	.dw #0x00EA
   00A2 EB 00               609 	.dw #0x00EB
   00A4 EC 00               610 	.dw #0x00EC
   00A6 ED 00               611 	.dw #0x00ED
   00A8 ED 00               612 	.dw #0x00ED
   00AA EE 00               613 	.dw #0x00EE
   00AC EE 00               614 	.dw #0x00EE
   00AE EF 00               615 	.dw #0x00EF
   00B0 EF 00               616 	.dw #0x00EF
   00B2 EF 00               617 	.dw #0x00EF
   00B4 EF 00               618 	.dw #0x00EF
   00B6 EF 00               619 	.dw #0x00EF
   00B8 F0 00               620 	.dw #0x00F0
   00BA EF 00               621 	.dw #0x00EF
   00BC EF 00               622 	.dw #0x00EF
   00BE EF 00               623 	.dw #0x00EF
   00C0 EF 00               624 	.dw #0x00EF
   00C2 EF 00               625 	.dw #0x00EF
   00C4 EE 00               626 	.dw #0x00EE
   00C6 EE 00               627 	.dw #0x00EE
   00C8 ED 00               628 	.dw #0x00ED
   00CA ED 00               629 	.dw #0x00ED
   00CC EC 00               630 	.dw #0x00EC
   00CE EB 00               631 	.dw #0x00EB
   00D0 EA 00               632 	.dw #0x00EA
   00D2 E9 00               633 	.dw #0x00E9
   00D4 E8 00               634 	.dw #0x00E8
   00D6 E7 00               635 	.dw #0x00E7
   00D8 E6 00               636 	.dw #0x00E6
   00DA E5 00               637 	.dw #0x00E5
   00DC E4 00               638 	.dw #0x00E4
   00DE E3 00               639 	.dw #0x00E3
   00E0 E1 00               640 	.dw #0x00E1
   00E2 E0 00               641 	.dw #0x00E0
   00E4 DE 00               642 	.dw #0x00DE
   00E6 DD 00               643 	.dw #0x00DD
   00E8 DB 00               644 	.dw #0x00DB
   00EA DA 00               645 	.dw #0x00DA
   00EC D8 00               646 	.dw #0x00D8
   00EE D6 00               647 	.dw #0x00D6
   00F0 D4 00               648 	.dw #0x00D4
   00F2 D2 00               649 	.dw #0x00D2
   00F4 D0 00               650 	.dw #0x00D0
   00F6 CE 00               651 	.dw #0x00CE
   00F8 CC 00               652 	.dw #0x00CC
   00FA CA 00               653 	.dw #0x00CA
   00FC C8 00               654 	.dw #0x00C8
   00FE C6 00               655 	.dw #0x00C6
   0100 C4 00               656 	.dw #0x00C4
   0102 C1 00               657 	.dw #0x00C1
   0104 BF 00               658 	.dw #0x00BF
   0106 BD 00               659 	.dw #0x00BD
   0108 BA 00               660 	.dw #0x00BA
   010A B8 00               661 	.dw #0x00B8
   010C B5 00               662 	.dw #0x00B5
   010E B3 00               663 	.dw #0x00B3
   0110 B0 00               664 	.dw #0x00B0
   0112 AD 00               665 	.dw #0x00AD
   0114 AB 00               666 	.dw #0x00AB
   0116 A8 00               667 	.dw #0x00A8
   0118 A5 00               668 	.dw #0x00A5
   011A A3 00               669 	.dw #0x00A3
   011C A0 00               670 	.dw #0x00A0
   011E 9D 00               671 	.dw #0x009D
   0120 9A 00               672 	.dw #0x009A
   0122 98 00               673 	.dw #0x0098
   0124 95 00               674 	.dw #0x0095
   0126 92 00               675 	.dw #0x0092
   0128 8F 00               676 	.dw #0x008F
   012A 8C 00               677 	.dw #0x008C
   012C 89 00               678 	.dw #0x0089
   012E 86 00               679 	.dw #0x0086
   0130 83 00               680 	.dw #0x0083
   0132 80 00               681 	.dw #0x0080
   0134 7D 00               682 	.dw #0x007D
   0136 7A 00               683 	.dw #0x007A
   0138 78 00               684 	.dw #0x0078
   013A 75 00               685 	.dw #0x0075
   013C 72 00               686 	.dw #0x0072
   013E 6F 00               687 	.dw #0x006F
   0140 6C 00               688 	.dw #0x006C
   0142 69 00               689 	.dw #0x0069
   0144 66 00               690 	.dw #0x0066
   0146 63 00               691 	.dw #0x0063
   0148 60 00               692 	.dw #0x0060
   014A 5D 00               693 	.dw #0x005D
   014C 5A 00               694 	.dw #0x005A
   014E 57 00               695 	.dw #0x0057
   0150 55 00               696 	.dw #0x0055
   0152 52 00               697 	.dw #0x0052
   0154 4F 00               698 	.dw #0x004F
   0156 4C 00               699 	.dw #0x004C
   0158 4A 00               700 	.dw #0x004A
   015A 47 00               701 	.dw #0x0047
   015C 44 00               702 	.dw #0x0044
   015E 42 00               703 	.dw #0x0042
   0160 3F 00               704 	.dw #0x003F
   0162 3C 00               705 	.dw #0x003C
   0164 3A 00               706 	.dw #0x003A
   0166 37 00               707 	.dw #0x0037
   0168 35 00               708 	.dw #0x0035
   016A 32 00               709 	.dw #0x0032
   016C 30 00               710 	.dw #0x0030
   016E 2E 00               711 	.dw #0x002E
   0170 2B 00               712 	.dw #0x002B
   0172 29 00               713 	.dw #0x0029
   0174 27 00               714 	.dw #0x0027
   0176 25 00               715 	.dw #0x0025
   0178 23 00               716 	.dw #0x0023
   017A 21 00               717 	.dw #0x0021
   017C 1F 00               718 	.dw #0x001F
   017E 1D 00               719 	.dw #0x001D
   0180 1B 00               720 	.dw #0x001B
   0182 19 00               721 	.dw #0x0019
   0184 17 00               722 	.dw #0x0017
   0186 15 00               723 	.dw #0x0015
   0188 14 00               724 	.dw #0x0014
   018A 12 00               725 	.dw #0x0012
   018C 11 00               726 	.dw #0x0011
   018E 0F 00               727 	.dw #0x000F
   0190 0E 00               728 	.dw #0x000E
   0192 0C 00               729 	.dw #0x000C
   0194 0B 00               730 	.dw #0x000B
   0196 0A 00               731 	.dw #0x000A
   0198 09 00               732 	.dw #0x0009
   019A 08 00               733 	.dw #0x0008
   019C 07 00               734 	.dw #0x0007
   019E 06 00               735 	.dw #0x0006
   01A0 05 00               736 	.dw #0x0005
   01A2 04 00               737 	.dw #0x0004
   01A4 03 00               738 	.dw #0x0003
   01A6 02 00               739 	.dw #0x0002
   01A8 02 00               740 	.dw #0x0002
   01AA 01 00               741 	.dw #0x0001
   01AC 01 00               742 	.dw #0x0001
   01AE 00 00               743 	.dw #0x0000
   01B0 00 00               744 	.dw #0x0000
   01B2 00 00               745 	.dw #0x0000
   01B4 00 00               746 	.dw #0x0000
   01B6 00 00               747 	.dw #0x0000
   01B8 00 00               748 	.dw #0x0000
   01BA 00 00               749 	.dw #0x0000
   01BC 00 00               750 	.dw #0x0000
   01BE 00 00               751 	.dw #0x0000
   01C0 00 00               752 	.dw #0x0000
   01C2 00 00               753 	.dw #0x0000
   01C4 01 00               754 	.dw #0x0001
   01C6 01 00               755 	.dw #0x0001
   01C8 02 00               756 	.dw #0x0002
   01CA 02 00               757 	.dw #0x0002
   01CC 03 00               758 	.dw #0x0003
   01CE 04 00               759 	.dw #0x0004
   01D0 05 00               760 	.dw #0x0005
   01D2 06 00               761 	.dw #0x0006
   01D4 07 00               762 	.dw #0x0007
   01D6 08 00               763 	.dw #0x0008
   01D8 09 00               764 	.dw #0x0009
   01DA 0A 00               765 	.dw #0x000A
   01DC 0B 00               766 	.dw #0x000B
   01DE 0C 00               767 	.dw #0x000C
   01E0 0E 00               768 	.dw #0x000E
   01E2 0F 00               769 	.dw #0x000F
   01E4 11 00               770 	.dw #0x0011
   01E6 12 00               771 	.dw #0x0012
   01E8 14 00               772 	.dw #0x0014
   01EA 15 00               773 	.dw #0x0015
   01EC 17 00               774 	.dw #0x0017
   01EE 19 00               775 	.dw #0x0019
   01F0 1B 00               776 	.dw #0x001B
   01F2 1D 00               777 	.dw #0x001D
   01F4 1F 00               778 	.dw #0x001F
   01F6 21 00               779 	.dw #0x0021
   01F8 23 00               780 	.dw #0x0023
   01FA 25 00               781 	.dw #0x0025
   01FC 27 00               782 	.dw #0x0027
   01FE 29 00               783 	.dw #0x0029
   0200 2B 00               784 	.dw #0x002B
   0202 2E 00               785 	.dw #0x002E
   0204 30 00               786 	.dw #0x0030
   0206 32 00               787 	.dw #0x0032
   0208 35 00               788 	.dw #0x0035
   020A 37 00               789 	.dw #0x0037
   020C 3A 00               790 	.dw #0x003A
   020E 3C 00               791 	.dw #0x003C
   0210 3F 00               792 	.dw #0x003F
   0212 42 00               793 	.dw #0x0042
   0214 44 00               794 	.dw #0x0044
   0216 47 00               795 	.dw #0x0047
   0218 4A 00               796 	.dw #0x004A
   021A 4C 00               797 	.dw #0x004C
   021C 4F 00               798 	.dw #0x004F
   021E 52 00               799 	.dw #0x0052
   0220 55 00               800 	.dw #0x0055
   0222 57 00               801 	.dw #0x0057
   0224 5A 00               802 	.dw #0x005A
   0226 5D 00               803 	.dw #0x005D
   0228 60 00               804 	.dw #0x0060
   022A 63 00               805 	.dw #0x0063
   022C 66 00               806 	.dw #0x0066
   022E 69 00               807 	.dw #0x0069
   0230 6C 00               808 	.dw #0x006C
   0232 6F 00               809 	.dw #0x006F
   0234 72 00               810 	.dw #0x0072
   0236 75 00               811 	.dw #0x0075
                            812 ;demo.c:69: uint8_t ge5_load(char *file_name, uint8_t vramh, uint16_t vraml) {
                            813 ;	---------------------------------
                            814 ; Function ge5_load
                            815 ; ---------------------------------
   0238                     816 _ge5_load_start::
   0238                     817 _ge5_load:
   0238 DD E5               818 	push	ix
   023A DD 21 00 00         819 	ld	ix,#0
   023E DD 39               820 	add	ix,sp
   0240 21 D2 FF            821 	ld	hl,#-46
   0243 39                  822 	add	hl,sp
   0244 F9                  823 	ld	sp,hl
                            824 ;demo.c:73: memset((uint8_t *) &f, 0, sizeof(fcb));
   0245 21 00 00            825 	ld	hl,#0x0000
   0248 39                  826 	add	hl,sp
   0249 4D                  827 	ld	c,l
   024A 44                  828 	ld	b,h
   024B 21 2E 00            829 	ld	hl,#0x002E
   024E E5                  830 	push	hl
   024F 3E 00               831 	ld	a,#0x00
   0251 F5                  832 	push	af
   0252 33                  833 	inc	sp
   0253 C5                  834 	push	bc
   0254 CDr00s00            835 	call	_memset
   0257 F1                  836 	pop	af
   0258 F1                  837 	pop	af
   0259 33                  838 	inc	sp
                            839 ;demo.c:75: f.record_size = 128;
   025A 21 00 00            840 	ld	hl,#0x0000
   025D 39                  841 	add	hl,sp
   025E 4D                  842 	ld	c,l
   025F 44                  843 	ld	b,h
   0260 21 0F 00            844 	ld	hl,#0x000F
   0263 09                  845 	add	hl,bc
   0264 EB                  846 	ex	de,hl
   0265 3E 80               847 	ld	a,#0x80
   0267 12                  848 	ld	(de),a
                            849 ;demo.c:76: f.drive = 0;
   0268 3E 00               850 	ld	a,#0x00
   026A 02                  851 	ld	(bc),a
                            852 ;demo.c:78: memcpy(f.name, file_name, 11);
   026B DD 5E 04            853 	ld	e,4 (ix)
   026E DD 56 05            854 	ld	d,5 (ix)
   0271 03                  855 	inc	bc
   0272 21 0B 00            856 	ld	hl,#0x000B
   0275 E5                  857 	push	hl
   0276 D5                  858 	push	de
   0277 C5                  859 	push	bc
   0278 CDr00s00            860 	call	_memcpy
   027B F1                  861 	pop	af
   027C F1                  862 	pop	af
   027D F1                  863 	pop	af
                            864 ;demo.c:80: if (open(&f) != 0) return 0;
   027E 21 00 00            865 	ld	hl,#0x0000
   0281 39                  866 	add	hl,sp
   0282 E5                  867 	push	hl
   0283 CDr00s00            868 	call	_open
   0286 F1                  869 	pop	af
   0287 AF                  870 	xor	a,a
   0288 B5                  871 	or	a,l
   0289 28 05               872 	jr	Z,00102$
   028B 2E 00               873 	ld	l,#0x00
   028D C3r04s03            874 	jp	00114$
   0290                     875 00102$:
                            876 ;demo.c:81: vdp_set_write_address(vramh, vraml);
   0290 DD 6E 07            877 	ld	l,7 (ix)
   0293 DD 66 08            878 	ld	h,8 (ix)
   0296 E5                  879 	push	hl
   0297 DD 7E 06            880 	ld	a,6 (ix)
   029A F5                  881 	push	af
   029B 33                  882 	inc	sp
   029C CDr00s00            883 	call	_vdp_set_write_address
   029F F1                  884 	pop	af
   02A0 33                  885 	inc	sp
                            886 ;demo.c:83: for (i = 0; i < 213; i++) {
   02A1 0E 00               887 	ld	c,#0x00
   02A3                     888 00110$:
   02A3 79                  889 	ld	a,c
   02A4 D6 D5               890 	sub	a,#0xD5
   02A6 D2rF9s02            891 	jp	NC,00113$
                            892 ;demo.c:84: if (block_set_data_ptr(scratch) != 0) return 0;
   02A9 C5                  893 	push	bc
   02AA 21r88s14            894 	ld	hl,#_scratch
   02AD E5                  895 	push	hl
   02AE CDr00s00            896 	call	_block_set_data_ptr
   02B1 F1                  897 	pop	af
   02B2 7D                  898 	ld	a,l
   02B3 C1                  899 	pop	bc
   02B4 47                  900 	ld	b,a
   02B5 B7                  901 	or	a,a
   02B6 28 05               902 	jr	Z,00104$
   02B8 2E 00               903 	ld	l,#0x00
   02BA C3r04s03            904 	jp	00114$
   02BD                     905 00104$:
                            906 ;demo.c:85: if (block_read(&f) != 0) return 0;
   02BD 21 00 00            907 	ld	hl,#0x0000
   02C0 39                  908 	add	hl,sp
   02C1 C5                  909 	push	bc
   02C2 E5                  910 	push	hl
   02C3 CDr00s00            911 	call	_block_read
   02C6 F1                  912 	pop	af
   02C7 7D                  913 	ld	a,l
   02C8 C1                  914 	pop	bc
   02C9 47                  915 	ld	b,a
   02CA B7                  916 	or	a,a
   02CB 28 04               917 	jr	Z,00106$
   02CD 2E 00               918 	ld	l,#0x00
   02CF 18 33               919 	jr	00114$
   02D1                     920 00106$:
                            921 ;demo.c:87: if (i == 0) vdp_load_screen(scratch + 7, 121);   // to skip GE5 header
   02D1 AF                  922 	xor	a,a
   02D2 B1                  923 	or	a,c
   02D3 20 11               924 	jr	NZ,00108$
   02D5 11r8Fs14            925 	ld	de,#_scratch + 7
   02D8 C5                  926 	push	bc
   02D9 3E 79               927 	ld	a,#0x79
   02DB F5                  928 	push	af
   02DC 33                  929 	inc	sp
   02DD D5                  930 	push	de
   02DE CDr00s00            931 	call	_vdp_load_screen
   02E1 F1                  932 	pop	af
   02E2 33                  933 	inc	sp
   02E3 C1                  934 	pop	bc
   02E4 18 0F               935 	jr	00112$
   02E6                     936 00108$:
                            937 ;demo.c:88: else vdp_load_screen(scratch, 128);
   02E6 C5                  938 	push	bc
   02E7 3E 80               939 	ld	a,#0x80
   02E9 F5                  940 	push	af
   02EA 33                  941 	inc	sp
   02EB 21r88s14            942 	ld	hl,#_scratch
   02EE E5                  943 	push	hl
   02EF CDr00s00            944 	call	_vdp_load_screen
   02F2 F1                  945 	pop	af
   02F3 33                  946 	inc	sp
   02F4 C1                  947 	pop	bc
   02F5                     948 00112$:
                            949 ;demo.c:83: for (i = 0; i < 213; i++) {
   02F5 0C                  950 	inc	c
   02F6 C3rA3s02            951 	jp	00110$
   02F9                     952 00113$:
                            953 ;demo.c:91: close(&f);
   02F9 21 00 00            954 	ld	hl,#0x0000
   02FC 39                  955 	add	hl,sp
   02FD E5                  956 	push	hl
   02FE CDr00s00            957 	call	_close
   0301 F1                  958 	pop	af
                            959 ;demo.c:93: return 1;
   0302 2E 01               960 	ld	l,#0x01
   0304                     961 00114$:
   0304 DD F9               962 	ld	sp,ix
   0306 DD E1               963 	pop	ix
   0308 C9                  964 	ret
   0309                     965 _ge5_load_end::
                            966 ;demo.c:96: void scratch_clear() {
                            967 ;	---------------------------------
                            968 ; Function scratch_clear
                            969 ; ---------------------------------
   0309                     970 _scratch_clear_start::
   0309                     971 _scratch_clear:
                            972 ;demo.c:97: memset((uint8_t *) &scratch, 0, 128);
   0309 21 80 00            973 	ld	hl,#0x0080
   030C E5                  974 	push	hl
   030D 3E 00               975 	ld	a,#0x00
   030F F5                  976 	push	af
   0310 33                  977 	inc	sp
   0311 21r88s14            978 	ld	hl,#_scratch
   0314 E5                  979 	push	hl
   0315 CDr00s00            980 	call	_memset
   0318 F1                  981 	pop	af
   0319 F1                  982 	pop	af
   031A 33                  983 	inc	sp
   031B C9                  984 	ret
   031C                     985 _scratch_clear_end::
                            986 ;demo.c:100: uint8_t pal_load(char *file_name, uint8_t ss) {
                            987 ;	---------------------------------
                            988 ; Function pal_load
                            989 ; ---------------------------------
   031C                     990 _pal_load_start::
   031C                     991 _pal_load:
   031C DD E5               992 	push	ix
   031E DD 21 00 00         993 	ld	ix,#0
   0322 DD 39               994 	add	ix,sp
   0324 21 D2 FF            995 	ld	hl,#-46
   0327 39                  996 	add	hl,sp
   0328 F9                  997 	ld	sp,hl
                            998 ;demo.c:103: memset((uint8_t *) &f, 0, sizeof(fcb));
   0329 21 00 00            999 	ld	hl,#0x0000
   032C 39                 1000 	add	hl,sp
   032D 4D                 1001 	ld	c,l
   032E 44                 1002 	ld	b,h
   032F 21 2E 00           1003 	ld	hl,#0x002E
   0332 E5                 1004 	push	hl
   0333 3E 00              1005 	ld	a,#0x00
   0335 F5                 1006 	push	af
   0336 33                 1007 	inc	sp
   0337 C5                 1008 	push	bc
   0338 CDr00s00           1009 	call	_memset
   033B F1                 1010 	pop	af
   033C F1                 1011 	pop	af
   033D 33                 1012 	inc	sp
                           1013 ;demo.c:104: scratch_clear();
   033E CDr09s03           1014 	call	_scratch_clear
                           1015 ;demo.c:106: f.record_size = ss;
   0341 21 00 00           1016 	ld	hl,#0x0000
   0344 39                 1017 	add	hl,sp
   0345 4D                 1018 	ld	c,l
   0346 44                 1019 	ld	b,h
   0347 21 0F 00           1020 	ld	hl,#0x000F
   034A 09                 1021 	add	hl,bc
   034B EB                 1022 	ex	de,hl
   034C DD 7E 06           1023 	ld	a,6 (ix)
   034F 12                 1024 	ld	(de),a
                           1025 ;demo.c:107: f.drive = 0;
   0350 3E 00              1026 	ld	a,#0x00
   0352 02                 1027 	ld	(bc),a
                           1028 ;demo.c:109: memcpy(f.name, file_name, 11);
   0353 DD 5E 04           1029 	ld	e,4 (ix)
   0356 DD 56 05           1030 	ld	d,5 (ix)
   0359 03                 1031 	inc	bc
   035A 21 0B 00           1032 	ld	hl,#0x000B
   035D E5                 1033 	push	hl
   035E D5                 1034 	push	de
   035F C5                 1035 	push	bc
   0360 CDr00s00           1036 	call	_memcpy
   0363 F1                 1037 	pop	af
   0364 F1                 1038 	pop	af
   0365 F1                 1039 	pop	af
                           1040 ;demo.c:111: if (open(&f) != 0) return 0;
   0366 21 00 00           1041 	ld	hl,#0x0000
   0369 39                 1042 	add	hl,sp
   036A E5                 1043 	push	hl
   036B CDr00s00           1044 	call	_open
   036E F1                 1045 	pop	af
   036F AF                 1046 	xor	a,a
   0370 B5                 1047 	or	a,l
   0371 28 04              1048 	jr	Z,00102$
   0373 2E 00              1049 	ld	l,#0x00
   0375 18 40              1050 	jr	00107$
   0377                    1051 00102$:
                           1052 ;demo.c:112: if (block_set_data_ptr(scratch) != 0) return 0;
   0377 21r88s14           1053 	ld	hl,#_scratch
   037A E5                 1054 	push	hl
   037B CDr00s00           1055 	call	_block_set_data_ptr
   037E F1                 1056 	pop	af
   037F AF                 1057 	xor	a,a
   0380 B5                 1058 	or	a,l
   0381 28 04              1059 	jr	Z,00104$
   0383 2E 00              1060 	ld	l,#0x00
   0385 18 30              1061 	jr	00107$
   0387                    1062 00104$:
                           1063 ;demo.c:113: if (block_read(&f) != 0) return 0;
   0387 21 00 00           1064 	ld	hl,#0x0000
   038A 39                 1065 	add	hl,sp
   038B E5                 1066 	push	hl
   038C CDr00s00           1067 	call	_block_read
   038F F1                 1068 	pop	af
   0390 AF                 1069 	xor	a,a
   0391 B5                 1070 	or	a,l
   0392 28 04              1071 	jr	Z,00106$
   0394 2E 00              1072 	ld	l,#0x00
   0396 18 1F              1073 	jr	00107$
   0398                    1074 00106$:
                           1075 ;demo.c:115: memcpy(cur_palette, scratch+7, ss);
   0398 DD 4E 06           1076 	ld	c,6 (ix)
   039B 06 00              1077 	ld	b,#0x00
   039D 11r8Fs14           1078 	ld	de,#_scratch + 7
   03A0 C5                 1079 	push	bc
   03A1 D5                 1080 	push	de
   03A2 21r08s15           1081 	ld	hl,#_cur_palette
   03A5 E5                 1082 	push	hl
   03A6 CDr00s00           1083 	call	_memcpy
   03A9 F1                 1084 	pop	af
   03AA F1                 1085 	pop	af
   03AB F1                 1086 	pop	af
                           1087 ;demo.c:117: close(&f);
   03AC 21 00 00           1088 	ld	hl,#0x0000
   03AF 39                 1089 	add	hl,sp
   03B0 E5                 1090 	push	hl
   03B1 CDr00s00           1091 	call	_close
   03B4 F1                 1092 	pop	af
                           1093 ;demo.c:118: return 1;
   03B5 2E 01              1094 	ld	l,#0x01
   03B7                    1095 00107$:
   03B7 DD F9              1096 	ld	sp,ix
   03B9 DD E1              1097 	pop	ix
   03BB C9                 1098 	ret
   03BC                    1099 _pal_load_end::
                           1100 ;demo.c:122: void pause() {
                           1101 ;	---------------------------------
                           1102 ; Function pause
                           1103 ; ---------------------------------
   03BC                    1104 _pause_start::
   03BC                    1105 _pause:
                           1106 ;demo.c:123: uint8_t i,j,k = 0;
                           1107 ;demo.c:124: for (i = 0; i < 255; i++) {	
   03BC 01 00 00           1108 	ld	bc,#0x0000
   03BF                    1109 00104$:
   03BF 78                 1110 	ld	a,b
   03C0 D6 FF              1111 	sub	a,#0xFF
   03C2 D0                 1112 	ret	NC
                           1113 ;demo.c:125: for (j = 0; j < 255; j++) {
   03C3 59                 1114 	ld	e,c
   03C4 16 FF              1115 	ld	d,#0xFF
   03C6                    1116 00103$:
                           1117 ;demo.c:126: k++;
   03C6 1C                 1118 	inc	e
   03C7 15                 1119 	dec	d
                           1120 ;demo.c:125: for (j = 0; j < 255; j++) {
   03C8 AF                 1121 	xor	a,a
   03C9 B2                 1122 	or	a,d
   03CA 20 FA              1123 	jr	NZ,00103$
                           1124 ;demo.c:124: for (i = 0; i < 255; i++) {	
   03CC 4B                 1125 	ld	c,e
   03CD 04                 1126 	inc	b
   03CE 18 EF              1127 	jr	00104$
   03D0                    1128 _pause_end::
                           1129 ;demo.c:132: uint8_t raw_load(char *file_name, int size, char* buffer) {
                           1130 ;	---------------------------------
                           1131 ; Function raw_load
                           1132 ; ---------------------------------
   03D0                    1133 _raw_load_start::
   03D0                    1134 _raw_load:
   03D0 DD E5              1135 	push	ix
   03D2 DD 21 00 00        1136 	ld	ix,#0
   03D6 DD 39              1137 	add	ix,sp
   03D8 21 D2 FF           1138 	ld	hl,#-46
   03DB 39                 1139 	add	hl,sp
   03DC F9                 1140 	ld	sp,hl
                           1141 ;demo.c:137: memset((uint8_t *) &f, 0, sizeof(fcb));
   03DD 21 00 00           1142 	ld	hl,#0x0000
   03E0 39                 1143 	add	hl,sp
   03E1 4D                 1144 	ld	c,l
   03E2 44                 1145 	ld	b,h
   03E3 21 2E 00           1146 	ld	hl,#0x002E
   03E6 E5                 1147 	push	hl
   03E7 3E 00              1148 	ld	a,#0x00
   03E9 F5                 1149 	push	af
   03EA 33                 1150 	inc	sp
   03EB C5                 1151 	push	bc
   03EC CDr00s00           1152 	call	_memset
   03EF F1                 1153 	pop	af
   03F0 F1                 1154 	pop	af
   03F1 33                 1155 	inc	sp
                           1156 ;demo.c:138: scratch_clear();
   03F2 CDr09s03           1157 	call	_scratch_clear
                           1158 ;demo.c:140: f.record_size = 128;
   03F5 21 00 00           1159 	ld	hl,#0x0000
   03F8 39                 1160 	add	hl,sp
   03F9 4D                 1161 	ld	c,l
   03FA 44                 1162 	ld	b,h
   03FB 21 0F 00           1163 	ld	hl,#0x000F
   03FE 09                 1164 	add	hl,bc
   03FF EB                 1165 	ex	de,hl
   0400 3E 80              1166 	ld	a,#0x80
   0402 12                 1167 	ld	(de),a
                           1168 ;demo.c:141: f.drive = 0;
   0403 3E 00              1169 	ld	a,#0x00
   0405 02                 1170 	ld	(bc),a
                           1171 ;demo.c:143: memcpy(f.name, file_name, 11);
   0406 DD 5E 04           1172 	ld	e,4 (ix)
   0409 DD 56 05           1173 	ld	d,5 (ix)
   040C 03                 1174 	inc	bc
   040D 21 0B 00           1175 	ld	hl,#0x000B
   0410 E5                 1176 	push	hl
   0411 D5                 1177 	push	de
   0412 C5                 1178 	push	bc
   0413 CDr00s00           1179 	call	_memcpy
   0416 F1                 1180 	pop	af
   0417 F1                 1181 	pop	af
   0418 F1                 1182 	pop	af
                           1183 ;demo.c:145: if (open(&f) != 0) return 0;
   0419 21 00 00           1184 	ld	hl,#0x0000
   041C 39                 1185 	add	hl,sp
   041D E5                 1186 	push	hl
   041E CDr00s00           1187 	call	_open
   0421 F1                 1188 	pop	af
   0422 AF                 1189 	xor	a,a
   0423 B5                 1190 	or	a,l
   0424 28 05              1191 	jr	Z,00116$
   0426 2E 00              1192 	ld	l,#0x00
   0428 C3r8Fs04           1193 	jp	00110$
                           1194 ;demo.c:147: while(total < size) {
   042B                    1195 00116$:
   042B 01 00 00           1196 	ld	bc,#0x0000
   042E                    1197 00107$:
   042E 79                 1198 	ld	a,c
   042F DD 96 06           1199 	sub	a,6 (ix)
   0432 78                 1200 	ld	a,b
   0433 DD 9E 07           1201 	sbc	a,7 (ix)
   0436 F2r84s04           1202 	jp	P,00109$
                           1203 ;demo.c:148: if (block_set_data_ptr(scratch) != 0) return 0;
   0439 C5                 1204 	push	bc
   043A 21r88s14           1205 	ld	hl,#_scratch
   043D E5                 1206 	push	hl
   043E CDr00s00           1207 	call	_block_set_data_ptr
   0441 F1                 1208 	pop	af
   0442 5D                 1209 	ld	e,l
   0443 C1                 1210 	pop	bc
   0444 AF                 1211 	xor	a,a
   0445 B3                 1212 	or	a,e
   0446 28 04              1213 	jr	Z,00104$
   0448 2E 00              1214 	ld	l,#0x00
   044A 18 43              1215 	jr	00110$
   044C                    1216 00104$:
                           1217 ;demo.c:149: if (block_read(&f) != 0) return 0;
   044C 21 00 00           1218 	ld	hl,#0x0000
   044F 39                 1219 	add	hl,sp
   0450 C5                 1220 	push	bc
   0451 E5                 1221 	push	hl
   0452 CDr00s00           1222 	call	_block_read
   0455 F1                 1223 	pop	af
   0456 5D                 1224 	ld	e,l
   0457 C1                 1225 	pop	bc
   0458 AF                 1226 	xor	a,a
   0459 B3                 1227 	or	a,e
   045A 28 04              1228 	jr	Z,00106$
   045C 2E 00              1229 	ld	l,#0x00
   045E 18 2F              1230 	jr	00110$
   0460                    1231 00106$:
                           1232 ;demo.c:151: memcpy(buffer+total,scratch,incr);
   0460 DD 7E 08           1233 	ld	a,8 (ix)
   0463 81                 1234 	add	a,c
   0464 5F                 1235 	ld	e,a
   0465 DD 7E 09           1236 	ld	a,9 (ix)
   0468 88                 1237 	adc	a,b
   0469 57                 1238 	ld	d,a
   046A C5                 1239 	push	bc
   046B 21 80 00           1240 	ld	hl,#0x0080
   046E E5                 1241 	push	hl
   046F 21r88s14           1242 	ld	hl,#_scratch
   0472 E5                 1243 	push	hl
   0473 D5                 1244 	push	de
   0474 CDr00s00           1245 	call	_memcpy
   0477 F1                 1246 	pop	af
   0478 F1                 1247 	pop	af
   0479 F1                 1248 	pop	af
   047A C1                 1249 	pop	bc
                           1250 ;demo.c:153: total+=incr;
   047B 21 80 00           1251 	ld	hl,#0x0080
   047E 09                 1252 	add	hl,bc
   047F 4D                 1253 	ld	c,l
   0480 44                 1254 	ld	b,h
   0481 C3r2Es04           1255 	jp	00107$
   0484                    1256 00109$:
                           1257 ;demo.c:156: close(&f);
   0484 21 00 00           1258 	ld	hl,#0x0000
   0487 39                 1259 	add	hl,sp
   0488 E5                 1260 	push	hl
   0489 CDr00s00           1261 	call	_close
   048C F1                 1262 	pop	af
                           1263 ;demo.c:158: return 1;
   048D 2E 01              1264 	ld	l,#0x01
   048F                    1265 00110$:
   048F DD F9              1266 	ld	sp,ix
   0491 DD E1              1267 	pop	ix
   0493 C9                 1268 	ret
   0494                    1269 _raw_load_end::
                           1270 ;demo.c:161: void fadein() {
                           1271 ;	---------------------------------
                           1272 ; Function fadein
                           1273 ; ---------------------------------
   0494                    1274 _fadein_start::
   0494                    1275 _fadein:
   0494 DD E5              1276 	push	ix
   0496 DD 21 00 00        1277 	ld	ix,#0
   049A DD 39              1278 	add	ix,sp
   049C F5                 1279 	push	af
                           1280 ;demo.c:164: if (tick < 4) return;
   049D 3Ar4As92           1281 	ld	a,(#_tick+0)
   04A0 D6 04              1282 	sub	a,#0x04
   04A2 3Ar4Bs92           1283 	ld	a,(#_tick+1)
   04A5 DE 00              1284 	sbc	a,#0x00
   04A7 F2rADs04           1285 	jp	P,00102$
   04AA C3r5Bs05           1286 	jp	00113$
   04AD                    1287 00102$:
                           1288 ;demo.c:166: tick = 0;
   04AD 21r4As92           1289 	ld	hl,#_tick + 0
   04B0 36 00              1290 	ld	(hl), #0x00
   04B2 21r4Bs92           1291 	ld	hl,#_tick + 1
   04B5 36 00              1292 	ld	(hl), #0x00
                           1293 ;demo.c:168: for(i = 0; i < 32; i+=2) {
   04B7 0E 00              1294 	ld	c,#0x00
   04B9                    1295 00109$:
   04B9 79                 1296 	ld	a,c
   04BA D6 20              1297 	sub	a,#0x20
   04BC D2r53s05           1298 	jp	NC,00112$
                           1299 ;demo.c:169: uint8_t r = scratch[i] >> 4;
   04BF 3Er88              1300 	ld	a,#<_scratch
   04C1 81                 1301 	add	a,c
   04C2 5F                 1302 	ld	e,a
   04C3 3Es14              1303 	ld	a,#>_scratch
   04C5 CE 00              1304 	adc	a,#0x00
   04C7 57                 1305 	ld	d,a
   04C8 1A                 1306 	ld	a,(de)
   04C9 47                 1307 	ld	b,a
   04CA 58                 1308 	ld	e,b
   04CB CB 3B              1309 	srl	e
   04CD CB 3B              1310 	srl	e
   04CF CB 3B              1311 	srl	e
   04D1 CB 3B              1312 	srl	e
                           1313 ;demo.c:170: uint8_t b = scratch[i] & 0xf;
   04D3 78                 1314 	ld	a,b
   04D4 E6 0F              1315 	and	a,#0x0F
   04D6 DD 77 FF           1316 	ld	-1 (ix),a
                           1317 ;demo.c:171: uint8_t g = scratch[i+1];
   04D9 51                 1318 	ld	d,c
   04DA 14                 1319 	inc	d
   04DB 3Er88              1320 	ld	a,#<_scratch
   04DD 82                 1321 	add	a,d
   04DE 6F                 1322 	ld	l,a
   04DF 3Es14              1323 	ld	a,#>_scratch
   04E1 CE 00              1324 	adc	a,#0x00
   04E3 67                 1325 	ld	h,a
   04E4 56                 1326 	ld	d,(hl)
   04E5 DD 72 FE           1327 	ld	-2 (ix),d
                           1328 ;demo.c:173: if (r < (cur_palette[i] >> 4)) r++;
   04E8 3Er08              1329 	ld	a,#<_cur_palette
   04EA 81                 1330 	add	a,c
   04EB 6F                 1331 	ld	l,a
   04EC 3Es15              1332 	ld	a,#>_cur_palette
   04EE CE 00              1333 	adc	a,#0x00
   04F0 67                 1334 	ld	h,a
   04F1 56                 1335 	ld	d,(hl)
   04F2 CB 3A              1336 	srl	d
   04F4 CB 3A              1337 	srl	d
   04F6 CB 3A              1338 	srl	d
   04F8 CB 3A              1339 	srl	d
   04FA 7B                 1340 	ld	a,e
   04FB 92                 1341 	sub	a,d
   04FC 30 01              1342 	jr	NC,00104$
   04FE 1C                 1343 	inc	e
   04FF                    1344 00104$:
                           1345 ;demo.c:174: if (b < (cur_palette[i] & 0xf)) b++;
   04FF 3Er08              1346 	ld	a,#<_cur_palette
   0501 81                 1347 	add	a,c
   0502 6F                 1348 	ld	l,a
   0503 3Es15              1349 	ld	a,#>_cur_palette
   0505 CE 00              1350 	adc	a,#0x00
   0507 67                 1351 	ld	h,a
   0508 7E                 1352 	ld	a,(hl)
   0509 E6 0F              1353 	and	a,#0x0F
   050B 47                 1354 	ld	b,a
   050C DD 7E FF           1355 	ld	a,-1 (ix)
   050F 90                 1356 	sub	a,b
   0510 30 03              1357 	jr	NC,00106$
   0512 DD 34 FF           1358 	inc	-1 (ix)
   0515                    1359 00106$:
                           1360 ;demo.c:176: scratch[i] = (r << 4) | b;
   0515 3Er88              1361 	ld	a,#<_scratch
   0517 81                 1362 	add	a,c
   0518 47                 1363 	ld	b,a
   0519 3Es14              1364 	ld	a,#>_scratch
   051B CE 00              1365 	adc	a,#0x00
   051D 57                 1366 	ld	d,a
   051E 7B                 1367 	ld	a,e
   051F 07                 1368 	rlca
   0520 07                 1369 	rlca
   0521 07                 1370 	rlca
   0522 07                 1371 	rlca
   0523 E6 F0              1372 	and	a,#0xF0
   0525 DD B6 FF           1373 	or	a,-1 (ix)
   0528 68                 1374 	ld	l,b
   0529 62                 1375 	ld	h,d
   052A 77                 1376 	ld	(hl),a
                           1377 ;demo.c:177: if (g < cur_palette[i+1]) scratch[i+1]++;
   052B 41                 1378 	ld	b,c
   052C 04                 1379 	inc	b
   052D 3Er08              1380 	ld	a,#<_cur_palette
   052F 80                 1381 	add	a,b
   0530 5F                 1382 	ld	e,a
   0531 3Es15              1383 	ld	a,#>_cur_palette
   0533 CE 00              1384 	adc	a,#0x00
   0535 57                 1385 	ld	d,a
   0536 1A                 1386 	ld	a,(de)
   0537 5F                 1387 	ld	e,a
   0538 DD 7E FE           1388 	ld	a,-2 (ix)
   053B 93                 1389 	sub	a,e
   053C 30 10              1390 	jr	NC,00111$
   053E 3Er88              1391 	ld	a,#<_scratch
   0540 80                 1392 	add	a,b
   0541 47                 1393 	ld	b,a
   0542 3Es14              1394 	ld	a,#>_scratch
   0544 CE 00              1395 	adc	a,#0x00
   0546 5F                 1396 	ld	e,a
   0547 68                 1397 	ld	l,b
   0548 67                 1398 	ld	h,a
   0549 7E                 1399 	ld	a,(hl)
   054A 3C                 1400 	inc	a
   054B 68                 1401 	ld	l,b
   054C 63                 1402 	ld	h,e
   054D 77                 1403 	ld	(hl),a
   054E                    1404 00111$:
                           1405 ;demo.c:168: for(i = 0; i < 32; i+=2) {
   054E 0C                 1406 	inc	c
   054F 0C                 1407 	inc	c
   0550 C3rB9s04           1408 	jp	00109$
   0553                    1409 00112$:
                           1410 ;demo.c:181: vdp_load_palette(scratch);
   0553 21r88s14           1411 	ld	hl,#_scratch
   0556 E5                 1412 	push	hl
   0557 CDr00s00           1413 	call	_vdp_load_palette
   055A F1                 1414 	pop	af
   055B                    1415 00113$:
   055B DD F9              1416 	ld	sp,ix
   055D DD E1              1417 	pop	ix
   055F C9                 1418 	ret
   0560                    1419 _fadein_end::
                           1420 ;demo.c:193: void do_ymmm() {
                           1421 ;	---------------------------------
                           1422 ; Function do_ymmm
                           1423 ; ---------------------------------
   0560                    1424 _do_ymmm_start::
   0560                    1425 _do_ymmm:
   0560 DD E5              1426 	push	ix
   0562 DD 21 00 00        1427 	ld	ix,#0
   0566 DD 39              1428 	add	ix,sp
   0568 21 EB FF           1429 	ld	hl,#-21
   056B 39                 1430 	add	hl,sp
   056C F9                 1431 	ld	sp,hl
                           1432 ;demo.c:198: if (tick > 32) { tick = 0; flipper++;}
   056D 3E 20              1433 	ld	a,#0x20
   056F FD 21r4As92        1434 	ld	iy,#_tick
   0573 FD 96 00           1435 	sub	a,0 (iy)
   0576 3E 00              1436 	ld	a,#0x00
   0578 FD 21r4As92        1437 	ld	iy,#_tick
   057C FD 9E 01           1438 	sbc	a,1 (iy)
   057F F2r9Cs05           1439 	jp	P,00102$
   0582 21r4As92           1440 	ld	hl,#_tick + 0
   0585 36 00              1441 	ld	(hl), #0x00
   0587 21r4Bs92           1442 	ld	hl,#_tick + 1
   058A 36 00              1443 	ld	(hl), #0x00
   058C FD 21r4Es92        1444 	ld	iy,#_flipper
   0590 FD 34 00           1445 	inc	0 (iy)
   0593 20 07              1446 	jr	NZ,00115$
   0595 FD 21r4Es92        1447 	ld	iy,#_flipper
   0599 FD 34 01           1448 	inc	1 (iy)
   059C                    1449 00115$:
   059C                    1450 00102$:
                           1451 ;demo.c:199: if (flipper > 10) { flipper = 0;}
   059C 3E 0A              1452 	ld	a,#0x0A
   059E FD 21r4Es92        1453 	ld	iy,#_flipper
   05A2 FD 96 00           1454 	sub	a,0 (iy)
   05A5 3E 00              1455 	ld	a,#0x00
   05A7 FD 21r4Es92        1456 	ld	iy,#_flipper
   05AB FD 9E 01           1457 	sbc	a,1 (iy)
   05AE F2rBBs05           1458 	jp	P,00104$
   05B1 21r4Es92           1459 	ld	hl,#_flipper + 0
   05B4 36 00              1460 	ld	(hl), #0x00
   05B6 21r4Fs92           1461 	ld	hl,#_flipper + 1
   05B9 36 00              1462 	ld	(hl), #0x00
   05BB                    1463 00104$:
                           1464 ;demo.c:201: ymmmf++;
   05BB FD 21r50s92        1465 	ld	iy,#_ymmmf
   05BF FD 34 00           1466 	inc	0 (iy)
   05C2 20 07              1467 	jr	NZ,00116$
   05C4 FD 21r50s92        1468 	ld	iy,#_ymmmf
   05C8 FD 34 01           1469 	inc	1 (iy)
   05CB                    1470 00116$:
                           1471 ;demo.c:202: for (yo = 0; yo<212-step;yo+=step) {
   05CB 21r4Cs92           1472 	ld	hl,#_yo + 0
   05CE 36 00              1473 	ld	(hl), #0x00
   05D0                    1474 00105$:
   05D0 3Ar4Cs92           1475 	ld	a,(#_yo+0)
   05D3 DD 77 ED           1476 	ld	-19 (ix),a
   05D6 DD 36 EE 00        1477 	ld	-18 (ix),#0x00
   05DA DD 7E ED           1478 	ld	a,-19 (ix)
   05DD D6 D2              1479 	sub	a,#0xD2
   05DF DD 7E EE           1480 	ld	a,-18 (ix)
   05E2 DE 00              1481 	sbc	a,#0x00
   05E4 F2r90s06           1482 	jp	P,00109$
                           1483 ;demo.c:203: xo = (sintabx[(yo+ymmmf) & 255]);
   05E7 21r50s92           1484 	ld	hl,#_ymmmf
   05EA DD 7E ED           1485 	ld	a,-19 (ix)
   05ED 86                 1486 	add	a,(hl)
   05EE 5F                 1487 	ld	e,a
   05EF DD 7E EE           1488 	ld	a,-18 (ix)
   05F2 23                 1489 	inc	hl
   05F3 8E                 1490 	adc	a,(hl)
   05F4 16 00              1491 	ld	d,#0x00
   05F6 CB 23              1492 	sla	e
   05F8 CB 12              1493 	rl	d
   05FA 21r38s00           1494 	ld	hl,#_sintabx
   05FD 19                 1495 	add	hl,de
   05FE 5E                 1496 	ld	e,(hl)
   05FF 23                 1497 	inc	hl
   0600 56                 1498 	ld	d,(hl)
   0601 DD 73 EF           1499 	ld	-17 (ix),e
   0604 DD 72 F0           1500 	ld	-16 (ix),d
                           1501 ;demo.c:206: cmd.source_x = 0;
   0607 21 06 00           1502 	ld	hl,#0x0006
   060A 39                 1503 	add	hl,sp
   060B 36 00              1504 	ld	(hl),#0x00
   060D 23                 1505 	inc	hl
   060E 36 00              1506 	ld	(hl),#0x00
                           1507 ;demo.c:207: cmd.source_y = 0+yo;
   0610 21 06 00           1508 	ld	hl,#0x0006
   0613 39                 1509 	add	hl,sp
   0614 EB                 1510 	ex	de,hl
   0615 4B                 1511 	ld	c,e
   0616 42                 1512 	ld	b,d
   0617 69                 1513 	ld	l,c
   0618 60                 1514 	ld	h,b
   0619 23                 1515 	inc	hl
   061A 23                 1516 	inc	hl
   061B DD 7E ED           1517 	ld	a,-19 (ix)
   061E 77                 1518 	ld	(hl),a
   061F 23                 1519 	inc	hl
   0620 DD 7E EE           1520 	ld	a,-18 (ix)
   0623 77                 1521 	ld	(hl),a
                           1522 ;demo.c:208: cmd.dest_x = xo;
   0624 21 04 00           1523 	ld	hl,#0x0004
   0627 19                 1524 	add	hl,de
   0628 DD 7E EF           1525 	ld	a,-17 (ix)
   062B 77                 1526 	ld	(hl),a
   062C 23                 1527 	inc	hl
   062D DD 7E F0           1528 	ld	a,-16 (ix)
   0630 77                 1529 	ld	(hl),a
                           1530 ;demo.c:209: cmd.dest_y = 3+yo;
   0631 21 06 00           1531 	ld	hl,#0x0006
   0634 19                 1532 	add	hl,de
   0635 DD 75 EB           1533 	ld	-21 (ix),l
   0638 DD 74 EC           1534 	ld	-20 (ix),h
   063B DD 7E ED           1535 	ld	a,-19 (ix)
   063E C6 03              1536 	add	a,#0x03
   0640 4F                 1537 	ld	c,a
   0641 DD 7E EE           1538 	ld	a,-18 (ix)
   0644 CE 00              1539 	adc	a,#0x00
   0646 47                 1540 	ld	b,a
   0647 DD 6E EB           1541 	ld	l,-21 (ix)
   064A DD 66 EC           1542 	ld	h,-20 (ix)
   064D 71                 1543 	ld	(hl),c
   064E 23                 1544 	inc	hl
   064F 70                 1545 	ld	(hl),b
                           1546 ;demo.c:210: cmd.size_x = 256;
   0650 21 08 00           1547 	ld	hl,#0x0008
   0653 19                 1548 	add	hl,de
   0654 36 00              1549 	ld	(hl),#0x00
   0656 23                 1550 	inc	hl
   0657 36 01              1551 	ld	(hl),#0x01
                           1552 ;demo.c:211: cmd.size_y = 1;
   0659 21 0A 00           1553 	ld	hl,#0x000A
   065C 19                 1554 	add	hl,de
   065D 36 01              1555 	ld	(hl),#0x01
   065F 23                 1556 	inc	hl
   0660 36 00              1557 	ld	(hl),#0x00
                           1558 ;demo.c:212: cmd.data = 0;
   0662 21 0C 00           1559 	ld	hl,#0x000C
   0665 19                 1560 	add	hl,de
   0666 4D                 1561 	ld	c,l
   0667 44                 1562 	ld	b,h
   0668 3E 00              1563 	ld	a,#0x00
   066A 02                 1564 	ld	(bc),a
                           1565 ;demo.c:213: cmd.argument = 0;
   066B 21 0D 00           1566 	ld	hl,#0x000D
   066E 19                 1567 	add	hl,de
   066F 4D                 1568 	ld	c,l
   0670 44                 1569 	ld	b,h
   0671 3E 00              1570 	ld	a,#0x00
   0673 02                 1571 	ld	(bc),a
                           1572 ;demo.c:214: cmd.command = 0xD0;
   0674 21 0E 00           1573 	ld	hl,#0x000E
   0677 19                 1574 	add	hl,de
   0678 4D                 1575 	ld	c,l
   0679 44                 1576 	ld	b,h
   067A 3E D0              1577 	ld	a,#0xD0
   067C 02                 1578 	ld	(bc),a
                           1579 ;demo.c:217: vdp_copier(&cmd);
   067D D5                 1580 	push	de
   067E CDr00s00           1581 	call	_vdp_copier
   0681 F1                 1582 	pop	af
                           1583 ;demo.c:202: for (yo = 0; yo<212-step;yo+=step) {
   0682 21r4Cs92           1584 	ld	hl,#_yo + 0
   0685 4E                 1585 	ld	c,(hl)
   0686 21r4Cs92           1586 	ld	hl,#_yo
   0689 79                 1587 	ld	a,c
   068A C6 02              1588 	add	a,#0x02
   068C 77                 1589 	ld	(hl),a
   068D C3rD0s05           1590 	jp	00105$
   0690                    1591 00109$:
   0690 DD F9              1592 	ld	sp,ix
   0692 DD E1              1593 	pop	ix
   0694 C9                 1594 	ret
   0695                    1595 _do_ymmm_end::
                           1596 ;demo.c:234: void do_blocks() {
                           1597 ;	---------------------------------
                           1598 ; Function do_blocks
                           1599 ; ---------------------------------
   0695                    1600 _do_blocks_start::
   0695                    1601 _do_blocks:
   0695 DD E5              1602 	push	ix
   0697 DD 21 00 00        1603 	ld	ix,#0
   069B DD 39              1604 	add	ix,sp
   069D 21 E9 FF           1605 	ld	hl,#-23
   06A0 39                 1606 	add	hl,sp
   06A1 F9                 1607 	ld	sp,hl
                           1608 ;demo.c:237: int ys = 0;
   06A2 DD 36 ED 00        1609 	ld	-19 (ix),#0x00
   06A6 DD 36 EE 00        1610 	ld	-18 (ix),#0x00
                           1611 ;demo.c:238: int ye = 0;
   06AA DD 36 EB 00        1612 	ld	-21 (ix),#0x00
   06AE DD 36 EC 00        1613 	ld	-20 (ix),#0x00
                           1614 ;demo.c:240: vdp_register(VDP_VOFFSET,0);
   06B2 21 17 00           1615 	ld	hl,#0x0017
   06B5 E5                 1616 	push	hl
   06B6 CDr00s00           1617 	call	_vdp_register
   06B9 F1                 1618 	pop	af
                           1619 ;demo.c:242: if (block_init == 0) {
   06BA AF                 1620 	xor	a,a
   06BB FD 21r52s92        1621 	ld	iy,#_block_init
   06BF FD B6 00           1622 	or	a,0 (iy)
   06C2 C2r2As07           1623 	jp	NZ,00108$
                           1624 ;demo.c:244: vdp_set_screen5();
   06C5 CDr00s00           1625 	call	_vdp_set_screen5
                           1626 ;demo.c:246: vdp_register(2, 0x5F);
   06C8 21 02 5F           1627 	ld	hl,#0x5F02
   06CB E5                 1628 	push	hl
   06CC CDr00s00           1629 	call	_vdp_register
   06CF F1                 1630 	pop	af
                           1631 ;demo.c:248: for(i=0;i<16;i++) btab[i] = i*16;
   06D0 DD 36 EF 00        1632 	ld	-17 (ix),#0x00
   06D4 DD 36 F0 00        1633 	ld	-16 (ix),#0x00
   06D8                    1634 00110$:
   06D8 DD 7E EF           1635 	ld	a,-17 (ix)
   06DB D6 10              1636 	sub	a,#0x10
   06DD DD 7E F0           1637 	ld	a,-16 (ix)
   06E0 DE 00              1638 	sbc	a,#0x00
   06E2 F2r1As07           1639 	jp	P,00113$
   06E5 DD 4E EF           1640 	ld	c,-17 (ix)
   06E8 DD 46 F0           1641 	ld	b,-16 (ix)
   06EB CB 21              1642 	sla	c
   06ED CB 10              1643 	rl	b
   06EF 21r5Bs92           1644 	ld	hl,#_btab
   06F2 09                 1645 	add	hl,bc
   06F3 4D                 1646 	ld	c,l
   06F4 44                 1647 	ld	b,h
   06F5 DD 5E EF           1648 	ld	e,-17 (ix)
   06F8 DD 56 F0           1649 	ld	d,-16 (ix)
   06FB CB 23              1650 	sla	e
   06FD CB 12              1651 	rl	d
   06FF CB 23              1652 	sla	e
   0701 CB 12              1653 	rl	d
   0703 CB 23              1654 	sla	e
   0705 CB 12              1655 	rl	d
   0707 CB 23              1656 	sla	e
   0709 CB 12              1657 	rl	d
   070B 69                 1658 	ld	l,c
   070C 60                 1659 	ld	h,b
   070D 73                 1660 	ld	(hl),e
   070E 23                 1661 	inc	hl
   070F 72                 1662 	ld	(hl),d
   0710 DD 34 EF           1663 	inc	-17 (ix)
   0713 20 03              1664 	jr	NZ,00139$
   0715 DD 34 F0           1665 	inc	-16 (ix)
   0718                    1666 00139$:
   0718 18 BE              1667 	jr	00110$
   071A                    1668 00113$:
                           1669 ;demo.c:249: vdp_load_palette(block_palette);
   071A 21r28s15           1670 	ld	hl,#_block_palette
   071D E5                 1671 	push	hl
   071E CDr00s00           1672 	call	_vdp_load_palette
   0721 F1                 1673 	pop	af
                           1674 ;demo.c:251: block_init = 1;
   0722 21r52s92           1675 	ld	hl,#_block_init + 0
   0725 36 01              1676 	ld	(hl), #0x01
   0727 C3rE9s08           1677 	jp	00122$
   072A                    1678 00108$:
                           1679 ;demo.c:255: if (flof == 0) { ys = 0; ye = 8; }
   072A 3Ar7Bs92           1680 	ld	a,(#_flof+0)
   072D FD 21r7Bs92        1681 	ld	iy,#_flof
   0731 FD B6 01           1682 	or	a,1 (iy)
   0734 20 10              1683 	jr	NZ,00102$
   0736 DD 36 ED 00        1684 	ld	-19 (ix),#0x00
   073A DD 36 EE 00        1685 	ld	-18 (ix),#0x00
   073E DD 36 EB 08        1686 	ld	-21 (ix),#0x08
   0742 DD 36 EC 00        1687 	ld	-20 (ix),#0x00
   0746                    1688 00102$:
                           1689 ;demo.c:256: if (flof == 1) { ys = 8; ye = 16; }
   0746 3Ar7Bs92           1690 	ld	a,(#_flof+0)
   0749 D6 01              1691 	sub	a,#0x01
   074B 20 06              1692 	jr	NZ,00140$
   074D 3Ar7Cs92           1693 	ld	a,(#_flof+1)
   0750 B7                 1694 	or	a,a
   0751 28 02              1695 	jr	Z,00141$
   0753                    1696 00140$:
   0753 18 10              1697 	jr	00104$
   0755                    1698 00141$:
   0755 DD 36 ED 08        1699 	ld	-19 (ix),#0x08
   0759 DD 36 EE 00        1700 	ld	-18 (ix),#0x00
   075D DD 36 EB 10        1701 	ld	-21 (ix),#0x10
   0761 DD 36 EC 00        1702 	ld	-20 (ix),#0x00
   0765                    1703 00104$:
                           1704 ;demo.c:258: for(bty=3;bty<11;bty++) {
   0765 FD 21r59s92        1705 	ld	iy,#_bty
   0769 FD 36 00 03        1706 	ld	0 (iy),#0x03
   076D FD 21r59s92        1707 	ld	iy,#_bty
   0771 FD 36 01 00        1708 	ld	1 (iy),#0x00
   0775                    1709 00118$:
   0775 3Ar59s92           1710 	ld	a,(#_bty+0)
   0778 D6 0B              1711 	sub	a,#0x0B
   077A 3Ar5As92           1712 	ld	a,(#_bty+1)
   077D DE 00              1713 	sbc	a,#0x00
   077F F2rC0s08           1714 	jp	P,00121$
                           1715 ;demo.c:259: for(btx=ys;btx<ye;btx++) {
   0782 DD 7E ED           1716 	ld	a,-19 (ix)
   0785 FD 21r57s92        1717 	ld	iy,#_btx
   0789 FD 77 00           1718 	ld	0 (iy),a
   078C DD 7E EE           1719 	ld	a,-18 (ix)
   078F FD 21r57s92        1720 	ld	iy,#_btx
   0793 FD 77 01           1721 	ld	1 (iy),a
   0796                    1722 00114$:
   0796 3Ar57s92           1723 	ld	a,(#_btx+0)
   0799 DD 96 EB           1724 	sub	a,-21 (ix)
   079C 3Ar58s92           1725 	ld	a,(#_btx+1)
   079F DD 9E EC           1726 	sbc	a,-20 (ix)
   07A2 F2rADs08           1727 	jp	P,00120$
                           1728 ;demo.c:260: bsx = (PLY_PSGReg8 & PLY_PSGReg9 | PLY_PSGReg10)>>1;
   07A5 3Ar00s00           1729 	ld	a,(#_PLY_PSGReg8+0)
   07A8 FD 21r00s00        1730 	ld	iy,#_PLY_PSGReg9
   07AC FD A6 00           1731 	and	a,0 (iy)
   07AF 21r00s00           1732 	ld	hl,#_PLY_PSGReg10 + 0
   07B2 B6                 1733 	or	a,(hl)
   07B3 4F                 1734 	ld	c,a
   07B4 CB 39              1735 	srl	c
   07B6 21r53s92           1736 	ld	hl,#_bsx + 0
   07B9 71                 1737 	ld	(hl), c
   07BA 21r54s92           1738 	ld	hl,#_bsx + 1
   07BD 36 00              1739 	ld	(hl), #0x00
                           1740 ;demo.c:261: bsy = PLY_PSGReg10;
   07BF 3Ar00s00           1741 	ld	a,(#_PLY_PSGReg10+0)
   07C2 21r55s92           1742 	ld	hl,#_bsy + 0
   07C5 77                 1743 	ld	(hl), a
   07C6 21r56s92           1744 	ld	hl,#_bsy + 1
   07C9 36 00              1745 	ld	(hl), #0x00
                           1746 ;demo.c:262: cmd.source_x = btab[bsx];
   07CB 21 08 00           1747 	ld	hl,#0x0008
   07CE 39                 1748 	add	hl,sp
   07CF 4D                 1749 	ld	c,l
   07D0 44                 1750 	ld	b,h
   07D1 21r53s92           1751 	ld	hl,#_bsx + 0
   07D4 5E                 1752 	ld	e,(hl)
   07D5 21r54s92           1753 	ld	hl,#_bsx + 1
   07D8 56                 1754 	ld	d,(hl)
   07D9 CB 23              1755 	sla	e
   07DB CB 12              1756 	rl	d
   07DD 21r5Bs92           1757 	ld	hl,#_btab
   07E0 19                 1758 	add	hl,de
   07E1 5E                 1759 	ld	e,(hl)
   07E2 23                 1760 	inc	hl
   07E3 56                 1761 	ld	d,(hl)
   07E4 69                 1762 	ld	l,c
   07E5 60                 1763 	ld	h,b
   07E6 73                 1764 	ld	(hl),e
   07E7 23                 1765 	inc	hl
   07E8 72                 1766 	ld	(hl),d
                           1767 ;demo.c:263: cmd.source_y = 768+btab[bsy];
   07E9 21 08 00           1768 	ld	hl,#0x0008
   07EC 39                 1769 	add	hl,sp
   07ED 4D                 1770 	ld	c,l
   07EE 44                 1771 	ld	b,h
   07EF 21 02 00           1772 	ld	hl,#0x0002
   07F2 09                 1773 	add	hl,bc
   07F3 DD 75 E9           1774 	ld	-23 (ix),l
   07F6 DD 74 EA           1775 	ld	-22 (ix),h
   07F9 21r55s92           1776 	ld	hl,#_bsy + 0
   07FC 5E                 1777 	ld	e,(hl)
   07FD 21r56s92           1778 	ld	hl,#_bsy + 1
   0800 56                 1779 	ld	d,(hl)
   0801 CB 23              1780 	sla	e
   0803 CB 12              1781 	rl	d
   0805 21r5Bs92           1782 	ld	hl,#_btab
   0808 19                 1783 	add	hl,de
   0809 5E                 1784 	ld	e,(hl)
   080A 23                 1785 	inc	hl
   080B 56                 1786 	ld	d,(hl)
   080C 21 00 03           1787 	ld	hl,#0x0300
   080F 19                 1788 	add	hl,de
   0810 EB                 1789 	ex	de,hl
   0811 DD 6E E9           1790 	ld	l,-23 (ix)
   0814 DD 66 EA           1791 	ld	h,-22 (ix)
   0817 73                 1792 	ld	(hl),e
   0818 23                 1793 	inc	hl
   0819 72                 1794 	ld	(hl),d
                           1795 ;demo.c:264: cmd.dest_x = btab[btx];
   081A 21 04 00           1796 	ld	hl,#0x0004
   081D 09                 1797 	add	hl,bc
   081E DD 75 E9           1798 	ld	-23 (ix),l
   0821 DD 74 EA           1799 	ld	-22 (ix),h
   0824 21r57s92           1800 	ld	hl,#_btx + 0
   0827 5E                 1801 	ld	e,(hl)
   0828 21r58s92           1802 	ld	hl,#_btx + 1
   082B 56                 1803 	ld	d,(hl)
   082C CB 23              1804 	sla	e
   082E CB 12              1805 	rl	d
   0830 21r5Bs92           1806 	ld	hl,#_btab
   0833 19                 1807 	add	hl,de
   0834 5E                 1808 	ld	e,(hl)
   0835 23                 1809 	inc	hl
   0836 56                 1810 	ld	d,(hl)
   0837 DD 6E E9           1811 	ld	l,-23 (ix)
   083A DD 66 EA           1812 	ld	h,-22 (ix)
   083D 73                 1813 	ld	(hl),e
   083E 23                 1814 	inc	hl
   083F 72                 1815 	ld	(hl),d
                           1816 ;demo.c:265: cmd.dest_y = 512+btab[bty];
   0840 21 06 00           1817 	ld	hl,#0x0006
   0843 09                 1818 	add	hl,bc
   0844 DD 75 E9           1819 	ld	-23 (ix),l
   0847 DD 74 EA           1820 	ld	-22 (ix),h
   084A 21r59s92           1821 	ld	hl,#_bty + 0
   084D 5E                 1822 	ld	e,(hl)
   084E 21r5As92           1823 	ld	hl,#_bty + 1
   0851 56                 1824 	ld	d,(hl)
   0852 CB 23              1825 	sla	e
   0854 CB 12              1826 	rl	d
   0856 21r5Bs92           1827 	ld	hl,#_btab
   0859 19                 1828 	add	hl,de
   085A 5E                 1829 	ld	e,(hl)
   085B 23                 1830 	inc	hl
   085C 56                 1831 	ld	d,(hl)
   085D 21 00 02           1832 	ld	hl,#0x0200
   0860 19                 1833 	add	hl,de
   0861 EB                 1834 	ex	de,hl
   0862 DD 6E E9           1835 	ld	l,-23 (ix)
   0865 DD 66 EA           1836 	ld	h,-22 (ix)
   0868 73                 1837 	ld	(hl),e
   0869 23                 1838 	inc	hl
   086A 72                 1839 	ld	(hl),d
                           1840 ;demo.c:266: cmd.size_x = 16;
   086B 21 08 00           1841 	ld	hl,#0x0008
   086E 09                 1842 	add	hl,bc
   086F 36 10              1843 	ld	(hl),#0x10
   0871 23                 1844 	inc	hl
   0872 36 00              1845 	ld	(hl),#0x00
                           1846 ;demo.c:267: cmd.size_y = 16;
   0874 21 0A 00           1847 	ld	hl,#0x000A
   0877 09                 1848 	add	hl,bc
   0878 36 10              1849 	ld	(hl),#0x10
   087A 23                 1850 	inc	hl
   087B 36 00              1851 	ld	(hl),#0x00
                           1852 ;demo.c:268: cmd.data = 0;
   087D 21 0C 00           1853 	ld	hl,#0x000C
   0880 09                 1854 	add	hl,bc
   0881 EB                 1855 	ex	de,hl
   0882 3E 00              1856 	ld	a,#0x00
   0884 12                 1857 	ld	(de),a
                           1858 ;demo.c:269: cmd.argument = 0x00;
   0885 21 0D 00           1859 	ld	hl,#0x000D
   0888 09                 1860 	add	hl,bc
   0889 EB                 1861 	ex	de,hl
   088A 3E 00              1862 	ld	a,#0x00
   088C 12                 1863 	ld	(de),a
                           1864 ;demo.c:270: cmd.command = 0xD0;
   088D 21 0E 00           1865 	ld	hl,#0x000E
   0890 09                 1866 	add	hl,bc
   0891 EB                 1867 	ex	de,hl
   0892 3E D0              1868 	ld	a,#0xD0
   0894 12                 1869 	ld	(de),a
                           1870 ;demo.c:271: vdp_copier(&cmd);
   0895 C5                 1871 	push	bc
   0896 CDr00s00           1872 	call	_vdp_copier
   0899 F1                 1873 	pop	af
                           1874 ;demo.c:259: for(btx=ys;btx<ye;btx++) {
   089A FD 21r57s92        1875 	ld	iy,#_btx
   089E FD 34 00           1876 	inc	0 (iy)
   08A1 20 07              1877 	jr	NZ,00150$
   08A3 FD 21r57s92        1878 	ld	iy,#_btx
   08A7 FD 34 01           1879 	inc	1 (iy)
   08AA                    1880 00150$:
   08AA C3r96s07           1881 	jp	00114$
   08AD                    1882 00120$:
                           1883 ;demo.c:258: for(bty=3;bty<11;bty++) {
   08AD FD 21r59s92        1884 	ld	iy,#_bty
   08B1 FD 34 00           1885 	inc	0 (iy)
   08B4 20 07              1886 	jr	NZ,00151$
   08B6 FD 21r59s92        1887 	ld	iy,#_bty
   08BA FD 34 01           1888 	inc	1 (iy)
   08BD                    1889 00151$:
   08BD C3r75s07           1890 	jp	00118$
   08C0                    1891 00121$:
                           1892 ;demo.c:275: flof++;
   08C0 FD 21r7Bs92        1893 	ld	iy,#_flof
   08C4 FD 34 00           1894 	inc	0 (iy)
   08C7 20 07              1895 	jr	NZ,00152$
   08C9 FD 21r7Bs92        1896 	ld	iy,#_flof
   08CD FD 34 01           1897 	inc	1 (iy)
   08D0                    1898 00152$:
                           1899 ;demo.c:276: if (flof == 2) flof = 0;
   08D0 3Ar7Bs92           1900 	ld	a,(#_flof+0)
   08D3 D6 02              1901 	sub	a,#0x02
   08D5 20 06              1902 	jr	NZ,00153$
   08D7 3Ar7Cs92           1903 	ld	a,(#_flof+1)
   08DA B7                 1904 	or	a,a
   08DB 28 02              1905 	jr	Z,00154$
   08DD                    1906 00153$:
   08DD 18 0A              1907 	jr	00122$
   08DF                    1908 00154$:
   08DF 21r7Bs92           1909 	ld	hl,#_flof + 0
   08E2 36 00              1910 	ld	(hl), #0x00
   08E4 21r7Cs92           1911 	ld	hl,#_flof + 1
   08E7 36 00              1912 	ld	(hl), #0x00
   08E9                    1913 00122$:
   08E9 DD F9              1914 	ld	sp,ix
   08EB DD E1              1915 	pop	ix
   08ED C9                 1916 	ret
   08EE                    1917 _do_blocks_end::
                           1918 ;demo.c:286: void main() {
                           1919 ;	---------------------------------
                           1920 ; Function main
                           1921 ; ---------------------------------
   08EE                    1922 _main_start::
   08EE                    1923 _main:
   08EE DD E5              1924 	push	ix
   08F0 DD 21 00 00        1925 	ld	ix,#0
   08F4 DD 39              1926 	add	ix,sp
   08F6 21 EE FF           1927 	ld	hl,#-18
   08F9 39                 1928 	add	hl,sp
   08FA F9                 1929 	ld	sp,hl
                           1930 ;demo.c:287: unsigned char quit=0;
   08FB DD 36 FF 00        1931 	ld	-1 (ix),#0x00
                           1932 ;demo.c:288: int modes = 8; // interlace bit on
   08FF DD 36 FD 08        1933 	ld	-3 (ix),#0x08
   0903 DD 36 FE 00        1934 	ld	-2 (ix),#0x00
                           1935 ;demo.c:292: spindown();
   0907 CDr00s00           1936 	call	_spindown
                           1937 ;demo.c:294: puts("demo init\r\n\r\n");
   090A 21rCCs0A           1938 	ld	hl,#__str_0
   090D E5                 1939 	push	hl
   090E CDr00s00           1940 	call	_puts
   0911 F1                 1941 	pop	af
                           1942 ;demo.c:296: puts("loading sample data\r\n");
   0912 21rDAs0A           1943 	ld	hl,#__str_1
   0915 E5                 1944 	push	hl
   0916 CDr00s00           1945 	call	_puts
   0919 F1                 1946 	pop	af
                           1947 ;demo.c:298: raw_load("SAMPLE  RAW", 32000, sample_buf);
   091A 21r48s15           1948 	ld	hl,#_sample_buf
   091D E5                 1949 	push	hl
   091E 21 00 7D           1950 	ld	hl,#0x7D00
   0921 E5                 1951 	push	hl
   0922 21rF0s0A           1952 	ld	hl,#__str_2
   0925 E5                 1953 	push	hl
   0926 CDrD0s03           1954 	call	_raw_load
   0929 F1                 1955 	pop	af
   092A F1                 1956 	pop	af
   092B F1                 1957 	pop	af
                           1958 ;demo.c:300: puts("Your PSG works perfectly!\r\n");
   092C 21rFCs0A           1959 	ld	hl,#__str_3
   092F E5                 1960 	push	hl
   0930 CDr00s00           1961 	call	_puts
   0933 F1                 1962 	pop	af
                           1963 ;demo.c:302: while (loops > 0) {
   0934 06 04              1964 	ld	b,#0x04
   0936 1E 00              1965 	ld	e,#0x00
   0938                    1966 00101$:
   0938 3E 00              1967 	ld	a,#0x00
   093A 90                 1968 	sub	a,b
   093B 3E 00              1969 	ld	a,#0x00
   093D 9B                 1970 	sbc	a,e
   093E F2r5Ds09           1971 	jp	P,00103$
                           1972 ;demo.c:303: play_sample(sample_buf+2,(51872/2)-400);
   0941 21r4As15           1973 	ld	hl,#_sample_buf + 2
   0944 55                 1974 	ld	d,l
   0945 4C                 1975 	ld	c,h
   0946 C5                 1976 	push	bc
   0947 D5                 1977 	push	de
   0948 21 C0 63           1978 	ld	hl,#0x63C0
   094B E5                 1979 	push	hl
   094C 6A                 1980 	ld	l,d
   094D 61                 1981 	ld	h,c
   094E E5                 1982 	push	hl
   094F CDr00s00           1983 	call	_play_sample
   0952 F1                 1984 	pop	af
   0953 F1                 1985 	pop	af
   0954 D1                 1986 	pop	de
   0955 C1                 1987 	pop	bc
                           1988 ;demo.c:304: loops--;
   0956 68                 1989 	ld	l,b
   0957 63                 1990 	ld	h,e
   0958 2B                 1991 	dec	hl
   0959 45                 1992 	ld	b,l
   095A 5C                 1993 	ld	e,h
   095B 18 DB              1994 	jr	00101$
   095D                    1995 00103$:
                           1996 ;demo.c:307: puts("music init...");
   095D 21r18s0B           1997 	ld	hl,#__str_4
   0960 E5                 1998 	push	hl
   0961 CDr00s00           1999 	call	_puts
   0964 F1                 2000 	pop	af
                           2001 ;demo.c:309: PLY_SongPtr = (char *)0x0103;
   0965 21r00s00           2002 	ld	hl,#_PLY_SongPtr + 0
   0968 36 03              2003 	ld	(hl), #0x03
   096A 21r01s00           2004 	ld	hl,#_PLY_SongPtr + 1
   096D 36 01              2005 	ld	(hl), #0x01
                           2006 ;demo.c:310: PLY_Init();
   096F CDr00s00           2007 	call	_PLY_Init
                           2008 ;demo.c:311: puts("done.\n\n");
   0972 21r26s0B           2009 	ld	hl,#__str_5
   0975 E5                 2010 	push	hl
   0976 CDr00s00           2011 	call	_puts
   0979 F1                 2012 	pop	af
                           2013 ;demo.c:313: if(isvdp2())
   097A CDr00s00           2014 	call	_isvdp2
   097D AF                 2015 	xor	a,a
   097E B5                 2016 	or	a,l
   097F 28 08              2017 	jr	Z,00105$
                           2018 ;demo.c:315: modes+=2; // pal
   0981 DD 36 FD 0A        2019 	ld	-3 (ix),#0x0A
   0985 DD 36 FE 00        2020 	ld	-2 (ix),#0x00
   0989                    2021 00105$:
                           2022 ;demo.c:319: vdp_set_screen6();
   0989 CDr00s00           2023 	call	_vdp_set_screen6
                           2024 ;demo.c:321: vdp_register(VDP_MODE3,modes); // interlace on, screen mode pal or ntsc
   098C DD 7E FD           2025 	ld	a,-3 (ix)
   098F F5                 2026 	push	af
   0990 33                 2027 	inc	sp
   0991 3E 09              2028 	ld	a,#0x09
   0993 F5                 2029 	push	af
   0994 33                 2030 	inc	sp
   0995 CDr00s00           2031 	call	_vdp_register
   0998 F1                 2032 	pop	af
                           2033 ;demo.c:323: puts("demo start\r\n");
   0999 21r2Es0B           2034 	ld	hl,#__str_6
   099C E5                 2035 	push	hl
   099D CDr00s00           2036 	call	_puts
   09A0 F1                 2037 	pop	af
                           2038 ;demo.c:325: scratch_clear();
   09A1 CDr09s03           2039 	call	_scratch_clear
                           2040 ;demo.c:326: vdp_load_palette(scratch);
   09A4 21r88s14           2041 	ld	hl,#_scratch
   09A7 E5                 2042 	push	hl
   09A8 CDr00s00           2043 	call	_vdp_load_palette
   09AB F1                 2044 	pop	af
                           2045 ;demo.c:328: vdp_register(VDP_VOFFSET,0);
   09AC 21 17 00           2046 	ld	hl,#0x0017
   09AF E5                 2047 	push	hl
   09B0 CDr00s00           2048 	call	_vdp_register
   09B3 F1                 2049 	pop	af
                           2050 ;demo.c:330: pal_load("STDBLCK PL5", 32);
   09B4 3E 20              2051 	ld	a,#0x20
   09B6 F5                 2052 	push	af
   09B7 33                 2053 	inc	sp
   09B8 21r3Bs0B           2054 	ld	hl,#__str_7
   09BB E5                 2055 	push	hl
   09BC CDr1Cs03           2056 	call	_pal_load
   09BF F1                 2057 	pop	af
   09C0 33                 2058 	inc	sp
                           2059 ;demo.c:331: memcpy(block_palette,cur_palette,32);
   09C1 21 20 00           2060 	ld	hl,#0x0020
   09C4 E5                 2061 	push	hl
   09C5 21r08s15           2062 	ld	hl,#_cur_palette
   09C8 E5                 2063 	push	hl
   09C9 21r28s15           2064 	ld	hl,#_block_palette
   09CC E5                 2065 	push	hl
   09CD CDr00s00           2066 	call	_memcpy
   09D0 F1                 2067 	pop	af
   09D1 F1                 2068 	pop	af
   09D2 F1                 2069 	pop	af
                           2070 ;demo.c:333: pal_load("MONOLOG PI6", 8);
   09D3 3E 08              2071 	ld	a,#0x08
   09D5 F5                 2072 	push	af
   09D6 33                 2073 	inc	sp
   09D7 21r47s0B           2074 	ld	hl,#__str_8
   09DA E5                 2075 	push	hl
   09DB CDr1Cs03           2076 	call	_pal_load
   09DE F1                 2077 	pop	af
   09DF 33                 2078 	inc	sp
                           2079 ;demo.c:335: memset((uint8_t *) &packbuffer, 0, 5000);
   09E0 21 88 13           2080 	ld	hl,#0x1388
   09E3 E5                 2081 	push	hl
   09E4 3E 00              2082 	ld	a,#0x00
   09E6 F5                 2083 	push	af
   09E7 33                 2084 	inc	sp
   09E8 21r00s01           2085 	ld	hl,#_packbuffer
   09EB E5                 2086 	push	hl
   09EC CDr00s00           2087 	call	_memset
   09EF F1                 2088 	pop	af
   09F0 F1                 2089 	pop	af
   09F1 33                 2090 	inc	sp
                           2091 ;demo.c:336: raw_load("STDBLCK PCK", 4884, packbuffer);
   09F2 21r00s01           2092 	ld	hl,#_packbuffer
   09F5 E5                 2093 	push	hl
   09F6 21 14 13           2094 	ld	hl,#0x1314
   09F9 E5                 2095 	push	hl
   09FA 21r53s0B           2096 	ld	hl,#__str_9
   09FD E5                 2097 	push	hl
   09FE CDrD0s03           2098 	call	_raw_load
   0A01 F1                 2099 	pop	af
   0A02 F1                 2100 	pop	af
   0A03 F1                 2101 	pop	af
                           2102 ;demo.c:337: bitbuster(packbuffer,0x8000,VRAM_1); // to page 2 (0x10000)
   0A04 3E 00              2103 	ld	a,#0x00
   0A06 F5                 2104 	push	af
   0A07 33                 2105 	inc	sp
   0A08 21 00 80           2106 	ld	hl,#0x8000
   0A0B E5                 2107 	push	hl
   0A0C 21r00s01           2108 	ld	hl,#_packbuffer
   0A0F E5                 2109 	push	hl
   0A10 CDr00s00           2110 	call	_bitbuster
   0A13 F1                 2111 	pop	af
   0A14 F1                 2112 	pop	af
   0A15 33                 2113 	inc	sp
                           2114 ;demo.c:339: memset((uint8_t *) &packbuffer, 0, 5000);
   0A16 21 88 13           2115 	ld	hl,#0x1388
   0A19 E5                 2116 	push	hl
   0A1A 3E 00              2117 	ld	a,#0x00
   0A1C F5                 2118 	push	af
   0A1D 33                 2119 	inc	sp
   0A1E 21r00s01           2120 	ld	hl,#_packbuffer
   0A21 E5                 2121 	push	hl
   0A22 CDr00s00           2122 	call	_memset
   0A25 F1                 2123 	pop	af
   0A26 F1                 2124 	pop	af
   0A27 33                 2125 	inc	sp
                           2126 ;demo.c:340: raw_load("MONOLOG PCK", 2042, packbuffer);
   0A28 21r00s01           2127 	ld	hl,#_packbuffer
   0A2B E5                 2128 	push	hl
   0A2C 21 FA 07           2129 	ld	hl,#0x07FA
   0A2F E5                 2130 	push	hl
   0A30 21r5Fs0B           2131 	ld	hl,#__str_10
   0A33 E5                 2132 	push	hl
   0A34 CDrD0s03           2133 	call	_raw_load
   0A37 F1                 2134 	pop	af
   0A38 F1                 2135 	pop	af
   0A39 F1                 2136 	pop	af
                           2137 ;demo.c:341: bitbuster(packbuffer,0x0000,VRAM_0); // to page 0 (0x0000)
   0A3A 3E 01              2138 	ld	a,#0x01
   0A3C F5                 2139 	push	af
   0A3D 33                 2140 	inc	sp
   0A3E 21 00 00           2141 	ld	hl,#0x0000
   0A41 E5                 2142 	push	hl
   0A42 21r00s01           2143 	ld	hl,#_packbuffer
   0A45 E5                 2144 	push	hl
   0A46 CDr00s00           2145 	call	_bitbuster
   0A49 F1                 2146 	pop	af
   0A4A F1                 2147 	pop	af
   0A4B 33                 2148 	inc	sp
                           2149 ;demo.c:343: scratch_clear();
   0A4C CDr09s03           2150 	call	_scratch_clear
                           2151 ;demo.c:345: install_isr(my_isr);
   0A4F 21r00s00           2152 	ld	hl,#_my_isr
   0A52 E5                 2153 	push	hl
   0A53 CDr00s00           2154 	call	_install_isr
   0A56 F1                 2155 	pop	af
                           2156 ;demo.c:347: while (!quit) {
   0A57                    2157 00115$:
   0A57 AF                 2158 	xor	a,a
   0A58 DD B6 FF           2159 	or	a,-1 (ix)
   0A5B 20 48              2160 	jr	NZ,00117$
                           2161 ;demo.c:348: waitVB();
   0A5D 76                 2162 		halt 
                           2163 ;demo.c:350: if (vbicount < 192) { 
   0A5E 3Ar48s92           2164 	ld	a,(#_vbicount+0)
   0A61 D6 C0              2165 	sub	a,#0xC0
   0A63 3Ar49s92           2166 	ld	a,(#_vbicount+1)
   0A66 DE 00              2167 	sbc	a,#0x00
   0A68 F2r70s0A           2168 	jp	P,00111$
                           2169 ;demo.c:351: fadein(); 
   0A6B CDr94s04           2170 	call	_fadein
   0A6E 18 22              2171 	jr	00112$
   0A70                    2172 00111$:
                           2173 ;demo.c:352: } else if (vbicount >= 192 && vbicount < 800) {
   0A70 3Ar48s92           2174 	ld	a,(#_vbicount+0)
   0A73 D6 C0              2175 	sub	a,#0xC0
   0A75 3Ar49s92           2176 	ld	a,(#_vbicount+1)
   0A78 DE 00              2177 	sbc	a,#0x00
   0A7A FAr8Fs0A           2178 	jp	M,00107$
   0A7D 3Ar48s92           2179 	ld	a,(#_vbicount+0)
   0A80 D6 20              2180 	sub	a,#0x20
   0A82 3Ar49s92           2181 	ld	a,(#_vbicount+1)
   0A85 DE 03              2182 	sbc	a,#0x03
   0A87 F2r8Fs0A           2183 	jp	P,00107$
                           2184 ;demo.c:353: do_ymmm();
   0A8A CDr60s05           2185 	call	_do_ymmm
   0A8D 18 03              2186 	jr	00112$
   0A8F                    2187 00107$:
                           2188 ;demo.c:355: do_blocks();
   0A8F CDr95s06           2189 	call	_do_blocks
   0A92                    2190 00112$:
                           2191 ;demo.c:358: if(space())
   0A92 21 08 01           2192 	ld	hl,#0x0108
   0A95 E5                 2193 	push	hl
   0A96 CDr00s00           2194 	call	_ispressed
   0A99 F1                 2195 	pop	af
   0A9A 4D                 2196 	ld	c,l
   0A9B AF                 2197 	xor	a,a
   0A9C B5                 2198 	or	a,l
   0A9D 28 B8              2199 	jr	Z,00115$
                           2200 ;demo.c:359: quit=1;
   0A9F DD 36 FF 01        2201 	ld	-1 (ix),#0x01
   0AA3 18 B2              2202 	jr	00115$
   0AA5                    2203 00117$:
                           2204 ;demo.c:362: waitVB();
   0AA5 76                 2205 		halt 
                           2206 ;demo.c:363: uninstall_isr();
   0AA6 CDr00s00           2207 	call	_uninstall_isr
                           2208 ;demo.c:364: PLY_Stop();
   0AA9 CDr00s00           2209 	call	_PLY_Stop
                           2210 ;demo.c:365: PLY_SendRegisters();
   0AAC CDr00s00           2211 	call	_PLY_SendRegisters
                           2212 ;demo.c:367: screen(0);
   0AAF 3E 00              2213 	ld	a,#0x00
   0AB1 F5                 2214 	push	af
   0AB2 33                 2215 	inc	sp
   0AB3 CDr00s00           2216 	call	_screen
   0AB6 33                 2217 	inc	sp
                           2218 ;demo.c:369: puts("demo exit\r\n\r\n");
   0AB7 21r6Bs0B           2219 	ld	hl,#__str_11
   0ABA E5                 2220 	push	hl
   0ABB CDr00s00           2221 	call	_puts
   0ABE F1                 2222 	pop	af
                           2223 ;demo.c:371: exit(0);
   0ABF 3E 00              2224 	ld	a,#0x00
   0AC1 F5                 2225 	push	af
   0AC2 33                 2226 	inc	sp
   0AC3 CDr00s00           2227 	call	_exit
   0AC6 33                 2228 	inc	sp
   0AC7 DD F9              2229 	ld	sp,ix
   0AC9 DD E1              2230 	pop	ix
   0ACB C9                 2231 	ret
   0ACC                    2232 _main_end::
   0ACC                    2233 __str_0:
   0ACC 64 65 6D 6F 20 69  2234 	.ascii "demo init"
        6E 69 74
   0AD5 0D                 2235 	.db 0x0D
   0AD6 0A                 2236 	.db 0x0A
   0AD7 0D                 2237 	.db 0x0D
   0AD8 0A                 2238 	.db 0x0A
   0AD9 00                 2239 	.db 0x00
   0ADA                    2240 __str_1:
   0ADA 6C 6F 61 64 69 6E  2241 	.ascii "loading sample data"
        67 20 73 61 6D 70
        6C 65 20 64 61 74
        61
   0AED 0D                 2242 	.db 0x0D
   0AEE 0A                 2243 	.db 0x0A
   0AEF 00                 2244 	.db 0x00
   0AF0                    2245 __str_2:
   0AF0 53 41 4D 50 4C 45  2246 	.ascii "SAMPLE  RAW"
        20 20 52 41 57
   0AFB 00                 2247 	.db 0x00
   0AFC                    2248 __str_3:
   0AFC 59 6F 75 72 20 50  2249 	.ascii "Your PSG works perfectly!"
        53 47 20 77 6F 72
        6B 73 20 70 65 72
        66 65 63 74 6C 79
        21
   0B15 0D                 2250 	.db 0x0D
   0B16 0A                 2251 	.db 0x0A
   0B17 00                 2252 	.db 0x00
   0B18                    2253 __str_4:
   0B18 6D 75 73 69 63 20  2254 	.ascii "music init..."
        69 6E 69 74 2E 2E
        2E
   0B25 00                 2255 	.db 0x00
   0B26                    2256 __str_5:
   0B26 64 6F 6E 65 2E     2257 	.ascii "done."
   0B2B 0A                 2258 	.db 0x0A
   0B2C 0A                 2259 	.db 0x0A
   0B2D 00                 2260 	.db 0x00
   0B2E                    2261 __str_6:
   0B2E 64 65 6D 6F 20 73  2262 	.ascii "demo start"
        74 61 72 74
   0B38 0D                 2263 	.db 0x0D
   0B39 0A                 2264 	.db 0x0A
   0B3A 00                 2265 	.db 0x00
   0B3B                    2266 __str_7:
   0B3B 53 54 44 42 4C 43  2267 	.ascii "STDBLCK PL5"
        4B 20 50 4C 35
   0B46 00                 2268 	.db 0x00
   0B47                    2269 __str_8:
   0B47 4D 4F 4E 4F 4C 4F  2270 	.ascii "MONOLOG PI6"
        47 20 50 49 36
   0B52 00                 2271 	.db 0x00
   0B53                    2272 __str_9:
   0B53 53 54 44 42 4C 43  2273 	.ascii "STDBLCK PCK"
        4B 20 50 43 4B
   0B5E 00                 2274 	.db 0x00
   0B5F                    2275 __str_10:
   0B5F 4D 4F 4E 4F 4C 4F  2276 	.ascii "MONOLOG PCK"
        47 20 50 43 4B
   0B6A 00                 2277 	.db 0x00
   0B6B                    2278 __str_11:
   0B6B 64 65 6D 6F 20 65  2279 	.ascii "demo exit"
        78 69 74
   0B74 0D                 2280 	.db 0x0D
   0B75 0A                 2281 	.db 0x0A
   0B76 0D                 2282 	.db 0x0D
   0B77 0A                 2283 	.db 0x0A
   0B78 00                 2284 	.db 0x00
                           2285 	.area _CODE
                           2286 	.area _CABS
