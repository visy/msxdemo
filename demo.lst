                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Mar 22 2009) (Mac OS X i386)
                              4 ; This file was generated Mon Feb 26 16:17:51 2018
                              5 ;--------------------------------------------------------
                              6 	.module demo
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _do_quit
                             14 	.globl _boxes
                             15 	.globl _drawbox
                             16 	.globl _animplay
                             17 	.globl _bulbs
                             18 	.globl _twister
                             19 	.globl _font
                             20 	.globl _drawsine
                             21 	.globl _drawstr
                             22 	.globl _do_letter_tall
                             23 	.globl _do_letter
                             24 	.globl _raster_effu
                             25 	.globl _do_blocks
                             26 	.globl _do_ymmm
                             27 	.globl _fadein
                             28 	.globl _pck_load
                             29 	.globl _raw_load
                             30 	.globl _pause
                             31 	.globl _pal_load
                             32 	.globl _scratch_clear
                             33 	.globl _ge5_load
                             34 	.globl _color_isr
                             35 	.globl _my_isr
                             36 	.globl _isNthBitSet
                             37 	.globl _pbt
                             38 	.globl _pbx
                             39 	.globl _bonc
                             40 	.globl _bo
                             41 	.globl _byy
                             42 	.globl _bxx
                             43 	.globl _bt
                             44 	.globl _by
                             45 	.globl _bx
                             46 	.globl _prevby
                             47 	.globl _prevbx
                             48 	.globl _prevy
                             49 	.globl _prevx
                             50 	.globl _dbly
                             51 	.globl _buffer
                             52 	.globl _boxes_init
                             53 	.globl _anim_init
                             54 	.globl _enderdir
                             55 	.globl _ender
                             56 	.globl _ff2
                             57 	.globl _ff1
                             58 	.globl _bulbflipper
                             59 	.globl _twinited
                             60 	.globl _ff
                             61 	.globl _ly
                             62 	.globl _lx
                             63 	.globl _linenum
                             64 	.globl _flof
                             65 	.globl _btab
                             66 	.globl _bty
                             67 	.globl _btx
                             68 	.globl _bsy
                             69 	.globl _bsx
                             70 	.globl _block_init
                             71 	.globl _cc
                             72 	.globl _yofff
                             73 	.globl _cmd
                             74 	.globl _tick
                             75 	.globl _vbicount
                             76 	.globl _boxes_palette
                             77 	.globl _tf_palette
                             78 	.globl _twister_palette
                             79 	.globl _block_palette
                             80 	.globl _cur_palette
                             81 	.globl _scratch
                             82 	.globl _tf2
                             83 	.globl _tf1
                             84 	.globl _packbuffer
                             85 	.globl _sintab
                             86 	.globl _font_w
                             87 	.globl _font_y
                             88 	.globl _font_x
                             89 	.globl _sintabx
                             90 ;--------------------------------------------------------
                             91 ; special function registers
                             92 ;--------------------------------------------------------
                             93 ;--------------------------------------------------------
                             94 ;  ram data
                             95 ;--------------------------------------------------------
                             96 	.area _DATA
   0000                      97 _sintab::
   0000                      98 	.ds 256
   0100                      99 _packbuffer::
   0100                     100 	.ds 12000
   2FE0                     101 _tf1::
   2FE0                     102 	.ds 12000
   5EC0                     103 _tf2::
   5EC0                     104 	.ds 12000
   8DA0                     105 _scratch::
   8DA0                     106 	.ds 128
   8E20                     107 _cur_palette::
   8E20                     108 	.ds 32
   8E40                     109 _block_palette::
   8E40                     110 	.ds 32
   8E60                     111 _twister_palette::
   8E60                     112 	.ds 32
   8E80                     113 _tf_palette::
   8E80                     114 	.ds 32
   8EA0                     115 _boxes_palette::
   8EA0                     116 	.ds 32
   8EC0                     117 _vbicount::
   8EC0                     118 	.ds 2
   8EC2                     119 _tick::
   8EC2                     120 	.ds 2
   8EC4                     121 _cmd::
   8EC4                     122 	.ds 15
   8ED3                     123 _isNthBitSet_mask_1_1:
   8ED3                     124 	.ds 8
   8EDB                     125 _yofff::
   8EDB                     126 	.ds 1
   8EDC                     127 _cc::
   8EDC                     128 	.ds 1
   8EDD                     129 _flipper:
   8EDD                     130 	.ds 2
   8EDF                     131 _ymmmf:
   8EDF                     132 	.ds 2
   8EE1                     133 _block_init::
   8EE1                     134 	.ds 1
   8EE2                     135 _bsx::
   8EE2                     136 	.ds 2
   8EE4                     137 _bsy::
   8EE4                     138 	.ds 2
   8EE6                     139 _btx::
   8EE6                     140 	.ds 2
   8EE8                     141 _bty::
   8EE8                     142 	.ds 2
   8EEA                     143 _btab::
   8EEA                     144 	.ds 32
   8F0A                     145 _flof::
   8F0A                     146 	.ds 2
   8F0C                     147 _linenum::
   8F0C                     148 	.ds 2
   8F0E                     149 _lx::
   8F0E                     150 	.ds 1
   8F0F                     151 _ly::
   8F0F                     152 	.ds 1
   8F10                     153 _ff::
   8F10                     154 	.ds 2
   8F12                     155 _twinited::
   8F12                     156 	.ds 2
   8F14                     157 _bulbflipper::
   8F14                     158 	.ds 2
   8F16                     159 _ff1::
   8F16                     160 	.ds 2
   8F18                     161 _ff2::
   8F18                     162 	.ds 2
   8F1A                     163 _ender::
   8F1A                     164 	.ds 2
   8F1C                     165 _enderdir::
   8F1C                     166 	.ds 2
   8F1E                     167 _xo:
   8F1E                     168 	.ds 2
   8F20                     169 _yo:
   8F20                     170 	.ds 2
   8F22                     171 _po:
   8F22                     172 	.ds 2
   8F24                     173 _fffaaa:
   8F24                     174 	.ds 2
   8F26                     175 _anim_init::
   8F26                     176 	.ds 2
   8F28                     177 _boxes_init::
   8F28                     178 	.ds 1
   8F29                     179 _buffer::
   8F29                     180 	.ds 2
   8F2B                     181 _dbly::
   8F2B                     182 	.ds 2
   8F2D                     183 _prevx::
   8F2D                     184 	.ds 2
   8F2F                     185 _prevy::
   8F2F                     186 	.ds 2
   8F31                     187 _prevbx::
   8F31                     188 	.ds 2
   8F33                     189 _prevby::
   8F33                     190 	.ds 2
   8F35                     191 _bx::
   8F35                     192 	.ds 2
   8F37                     193 _by::
   8F37                     194 	.ds 2
   8F39                     195 _bt::
   8F39                     196 	.ds 2
   8F3B                     197 _bxx::
   8F3B                     198 	.ds 2
   8F3D                     199 _byy::
   8F3D                     200 	.ds 2
   8F3F                     201 _bo::
   8F3F                     202 	.ds 2
   8F41                     203 _bonc::
   8F41                     204 	.ds 2
   8F43                     205 _pbx::
   8F43                     206 	.ds 2
   8F45                     207 _pbt::
   8F45                     208 	.ds 2
                            209 ;--------------------------------------------------------
                            210 ; overlayable items in  ram 
                            211 ;--------------------------------------------------------
                            212 	.area _OVERLAY
                            213 ;--------------------------------------------------------
                            214 ; external initialized ram data
                            215 ;--------------------------------------------------------
                            216 ;--------------------------------------------------------
                            217 ; global & static initialisations
                            218 ;--------------------------------------------------------
                            219 	.area _HOME
                            220 	.area _GSINIT
                            221 	.area _GSFINAL
                            222 	.area _GSINIT
                            223 ;demo.c:54: static unsigned char mask[] = {1, 2, 4, 8, 16, 32, 64, 128};
   0000 21rD3s8E            224 	ld	hl,#_isNthBitSet_mask_1_1
   0003 CDr00s00            225 	call	__initrleblock
   0006 08                  226 	.db	8
   0007 01 02 04 08 10 20   227 	.db	0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80
        40 80
   000F 00                  228 	.db	0
                            229 ;types.h:27: signed char sintab[256]={
   0010 21r00s00            230 	ld	hl,#_sintab
   0013 CDr00s00            231 	call	__initrleblock
   0016 3B                  232 	.db	59
   0017 00 03 06 09 0C 0F   233 	.db	0x00, 0x03, 0x06, 0x09, 0x0C, 0x0F, 0x12, 0x15
        12 15
   001F 18 1B 1E 21 24 27   234 	.db	0x18, 0x1B, 0x1E, 0x21, 0x24, 0x27, 0x2A, 0x2D
        2A 2D
   0027 30 33 36 39 3B 3E   235 	.db	0x30, 0x33, 0x36, 0x39, 0x3B, 0x3E, 0x41, 0x43
        41 43
   002F 46 49 4B 4E 50 52   236 	.db	0x46, 0x49, 0x4B, 0x4E, 0x50, 0x52, 0x55, 0x57
        55 57
   0037 59 5B 5E 60 62 64   237 	.db	0x59, 0x5B, 0x5E, 0x60, 0x62, 0x64, 0x66, 0x67
        66 67
   003F 69 6B 6C 6E 70 71   238 	.db	0x69, 0x6B, 0x6C, 0x6E, 0x70, 0x71, 0x72, 0x74
        72 74
   0047 75 76 77 78 79 7A   239 	.db	0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7B
        7B 7B
   004F 7C 7D 7D            240 	.db	0x7C, 0x7D, 0x7D
   0052 FB 7E               241 	.db	#-5,#0x7E
   0054 01                  242 	.db	1
   0055 7F                  243 	.db	0x7F
   0056 FB 7E               244 	.db	#-5,#0x7E
   0058 75                  245 	.db	117
   0059 7D 7D 7C 7B 7B 7A   246 	.db	0x7D, 0x7D, 0x7C, 0x7B, 0x7B, 0x7A, 0x79, 0x78
        79 78
   0061 77 76 75 74 72 71   247 	.db	0x77, 0x76, 0x75, 0x74, 0x72, 0x71, 0x70, 0x6E
        70 6E
   0069 6C 6B 69 67 66 64   248 	.db	0x6C, 0x6B, 0x69, 0x67, 0x66, 0x64, 0x62, 0x60
        62 60
   0071 5E 5B 59 57 55 52   249 	.db	0x5E, 0x5B, 0x59, 0x57, 0x55, 0x52, 0x50, 0x4E
        50 4E
   0079 4B 49 46 43 41 3E   250 	.db	0x4B, 0x49, 0x46, 0x43, 0x41, 0x3E, 0x3B, 0x39
        3B 39
   0081 36 33 30 2D 2A 27   251 	.db	0x36, 0x33, 0x30, 0x2D, 0x2A, 0x27, 0x24, 0x21
        24 21
   0089 1E 1B 18 15 12 0F   252 	.db	0x1E, 0x1B, 0x18, 0x15, 0x12, 0x0F, 0x0C, 0x09
        0C 09
   0091 06 03 00 FD FA F7   253 	.db	0x06, 0x03, 0x00, 0xFD, 0xFA, 0xF7, 0xF4, 0xF1
        F4 F1
   0099 EE EB E8 E5 E2 DF   254 	.db	0xEE, 0xEB, 0xE8, 0xE5, 0xE2, 0xDF, 0xDC, 0xD9
        DC D9
   00A1 D6 D3 D0 CD CA C7   255 	.db	0xD6, 0xD3, 0xD0, 0xCD, 0xCA, 0xC7, 0xC5, 0xC2
        C5 C2
   00A9 BF BD BA B7 B5 B2   256 	.db	0xBF, 0xBD, 0xBA, 0xB7, 0xB5, 0xB2, 0xB0, 0xAE
        B0 AE
   00B1 AB A9 A7 A5 A2 A0   257 	.db	0xAB, 0xA9, 0xA7, 0xA5, 0xA2, 0xA0, 0x9E, 0x9C
        9E 9C
   00B9 9A 99 97 95 94 92   258 	.db	0x9A, 0x99, 0x97, 0x95, 0x94, 0x92, 0x90, 0x8F
        90 8F
   00C1 8E 8C 8B 8A 89 88   259 	.db	0x8E, 0x8C, 0x8B, 0x8A, 0x89, 0x88, 0x87, 0x86
        87 86
   00C9 85 85 84 83 83      260 	.db	0x85, 0x85, 0x84, 0x83, 0x83
   00CE FB 82               261 	.db	#-5,#0x82
   00D0 01                  262 	.db	1
   00D1 81                  263 	.db	0x81
   00D2 FB 82               264 	.db	#-5,#0x82
   00D4 3A                  265 	.db	58
   00D5 83 83 84 85 85 86   266 	.db	0x83, 0x83, 0x84, 0x85, 0x85, 0x86, 0x87, 0x88
        87 88
   00DD 89 8A 8B 8C 8E 8F   267 	.db	0x89, 0x8A, 0x8B, 0x8C, 0x8E, 0x8F, 0x90, 0x92
        90 92
   00E5 94 95 97 99 9A 9C   268 	.db	0x94, 0x95, 0x97, 0x99, 0x9A, 0x9C, 0x9E, 0xA0
        9E A0
   00ED A2 A5 A7 A9 AB AE   269 	.db	0xA2, 0xA5, 0xA7, 0xA9, 0xAB, 0xAE, 0xB0, 0xB2
        B0 B2
   00F5 B5 B7 BA BD BF C2   270 	.db	0xB5, 0xB7, 0xBA, 0xBD, 0xBF, 0xC2, 0xC5, 0xC7
        C5 C7
   00FD CA CD D0 D3 D6 D9   271 	.db	0xCA, 0xCD, 0xD0, 0xD3, 0xD6, 0xD9, 0xDC, 0xDF
        DC DF
   0105 E2 E5 E8 EB EE F1   272 	.db	0xE2, 0xE5, 0xE8, 0xEB, 0xEE, 0xF1, 0xF4, 0xF7
        F4 F7
   010D FA FD               273 	.db	0xFA, 0xFD
   010F 00                  274 	.db	0
                            275 ;demo.c:36: uint8_t packbuffer[12000] = {0};
   0110 21r00s01            276 	ld	hl,#_packbuffer
   0113 CDr00s00            277 	call	__initrleblock
   0116 81 00               278 	.db	#-127,#0x00
   0118 81 00               279 	.db	#-127,#0x00
   011A 81 00               280 	.db	#-127,#0x00
   011C 81 00               281 	.db	#-127,#0x00
   011E 81 00               282 	.db	#-127,#0x00
   0120 81 00               283 	.db	#-127,#0x00
   0122 81 00               284 	.db	#-127,#0x00
   0124 81 00               285 	.db	#-127,#0x00
   0126 81 00               286 	.db	#-127,#0x00
   0128 81 00               287 	.db	#-127,#0x00
   012A 81 00               288 	.db	#-127,#0x00
   012C 81 00               289 	.db	#-127,#0x00
   012E 81 00               290 	.db	#-127,#0x00
   0130 81 00               291 	.db	#-127,#0x00
   0132 81 00               292 	.db	#-127,#0x00
   0134 81 00               293 	.db	#-127,#0x00
   0136 81 00               294 	.db	#-127,#0x00
   0138 81 00               295 	.db	#-127,#0x00
   013A 81 00               296 	.db	#-127,#0x00
   013C 81 00               297 	.db	#-127,#0x00
   013E 81 00               298 	.db	#-127,#0x00
   0140 81 00               299 	.db	#-127,#0x00
   0142 81 00               300 	.db	#-127,#0x00
   0144 81 00               301 	.db	#-127,#0x00
   0146 81 00               302 	.db	#-127,#0x00
   0148 81 00               303 	.db	#-127,#0x00
   014A 81 00               304 	.db	#-127,#0x00
   014C 81 00               305 	.db	#-127,#0x00
   014E 81 00               306 	.db	#-127,#0x00
   0150 81 00               307 	.db	#-127,#0x00
   0152 81 00               308 	.db	#-127,#0x00
   0154 81 00               309 	.db	#-127,#0x00
   0156 81 00               310 	.db	#-127,#0x00
   0158 81 00               311 	.db	#-127,#0x00
   015A 81 00               312 	.db	#-127,#0x00
   015C 81 00               313 	.db	#-127,#0x00
   015E 81 00               314 	.db	#-127,#0x00
   0160 81 00               315 	.db	#-127,#0x00
   0162 81 00               316 	.db	#-127,#0x00
   0164 81 00               317 	.db	#-127,#0x00
   0166 81 00               318 	.db	#-127,#0x00
   0168 81 00               319 	.db	#-127,#0x00
   016A 81 00               320 	.db	#-127,#0x00
   016C 81 00               321 	.db	#-127,#0x00
   016E 81 00               322 	.db	#-127,#0x00
   0170 81 00               323 	.db	#-127,#0x00
   0172 81 00               324 	.db	#-127,#0x00
   0174 81 00               325 	.db	#-127,#0x00
   0176 81 00               326 	.db	#-127,#0x00
   0178 81 00               327 	.db	#-127,#0x00
   017A 81 00               328 	.db	#-127,#0x00
   017C 81 00               329 	.db	#-127,#0x00
   017E 81 00               330 	.db	#-127,#0x00
   0180 81 00               331 	.db	#-127,#0x00
   0182 81 00               332 	.db	#-127,#0x00
   0184 81 00               333 	.db	#-127,#0x00
   0186 81 00               334 	.db	#-127,#0x00
   0188 81 00               335 	.db	#-127,#0x00
   018A 81 00               336 	.db	#-127,#0x00
   018C 81 00               337 	.db	#-127,#0x00
   018E 81 00               338 	.db	#-127,#0x00
   0190 81 00               339 	.db	#-127,#0x00
   0192 81 00               340 	.db	#-127,#0x00
   0194 81 00               341 	.db	#-127,#0x00
   0196 81 00               342 	.db	#-127,#0x00
   0198 81 00               343 	.db	#-127,#0x00
   019A 81 00               344 	.db	#-127,#0x00
   019C 81 00               345 	.db	#-127,#0x00
   019E 81 00               346 	.db	#-127,#0x00
   01A0 81 00               347 	.db	#-127,#0x00
   01A2 81 00               348 	.db	#-127,#0x00
   01A4 81 00               349 	.db	#-127,#0x00
   01A6 81 00               350 	.db	#-127,#0x00
   01A8 81 00               351 	.db	#-127,#0x00
   01AA 81 00               352 	.db	#-127,#0x00
   01AC 81 00               353 	.db	#-127,#0x00
   01AE 81 00               354 	.db	#-127,#0x00
   01B0 81 00               355 	.db	#-127,#0x00
   01B2 81 00               356 	.db	#-127,#0x00
   01B4 81 00               357 	.db	#-127,#0x00
   01B6 81 00               358 	.db	#-127,#0x00
   01B8 81 00               359 	.db	#-127,#0x00
   01BA 81 00               360 	.db	#-127,#0x00
   01BC 81 00               361 	.db	#-127,#0x00
   01BE 81 00               362 	.db	#-127,#0x00
   01C0 81 00               363 	.db	#-127,#0x00
   01C2 81 00               364 	.db	#-127,#0x00
   01C4 81 00               365 	.db	#-127,#0x00
   01C6 81 00               366 	.db	#-127,#0x00
   01C8 81 00               367 	.db	#-127,#0x00
   01CA 81 00               368 	.db	#-127,#0x00
   01CC 81 00               369 	.db	#-127,#0x00
   01CE 81 00               370 	.db	#-127,#0x00
   01D0 81 00               371 	.db	#-127,#0x00
   01D2 C2 00               372 	.db	#-62,#0x00
   01D4 00                  373 	.db	0
                            374 ;demo.c:38: uint8_t tf1[12000] = {0};
   01D5 21rE0s2F            375 	ld	hl,#_tf1
   01D8 CDr00s00            376 	call	__initrleblock
   01DB 81 00               377 	.db	#-127,#0x00
   01DD 81 00               378 	.db	#-127,#0x00
   01DF 81 00               379 	.db	#-127,#0x00
   01E1 81 00               380 	.db	#-127,#0x00
   01E3 81 00               381 	.db	#-127,#0x00
   01E5 81 00               382 	.db	#-127,#0x00
   01E7 81 00               383 	.db	#-127,#0x00
   01E9 81 00               384 	.db	#-127,#0x00
   01EB 81 00               385 	.db	#-127,#0x00
   01ED 81 00               386 	.db	#-127,#0x00
   01EF 81 00               387 	.db	#-127,#0x00
   01F1 81 00               388 	.db	#-127,#0x00
   01F3 81 00               389 	.db	#-127,#0x00
   01F5 81 00               390 	.db	#-127,#0x00
   01F7 81 00               391 	.db	#-127,#0x00
   01F9 81 00               392 	.db	#-127,#0x00
   01FB 81 00               393 	.db	#-127,#0x00
   01FD 81 00               394 	.db	#-127,#0x00
   01FF 81 00               395 	.db	#-127,#0x00
   0201 81 00               396 	.db	#-127,#0x00
   0203 81 00               397 	.db	#-127,#0x00
   0205 81 00               398 	.db	#-127,#0x00
   0207 81 00               399 	.db	#-127,#0x00
   0209 81 00               400 	.db	#-127,#0x00
   020B 81 00               401 	.db	#-127,#0x00
   020D 81 00               402 	.db	#-127,#0x00
   020F 81 00               403 	.db	#-127,#0x00
   0211 81 00               404 	.db	#-127,#0x00
   0213 81 00               405 	.db	#-127,#0x00
   0215 81 00               406 	.db	#-127,#0x00
   0217 81 00               407 	.db	#-127,#0x00
   0219 81 00               408 	.db	#-127,#0x00
   021B 81 00               409 	.db	#-127,#0x00
   021D 81 00               410 	.db	#-127,#0x00
   021F 81 00               411 	.db	#-127,#0x00
   0221 81 00               412 	.db	#-127,#0x00
   0223 81 00               413 	.db	#-127,#0x00
   0225 81 00               414 	.db	#-127,#0x00
   0227 81 00               415 	.db	#-127,#0x00
   0229 81 00               416 	.db	#-127,#0x00
   022B 81 00               417 	.db	#-127,#0x00
   022D 81 00               418 	.db	#-127,#0x00
   022F 81 00               419 	.db	#-127,#0x00
   0231 81 00               420 	.db	#-127,#0x00
   0233 81 00               421 	.db	#-127,#0x00
   0235 81 00               422 	.db	#-127,#0x00
   0237 81 00               423 	.db	#-127,#0x00
   0239 81 00               424 	.db	#-127,#0x00
   023B 81 00               425 	.db	#-127,#0x00
   023D 81 00               426 	.db	#-127,#0x00
   023F 81 00               427 	.db	#-127,#0x00
   0241 81 00               428 	.db	#-127,#0x00
   0243 81 00               429 	.db	#-127,#0x00
   0245 81 00               430 	.db	#-127,#0x00
   0247 81 00               431 	.db	#-127,#0x00
   0249 81 00               432 	.db	#-127,#0x00
   024B 81 00               433 	.db	#-127,#0x00
   024D 81 00               434 	.db	#-127,#0x00
   024F 81 00               435 	.db	#-127,#0x00
   0251 81 00               436 	.db	#-127,#0x00
   0253 81 00               437 	.db	#-127,#0x00
   0255 81 00               438 	.db	#-127,#0x00
   0257 81 00               439 	.db	#-127,#0x00
   0259 81 00               440 	.db	#-127,#0x00
   025B 81 00               441 	.db	#-127,#0x00
   025D 81 00               442 	.db	#-127,#0x00
   025F 81 00               443 	.db	#-127,#0x00
   0261 81 00               444 	.db	#-127,#0x00
   0263 81 00               445 	.db	#-127,#0x00
   0265 81 00               446 	.db	#-127,#0x00
   0267 81 00               447 	.db	#-127,#0x00
   0269 81 00               448 	.db	#-127,#0x00
   026B 81 00               449 	.db	#-127,#0x00
   026D 81 00               450 	.db	#-127,#0x00
   026F 81 00               451 	.db	#-127,#0x00
   0271 81 00               452 	.db	#-127,#0x00
   0273 81 00               453 	.db	#-127,#0x00
   0275 81 00               454 	.db	#-127,#0x00
   0277 81 00               455 	.db	#-127,#0x00
   0279 81 00               456 	.db	#-127,#0x00
   027B 81 00               457 	.db	#-127,#0x00
   027D 81 00               458 	.db	#-127,#0x00
   027F 81 00               459 	.db	#-127,#0x00
   0281 81 00               460 	.db	#-127,#0x00
   0283 81 00               461 	.db	#-127,#0x00
   0285 81 00               462 	.db	#-127,#0x00
   0287 81 00               463 	.db	#-127,#0x00
   0289 81 00               464 	.db	#-127,#0x00
   028B 81 00               465 	.db	#-127,#0x00
   028D 81 00               466 	.db	#-127,#0x00
   028F 81 00               467 	.db	#-127,#0x00
   0291 81 00               468 	.db	#-127,#0x00
   0293 81 00               469 	.db	#-127,#0x00
   0295 81 00               470 	.db	#-127,#0x00
   0297 C2 00               471 	.db	#-62,#0x00
   0299 00                  472 	.db	0
                            473 ;demo.c:39: uint8_t tf2[12000] = {0};
   029A 21rC0s5E            474 	ld	hl,#_tf2
   029D CDr00s00            475 	call	__initrleblock
   02A0 81 00               476 	.db	#-127,#0x00
   02A2 81 00               477 	.db	#-127,#0x00
   02A4 81 00               478 	.db	#-127,#0x00
   02A6 81 00               479 	.db	#-127,#0x00
   02A8 81 00               480 	.db	#-127,#0x00
   02AA 81 00               481 	.db	#-127,#0x00
   02AC 81 00               482 	.db	#-127,#0x00
   02AE 81 00               483 	.db	#-127,#0x00
   02B0 81 00               484 	.db	#-127,#0x00
   02B2 81 00               485 	.db	#-127,#0x00
   02B4 81 00               486 	.db	#-127,#0x00
   02B6 81 00               487 	.db	#-127,#0x00
   02B8 81 00               488 	.db	#-127,#0x00
   02BA 81 00               489 	.db	#-127,#0x00
   02BC 81 00               490 	.db	#-127,#0x00
   02BE 81 00               491 	.db	#-127,#0x00
   02C0 81 00               492 	.db	#-127,#0x00
   02C2 81 00               493 	.db	#-127,#0x00
   02C4 81 00               494 	.db	#-127,#0x00
   02C6 81 00               495 	.db	#-127,#0x00
   02C8 81 00               496 	.db	#-127,#0x00
   02CA 81 00               497 	.db	#-127,#0x00
   02CC 81 00               498 	.db	#-127,#0x00
   02CE 81 00               499 	.db	#-127,#0x00
   02D0 81 00               500 	.db	#-127,#0x00
   02D2 81 00               501 	.db	#-127,#0x00
   02D4 81 00               502 	.db	#-127,#0x00
   02D6 81 00               503 	.db	#-127,#0x00
   02D8 81 00               504 	.db	#-127,#0x00
   02DA 81 00               505 	.db	#-127,#0x00
   02DC 81 00               506 	.db	#-127,#0x00
   02DE 81 00               507 	.db	#-127,#0x00
   02E0 81 00               508 	.db	#-127,#0x00
   02E2 81 00               509 	.db	#-127,#0x00
   02E4 81 00               510 	.db	#-127,#0x00
   02E6 81 00               511 	.db	#-127,#0x00
   02E8 81 00               512 	.db	#-127,#0x00
   02EA 81 00               513 	.db	#-127,#0x00
   02EC 81 00               514 	.db	#-127,#0x00
   02EE 81 00               515 	.db	#-127,#0x00
   02F0 81 00               516 	.db	#-127,#0x00
   02F2 81 00               517 	.db	#-127,#0x00
   02F4 81 00               518 	.db	#-127,#0x00
   02F6 81 00               519 	.db	#-127,#0x00
   02F8 81 00               520 	.db	#-127,#0x00
   02FA 81 00               521 	.db	#-127,#0x00
   02FC 81 00               522 	.db	#-127,#0x00
   02FE 81 00               523 	.db	#-127,#0x00
   0300 81 00               524 	.db	#-127,#0x00
   0302 81 00               525 	.db	#-127,#0x00
   0304 81 00               526 	.db	#-127,#0x00
   0306 81 00               527 	.db	#-127,#0x00
   0308 81 00               528 	.db	#-127,#0x00
   030A 81 00               529 	.db	#-127,#0x00
   030C 81 00               530 	.db	#-127,#0x00
   030E 81 00               531 	.db	#-127,#0x00
   0310 81 00               532 	.db	#-127,#0x00
   0312 81 00               533 	.db	#-127,#0x00
   0314 81 00               534 	.db	#-127,#0x00
   0316 81 00               535 	.db	#-127,#0x00
   0318 81 00               536 	.db	#-127,#0x00
   031A 81 00               537 	.db	#-127,#0x00
   031C 81 00               538 	.db	#-127,#0x00
   031E 81 00               539 	.db	#-127,#0x00
   0320 81 00               540 	.db	#-127,#0x00
   0322 81 00               541 	.db	#-127,#0x00
   0324 81 00               542 	.db	#-127,#0x00
   0326 81 00               543 	.db	#-127,#0x00
   0328 81 00               544 	.db	#-127,#0x00
   032A 81 00               545 	.db	#-127,#0x00
   032C 81 00               546 	.db	#-127,#0x00
   032E 81 00               547 	.db	#-127,#0x00
   0330 81 00               548 	.db	#-127,#0x00
   0332 81 00               549 	.db	#-127,#0x00
   0334 81 00               550 	.db	#-127,#0x00
   0336 81 00               551 	.db	#-127,#0x00
   0338 81 00               552 	.db	#-127,#0x00
   033A 81 00               553 	.db	#-127,#0x00
   033C 81 00               554 	.db	#-127,#0x00
   033E 81 00               555 	.db	#-127,#0x00
   0340 81 00               556 	.db	#-127,#0x00
   0342 81 00               557 	.db	#-127,#0x00
   0344 81 00               558 	.db	#-127,#0x00
   0346 81 00               559 	.db	#-127,#0x00
   0348 81 00               560 	.db	#-127,#0x00
   034A 81 00               561 	.db	#-127,#0x00
   034C 81 00               562 	.db	#-127,#0x00
   034E 81 00               563 	.db	#-127,#0x00
   0350 81 00               564 	.db	#-127,#0x00
   0352 81 00               565 	.db	#-127,#0x00
   0354 81 00               566 	.db	#-127,#0x00
   0356 81 00               567 	.db	#-127,#0x00
   0358 81 00               568 	.db	#-127,#0x00
   035A 81 00               569 	.db	#-127,#0x00
   035C C2 00               570 	.db	#-62,#0x00
   035E 00                  571 	.db	0
                            572 ;demo.c:48: volatile int vbicount=0;
   035F FD 21rC0s8E         573 	ld	iy,#_vbicount
   0363 FD 36 00 00         574 	ld	0 (iy),#0x00
   0367 FD 21rC0s8E         575 	ld	iy,#_vbicount
   036B FD 36 01 00         576 	ld	1 (iy),#0x00
                            577 ;demo.c:49: volatile int tick=0;
   036F FD 21rC2s8E         578 	ld	iy,#_tick
   0373 FD 36 00 00         579 	ld	0 (iy),#0x00
   0377 FD 21rC2s8E         580 	ld	iy,#_tick
   037B FD 36 01 00         581 	ld	1 (iy),#0x00
                            582 ;demo.c:249: uint8_t yofff = 0;
   037F FD 21rDBs8E         583 	ld	iy,#_yofff
   0383 FD 36 00 00         584 	ld	0 (iy),#0x00
                            585 ;demo.c:250: uint8_t cc = 0;
   0387 FD 21rDCs8E         586 	ld	iy,#_cc
   038B FD 36 00 00         587 	ld	0 (iy),#0x00
                            588 ;demo.c:251: static int flipper = 0;
   038F FD 21rDDs8E         589 	ld	iy,#_flipper
   0393 FD 36 00 00         590 	ld	0 (iy),#0x00
   0397 FD 21rDDs8E         591 	ld	iy,#_flipper
   039B FD 36 01 00         592 	ld	1 (iy),#0x00
                            593 ;demo.c:252: static int ymmmf = 0;
   039F FD 21rDFs8E         594 	ld	iy,#_ymmmf
   03A3 FD 36 00 00         595 	ld	0 (iy),#0x00
   03A7 FD 21rDFs8E         596 	ld	iy,#_ymmmf
   03AB FD 36 01 00         597 	ld	1 (iy),#0x00
                            598 ;demo.c:283: char block_init = 0;
   03AF FD 21rE1s8E         599 	ld	iy,#_block_init
   03B3 FD 36 00 00         600 	ld	0 (iy),#0x00
                            601 ;demo.c:285: int bsx = 0;
   03B7 FD 21rE2s8E         602 	ld	iy,#_bsx
   03BB FD 36 00 00         603 	ld	0 (iy),#0x00
   03BF FD 21rE2s8E         604 	ld	iy,#_bsx
   03C3 FD 36 01 00         605 	ld	1 (iy),#0x00
                            606 ;demo.c:286: int bsy = 0;
   03C7 FD 21rE4s8E         607 	ld	iy,#_bsy
   03CB FD 36 00 00         608 	ld	0 (iy),#0x00
   03CF FD 21rE4s8E         609 	ld	iy,#_bsy
   03D3 FD 36 01 00         610 	ld	1 (iy),#0x00
                            611 ;demo.c:287: int btx = 0;
   03D7 FD 21rE6s8E         612 	ld	iy,#_btx
   03DB FD 36 00 00         613 	ld	0 (iy),#0x00
   03DF FD 21rE6s8E         614 	ld	iy,#_btx
   03E3 FD 36 01 00         615 	ld	1 (iy),#0x00
                            616 ;demo.c:288: int bty = 0;
   03E7 FD 21rE8s8E         617 	ld	iy,#_bty
   03EB FD 36 00 00         618 	ld	0 (iy),#0x00
   03EF FD 21rE8s8E         619 	ld	iy,#_bty
   03F3 FD 36 01 00         620 	ld	1 (iy),#0x00
                            621 ;demo.c:290: int btab[16] = {0};
   03F7 21rEAs8E            622 	ld	hl,#_btab
   03FA CDr00s00            623 	call	__initrleblock
   03FD E0 00               624 	.db	#-32,#0x00
   03FF 00                  625 	.db	0
                            626 ;demo.c:292: int flof = 0;
   0400 FD 21r0As8F         627 	ld	iy,#_flof
   0404 FD 36 00 00         628 	ld	0 (iy),#0x00
   0408 FD 21r0As8F         629 	ld	iy,#_flof
   040C FD 36 01 00         630 	ld	1 (iy),#0x00
                            631 ;demo.c:341: int linenum = 0;
   0410 FD 21r0Cs8F         632 	ld	iy,#_linenum
   0414 FD 36 00 00         633 	ld	0 (iy),#0x00
   0418 FD 21r0Cs8F         634 	ld	iy,#_linenum
   041C FD 36 01 00         635 	ld	1 (iy),#0x00
                            636 ;demo.c:399: uint8_t lx = 0;
   0420 FD 21r0Es8F         637 	ld	iy,#_lx
   0424 FD 36 00 00         638 	ld	0 (iy),#0x00
                            639 ;demo.c:400: uint8_t ly = 0;
   0428 FD 21r0Fs8F         640 	ld	iy,#_ly
   042C FD 36 00 00         641 	ld	0 (iy),#0x00
                            642 ;demo.c:463: int ff = 0;
   0430 FD 21r10s8F         643 	ld	iy,#_ff
   0434 FD 36 00 00         644 	ld	0 (iy),#0x00
   0438 FD 21r10s8F         645 	ld	iy,#_ff
   043C FD 36 01 00         646 	ld	1 (iy),#0x00
                            647 ;demo.c:464: int twinited = 0;
   0440 FD 21r12s8F         648 	ld	iy,#_twinited
   0444 FD 36 00 00         649 	ld	0 (iy),#0x00
   0448 FD 21r12s8F         650 	ld	iy,#_twinited
   044C FD 36 01 00         651 	ld	1 (iy),#0x00
                            652 ;demo.c:514: int bulbflipper = 1;
   0450 FD 21r14s8F         653 	ld	iy,#_bulbflipper
   0454 FD 36 00 01         654 	ld	0 (iy),#0x01
   0458 FD 21r14s8F         655 	ld	iy,#_bulbflipper
   045C FD 36 01 00         656 	ld	1 (iy),#0x00
                            657 ;demo.c:516: int ff1,ff2 = 0;
   0460 FD 21r18s8F         658 	ld	iy,#_ff2
   0464 FD 36 00 00         659 	ld	0 (iy),#0x00
   0468 FD 21r18s8F         660 	ld	iy,#_ff2
   046C FD 36 01 00         661 	ld	1 (iy),#0x00
                            662 ;demo.c:517: int ender = 212;
   0470 FD 21r1As8F         663 	ld	iy,#_ender
   0474 FD 36 00 D4         664 	ld	0 (iy),#0xD4
   0478 FD 21r1As8F         665 	ld	iy,#_ender
   047C FD 36 01 00         666 	ld	1 (iy),#0x00
                            667 ;demo.c:518: int enderdir = -1;
   0480 FD 21r1Cs8F         668 	ld	iy,#_enderdir
   0484 FD 36 00 FF         669 	ld	0 (iy),#0xFF
   0488 FD 21r1Cs8F         670 	ld	iy,#_enderdir
   048C FD 36 01 FF         671 	ld	1 (iy),#0xFF
                            672 ;demo.c:573: static int xo = 0;
   0490 FD 21r1Es8F         673 	ld	iy,#_xo
   0494 FD 36 00 00         674 	ld	0 (iy),#0x00
   0498 FD 21r1Es8F         675 	ld	iy,#_xo
   049C FD 36 01 00         676 	ld	1 (iy),#0x00
                            677 ;demo.c:574: static int yo = 0;
   04A0 FD 21r20s8F         678 	ld	iy,#_yo
   04A4 FD 36 00 00         679 	ld	0 (iy),#0x00
   04A8 FD 21r20s8F         680 	ld	iy,#_yo
   04AC FD 36 01 00         681 	ld	1 (iy),#0x00
                            682 ;demo.c:575: static int po = 0;
   04B0 FD 21r22s8F         683 	ld	iy,#_po
   04B4 FD 36 00 00         684 	ld	0 (iy),#0x00
   04B8 FD 21r22s8F         685 	ld	iy,#_po
   04BC FD 36 01 00         686 	ld	1 (iy),#0x00
                            687 ;demo.c:576: static int fffaaa = 0;
   04C0 FD 21r24s8F         688 	ld	iy,#_fffaaa
   04C4 FD 36 00 00         689 	ld	0 (iy),#0x00
   04C8 FD 21r24s8F         690 	ld	iy,#_fffaaa
   04CC FD 36 01 00         691 	ld	1 (iy),#0x00
                            692 ;demo.c:578: int anim_init = 0;
   04D0 FD 21r26s8F         693 	ld	iy,#_anim_init
   04D4 FD 36 00 00         694 	ld	0 (iy),#0x00
   04D8 FD 21r26s8F         695 	ld	iy,#_anim_init
   04DC FD 36 01 00         696 	ld	1 (iy),#0x00
                            697 ;demo.c:632: uint8_t boxes_init = 0;
   04E0 FD 21r28s8F         698 	ld	iy,#_boxes_init
   04E4 FD 36 00 00         699 	ld	0 (iy),#0x00
                            700 ;demo.c:633: int buffer = 1;
   04E8 FD 21r29s8F         701 	ld	iy,#_buffer
   04EC FD 36 00 01         702 	ld	0 (iy),#0x01
   04F0 FD 21r29s8F         703 	ld	iy,#_buffer
   04F4 FD 36 01 00         704 	ld	1 (iy),#0x00
                            705 ;demo.c:634: int dbly = 0;
   04F8 FD 21r2Bs8F         706 	ld	iy,#_dbly
   04FC FD 36 00 00         707 	ld	0 (iy),#0x00
   0500 FD 21r2Bs8F         708 	ld	iy,#_dbly
   0504 FD 36 01 00         709 	ld	1 (iy),#0x00
                            710 ;demo.c:635: int prevx = -1;
   0508 FD 21r2Ds8F         711 	ld	iy,#_prevx
   050C FD 36 00 FF         712 	ld	0 (iy),#0xFF
   0510 FD 21r2Ds8F         713 	ld	iy,#_prevx
   0514 FD 36 01 FF         714 	ld	1 (iy),#0xFF
                            715 ;demo.c:660: int bx = 256-42;
   0518 FD 21r35s8F         716 	ld	iy,#_bx
   051C FD 36 00 D6         717 	ld	0 (iy),#0xD6
   0520 FD 21r35s8F         718 	ld	iy,#_bx
   0524 FD 36 01 00         719 	ld	1 (iy),#0x00
                            720 ;demo.c:661: int by = 84;
   0528 FD 21r37s8F         721 	ld	iy,#_by
   052C FD 36 00 54         722 	ld	0 (iy),#0x54
   0530 FD 21r37s8F         723 	ld	iy,#_by
   0534 FD 36 01 00         724 	ld	1 (iy),#0x00
                            725 ;demo.c:662: int bt = 0;
   0538 FD 21r39s8F         726 	ld	iy,#_bt
   053C FD 36 00 00         727 	ld	0 (iy),#0x00
   0540 FD 21r39s8F         728 	ld	iy,#_bt
   0544 FD 36 01 00         729 	ld	1 (iy),#0x00
                            730 ;demo.c:663: int bxx = 0;
   0548 FD 21r3Bs8F         731 	ld	iy,#_bxx
   054C FD 36 00 00         732 	ld	0 (iy),#0x00
   0550 FD 21r3Bs8F         733 	ld	iy,#_bxx
   0554 FD 36 01 00         734 	ld	1 (iy),#0x00
                            735 ;demo.c:664: int byy = 0;
   0558 FD 21r3Ds8F         736 	ld	iy,#_byy
   055C FD 36 00 00         737 	ld	0 (iy),#0x00
   0560 FD 21r3Ds8F         738 	ld	iy,#_byy
   0564 FD 36 01 00         739 	ld	1 (iy),#0x00
                            740 ;demo.c:665: int bo = 0;
   0568 FD 21r3Fs8F         741 	ld	iy,#_bo
   056C FD 36 00 00         742 	ld	0 (iy),#0x00
   0570 FD 21r3Fs8F         743 	ld	iy,#_bo
   0574 FD 36 01 00         744 	ld	1 (iy),#0x00
                            745 ;demo.c:667: int bonc = 0;
   0578 FD 21r41s8F         746 	ld	iy,#_bonc
   057C FD 36 00 00         747 	ld	0 (iy),#0x00
   0580 FD 21r41s8F         748 	ld	iy,#_bonc
   0584 FD 36 01 00         749 	ld	1 (iy),#0x00
                            750 ;demo.c:668: int pbx = 0;
   0588 FD 21r43s8F         751 	ld	iy,#_pbx
   058C FD 36 00 00         752 	ld	0 (iy),#0x00
   0590 FD 21r43s8F         753 	ld	iy,#_pbx
   0594 FD 36 01 00         754 	ld	1 (iy),#0x00
                            755 ;demo.c:669: int pbt = 0;
   0598 FD 21r45s8F         756 	ld	iy,#_pbt
   059C FD 36 00 00         757 	ld	0 (iy),#0x00
   05A0 FD 21r45s8F         758 	ld	iy,#_pbt
   05A4 FD 36 01 00         759 	ld	1 (iy),#0x00
                            760 ;--------------------------------------------------------
                            761 ; Home
                            762 ;--------------------------------------------------------
                            763 	.area _HOME
                            764 	.area _HOME
                            765 ;--------------------------------------------------------
                            766 ; code
                            767 ;--------------------------------------------------------
                            768 	.area _CODE
                            769 ;demo.c:53: int isNthBitSet (unsigned char c, int n) {
                            770 ;	---------------------------------
                            771 ; Function isNthBitSet
                            772 ; ---------------------------------
   0000                     773 _isNthBitSet_start::
   0000                     774 _isNthBitSet:
   0000 DD E5               775 	push	ix
   0002 DD 21 00 00         776 	ld	ix,#0
   0006 DD 39               777 	add	ix,sp
                            778 ;demo.c:55: return ((c & mask[n]) != 0);
   0008 3ErD3               779 	ld	a,#<_isNthBitSet_mask_1_1
   000A DD 86 05            780 	add	a,5 (ix)
   000D 4F                  781 	ld	c,a
   000E 3Es8E               782 	ld	a,#>_isNthBitSet_mask_1_1
   0010 DD 8E 06            783 	adc	a,6 (ix)
   0013 47                  784 	ld	b,a
   0014 0A                  785 	ld	a,(bc)
   0015 DD A6 04            786 	and	a,4 (ix)
   0018 20 04               787 	jr	NZ,00103$
   001A 3E 01               788 	ld	a,#0x01
   001C 18 01               789 	jr	00104$
   001E                     790 00103$:
   001E AF                  791 	xor	a,a
   001F                     792 00104$:
   001F B7                  793 	or	a,a
   0020 D6 01               794 	sub	a,#0x01
   0022 3E 00               795 	ld	a,#0x00
   0024 17                  796 	rla
   0025 4F                  797 	ld	c,a
   0026 69                  798 	ld	l,c
   0027 26 00               799 	ld	h,#0x00
   0029 DD E1               800 	pop	ix
   002B C9                  801 	ret
   002C                     802 _isNthBitSet_end::
   002C                     803 _sintabx:
   002C 78 00               804 	.dw #0x0078
   002E 7A 00               805 	.dw #0x007A
   0030 7D 00               806 	.dw #0x007D
   0032 80 00               807 	.dw #0x0080
   0034 83 00               808 	.dw #0x0083
   0036 86 00               809 	.dw #0x0086
   0038 89 00               810 	.dw #0x0089
   003A 8C 00               811 	.dw #0x008C
   003C 8F 00               812 	.dw #0x008F
   003E 92 00               813 	.dw #0x0092
   0040 95 00               814 	.dw #0x0095
   0042 98 00               815 	.dw #0x0098
   0044 9A 00               816 	.dw #0x009A
   0046 9D 00               817 	.dw #0x009D
   0048 A0 00               818 	.dw #0x00A0
   004A A3 00               819 	.dw #0x00A3
   004C A5 00               820 	.dw #0x00A5
   004E A8 00               821 	.dw #0x00A8
   0050 AB 00               822 	.dw #0x00AB
   0052 AD 00               823 	.dw #0x00AD
   0054 B0 00               824 	.dw #0x00B0
   0056 B3 00               825 	.dw #0x00B3
   0058 B5 00               826 	.dw #0x00B5
   005A B8 00               827 	.dw #0x00B8
   005C BA 00               828 	.dw #0x00BA
   005E BD 00               829 	.dw #0x00BD
   0060 BF 00               830 	.dw #0x00BF
   0062 C1 00               831 	.dw #0x00C1
   0064 C4 00               832 	.dw #0x00C4
   0066 C6 00               833 	.dw #0x00C6
   0068 C8 00               834 	.dw #0x00C8
   006A CA 00               835 	.dw #0x00CA
   006C CC 00               836 	.dw #0x00CC
   006E CE 00               837 	.dw #0x00CE
   0070 D0 00               838 	.dw #0x00D0
   0072 D2 00               839 	.dw #0x00D2
   0074 D4 00               840 	.dw #0x00D4
   0076 D6 00               841 	.dw #0x00D6
   0078 D8 00               842 	.dw #0x00D8
   007A DA 00               843 	.dw #0x00DA
   007C DB 00               844 	.dw #0x00DB
   007E DD 00               845 	.dw #0x00DD
   0080 DE 00               846 	.dw #0x00DE
   0082 E0 00               847 	.dw #0x00E0
   0084 E1 00               848 	.dw #0x00E1
   0086 E3 00               849 	.dw #0x00E3
   0088 E4 00               850 	.dw #0x00E4
   008A E5 00               851 	.dw #0x00E5
   008C E6 00               852 	.dw #0x00E6
   008E E7 00               853 	.dw #0x00E7
   0090 E8 00               854 	.dw #0x00E8
   0092 E9 00               855 	.dw #0x00E9
   0094 EA 00               856 	.dw #0x00EA
   0096 EB 00               857 	.dw #0x00EB
   0098 EC 00               858 	.dw #0x00EC
   009A ED 00               859 	.dw #0x00ED
   009C ED 00               860 	.dw #0x00ED
   009E EE 00               861 	.dw #0x00EE
   00A0 EE 00               862 	.dw #0x00EE
   00A2 EF 00               863 	.dw #0x00EF
   00A4 EF 00               864 	.dw #0x00EF
   00A6 EF 00               865 	.dw #0x00EF
   00A8 EF 00               866 	.dw #0x00EF
   00AA EF 00               867 	.dw #0x00EF
   00AC F0 00               868 	.dw #0x00F0
   00AE EF 00               869 	.dw #0x00EF
   00B0 EF 00               870 	.dw #0x00EF
   00B2 EF 00               871 	.dw #0x00EF
   00B4 EF 00               872 	.dw #0x00EF
   00B6 EF 00               873 	.dw #0x00EF
   00B8 EE 00               874 	.dw #0x00EE
   00BA EE 00               875 	.dw #0x00EE
   00BC ED 00               876 	.dw #0x00ED
   00BE ED 00               877 	.dw #0x00ED
   00C0 EC 00               878 	.dw #0x00EC
   00C2 EB 00               879 	.dw #0x00EB
   00C4 EA 00               880 	.dw #0x00EA
   00C6 E9 00               881 	.dw #0x00E9
   00C8 E8 00               882 	.dw #0x00E8
   00CA E7 00               883 	.dw #0x00E7
   00CC E6 00               884 	.dw #0x00E6
   00CE E5 00               885 	.dw #0x00E5
   00D0 E4 00               886 	.dw #0x00E4
   00D2 E3 00               887 	.dw #0x00E3
   00D4 E1 00               888 	.dw #0x00E1
   00D6 E0 00               889 	.dw #0x00E0
   00D8 DE 00               890 	.dw #0x00DE
   00DA DD 00               891 	.dw #0x00DD
   00DC DB 00               892 	.dw #0x00DB
   00DE DA 00               893 	.dw #0x00DA
   00E0 D8 00               894 	.dw #0x00D8
   00E2 D6 00               895 	.dw #0x00D6
   00E4 D4 00               896 	.dw #0x00D4
   00E6 D2 00               897 	.dw #0x00D2
   00E8 D0 00               898 	.dw #0x00D0
   00EA CE 00               899 	.dw #0x00CE
   00EC CC 00               900 	.dw #0x00CC
   00EE CA 00               901 	.dw #0x00CA
   00F0 C8 00               902 	.dw #0x00C8
   00F2 C6 00               903 	.dw #0x00C6
   00F4 C4 00               904 	.dw #0x00C4
   00F6 C1 00               905 	.dw #0x00C1
   00F8 BF 00               906 	.dw #0x00BF
   00FA BD 00               907 	.dw #0x00BD
   00FC BA 00               908 	.dw #0x00BA
   00FE B8 00               909 	.dw #0x00B8
   0100 B5 00               910 	.dw #0x00B5
   0102 B3 00               911 	.dw #0x00B3
   0104 B0 00               912 	.dw #0x00B0
   0106 AD 00               913 	.dw #0x00AD
   0108 AB 00               914 	.dw #0x00AB
   010A A8 00               915 	.dw #0x00A8
   010C A5 00               916 	.dw #0x00A5
   010E A3 00               917 	.dw #0x00A3
   0110 A0 00               918 	.dw #0x00A0
   0112 9D 00               919 	.dw #0x009D
   0114 9A 00               920 	.dw #0x009A
   0116 98 00               921 	.dw #0x0098
   0118 95 00               922 	.dw #0x0095
   011A 92 00               923 	.dw #0x0092
   011C 8F 00               924 	.dw #0x008F
   011E 8C 00               925 	.dw #0x008C
   0120 89 00               926 	.dw #0x0089
   0122 86 00               927 	.dw #0x0086
   0124 83 00               928 	.dw #0x0083
   0126 80 00               929 	.dw #0x0080
   0128 7D 00               930 	.dw #0x007D
   012A 7A 00               931 	.dw #0x007A
   012C 78 00               932 	.dw #0x0078
   012E 75 00               933 	.dw #0x0075
   0130 72 00               934 	.dw #0x0072
   0132 6F 00               935 	.dw #0x006F
   0134 6C 00               936 	.dw #0x006C
   0136 69 00               937 	.dw #0x0069
   0138 66 00               938 	.dw #0x0066
   013A 63 00               939 	.dw #0x0063
   013C 60 00               940 	.dw #0x0060
   013E 5D 00               941 	.dw #0x005D
   0140 5A 00               942 	.dw #0x005A
   0142 57 00               943 	.dw #0x0057
   0144 55 00               944 	.dw #0x0055
   0146 52 00               945 	.dw #0x0052
   0148 4F 00               946 	.dw #0x004F
   014A 4C 00               947 	.dw #0x004C
   014C 4A 00               948 	.dw #0x004A
   014E 47 00               949 	.dw #0x0047
   0150 44 00               950 	.dw #0x0044
   0152 42 00               951 	.dw #0x0042
   0154 3F 00               952 	.dw #0x003F
   0156 3C 00               953 	.dw #0x003C
   0158 3A 00               954 	.dw #0x003A
   015A 37 00               955 	.dw #0x0037
   015C 35 00               956 	.dw #0x0035
   015E 32 00               957 	.dw #0x0032
   0160 30 00               958 	.dw #0x0030
   0162 2E 00               959 	.dw #0x002E
   0164 2B 00               960 	.dw #0x002B
   0166 29 00               961 	.dw #0x0029
   0168 27 00               962 	.dw #0x0027
   016A 25 00               963 	.dw #0x0025
   016C 23 00               964 	.dw #0x0023
   016E 21 00               965 	.dw #0x0021
   0170 1F 00               966 	.dw #0x001F
   0172 1D 00               967 	.dw #0x001D
   0174 1B 00               968 	.dw #0x001B
   0176 19 00               969 	.dw #0x0019
   0178 17 00               970 	.dw #0x0017
   017A 15 00               971 	.dw #0x0015
   017C 14 00               972 	.dw #0x0014
   017E 12 00               973 	.dw #0x0012
   0180 11 00               974 	.dw #0x0011
   0182 0F 00               975 	.dw #0x000F
   0184 0E 00               976 	.dw #0x000E
   0186 0C 00               977 	.dw #0x000C
   0188 0B 00               978 	.dw #0x000B
   018A 0A 00               979 	.dw #0x000A
   018C 09 00               980 	.dw #0x0009
   018E 08 00               981 	.dw #0x0008
   0190 07 00               982 	.dw #0x0007
   0192 06 00               983 	.dw #0x0006
   0194 05 00               984 	.dw #0x0005
   0196 04 00               985 	.dw #0x0004
   0198 03 00               986 	.dw #0x0003
   019A 02 00               987 	.dw #0x0002
   019C 02 00               988 	.dw #0x0002
   019E 01 00               989 	.dw #0x0001
   01A0 01 00               990 	.dw #0x0001
   01A2 00 00               991 	.dw #0x0000
   01A4 00 00               992 	.dw #0x0000
   01A6 00 00               993 	.dw #0x0000
   01A8 00 00               994 	.dw #0x0000
   01AA 00 00               995 	.dw #0x0000
   01AC 00 00               996 	.dw #0x0000
   01AE 00 00               997 	.dw #0x0000
   01B0 00 00               998 	.dw #0x0000
   01B2 00 00               999 	.dw #0x0000
   01B4 00 00              1000 	.dw #0x0000
   01B6 00 00              1001 	.dw #0x0000
   01B8 01 00              1002 	.dw #0x0001
   01BA 01 00              1003 	.dw #0x0001
   01BC 02 00              1004 	.dw #0x0002
   01BE 02 00              1005 	.dw #0x0002
   01C0 03 00              1006 	.dw #0x0003
   01C2 04 00              1007 	.dw #0x0004
   01C4 05 00              1008 	.dw #0x0005
   01C6 06 00              1009 	.dw #0x0006
   01C8 07 00              1010 	.dw #0x0007
   01CA 08 00              1011 	.dw #0x0008
   01CC 09 00              1012 	.dw #0x0009
   01CE 0A 00              1013 	.dw #0x000A
   01D0 0B 00              1014 	.dw #0x000B
   01D2 0C 00              1015 	.dw #0x000C
   01D4 0E 00              1016 	.dw #0x000E
   01D6 0F 00              1017 	.dw #0x000F
   01D8 11 00              1018 	.dw #0x0011
   01DA 12 00              1019 	.dw #0x0012
   01DC 14 00              1020 	.dw #0x0014
   01DE 15 00              1021 	.dw #0x0015
   01E0 17 00              1022 	.dw #0x0017
   01E2 19 00              1023 	.dw #0x0019
   01E4 1B 00              1024 	.dw #0x001B
   01E6 1D 00              1025 	.dw #0x001D
   01E8 1F 00              1026 	.dw #0x001F
   01EA 21 00              1027 	.dw #0x0021
   01EC 23 00              1028 	.dw #0x0023
   01EE 25 00              1029 	.dw #0x0025
   01F0 27 00              1030 	.dw #0x0027
   01F2 29 00              1031 	.dw #0x0029
   01F4 2B 00              1032 	.dw #0x002B
   01F6 2E 00              1033 	.dw #0x002E
   01F8 30 00              1034 	.dw #0x0030
   01FA 32 00              1035 	.dw #0x0032
   01FC 35 00              1036 	.dw #0x0035
   01FE 37 00              1037 	.dw #0x0037
   0200 3A 00              1038 	.dw #0x003A
   0202 3C 00              1039 	.dw #0x003C
   0204 3F 00              1040 	.dw #0x003F
   0206 42 00              1041 	.dw #0x0042
   0208 44 00              1042 	.dw #0x0044
   020A 47 00              1043 	.dw #0x0047
   020C 4A 00              1044 	.dw #0x004A
   020E 4C 00              1045 	.dw #0x004C
   0210 4F 00              1046 	.dw #0x004F
   0212 52 00              1047 	.dw #0x0052
   0214 55 00              1048 	.dw #0x0055
   0216 57 00              1049 	.dw #0x0057
   0218 5A 00              1050 	.dw #0x005A
   021A 5D 00              1051 	.dw #0x005D
   021C 60 00              1052 	.dw #0x0060
   021E 63 00              1053 	.dw #0x0063
   0220 66 00              1054 	.dw #0x0066
   0222 69 00              1055 	.dw #0x0069
   0224 6C 00              1056 	.dw #0x006C
   0226 6F 00              1057 	.dw #0x006F
   0228 72 00              1058 	.dw #0x0072
   022A 75 00              1059 	.dw #0x0075
                           1060 ;demo.c:62: void my_isr(void) interrupt
                           1061 ;	---------------------------------
                           1062 ; Function my_isr
                           1063 ; ---------------------------------
   022C                    1064 _my_isr_start::
   022C                    1065 _my_isr:
   022C F5                 1066 	push	af
   022D C5                 1067 	push	bc
   022E D5                 1068 	push	de
   022F E5                 1069 	push	hl
   0230 FD E5              1070 	push	iy
                           1071 ;demo.c:64: DI;
   0232 F3                 1072 		di 
                           1073 ;demo.c:66: READ_VDP_STATUS;
   0233 DB 99              1074 		in a,(#0x99) 
                           1075 ;demo.c:68: PLY_Play();
   0235 CDr00s00           1076 	call	_PLY_Play
                           1077 ;demo.c:69: PLY_SendRegisters();
   0238 CDr00s00           1078 	call	_PLY_SendRegisters
                           1079 ;demo.c:71: vbicount+=1;
   023B FD 21rC0s8E        1080 	ld	iy,#_vbicount
   023F FD 34 00           1081 	inc	0 (iy)
   0242 20 07              1082 	jr	NZ,00103$
   0244 FD 21rC0s8E        1083 	ld	iy,#_vbicount
   0248 FD 34 01           1084 	inc	1 (iy)
   024B                    1085 00103$:
                           1086 ;demo.c:72: tick++;
   024B FD 21rC2s8E        1087 	ld	iy,#_tick
   024F FD 34 00           1088 	inc	0 (iy)
   0252 20 07              1089 	jr	NZ,00104$
   0254 FD 21rC2s8E        1090 	ld	iy,#_tick
   0258 FD 34 01           1091 	inc	1 (iy)
   025B                    1092 00104$:
                           1093 ;demo.c:74: EI;
   025B FB                 1094 		ei 
   025C FD E1              1095 	pop	iy
   025E E1                 1096 	pop	hl
   025F D1                 1097 	pop	de
   0260 C1                 1098 	pop	bc
   0261 F1                 1099 	pop	af
   0262 ED 4D              1100 	reti
   0264                    1101 _my_isr_end::
                           1102 ;demo.c:77: void color_isr(void) interrupt
                           1103 ;	---------------------------------
                           1104 ; Function color_isr
                           1105 ; ---------------------------------
   0264                    1106 _color_isr_start::
   0264                    1107 _color_isr:
   0264 F5                 1108 	push	af
   0265 C5                 1109 	push	bc
   0266 D5                 1110 	push	de
   0267 E5                 1111 	push	hl
   0268 FD E5              1112 	push	iy
                           1113 ;demo.c:79: DI;
   026A F3                 1114 		di 
                           1115 ;demo.c:81: if(isNthBitSet(vdp2_status(1),0)) {
   026B 3E 01              1116 	ld	a,#0x01
   026D F5                 1117 	push	af
   026E 33                 1118 	inc	sp
   026F CDr00s00           1119 	call	_vdp2_status
   0272 33                 1120 	inc	sp
   0273 4D                 1121 	ld	c,l
   0274 21 00 00           1122 	ld	hl,#0x0000
   0277 E5                 1123 	push	hl
   0278 79                 1124 	ld	a,c
   0279 F5                 1125 	push	af
   027A 33                 1126 	inc	sp
   027B CDr00s00           1127 	call	_isNthBitSet
   027E F1                 1128 	pop	af
   027F 33                 1129 	inc	sp
   0280 44                 1130 	ld	b,h
   0281 4D                 1131 	ld	c,l
   0282 79                 1132 	ld	a,c
   0283 B0                 1133 	or	a,b
   0284 28 19              1134 	jr	Z,00102$
                           1135 ;demo.c:82: vdp_register(VDP_VOFFSET,sintab[vbicount & 255]);
   0286 21rC0s8E           1136 	ld	hl,#_vbicount + 0
   0289 4E                 1137 	ld	c,(hl)
   028A 06 00              1138 	ld	b,#0x00
   028C 21r00s00           1139 	ld	hl,#_sintab
   028F 09                 1140 	add	hl,bc
   0290 7E                 1141 	ld	a,(hl)
   0291 F5                 1142 	push	af
   0292 33                 1143 	inc	sp
   0293 3E 17              1144 	ld	a,#0x17
   0295 F5                 1145 	push	af
   0296 33                 1146 	inc	sp
   0297 CDr00s00           1147 	call	_vdp_register
   029A F1                 1148 	pop	af
                           1149 ;demo.c:83: READ_VDP_STATUS;
   029B DB 99              1150 		in a,(#0x99) 
   029D 18 18              1151 	jr	00103$
   029F                    1152 00102$:
                           1153 ;demo.c:86: READ_VDP_STATUS;
   029F DB 99              1154 		in a,(#0x99) 
                           1155 ;demo.c:87: vbicount++;
   02A1 FD 21rC0s8E        1156 	ld	iy,#_vbicount
   02A5 FD 34 00           1157 	inc	0 (iy)
   02A8 20 07              1158 	jr	NZ,00107$
   02AA FD 21rC0s8E        1159 	ld	iy,#_vbicount
   02AE FD 34 01           1160 	inc	1 (iy)
   02B1                    1161 00107$:
                           1162 ;demo.c:90: PLY_Play();
   02B1 CDr00s00           1163 	call	_PLY_Play
                           1164 ;demo.c:91: PLY_SendRegisters();
   02B4 CDr00s00           1165 	call	_PLY_SendRegisters
   02B7                    1166 00103$:
                           1167 ;demo.c:94: EI;
   02B7 FB                 1168 		ei 
   02B8 FD E1              1169 	pop	iy
   02BA E1                 1170 	pop	hl
   02BB D1                 1171 	pop	de
   02BC C1                 1172 	pop	bc
   02BD F1                 1173 	pop	af
   02BE ED 4D              1174 	reti
   02C0                    1175 _color_isr_end::
                           1176 ;demo.c:101: uint8_t ge5_load(char *file_name, uint8_t vramh, uint16_t vraml, int debugprint) {
                           1177 ;	---------------------------------
                           1178 ; Function ge5_load
                           1179 ; ---------------------------------
   02C0                    1180 _ge5_load_start::
   02C0                    1181 _ge5_load:
   02C0 DD E5              1182 	push	ix
   02C2 DD 21 00 00        1183 	ld	ix,#0
   02C6 DD 39              1184 	add	ix,sp
   02C8 21 D2 FF           1185 	ld	hl,#-46
   02CB 39                 1186 	add	hl,sp
   02CC F9                 1187 	ld	sp,hl
                           1188 ;demo.c:105: if(debugprint == 1) {
   02CD DD 7E 09           1189 	ld	a,9 (ix)
   02D0 D6 01              1190 	sub	a,#0x01
   02D2 20 06              1191 	jr	NZ,00125$
   02D4 DD 7E 0A           1192 	ld	a,10 (ix)
   02D7 B7                 1193 	or	a,a
   02D8 28 02              1194 	jr	Z,00126$
   02DA                    1195 00125$:
   02DA 18 1B              1196 	jr	00102$
   02DC                    1197 00126$:
                           1198 ;demo.c:106: puts("loading ge5file: ");
   02DC 21rBBs03           1199 	ld	hl,#__str_0
   02DF E5                 1200 	push	hl
   02E0 CDr00s00           1201 	call	_puts
   02E3 F1                 1202 	pop	af
                           1203 ;demo.c:107: puts(file_name);
   02E4 DD 6E 04           1204 	ld	l,4 (ix)
   02E7 DD 66 05           1205 	ld	h,5 (ix)
   02EA E5                 1206 	push	hl
   02EB CDr00s00           1207 	call	_puts
   02EE F1                 1208 	pop	af
                           1209 ;demo.c:108: puts("\r\n");
   02EF 21rCDs03           1210 	ld	hl,#__str_1
   02F2 E5                 1211 	push	hl
   02F3 CDr00s00           1212 	call	_puts
   02F6 F1                 1213 	pop	af
   02F7                    1214 00102$:
                           1215 ;demo.c:111: memset((uint8_t *) &f, 0, sizeof(fcb));
   02F7 21 00 00           1216 	ld	hl,#0x0000
   02FA 39                 1217 	add	hl,sp
   02FB 4D                 1218 	ld	c,l
   02FC 44                 1219 	ld	b,h
   02FD 21 2E 00           1220 	ld	hl,#0x002E
   0300 E5                 1221 	push	hl
   0301 3E 00              1222 	ld	a,#0x00
   0303 F5                 1223 	push	af
   0304 33                 1224 	inc	sp
   0305 C5                 1225 	push	bc
   0306 CDr00s00           1226 	call	_memset
   0309 F1                 1227 	pop	af
   030A F1                 1228 	pop	af
   030B 33                 1229 	inc	sp
                           1230 ;demo.c:113: f.record_size = 128;
   030C 21 00 00           1231 	ld	hl,#0x0000
   030F 39                 1232 	add	hl,sp
   0310 4D                 1233 	ld	c,l
   0311 44                 1234 	ld	b,h
   0312 21 0F 00           1235 	ld	hl,#0x000F
   0315 09                 1236 	add	hl,bc
   0316 EB                 1237 	ex	de,hl
   0317 3E 80              1238 	ld	a,#0x80
   0319 12                 1239 	ld	(de),a
                           1240 ;demo.c:114: f.drive = 0;
   031A 3E 00              1241 	ld	a,#0x00
   031C 02                 1242 	ld	(bc),a
                           1243 ;demo.c:116: memcpy(f.name, file_name, 11);
   031D DD 5E 04           1244 	ld	e,4 (ix)
   0320 DD 56 05           1245 	ld	d,5 (ix)
   0323 03                 1246 	inc	bc
   0324 21 0B 00           1247 	ld	hl,#0x000B
   0327 E5                 1248 	push	hl
   0328 D5                 1249 	push	de
   0329 C5                 1250 	push	bc
   032A CDr00s00           1251 	call	_memcpy
   032D F1                 1252 	pop	af
   032E F1                 1253 	pop	af
   032F F1                 1254 	pop	af
                           1255 ;demo.c:118: if (open(&f) != 0) return 0;
   0330 21 00 00           1256 	ld	hl,#0x0000
   0333 39                 1257 	add	hl,sp
   0334 E5                 1258 	push	hl
   0335 CDr00s00           1259 	call	_open
   0338 F1                 1260 	pop	af
   0339 AF                 1261 	xor	a,a
   033A B5                 1262 	or	a,l
   033B 28 05              1263 	jr	Z,00104$
   033D 2E 00              1264 	ld	l,#0x00
   033F C3rB6s03           1265 	jp	00116$
   0342                    1266 00104$:
                           1267 ;demo.c:119: vdp_set_write_address(vramh, vraml);
   0342 DD 6E 07           1268 	ld	l,7 (ix)
   0345 DD 66 08           1269 	ld	h,8 (ix)
   0348 E5                 1270 	push	hl
   0349 DD 7E 06           1271 	ld	a,6 (ix)
   034C F5                 1272 	push	af
   034D 33                 1273 	inc	sp
   034E CDr00s00           1274 	call	_vdp_set_write_address
   0351 F1                 1275 	pop	af
   0352 33                 1276 	inc	sp
                           1277 ;demo.c:121: for (i = 0; i < 213; i++) {
   0353 0E 00              1278 	ld	c,#0x00
   0355                    1279 00112$:
   0355 79                 1280 	ld	a,c
   0356 D6 D5              1281 	sub	a,#0xD5
   0358 D2rABs03           1282 	jp	NC,00115$
                           1283 ;demo.c:122: if (block_set_data_ptr(scratch) != 0) return 0;
   035B C5                 1284 	push	bc
   035C 21rA0s8D           1285 	ld	hl,#_scratch
   035F E5                 1286 	push	hl
   0360 CDr00s00           1287 	call	_block_set_data_ptr
   0363 F1                 1288 	pop	af
   0364 7D                 1289 	ld	a,l
   0365 C1                 1290 	pop	bc
   0366 47                 1291 	ld	b,a
   0367 B7                 1292 	or	a,a
   0368 28 05              1293 	jr	Z,00106$
   036A 2E 00              1294 	ld	l,#0x00
   036C C3rB6s03           1295 	jp	00116$
   036F                    1296 00106$:
                           1297 ;demo.c:123: if (block_read(&f) != 0) return 0;
   036F 21 00 00           1298 	ld	hl,#0x0000
   0372 39                 1299 	add	hl,sp
   0373 C5                 1300 	push	bc
   0374 E5                 1301 	push	hl
   0375 CDr00s00           1302 	call	_block_read
   0378 F1                 1303 	pop	af
   0379 7D                 1304 	ld	a,l
   037A C1                 1305 	pop	bc
   037B 47                 1306 	ld	b,a
   037C B7                 1307 	or	a,a
   037D 28 04              1308 	jr	Z,00108$
   037F 2E 00              1309 	ld	l,#0x00
   0381 18 33              1310 	jr	00116$
   0383                    1311 00108$:
                           1312 ;demo.c:125: if (i == 0) vdp_load_screen(scratch + 7, 121);   // to skip GE5 header
   0383 AF                 1313 	xor	a,a
   0384 B1                 1314 	or	a,c
   0385 20 11              1315 	jr	NZ,00110$
   0387 11rA7s8D           1316 	ld	de,#_scratch + 7
   038A C5                 1317 	push	bc
   038B 3E 79              1318 	ld	a,#0x79
   038D F5                 1319 	push	af
   038E 33                 1320 	inc	sp
   038F D5                 1321 	push	de
   0390 CDr00s00           1322 	call	_vdp_load_screen
   0393 F1                 1323 	pop	af
   0394 33                 1324 	inc	sp
   0395 C1                 1325 	pop	bc
   0396 18 0F              1326 	jr	00114$
   0398                    1327 00110$:
                           1328 ;demo.c:126: else vdp_load_screen(scratch, 128);
   0398 C5                 1329 	push	bc
   0399 3E 80              1330 	ld	a,#0x80
   039B F5                 1331 	push	af
   039C 33                 1332 	inc	sp
   039D 21rA0s8D           1333 	ld	hl,#_scratch
   03A0 E5                 1334 	push	hl
   03A1 CDr00s00           1335 	call	_vdp_load_screen
   03A4 F1                 1336 	pop	af
   03A5 33                 1337 	inc	sp
   03A6 C1                 1338 	pop	bc
   03A7                    1339 00114$:
                           1340 ;demo.c:121: for (i = 0; i < 213; i++) {
   03A7 0C                 1341 	inc	c
   03A8 C3r55s03           1342 	jp	00112$
   03AB                    1343 00115$:
                           1344 ;demo.c:129: close(&f);
   03AB 21 00 00           1345 	ld	hl,#0x0000
   03AE 39                 1346 	add	hl,sp
   03AF E5                 1347 	push	hl
   03B0 CDr00s00           1348 	call	_close
   03B3 F1                 1349 	pop	af
                           1350 ;demo.c:131: return 1;
   03B4 2E 01              1351 	ld	l,#0x01
   03B6                    1352 00116$:
   03B6 DD F9              1353 	ld	sp,ix
   03B8 DD E1              1354 	pop	ix
   03BA C9                 1355 	ret
   03BB                    1356 _ge5_load_end::
   03BB                    1357 __str_0:
   03BB 6C 6F 61 64 69 6E  1358 	.ascii "loading ge5file: "
        67 20 67 65 35 66
        69 6C 65 3A 20
   03CC 00                 1359 	.db 0x00
   03CD                    1360 __str_1:
   03CD 0D                 1361 	.db 0x0D
   03CE 0A                 1362 	.db 0x0A
   03CF 00                 1363 	.db 0x00
                           1364 ;demo.c:134: void scratch_clear() {
                           1365 ;	---------------------------------
                           1366 ; Function scratch_clear
                           1367 ; ---------------------------------
   03D0                    1368 _scratch_clear_start::
   03D0                    1369 _scratch_clear:
                           1370 ;demo.c:135: memset((uint8_t *) &scratch, 0, 128);
   03D0 21 80 00           1371 	ld	hl,#0x0080
   03D3 E5                 1372 	push	hl
   03D4 3E 00              1373 	ld	a,#0x00
   03D6 F5                 1374 	push	af
   03D7 33                 1375 	inc	sp
   03D8 21rA0s8D           1376 	ld	hl,#_scratch
   03DB E5                 1377 	push	hl
   03DC CDr00s00           1378 	call	_memset
   03DF F1                 1379 	pop	af
   03E0 F1                 1380 	pop	af
   03E1 33                 1381 	inc	sp
   03E2 C9                 1382 	ret
   03E3                    1383 _scratch_clear_end::
                           1384 ;demo.c:138: uint8_t pal_load(char *file_name, uint8_t ss, int debugprint) {
                           1385 ;	---------------------------------
                           1386 ; Function pal_load
                           1387 ; ---------------------------------
   03E3                    1388 _pal_load_start::
   03E3                    1389 _pal_load:
   03E3 DD E5              1390 	push	ix
   03E5 DD 21 00 00        1391 	ld	ix,#0
   03E9 DD 39              1392 	add	ix,sp
   03EB 21 D2 FF           1393 	ld	hl,#-46
   03EE 39                 1394 	add	hl,sp
   03EF F9                 1395 	ld	sp,hl
                           1396 ;demo.c:141: if(debugprint == 1) {
   03F0 DD 7E 07           1397 	ld	a,7 (ix)
   03F3 D6 01              1398 	sub	a,#0x01
   03F5 20 06              1399 	jr	NZ,00115$
   03F7 DD 7E 08           1400 	ld	a,8 (ix)
   03FA B7                 1401 	or	a,a
   03FB 28 02              1402 	jr	Z,00116$
   03FD                    1403 00115$:
   03FD 18 1B              1404 	jr	00102$
   03FF                    1405 00116$:
                           1406 ;demo.c:142: puts("loading palfile: ");
   03FF 21rADs04           1407 	ld	hl,#__str_2
   0402 E5                 1408 	push	hl
   0403 CDr00s00           1409 	call	_puts
   0406 F1                 1410 	pop	af
                           1411 ;demo.c:143: puts(file_name);
   0407 DD 6E 04           1412 	ld	l,4 (ix)
   040A DD 66 05           1413 	ld	h,5 (ix)
   040D E5                 1414 	push	hl
   040E CDr00s00           1415 	call	_puts
   0411 F1                 1416 	pop	af
                           1417 ;demo.c:144: puts("\r\n");
   0412 21rBFs04           1418 	ld	hl,#__str_3
   0415 E5                 1419 	push	hl
   0416 CDr00s00           1420 	call	_puts
   0419 F1                 1421 	pop	af
   041A                    1422 00102$:
                           1423 ;demo.c:147: memset((uint8_t *) &f, 0, sizeof(fcb));
   041A 21 00 00           1424 	ld	hl,#0x0000
   041D 39                 1425 	add	hl,sp
   041E 4D                 1426 	ld	c,l
   041F 44                 1427 	ld	b,h
   0420 21 2E 00           1428 	ld	hl,#0x002E
   0423 E5                 1429 	push	hl
   0424 3E 00              1430 	ld	a,#0x00
   0426 F5                 1431 	push	af
   0427 33                 1432 	inc	sp
   0428 C5                 1433 	push	bc
   0429 CDr00s00           1434 	call	_memset
   042C F1                 1435 	pop	af
   042D F1                 1436 	pop	af
   042E 33                 1437 	inc	sp
                           1438 ;demo.c:148: scratch_clear();
   042F CDrD0s03           1439 	call	_scratch_clear
                           1440 ;demo.c:150: f.record_size = ss;
   0432 21 00 00           1441 	ld	hl,#0x0000
   0435 39                 1442 	add	hl,sp
   0436 4D                 1443 	ld	c,l
   0437 44                 1444 	ld	b,h
   0438 21 0F 00           1445 	ld	hl,#0x000F
   043B 09                 1446 	add	hl,bc
   043C EB                 1447 	ex	de,hl
   043D DD 7E 06           1448 	ld	a,6 (ix)
   0440 12                 1449 	ld	(de),a
                           1450 ;demo.c:151: f.drive = 0;
   0441 3E 00              1451 	ld	a,#0x00
   0443 02                 1452 	ld	(bc),a
                           1453 ;demo.c:153: memcpy(f.name, file_name, 11);
   0444 DD 5E 04           1454 	ld	e,4 (ix)
   0447 DD 56 05           1455 	ld	d,5 (ix)
   044A 03                 1456 	inc	bc
   044B 21 0B 00           1457 	ld	hl,#0x000B
   044E E5                 1458 	push	hl
   044F D5                 1459 	push	de
   0450 C5                 1460 	push	bc
   0451 CDr00s00           1461 	call	_memcpy
   0454 F1                 1462 	pop	af
   0455 F1                 1463 	pop	af
   0456 F1                 1464 	pop	af
                           1465 ;demo.c:155: if (open(&f) != 0) return 0;
   0457 21 00 00           1466 	ld	hl,#0x0000
   045A 39                 1467 	add	hl,sp
   045B E5                 1468 	push	hl
   045C CDr00s00           1469 	call	_open
   045F F1                 1470 	pop	af
   0460 AF                 1471 	xor	a,a
   0461 B5                 1472 	or	a,l
   0462 28 04              1473 	jr	Z,00104$
   0464 2E 00              1474 	ld	l,#0x00
   0466 18 40              1475 	jr	00109$
   0468                    1476 00104$:
                           1477 ;demo.c:156: if (block_set_data_ptr(scratch) != 0) return 0;
   0468 21rA0s8D           1478 	ld	hl,#_scratch
   046B E5                 1479 	push	hl
   046C CDr00s00           1480 	call	_block_set_data_ptr
   046F F1                 1481 	pop	af
   0470 AF                 1482 	xor	a,a
   0471 B5                 1483 	or	a,l
   0472 28 04              1484 	jr	Z,00106$
   0474 2E 00              1485 	ld	l,#0x00
   0476 18 30              1486 	jr	00109$
   0478                    1487 00106$:
                           1488 ;demo.c:157: if (block_read(&f) != 0) return 0;
   0478 21 00 00           1489 	ld	hl,#0x0000
   047B 39                 1490 	add	hl,sp
   047C E5                 1491 	push	hl
   047D CDr00s00           1492 	call	_block_read
   0480 F1                 1493 	pop	af
   0481 AF                 1494 	xor	a,a
   0482 B5                 1495 	or	a,l
   0483 28 04              1496 	jr	Z,00108$
   0485 2E 00              1497 	ld	l,#0x00
   0487 18 1F              1498 	jr	00109$
   0489                    1499 00108$:
                           1500 ;demo.c:159: memcpy(cur_palette, scratch+7, ss);
   0489 DD 4E 06           1501 	ld	c,6 (ix)
   048C 06 00              1502 	ld	b,#0x00
   048E 11rA7s8D           1503 	ld	de,#_scratch + 7
   0491 C5                 1504 	push	bc
   0492 D5                 1505 	push	de
   0493 21r20s8E           1506 	ld	hl,#_cur_palette
   0496 E5                 1507 	push	hl
   0497 CDr00s00           1508 	call	_memcpy
   049A F1                 1509 	pop	af
   049B F1                 1510 	pop	af
   049C F1                 1511 	pop	af
                           1512 ;demo.c:161: close(&f);
   049D 21 00 00           1513 	ld	hl,#0x0000
   04A0 39                 1514 	add	hl,sp
   04A1 E5                 1515 	push	hl
   04A2 CDr00s00           1516 	call	_close
   04A5 F1                 1517 	pop	af
                           1518 ;demo.c:162: return 1;
   04A6 2E 01              1519 	ld	l,#0x01
   04A8                    1520 00109$:
   04A8 DD F9              1521 	ld	sp,ix
   04AA DD E1              1522 	pop	ix
   04AC C9                 1523 	ret
   04AD                    1524 _pal_load_end::
   04AD                    1525 __str_2:
   04AD 6C 6F 61 64 69 6E  1526 	.ascii "loading palfile: "
        67 20 70 61 6C 66
        69 6C 65 3A 20
   04BE 00                 1527 	.db 0x00
   04BF                    1528 __str_3:
   04BF 0D                 1529 	.db 0x0D
   04C0 0A                 1530 	.db 0x0A
   04C1 00                 1531 	.db 0x00
                           1532 ;demo.c:166: void pause() {
                           1533 ;	---------------------------------
                           1534 ; Function pause
                           1535 ; ---------------------------------
   04C2                    1536 _pause_start::
   04C2                    1537 _pause:
                           1538 ;demo.c:167: uint8_t i,j,k = 0;
                           1539 ;demo.c:168: for (i = 0; i < 255; i++) {	
   04C2 01 00 00           1540 	ld	bc,#0x0000
   04C5                    1541 00104$:
   04C5 78                 1542 	ld	a,b
   04C6 D6 FF              1543 	sub	a,#0xFF
   04C8 D0                 1544 	ret	NC
                           1545 ;demo.c:169: for (j = 0; j < 255; j++) {
   04C9 59                 1546 	ld	e,c
   04CA 16 FF              1547 	ld	d,#0xFF
   04CC                    1548 00103$:
                           1549 ;demo.c:170: k++;
   04CC 1C                 1550 	inc	e
   04CD 15                 1551 	dec	d
                           1552 ;demo.c:169: for (j = 0; j < 255; j++) {
   04CE AF                 1553 	xor	a,a
   04CF B2                 1554 	or	a,d
   04D0 20 FA              1555 	jr	NZ,00103$
                           1556 ;demo.c:168: for (i = 0; i < 255; i++) {	
   04D2 4B                 1557 	ld	c,e
   04D3 04                 1558 	inc	b
   04D4 18 EF              1559 	jr	00104$
   04D6                    1560 _pause_end::
                           1561 ;demo.c:176: uint8_t raw_load(char *file_name, int size, char* buffer, int debugprint) {
                           1562 ;	---------------------------------
                           1563 ; Function raw_load
                           1564 ; ---------------------------------
   04D6                    1565 _raw_load_start::
   04D6                    1566 _raw_load:
   04D6 DD E5              1567 	push	ix
   04D8 DD 21 00 00        1568 	ld	ix,#0
   04DC DD 39              1569 	add	ix,sp
   04DE 21 D2 FF           1570 	ld	hl,#-46
   04E1 39                 1571 	add	hl,sp
   04E2 F9                 1572 	ld	sp,hl
                           1573 ;demo.c:181: if(debugprint == 1) {
   04E3 DD 7E 0A           1574 	ld	a,10 (ix)
   04E6 D6 01              1575 	sub	a,#0x01
   04E8 20 06              1576 	jr	NZ,00120$
   04EA DD 7E 0B           1577 	ld	a,11 (ix)
   04ED B7                 1578 	or	a,a
   04EE 28 02              1579 	jr	Z,00121$
   04F0                    1580 00120$:
   04F0 18 1B              1581 	jr	00102$
   04F2                    1582 00121$:
                           1583 ;demo.c:182: puts("loading rawfile: ");
   04F2 21rC4s05           1584 	ld	hl,#__str_4
   04F5 E5                 1585 	push	hl
   04F6 CDr00s00           1586 	call	_puts
   04F9 F1                 1587 	pop	af
                           1588 ;demo.c:183: puts(file_name);
   04FA DD 6E 04           1589 	ld	l,4 (ix)
   04FD DD 66 05           1590 	ld	h,5 (ix)
   0500 E5                 1591 	push	hl
   0501 CDr00s00           1592 	call	_puts
   0504 F1                 1593 	pop	af
                           1594 ;demo.c:184: puts("\r\n");
   0505 21rD6s05           1595 	ld	hl,#__str_5
   0508 E5                 1596 	push	hl
   0509 CDr00s00           1597 	call	_puts
   050C F1                 1598 	pop	af
   050D                    1599 00102$:
                           1600 ;demo.c:187: memset((uint8_t *) &f, 0, sizeof(fcb));
   050D 21 00 00           1601 	ld	hl,#0x0000
   0510 39                 1602 	add	hl,sp
   0511 4D                 1603 	ld	c,l
   0512 44                 1604 	ld	b,h
   0513 21 2E 00           1605 	ld	hl,#0x002E
   0516 E5                 1606 	push	hl
   0517 3E 00              1607 	ld	a,#0x00
   0519 F5                 1608 	push	af
   051A 33                 1609 	inc	sp
   051B C5                 1610 	push	bc
   051C CDr00s00           1611 	call	_memset
   051F F1                 1612 	pop	af
   0520 F1                 1613 	pop	af
   0521 33                 1614 	inc	sp
                           1615 ;demo.c:188: scratch_clear();
   0522 CDrD0s03           1616 	call	_scratch_clear
                           1617 ;demo.c:190: f.record_size = 128;
   0525 21 00 00           1618 	ld	hl,#0x0000
   0528 39                 1619 	add	hl,sp
   0529 4D                 1620 	ld	c,l
   052A 44                 1621 	ld	b,h
   052B 21 0F 00           1622 	ld	hl,#0x000F
   052E 09                 1623 	add	hl,bc
   052F EB                 1624 	ex	de,hl
   0530 3E 80              1625 	ld	a,#0x80
   0532 12                 1626 	ld	(de),a
                           1627 ;demo.c:191: f.drive = 0;
   0533 3E 00              1628 	ld	a,#0x00
   0535 02                 1629 	ld	(bc),a
                           1630 ;demo.c:193: memcpy(f.name, file_name, 11);
   0536 DD 5E 04           1631 	ld	e,4 (ix)
   0539 DD 56 05           1632 	ld	d,5 (ix)
   053C 03                 1633 	inc	bc
   053D 21 0B 00           1634 	ld	hl,#0x000B
   0540 E5                 1635 	push	hl
   0541 D5                 1636 	push	de
   0542 C5                 1637 	push	bc
   0543 CDr00s00           1638 	call	_memcpy
   0546 F1                 1639 	pop	af
   0547 F1                 1640 	pop	af
   0548 F1                 1641 	pop	af
                           1642 ;demo.c:195: if (open(&f) != 0) return 0;
   0549 21 00 00           1643 	ld	hl,#0x0000
   054C 39                 1644 	add	hl,sp
   054D E5                 1645 	push	hl
   054E CDr00s00           1646 	call	_open
   0551 F1                 1647 	pop	af
   0552 AF                 1648 	xor	a,a
   0553 B5                 1649 	or	a,l
   0554 28 05              1650 	jr	Z,00119$
   0556 2E 00              1651 	ld	l,#0x00
   0558 C3rBFs05           1652 	jp	00112$
                           1653 ;demo.c:197: while(total < size) {
   055B                    1654 00119$:
   055B 01 00 00           1655 	ld	bc,#0x0000
   055E                    1656 00109$:
   055E 79                 1657 	ld	a,c
   055F DD 96 06           1658 	sub	a,6 (ix)
   0562 78                 1659 	ld	a,b
   0563 DD 9E 07           1660 	sbc	a,7 (ix)
   0566 F2rB4s05           1661 	jp	P,00111$
                           1662 ;demo.c:198: if (block_set_data_ptr(scratch) != 0) return 0;
   0569 C5                 1663 	push	bc
   056A 21rA0s8D           1664 	ld	hl,#_scratch
   056D E5                 1665 	push	hl
   056E CDr00s00           1666 	call	_block_set_data_ptr
   0571 F1                 1667 	pop	af
   0572 5D                 1668 	ld	e,l
   0573 C1                 1669 	pop	bc
   0574 AF                 1670 	xor	a,a
   0575 B3                 1671 	or	a,e
   0576 28 04              1672 	jr	Z,00106$
   0578 2E 00              1673 	ld	l,#0x00
   057A 18 43              1674 	jr	00112$
   057C                    1675 00106$:
                           1676 ;demo.c:199: if (block_read(&f) != 0) return 0;
   057C 21 00 00           1677 	ld	hl,#0x0000
   057F 39                 1678 	add	hl,sp
   0580 C5                 1679 	push	bc
   0581 E5                 1680 	push	hl
   0582 CDr00s00           1681 	call	_block_read
   0585 F1                 1682 	pop	af
   0586 5D                 1683 	ld	e,l
   0587 C1                 1684 	pop	bc
   0588 AF                 1685 	xor	a,a
   0589 B3                 1686 	or	a,e
   058A 28 04              1687 	jr	Z,00108$
   058C 2E 00              1688 	ld	l,#0x00
   058E 18 2F              1689 	jr	00112$
   0590                    1690 00108$:
                           1691 ;demo.c:201: memcpy(buffer+total,scratch,incr);
   0590 DD 7E 08           1692 	ld	a,8 (ix)
   0593 81                 1693 	add	a,c
   0594 5F                 1694 	ld	e,a
   0595 DD 7E 09           1695 	ld	a,9 (ix)
   0598 88                 1696 	adc	a,b
   0599 57                 1697 	ld	d,a
   059A C5                 1698 	push	bc
   059B 21 80 00           1699 	ld	hl,#0x0080
   059E E5                 1700 	push	hl
   059F 21rA0s8D           1701 	ld	hl,#_scratch
   05A2 E5                 1702 	push	hl
   05A3 D5                 1703 	push	de
   05A4 CDr00s00           1704 	call	_memcpy
   05A7 F1                 1705 	pop	af
   05A8 F1                 1706 	pop	af
   05A9 F1                 1707 	pop	af
   05AA C1                 1708 	pop	bc
                           1709 ;demo.c:203: total+=incr;
   05AB 21 80 00           1710 	ld	hl,#0x0080
   05AE 09                 1711 	add	hl,bc
   05AF 4D                 1712 	ld	c,l
   05B0 44                 1713 	ld	b,h
   05B1 C3r5Es05           1714 	jp	00109$
   05B4                    1715 00111$:
                           1716 ;demo.c:206: close(&f);
   05B4 21 00 00           1717 	ld	hl,#0x0000
   05B7 39                 1718 	add	hl,sp
   05B8 E5                 1719 	push	hl
   05B9 CDr00s00           1720 	call	_close
   05BC F1                 1721 	pop	af
                           1722 ;demo.c:208: return 1;
   05BD 2E 01              1723 	ld	l,#0x01
   05BF                    1724 00112$:
   05BF DD F9              1725 	ld	sp,ix
   05C1 DD E1              1726 	pop	ix
   05C3 C9                 1727 	ret
   05C4                    1728 _raw_load_end::
   05C4                    1729 __str_4:
   05C4 6C 6F 61 64 69 6E  1730 	.ascii "loading rawfile: "
        67 20 72 61 77 66
        69 6C 65 3A 20
   05D5 00                 1731 	.db 0x00
   05D6                    1732 __str_5:
   05D6 0D                 1733 	.db 0x0D
   05D7 0A                 1734 	.db 0x0A
   05D8 00                 1735 	.db 0x00
                           1736 ;demo.c:211: void pck_load(char *file_name, int size, uint16_t address, int vram_offset, int debugprint) {
                           1737 ;	---------------------------------
                           1738 ; Function pck_load
                           1739 ; ---------------------------------
   05D9                    1740 _pck_load_start::
   05D9                    1741 _pck_load:
   05D9 DD E5              1742 	push	ix
   05DB DD 21 00 00        1743 	ld	ix,#0
   05DF DD 39              1744 	add	ix,sp
                           1745 ;demo.c:212: if(debugprint == 1) {
   05E1 DD 7E 0C           1746 	ld	a,12 (ix)
   05E4 D6 01              1747 	sub	a,#0x01
   05E6 20 06              1748 	jr	NZ,00106$
   05E8 DD 7E 0D           1749 	ld	a,13 (ix)
   05EB B7                 1750 	or	a,a
   05EC 28 02              1751 	jr	Z,00107$
   05EE                    1752 00106$:
   05EE 18 1B              1753 	jr	00102$
   05F0                    1754 00107$:
                           1755 ;demo.c:213: puts("loading pckfile: ");
   05F0 21r52s06           1756 	ld	hl,#__str_6
   05F3 E5                 1757 	push	hl
   05F4 CDr00s00           1758 	call	_puts
   05F7 F1                 1759 	pop	af
                           1760 ;demo.c:214: puts(file_name);
   05F8 DD 6E 04           1761 	ld	l,4 (ix)
   05FB DD 66 05           1762 	ld	h,5 (ix)
   05FE E5                 1763 	push	hl
   05FF CDr00s00           1764 	call	_puts
   0602 F1                 1765 	pop	af
                           1766 ;demo.c:215: puts("\r\n");
   0603 21r64s06           1767 	ld	hl,#__str_7
   0606 E5                 1768 	push	hl
   0607 CDr00s00           1769 	call	_puts
   060A F1                 1770 	pop	af
   060B                    1771 00102$:
                           1772 ;demo.c:217: memset((uint8_t *) &packbuffer, 0, size);
   060B DD 4E 06           1773 	ld	c,6 (ix)
   060E DD 46 07           1774 	ld	b,7 (ix)
   0611 C5                 1775 	push	bc
   0612 C5                 1776 	push	bc
   0613 3E 00              1777 	ld	a,#0x00
   0615 F5                 1778 	push	af
   0616 33                 1779 	inc	sp
   0617 21r00s01           1780 	ld	hl,#_packbuffer
   061A E5                 1781 	push	hl
   061B CDr00s00           1782 	call	_memset
   061E F1                 1783 	pop	af
   061F F1                 1784 	pop	af
   0620 33                 1785 	inc	sp
   0621 C1                 1786 	pop	bc
                           1787 ;demo.c:218: raw_load(file_name, size, packbuffer,0);
   0622 21 00 00           1788 	ld	hl,#0x0000
   0625 E5                 1789 	push	hl
   0626 21r00s01           1790 	ld	hl,#_packbuffer
   0629 E5                 1791 	push	hl
   062A C5                 1792 	push	bc
   062B DD 6E 04           1793 	ld	l,4 (ix)
   062E DD 66 05           1794 	ld	h,5 (ix)
   0631 E5                 1795 	push	hl
   0632 CDrD6s04           1796 	call	_raw_load
   0635 F1                 1797 	pop	af
   0636 F1                 1798 	pop	af
   0637 F1                 1799 	pop	af
   0638 F1                 1800 	pop	af
                           1801 ;demo.c:219: bitbuster(packbuffer,address,vram_offset);
   0639 DD 7E 0A           1802 	ld	a,10 (ix)
   063C F5                 1803 	push	af
   063D 33                 1804 	inc	sp
   063E DD 6E 08           1805 	ld	l,8 (ix)
   0641 DD 66 09           1806 	ld	h,9 (ix)
   0644 E5                 1807 	push	hl
   0645 21r00s01           1808 	ld	hl,#_packbuffer
   0648 E5                 1809 	push	hl
   0649 CDr00s00           1810 	call	_bitbuster
   064C F1                 1811 	pop	af
   064D F1                 1812 	pop	af
   064E 33                 1813 	inc	sp
   064F DD E1              1814 	pop	ix
   0651 C9                 1815 	ret
   0652                    1816 _pck_load_end::
   0652                    1817 __str_6:
   0652 6C 6F 61 64 69 6E  1818 	.ascii "loading pckfile: "
        67 20 70 63 6B 66
        69 6C 65 3A 20
   0663 00                 1819 	.db 0x00
   0664                    1820 __str_7:
   0664 0D                 1821 	.db 0x0D
   0665 0A                 1822 	.db 0x0A
   0666 00                 1823 	.db 0x00
                           1824 ;demo.c:222: void fadein() {
                           1825 ;	---------------------------------
                           1826 ; Function fadein
                           1827 ; ---------------------------------
   0667                    1828 _fadein_start::
   0667                    1829 _fadein:
   0667 DD E5              1830 	push	ix
   0669 DD 21 00 00        1831 	ld	ix,#0
   066D DD 39              1832 	add	ix,sp
   066F F5                 1833 	push	af
                           1834 ;demo.c:225: if (tick < 4) return;
   0670 3ArC2s8E           1835 	ld	a,(#_tick+0)
   0673 D6 04              1836 	sub	a,#0x04
   0675 3ArC3s8E           1837 	ld	a,(#_tick+1)
   0678 DE 00              1838 	sbc	a,#0x00
   067A F2r80s06           1839 	jp	P,00102$
   067D C3r2Es07           1840 	jp	00113$
   0680                    1841 00102$:
                           1842 ;demo.c:227: tick = 0;
   0680 21rC2s8E           1843 	ld	hl,#_tick + 0
   0683 36 00              1844 	ld	(hl), #0x00
   0685 21rC3s8E           1845 	ld	hl,#_tick + 1
   0688 36 00              1846 	ld	(hl), #0x00
                           1847 ;demo.c:229: for(i = 0; i < 32; i+=2) {
   068A 0E 00              1848 	ld	c,#0x00
   068C                    1849 00109$:
   068C 79                 1850 	ld	a,c
   068D D6 20              1851 	sub	a,#0x20
   068F D2r26s07           1852 	jp	NC,00112$
                           1853 ;demo.c:230: uint8_t r = scratch[i] >> 4;
   0692 3ErA0              1854 	ld	a,#<_scratch
   0694 81                 1855 	add	a,c
   0695 5F                 1856 	ld	e,a
   0696 3Es8D              1857 	ld	a,#>_scratch
   0698 CE 00              1858 	adc	a,#0x00
   069A 57                 1859 	ld	d,a
   069B 1A                 1860 	ld	a,(de)
   069C 47                 1861 	ld	b,a
   069D 58                 1862 	ld	e,b
   069E CB 3B              1863 	srl	e
   06A0 CB 3B              1864 	srl	e
   06A2 CB 3B              1865 	srl	e
   06A4 CB 3B              1866 	srl	e
                           1867 ;demo.c:231: uint8_t b = scratch[i] & 0xf;
   06A6 78                 1868 	ld	a,b
   06A7 E6 0F              1869 	and	a,#0x0F
   06A9 DD 77 FF           1870 	ld	-1 (ix),a
                           1871 ;demo.c:232: uint8_t g = scratch[i+1];
   06AC 51                 1872 	ld	d,c
   06AD 14                 1873 	inc	d
   06AE 3ErA0              1874 	ld	a,#<_scratch
   06B0 82                 1875 	add	a,d
   06B1 6F                 1876 	ld	l,a
   06B2 3Es8D              1877 	ld	a,#>_scratch
   06B4 CE 00              1878 	adc	a,#0x00
   06B6 67                 1879 	ld	h,a
   06B7 56                 1880 	ld	d,(hl)
   06B8 DD 72 FE           1881 	ld	-2 (ix),d
                           1882 ;demo.c:234: if (r < (cur_palette[i] >> 4)) r++;
   06BB 3Er20              1883 	ld	a,#<_cur_palette
   06BD 81                 1884 	add	a,c
   06BE 6F                 1885 	ld	l,a
   06BF 3Es8E              1886 	ld	a,#>_cur_palette
   06C1 CE 00              1887 	adc	a,#0x00
   06C3 67                 1888 	ld	h,a
   06C4 56                 1889 	ld	d,(hl)
   06C5 CB 3A              1890 	srl	d
   06C7 CB 3A              1891 	srl	d
   06C9 CB 3A              1892 	srl	d
   06CB CB 3A              1893 	srl	d
   06CD 7B                 1894 	ld	a,e
   06CE 92                 1895 	sub	a,d
   06CF 30 01              1896 	jr	NC,00104$
   06D1 1C                 1897 	inc	e
   06D2                    1898 00104$:
                           1899 ;demo.c:235: if (b < (cur_palette[i] & 0xf)) b++;
   06D2 3Er20              1900 	ld	a,#<_cur_palette
   06D4 81                 1901 	add	a,c
   06D5 6F                 1902 	ld	l,a
   06D6 3Es8E              1903 	ld	a,#>_cur_palette
   06D8 CE 00              1904 	adc	a,#0x00
   06DA 67                 1905 	ld	h,a
   06DB 7E                 1906 	ld	a,(hl)
   06DC E6 0F              1907 	and	a,#0x0F
   06DE 47                 1908 	ld	b,a
   06DF DD 7E FF           1909 	ld	a,-1 (ix)
   06E2 90                 1910 	sub	a,b
   06E3 30 03              1911 	jr	NC,00106$
   06E5 DD 34 FF           1912 	inc	-1 (ix)
   06E8                    1913 00106$:
                           1914 ;demo.c:237: scratch[i] = (r << 4) | b;
   06E8 3ErA0              1915 	ld	a,#<_scratch
   06EA 81                 1916 	add	a,c
   06EB 47                 1917 	ld	b,a
   06EC 3Es8D              1918 	ld	a,#>_scratch
   06EE CE 00              1919 	adc	a,#0x00
   06F0 57                 1920 	ld	d,a
   06F1 7B                 1921 	ld	a,e
   06F2 07                 1922 	rlca
   06F3 07                 1923 	rlca
   06F4 07                 1924 	rlca
   06F5 07                 1925 	rlca
   06F6 E6 F0              1926 	and	a,#0xF0
   06F8 DD B6 FF           1927 	or	a,-1 (ix)
   06FB 68                 1928 	ld	l,b
   06FC 62                 1929 	ld	h,d
   06FD 77                 1930 	ld	(hl),a
                           1931 ;demo.c:238: if (g < cur_palette[i+1]) scratch[i+1]++;
   06FE 41                 1932 	ld	b,c
   06FF 04                 1933 	inc	b
   0700 3Er20              1934 	ld	a,#<_cur_palette
   0702 80                 1935 	add	a,b
   0703 5F                 1936 	ld	e,a
   0704 3Es8E              1937 	ld	a,#>_cur_palette
   0706 CE 00              1938 	adc	a,#0x00
   0708 57                 1939 	ld	d,a
   0709 1A                 1940 	ld	a,(de)
   070A 5F                 1941 	ld	e,a
   070B DD 7E FE           1942 	ld	a,-2 (ix)
   070E 93                 1943 	sub	a,e
   070F 30 10              1944 	jr	NC,00111$
   0711 3ErA0              1945 	ld	a,#<_scratch
   0713 80                 1946 	add	a,b
   0714 47                 1947 	ld	b,a
   0715 3Es8D              1948 	ld	a,#>_scratch
   0717 CE 00              1949 	adc	a,#0x00
   0719 5F                 1950 	ld	e,a
   071A 68                 1951 	ld	l,b
   071B 67                 1952 	ld	h,a
   071C 7E                 1953 	ld	a,(hl)
   071D 3C                 1954 	inc	a
   071E 68                 1955 	ld	l,b
   071F 63                 1956 	ld	h,e
   0720 77                 1957 	ld	(hl),a
   0721                    1958 00111$:
                           1959 ;demo.c:229: for(i = 0; i < 32; i+=2) {
   0721 0C                 1960 	inc	c
   0722 0C                 1961 	inc	c
   0723 C3r8Cs06           1962 	jp	00109$
   0726                    1963 00112$:
                           1964 ;demo.c:242: vdp_load_palette(scratch);
   0726 21rA0s8D           1965 	ld	hl,#_scratch
   0729 E5                 1966 	push	hl
   072A CDr00s00           1967 	call	_vdp_load_palette
   072D F1                 1968 	pop	af
   072E                    1969 00113$:
   072E DD F9              1970 	ld	sp,ix
   0730 DD E1              1971 	pop	ix
   0732 C9                 1972 	ret
   0733                    1973 _fadein_end::
                           1974 ;demo.c:254: void do_ymmm() {
                           1975 ;	---------------------------------
                           1976 ; Function do_ymmm
                           1977 ; ---------------------------------
   0733                    1978 _do_ymmm_start::
   0733                    1979 _do_ymmm:
   0733 DD E5              1980 	push	ix
   0735 DD 21 00 00        1981 	ld	ix,#0
   0739 DD 39              1982 	add	ix,sp
   073B F5                 1983 	push	af
                           1984 ;demo.c:258: if (tick > 32) { tick = 0; flipper++;}
   073C 3E 20              1985 	ld	a,#0x20
   073E FD 21rC2s8E        1986 	ld	iy,#_tick
   0742 FD 96 00           1987 	sub	a,0 (iy)
   0745 3E 00              1988 	ld	a,#0x00
   0747 FD 21rC2s8E        1989 	ld	iy,#_tick
   074B FD 9E 01           1990 	sbc	a,1 (iy)
   074E F2r6Bs07           1991 	jp	P,00102$
   0751 21rC2s8E           1992 	ld	hl,#_tick + 0
   0754 36 00              1993 	ld	(hl), #0x00
   0756 21rC3s8E           1994 	ld	hl,#_tick + 1
   0759 36 00              1995 	ld	(hl), #0x00
   075B FD 21rDDs8E        1996 	ld	iy,#_flipper
   075F FD 34 00           1997 	inc	0 (iy)
   0762 20 07              1998 	jr	NZ,00115$
   0764 FD 21rDDs8E        1999 	ld	iy,#_flipper
   0768 FD 34 01           2000 	inc	1 (iy)
   076B                    2001 00115$:
   076B                    2002 00102$:
                           2003 ;demo.c:259: if (flipper > 10) { flipper = 0;}
   076B 3E 0A              2004 	ld	a,#0x0A
   076D FD 21rDDs8E        2005 	ld	iy,#_flipper
   0771 FD 96 00           2006 	sub	a,0 (iy)
   0774 3E 00              2007 	ld	a,#0x00
   0776 FD 21rDDs8E        2008 	ld	iy,#_flipper
   077A FD 9E 01           2009 	sbc	a,1 (iy)
   077D F2r8As07           2010 	jp	P,00104$
   0780 21rDDs8E           2011 	ld	hl,#_flipper + 0
   0783 36 00              2012 	ld	(hl), #0x00
   0785 21rDEs8E           2013 	ld	hl,#_flipper + 1
   0788 36 00              2014 	ld	(hl), #0x00
   078A                    2015 00104$:
                           2016 ;demo.c:261: ymmmf++;
   078A FD 21rDFs8E        2017 	ld	iy,#_ymmmf
   078E FD 34 00           2018 	inc	0 (iy)
   0791 20 07              2019 	jr	NZ,00116$
   0793 FD 21rDFs8E        2020 	ld	iy,#_ymmmf
   0797 FD 34 01           2021 	inc	1 (iy)
   079A                    2022 00116$:
                           2023 ;demo.c:262: for (yofff = 0; yofff<212-step;yofff+=step) {
   079A 21rDBs8E           2024 	ld	hl,#_yofff + 0
   079D 36 00              2025 	ld	(hl), #0x00
   079F                    2026 00105$:
   079F 21rDBs8E           2027 	ld	hl,#_yofff + 0
   07A2 4E                 2028 	ld	c,(hl)
   07A3 06 00              2029 	ld	b,#0x00
   07A5 79                 2030 	ld	a,c
   07A6 D6 D2              2031 	sub	a,#0xD2
   07A8 78                 2032 	ld	a,b
   07A9 DE 00              2033 	sbc	a,#0x00
   07AB F2r24s08           2034 	jp	P,00109$
                           2035 ;demo.c:263: xo = (sintabx[(yofff+ymmmf) & 255]);
   07AE 21rDFs8E           2036 	ld	hl,#_ymmmf
   07B1 79                 2037 	ld	a,c
   07B2 86                 2038 	add	a,(hl)
   07B3 5F                 2039 	ld	e,a
   07B4 78                 2040 	ld	a,b
   07B5 23                 2041 	inc	hl
   07B6 8E                 2042 	adc	a,(hl)
   07B7 16 00              2043 	ld	d,#0x00
   07B9 CB 23              2044 	sla	e
   07BB CB 12              2045 	rl	d
   07BD 21r2Cs00           2046 	ld	hl,#_sintabx
   07C0 19                 2047 	add	hl,de
   07C1 5E                 2048 	ld	e,(hl)
   07C2 23                 2049 	inc	hl
   07C3 56                 2050 	ld	d,(hl)
   07C4 DD 73 FE           2051 	ld	-2 (ix),e
   07C7 DD 72 FF           2052 	ld	-1 (ix),d
                           2053 ;demo.c:266: cmd.source_x = 0;
   07CA 21rC4s8E           2054 	ld	hl,#_cmd
   07CD 36 00              2055 	ld	(hl),#0x00
   07CF 23                 2056 	inc	hl
   07D0 36 00              2057 	ld	(hl),#0x00
                           2058 ;demo.c:267: cmd.source_y = 0+yofff;
   07D2 11rC6s8E           2059 	ld	de,#_cmd + 2
   07D5 EB                 2060 	ex	de,hl
   07D6 71                 2061 	ld	(hl),c
   07D7 23                 2062 	inc	hl
   07D8 70                 2063 	ld	(hl),b
                           2064 ;demo.c:268: cmd.dest_x = xo;
   07D9 11rC8s8E           2065 	ld	de,#_cmd + 4
   07DC EB                 2066 	ex	de,hl
   07DD DD 7E FE           2067 	ld	a,-2 (ix)
   07E0 77                 2068 	ld	(hl),a
   07E1 23                 2069 	inc	hl
   07E2 DD 7E FF           2070 	ld	a,-1 (ix)
   07E5 77                 2071 	ld	(hl),a
                           2072 ;demo.c:269: cmd.dest_y = 3+yofff;
   07E6 11rCAs8E           2073 	ld	de,#_cmd + 6
   07E9 03                 2074 	inc	bc
   07EA 03                 2075 	inc	bc
   07EB 03                 2076 	inc	bc
   07EC 6B                 2077 	ld	l,e
   07ED 62                 2078 	ld	h,d
   07EE 71                 2079 	ld	(hl),c
   07EF 23                 2080 	inc	hl
   07F0 70                 2081 	ld	(hl),b
                           2082 ;demo.c:270: cmd.size_x = 256;
   07F1 21rCCs8E           2083 	ld	hl, #_cmd + 8
   07F4 36 00              2084 	ld	(hl),#0x00
   07F6 23                 2085 	inc	hl
   07F7 36 01              2086 	ld	(hl),#0x01
                           2087 ;demo.c:271: cmd.size_y = 1;
   07F9 21rCEs8E           2088 	ld	hl, #_cmd + 10
   07FC 36 01              2089 	ld	(hl),#0x01
   07FE 23                 2090 	inc	hl
   07FF 36 00              2091 	ld	(hl),#0x00
                           2092 ;demo.c:272: cmd.data = 0;
                           2093 ;demo.c:273: cmd.argument = 0;
   0801 3E 00              2094 	ld	a,#0x00
   0803 32rD0s8E           2095 	ld	(#_cmd + 12),a
   0806 32rD1s8E           2096 	ld	(#_cmd + 13),a
                           2097 ;demo.c:274: cmd.command = 0xD0;
   0809 3E D0              2098 	ld	a,#0xD0
   080B 32rD2s8E           2099 	ld	(#_cmd + 14),a
                           2100 ;demo.c:277: vdp_copier(&cmd);
   080E 21rC4s8E           2101 	ld	hl,#_cmd
   0811 E5                 2102 	push	hl
   0812 CDr00s00           2103 	call	_vdp_copier
   0815 F1                 2104 	pop	af
                           2105 ;demo.c:262: for (yofff = 0; yofff<212-step;yofff+=step) {
   0816 21rDBs8E           2106 	ld	hl,#_yofff + 0
   0819 4E                 2107 	ld	c,(hl)
   081A 21rDBs8E           2108 	ld	hl,#_yofff
   081D 79                 2109 	ld	a,c
   081E C6 02              2110 	add	a,#0x02
   0820 77                 2111 	ld	(hl),a
   0821 C3r9Fs07           2112 	jp	00105$
   0824                    2113 00109$:
   0824 DD F9              2114 	ld	sp,ix
   0826 DD E1              2115 	pop	ix
   0828 C9                 2116 	ret
   0829                    2117 _do_ymmm_end::
                           2118 ;demo.c:294: void do_blocks() {
                           2119 ;	---------------------------------
                           2120 ; Function do_blocks
                           2121 ; ---------------------------------
   0829                    2122 _do_blocks_start::
   0829                    2123 _do_blocks:
   0829 DD E5              2124 	push	ix
   082B DD 21 00 00        2125 	ld	ix,#0
   082F DD 39              2126 	add	ix,sp
   0831 21 FA FF           2127 	ld	hl,#-6
   0834 39                 2128 	add	hl,sp
   0835 F9                 2129 	ld	sp,hl
                           2130 ;demo.c:296: int ys = 0;
   0836 DD 36 FC 00        2131 	ld	-4 (ix),#0x00
   083A DD 36 FD 00        2132 	ld	-3 (ix),#0x00
                           2133 ;demo.c:297: int ye = 0;
   083E DD 36 FA 00        2134 	ld	-6 (ix),#0x00
   0842 DD 36 FB 00        2135 	ld	-5 (ix),#0x00
                           2136 ;demo.c:299: vdp_register(VDP_VOFFSET,0);
   0846 21 17 00           2137 	ld	hl,#0x0017
   0849 E5                 2138 	push	hl
   084A CDr00s00           2139 	call	_vdp_register
   084D F1                 2140 	pop	af
                           2141 ;demo.c:301: if (block_init == 0) {
   084E AF                 2142 	xor	a,a
   084F FD 21rE1s8E        2143 	ld	iy,#_block_init
   0853 FD B6 00           2144 	or	a,0 (iy)
   0856 C2rBEs08           2145 	jp	NZ,00108$
                           2146 ;demo.c:303: vdp_set_screen5();
   0859 CDr00s00           2147 	call	_vdp_set_screen5
                           2148 ;demo.c:305: vdp_register(2, 0x5F);
   085C 21 02 5F           2149 	ld	hl,#0x5F02
   085F E5                 2150 	push	hl
   0860 CDr00s00           2151 	call	_vdp_register
   0863 F1                 2152 	pop	af
                           2153 ;demo.c:307: for(i=0;i<16;i++) btab[i] = i*16;
   0864 DD 36 FE 00        2154 	ld	-2 (ix),#0x00
   0868 DD 36 FF 00        2155 	ld	-1 (ix),#0x00
   086C                    2156 00110$:
   086C DD 7E FE           2157 	ld	a,-2 (ix)
   086F D6 10              2158 	sub	a,#0x10
   0871 DD 7E FF           2159 	ld	a,-1 (ix)
   0874 DE 00              2160 	sbc	a,#0x00
   0876 F2rAEs08           2161 	jp	P,00113$
   0879 DD 4E FE           2162 	ld	c,-2 (ix)
   087C DD 46 FF           2163 	ld	b,-1 (ix)
   087F CB 21              2164 	sla	c
   0881 CB 10              2165 	rl	b
   0883 21rEAs8E           2166 	ld	hl,#_btab
   0886 09                 2167 	add	hl,bc
   0887 4D                 2168 	ld	c,l
   0888 44                 2169 	ld	b,h
   0889 DD 5E FE           2170 	ld	e,-2 (ix)
   088C DD 56 FF           2171 	ld	d,-1 (ix)
   088F CB 23              2172 	sla	e
   0891 CB 12              2173 	rl	d
   0893 CB 23              2174 	sla	e
   0895 CB 12              2175 	rl	d
   0897 CB 23              2176 	sla	e
   0899 CB 12              2177 	rl	d
   089B CB 23              2178 	sla	e
   089D CB 12              2179 	rl	d
   089F 69                 2180 	ld	l,c
   08A0 60                 2181 	ld	h,b
   08A1 73                 2182 	ld	(hl),e
   08A2 23                 2183 	inc	hl
   08A3 72                 2184 	ld	(hl),d
   08A4 DD 34 FE           2185 	inc	-2 (ix)
   08A7 20 03              2186 	jr	NZ,00139$
   08A9 DD 34 FF           2187 	inc	-1 (ix)
   08AC                    2188 00139$:
   08AC 18 BE              2189 	jr	00110$
   08AE                    2190 00113$:
                           2191 ;demo.c:308: vdp_load_palette(block_palette);
   08AE 21r40s8E           2192 	ld	hl,#_block_palette
   08B1 E5                 2193 	push	hl
   08B2 CDr00s00           2194 	call	_vdp_load_palette
   08B5 F1                 2195 	pop	af
                           2196 ;demo.c:310: block_init = 1;
   08B6 21rE1s8E           2197 	ld	hl,#_block_init + 0
   08B9 36 01              2198 	ld	(hl), #0x01
   08BB C3r47s0A           2199 	jp	00122$
   08BE                    2200 00108$:
                           2201 ;demo.c:314: if (flof == 0) { ys = 0; ye = 8; }
   08BE 3Ar0As8F           2202 	ld	a,(#_flof+0)
   08C1 FD 21r0As8F        2203 	ld	iy,#_flof
   08C5 FD B6 01           2204 	or	a,1 (iy)
   08C8 20 10              2205 	jr	NZ,00102$
   08CA DD 36 FC 00        2206 	ld	-4 (ix),#0x00
   08CE DD 36 FD 00        2207 	ld	-3 (ix),#0x00
   08D2 DD 36 FA 08        2208 	ld	-6 (ix),#0x08
   08D6 DD 36 FB 00        2209 	ld	-5 (ix),#0x00
   08DA                    2210 00102$:
                           2211 ;demo.c:315: if (flof == 1) { ys = 8; ye = 16; }
   08DA 3Ar0As8F           2212 	ld	a,(#_flof+0)
   08DD D6 01              2213 	sub	a,#0x01
   08DF 20 06              2214 	jr	NZ,00140$
   08E1 3Ar0Bs8F           2215 	ld	a,(#_flof+1)
   08E4 B7                 2216 	or	a,a
   08E5 28 02              2217 	jr	Z,00141$
   08E7                    2218 00140$:
   08E7 18 10              2219 	jr	00104$
   08E9                    2220 00141$:
   08E9 DD 36 FC 08        2221 	ld	-4 (ix),#0x08
   08ED DD 36 FD 00        2222 	ld	-3 (ix),#0x00
   08F1 DD 36 FA 10        2223 	ld	-6 (ix),#0x10
   08F5 DD 36 FB 00        2224 	ld	-5 (ix),#0x00
   08F9                    2225 00104$:
                           2226 ;demo.c:317: for(bty=3;bty<11;bty++) {
   08F9 FD 21rE8s8E        2227 	ld	iy,#_bty
   08FD FD 36 00 03        2228 	ld	0 (iy),#0x03
   0901 FD 21rE8s8E        2229 	ld	iy,#_bty
   0905 FD 36 01 00        2230 	ld	1 (iy),#0x00
   0909                    2231 00118$:
   0909 3ArE8s8E           2232 	ld	a,(#_bty+0)
   090C D6 0B              2233 	sub	a,#0x0B
   090E 3ArE9s8E           2234 	ld	a,(#_bty+1)
   0911 DE 00              2235 	sbc	a,#0x00
   0913 F2r1Es0A           2236 	jp	P,00121$
                           2237 ;demo.c:318: for(btx=ys;btx<ye;btx++) {
   0916 DD 7E FC           2238 	ld	a,-4 (ix)
   0919 FD 21rE6s8E        2239 	ld	iy,#_btx
   091D FD 77 00           2240 	ld	0 (iy),a
   0920 DD 7E FD           2241 	ld	a,-3 (ix)
   0923 FD 21rE6s8E        2242 	ld	iy,#_btx
   0927 FD 77 01           2243 	ld	1 (iy),a
   092A                    2244 00114$:
   092A 3ArE6s8E           2245 	ld	a,(#_btx+0)
   092D DD 96 FA           2246 	sub	a,-6 (ix)
   0930 3ArE7s8E           2247 	ld	a,(#_btx+1)
   0933 DD 9E FB           2248 	sbc	a,-5 (ix)
   0936 F2r0Bs0A           2249 	jp	P,00120$
                           2250 ;demo.c:319: bsx = (PLY_PSGReg8 & PLY_PSGReg9 | PLY_PSGReg10)>>1;
   0939 3Ar00s00           2251 	ld	a,(#_PLY_PSGReg8+0)
   093C FD 21r00s00        2252 	ld	iy,#_PLY_PSGReg9
   0940 FD A6 00           2253 	and	a,0 (iy)
   0943 21r00s00           2254 	ld	hl,#_PLY_PSGReg10 + 0
   0946 B6                 2255 	or	a,(hl)
   0947 4F                 2256 	ld	c,a
   0948 CB 39              2257 	srl	c
   094A 21rE2s8E           2258 	ld	hl,#_bsx + 0
   094D 71                 2259 	ld	(hl), c
   094E 21rE3s8E           2260 	ld	hl,#_bsx + 1
   0951 36 00              2261 	ld	(hl), #0x00
                           2262 ;demo.c:320: bsy = PLY_PSGReg10;
   0953 3Ar00s00           2263 	ld	a,(#_PLY_PSGReg10+0)
   0956 21rE4s8E           2264 	ld	hl,#_bsy + 0
   0959 77                 2265 	ld	(hl), a
   095A 21rE5s8E           2266 	ld	hl,#_bsy + 1
   095D 36 00              2267 	ld	(hl), #0x00
                           2268 ;demo.c:321: cmd.source_x = btab[bsx];
   095F 21rE2s8E           2269 	ld	hl,#_bsx + 0
   0962 4E                 2270 	ld	c,(hl)
   0963 21rE3s8E           2271 	ld	hl,#_bsx + 1
   0966 46                 2272 	ld	b,(hl)
   0967 CB 21              2273 	sla	c
   0969 CB 10              2274 	rl	b
   096B 21rEAs8E           2275 	ld	hl,#_btab
   096E 09                 2276 	add	hl,bc
   096F 4E                 2277 	ld	c,(hl)
   0970 23                 2278 	inc	hl
   0971 46                 2279 	ld	b,(hl)
   0972 21rC4s8E           2280 	ld	hl,#_cmd
   0975 71                 2281 	ld	(hl),c
   0976 23                 2282 	inc	hl
   0977 70                 2283 	ld	(hl),b
                           2284 ;demo.c:322: cmd.source_y = 768+btab[bsy];
   0978 01rC6s8E           2285 	ld	bc,#_cmd + 2
   097B 21rE4s8E           2286 	ld	hl,#_bsy + 0
   097E 5E                 2287 	ld	e,(hl)
   097F 21rE5s8E           2288 	ld	hl,#_bsy + 1
   0982 56                 2289 	ld	d,(hl)
   0983 CB 23              2290 	sla	e
   0985 CB 12              2291 	rl	d
   0987 21rEAs8E           2292 	ld	hl,#_btab
   098A 19                 2293 	add	hl,de
   098B 5E                 2294 	ld	e,(hl)
   098C 23                 2295 	inc	hl
   098D 56                 2296 	ld	d,(hl)
   098E 21 00 03           2297 	ld	hl,#0x0300
   0991 19                 2298 	add	hl,de
   0992 EB                 2299 	ex	de,hl
   0993 69                 2300 	ld	l,c
   0994 60                 2301 	ld	h,b
   0995 73                 2302 	ld	(hl),e
   0996 23                 2303 	inc	hl
   0997 72                 2304 	ld	(hl),d
                           2305 ;demo.c:323: cmd.dest_x = btab[btx];
   0998 01rC8s8E           2306 	ld	bc,#_cmd + 4
   099B 21rE6s8E           2307 	ld	hl,#_btx + 0
   099E 5E                 2308 	ld	e,(hl)
   099F 21rE7s8E           2309 	ld	hl,#_btx + 1
   09A2 56                 2310 	ld	d,(hl)
   09A3 CB 23              2311 	sla	e
   09A5 CB 12              2312 	rl	d
   09A7 21rEAs8E           2313 	ld	hl,#_btab
   09AA 19                 2314 	add	hl,de
   09AB 5E                 2315 	ld	e,(hl)
   09AC 23                 2316 	inc	hl
   09AD 56                 2317 	ld	d,(hl)
   09AE 69                 2318 	ld	l,c
   09AF 60                 2319 	ld	h,b
   09B0 73                 2320 	ld	(hl),e
   09B1 23                 2321 	inc	hl
   09B2 72                 2322 	ld	(hl),d
                           2323 ;demo.c:324: cmd.dest_y = 512+btab[bty];
   09B3 01rCAs8E           2324 	ld	bc,#_cmd + 6
   09B6 21rE8s8E           2325 	ld	hl,#_bty + 0
   09B9 5E                 2326 	ld	e,(hl)
   09BA 21rE9s8E           2327 	ld	hl,#_bty + 1
   09BD 56                 2328 	ld	d,(hl)
   09BE CB 23              2329 	sla	e
   09C0 CB 12              2330 	rl	d
   09C2 21rEAs8E           2331 	ld	hl,#_btab
   09C5 19                 2332 	add	hl,de
   09C6 5E                 2333 	ld	e,(hl)
   09C7 23                 2334 	inc	hl
   09C8 56                 2335 	ld	d,(hl)
   09C9 21 00 02           2336 	ld	hl,#0x0200
   09CC 19                 2337 	add	hl,de
   09CD EB                 2338 	ex	de,hl
   09CE 69                 2339 	ld	l,c
   09CF 60                 2340 	ld	h,b
   09D0 73                 2341 	ld	(hl),e
   09D1 23                 2342 	inc	hl
   09D2 72                 2343 	ld	(hl),d
                           2344 ;demo.c:325: cmd.size_x = 16;
   09D3 21rCCs8E           2345 	ld	hl, #_cmd + 8
   09D6 36 10              2346 	ld	(hl),#0x10
   09D8 23                 2347 	inc	hl
   09D9 36 00              2348 	ld	(hl),#0x00
                           2349 ;demo.c:326: cmd.size_y = 16;
   09DB 21rCEs8E           2350 	ld	hl, #_cmd + 10
   09DE 36 10              2351 	ld	(hl),#0x10
   09E0 23                 2352 	inc	hl
   09E1 36 00              2353 	ld	(hl),#0x00
                           2354 ;demo.c:327: cmd.data = 0;
                           2355 ;demo.c:328: cmd.argument = 0x00;
   09E3 3E 00              2356 	ld	a,#0x00
   09E5 32rD0s8E           2357 	ld	(#_cmd + 12),a
   09E8 32rD1s8E           2358 	ld	(#_cmd + 13),a
                           2359 ;demo.c:329: cmd.command = 0xD0;
   09EB 3E D0              2360 	ld	a,#0xD0
   09ED 32rD2s8E           2361 	ld	(#_cmd + 14),a
                           2362 ;demo.c:330: vdp_copier(&cmd);
   09F0 21rC4s8E           2363 	ld	hl,#_cmd
   09F3 E5                 2364 	push	hl
   09F4 CDr00s00           2365 	call	_vdp_copier
   09F7 F1                 2366 	pop	af
                           2367 ;demo.c:318: for(btx=ys;btx<ye;btx++) {
   09F8 FD 21rE6s8E        2368 	ld	iy,#_btx
   09FC FD 34 00           2369 	inc	0 (iy)
   09FF 20 07              2370 	jr	NZ,00150$
   0A01 FD 21rE6s8E        2371 	ld	iy,#_btx
   0A05 FD 34 01           2372 	inc	1 (iy)
   0A08                    2373 00150$:
   0A08 C3r2As09           2374 	jp	00114$
   0A0B                    2375 00120$:
                           2376 ;demo.c:317: for(bty=3;bty<11;bty++) {
   0A0B FD 21rE8s8E        2377 	ld	iy,#_bty
   0A0F FD 34 00           2378 	inc	0 (iy)
   0A12 20 07              2379 	jr	NZ,00151$
   0A14 FD 21rE8s8E        2380 	ld	iy,#_bty
   0A18 FD 34 01           2381 	inc	1 (iy)
   0A1B                    2382 00151$:
   0A1B C3r09s09           2383 	jp	00118$
   0A1E                    2384 00121$:
                           2385 ;demo.c:334: flof++;
   0A1E FD 21r0As8F        2386 	ld	iy,#_flof
   0A22 FD 34 00           2387 	inc	0 (iy)
   0A25 20 07              2388 	jr	NZ,00152$
   0A27 FD 21r0As8F        2389 	ld	iy,#_flof
   0A2B FD 34 01           2390 	inc	1 (iy)
   0A2E                    2391 00152$:
                           2392 ;demo.c:335: if (flof == 2) flof = 0;
   0A2E 3Ar0As8F           2393 	ld	a,(#_flof+0)
   0A31 D6 02              2394 	sub	a,#0x02
   0A33 20 06              2395 	jr	NZ,00153$
   0A35 3Ar0Bs8F           2396 	ld	a,(#_flof+1)
   0A38 B7                 2397 	or	a,a
   0A39 28 02              2398 	jr	Z,00154$
   0A3B                    2399 00153$:
   0A3B 18 0A              2400 	jr	00122$
   0A3D                    2401 00154$:
   0A3D 21r0As8F           2402 	ld	hl,#_flof + 0
   0A40 36 00              2403 	ld	(hl), #0x00
   0A42 21r0Bs8F           2404 	ld	hl,#_flof + 1
   0A45 36 00              2405 	ld	(hl), #0x00
   0A47                    2406 00122$:
   0A47 DD F9              2407 	ld	sp,ix
   0A49 DD E1              2408 	pop	ix
   0A4B C9                 2409 	ret
   0A4C                    2410 _do_blocks_end::
                           2411 ;demo.c:343: void raster_effu() {
                           2412 ;	---------------------------------
                           2413 ; Function raster_effu
                           2414 ; ---------------------------------
   0A4C                    2415 _raster_effu_start::
   0A4C                    2416 _raster_effu:
                           2417 ;demo.c:344: vdp_register(VDP_VOFFSET,0);
   0A4C 21 17 00           2418 	ld	hl,#0x0017
   0A4F E5                 2419 	push	hl
   0A50 CDr00s00           2420 	call	_vdp_register
   0A53 F1                 2421 	pop	af
                           2422 ;demo.c:345: waitVB();
   0A54 76                 2423 		halt 
                           2424 ;demo.c:347: vdp_register(1,0x40); // disable vblank
   0A55 21 01 40           2425 	ld	hl,#0x4001
   0A58 E5                 2426 	push	hl
   0A59 CDr00s00           2427 	call	_vdp_register
                           2428 ;demo.c:349: for (linenum = 40; linenum < 212; linenum+=4) {
   0A5C 3E 28              2429 	ld	a,#0x28
   0A5E 32r0Cs8F           2430 	ld	(#_linenum + 0),a
   0A61 F1                 2431 	pop	af
   0A62 FD 21r0Cs8F        2432 	ld	iy,#_linenum
   0A66 FD 36 01 00        2433 	ld	1 (iy),#0x00
   0A6A                    2434 00101$:
   0A6A 3Ar0Cs8F           2435 	ld	a,(#_linenum+0)
   0A6D D6 D4              2436 	sub	a,#0xD4
   0A6F 3Ar0Ds8F           2437 	ld	a,(#_linenum+1)
   0A72 DE 00              2438 	sbc	a,#0x00
   0A74 F2rA5s0A           2439 	jp	P,00104$
                           2440 ;demo.c:350: vdp_register(19,linenum); // interrupt on line
   0A77 3Ar0Cs8F           2441 	ld	a,(#_linenum+0)
   0A7A F5                 2442 	push	af
   0A7B 33                 2443 	inc	sp
   0A7C 3E 13              2444 	ld	a,#0x13
   0A7E F5                 2445 	push	af
   0A7F 33                 2446 	inc	sp
   0A80 CDr00s00           2447 	call	_vdp_register
   0A83 F1                 2448 	pop	af
                           2449 ;demo.c:351: vdp_register(0,0x16); // mode SC5, IE1 interrupts on
   0A84 21 00 16           2450 	ld	hl,#0x1600
   0A87 E5                 2451 	push	hl
   0A88 CDr00s00           2452 	call	_vdp_register
   0A8B F1                 2453 	pop	af
                           2454 ;demo.c:353: waitVB();
   0A8C 76                 2455 		halt 
                           2456 ;demo.c:349: for (linenum = 40; linenum < 212; linenum+=4) {
   0A8D 21r0Cs8F           2457 	ld	hl,#_linenum
   0A90 7E                 2458 	ld	a,(hl)
   0A91 C6 04              2459 	add	a,#0x04
   0A93 23                 2460 	inc	hl
   0A94 2B                 2461 	dec	hl
   0A95 C5                 2462 	push	bc
   0A96 4F                 2463 	ld	c, a
   0A97 23                 2464 	inc	hl
   0A98 7E                 2465 	ld	a, (hl)
   0A99 47                 2466 	ld	b, a
   0A9A 79                 2467 	ld	a, c
   0A9B 2B                 2468 	dec	hl
   0A9C 77                 2469 	ld	(hl), a
   0A9D 78                 2470 	ld	a, b
   0A9E C1                 2471 	pop	bc
   0A9F CE 00              2472 	adc	a,#0x00
   0AA1 23                 2473 	inc	hl
   0AA2 77                 2474 	ld	(hl),a
   0AA3 18 C5              2475 	jr	00101$
   0AA5                    2476 00104$:
                           2477 ;demo.c:356: vdp_register(VDP_VOFFSET,0);
   0AA5 21 17 00           2478 	ld	hl,#0x0017
   0AA8 E5                 2479 	push	hl
   0AA9 CDr00s00           2480 	call	_vdp_register
   0AAC F1                 2481 	pop	af
                           2482 ;demo.c:370: vdp_register(0,0x6); // mode SC5, IE1 interrupts off
   0AAD 21 00 06           2483 	ld	hl,#0x0600
   0AB0 E5                 2484 	push	hl
   0AB1 CDr00s00           2485 	call	_vdp_register
   0AB4 F1                 2486 	pop	af
                           2487 ;demo.c:371: vdp_register(1,0x60); // enable vblank
   0AB5 21 01 60           2488 	ld	hl,#0x6001
   0AB8 E5                 2489 	push	hl
   0AB9 CDr00s00           2490 	call	_vdp_register
   0ABC F1                 2491 	pop	af
   0ABD C9                 2492 	ret
   0ABE                    2493 _raster_effu_end::
                           2494 ;demo.c:402: void do_letter(char cc) {
                           2495 ;	---------------------------------
                           2496 ; Function do_letter
                           2497 ; ---------------------------------
   0ABE                    2498 _do_letter_start::
   0ABE                    2499 _do_letter:
   0ABE DD E5              2500 	push	ix
   0AC0 DD 21 00 00        2501 	ld	ix,#0
   0AC4 DD 39              2502 	add	ix,sp
   0AC6 F5                 2503 	push	af
                           2504 ;demo.c:403: int cidx = cc - 65;
   0AC7 DD 4E 04           2505 	ld	c,4 (ix)
   0ACA DD 7E 04           2506 	ld	a,4 (ix)
   0ACD 17                 2507 	rla	
   0ACE 9F                 2508 	sbc	a,a
   0ACF 47                 2509 	ld	b,a
   0AD0 79                 2510 	ld	a,c
   0AD1 C6 BF              2511 	add	a,#0xBF
   0AD3 DD 77 FE           2512 	ld	-2 (ix),a
   0AD6 78                 2513 	ld	a,b
   0AD7 CE FF              2514 	adc	a,#0xFF
   0AD9 DD 77 FF           2515 	ld	-1 (ix),a
                           2516 ;demo.c:404: cmd.source_x = 127+font_x[cidx];
   0ADC 3Er7C              2517 	ld	a,#<_font_x
   0ADE DD 86 FE           2518 	add	a,-2 (ix)
   0AE1 5F                 2519 	ld	e,a
   0AE2 3Es0B              2520 	ld	a,#>_font_x
   0AE4 DD 8E FF           2521 	adc	a,-1 (ix)
   0AE7 57                 2522 	ld	d,a
   0AE8 1A                 2523 	ld	a,(de)
   0AE9 5F                 2524 	ld	e,a
   0AEA 16 00              2525 	ld	d,#0x00
   0AEC 21 7F 00           2526 	ld	hl,#0x007F
   0AEF 19                 2527 	add	hl,de
   0AF0 EB                 2528 	ex	de,hl
   0AF1 21rC4s8E           2529 	ld	hl,#_cmd
   0AF4 73                 2530 	ld	(hl),e
   0AF5 23                 2531 	inc	hl
   0AF6 72                 2532 	ld	(hl),d
                           2533 ;demo.c:405: cmd.source_y = 512+font_y[cidx];
   0AF7 11rC6s8E           2534 	ld	de,#_cmd + 2
   0AFA 3ErBC              2535 	ld	a,#<_font_y
   0AFC DD 86 FE           2536 	add	a,-2 (ix)
   0AFF 4F                 2537 	ld	c,a
   0B00 3Es0B              2538 	ld	a,#>_font_y
   0B02 DD 8E FF           2539 	adc	a,-1 (ix)
   0B05 47                 2540 	ld	b,a
   0B06 0A                 2541 	ld	a,(bc)
   0B07 4F                 2542 	ld	c,a
   0B08 06 00              2543 	ld	b,#0x00
   0B0A 21 00 02           2544 	ld	hl,#0x0200
   0B0D 09                 2545 	add	hl,bc
   0B0E 4D                 2546 	ld	c,l
   0B0F 44                 2547 	ld	b,h
   0B10 EB                 2548 	ex	de,hl
   0B11 71                 2549 	ld	(hl),c
   0B12 23                 2550 	inc	hl
   0B13 70                 2551 	ld	(hl),b
                           2552 ;demo.c:406: cmd.dest_x = lx;
   0B14 01rC8s8E           2553 	ld	bc,#_cmd + 4
   0B17 21r0Es8F           2554 	ld	hl,#_lx + 0
   0B1A 5E                 2555 	ld	e,(hl)
   0B1B 16 00              2556 	ld	d,#0x00
   0B1D 69                 2557 	ld	l,c
   0B1E 60                 2558 	ld	h,b
   0B1F 73                 2559 	ld	(hl),e
   0B20 23                 2560 	inc	hl
   0B21 72                 2561 	ld	(hl),d
                           2562 ;demo.c:407: cmd.dest_y = ly;
   0B22 01rCAs8E           2563 	ld	bc,#_cmd + 6
   0B25 21r0Fs8F           2564 	ld	hl,#_ly + 0
   0B28 5E                 2565 	ld	e,(hl)
   0B29 16 00              2566 	ld	d,#0x00
   0B2B 69                 2567 	ld	l,c
   0B2C 60                 2568 	ld	h,b
   0B2D 73                 2569 	ld	(hl),e
   0B2E 23                 2570 	inc	hl
   0B2F 72                 2571 	ld	(hl),d
                           2572 ;demo.c:408: cmd.size_x = font_w[cidx];
   0B30 01rCCs8E           2573 	ld	bc,#_cmd + 8
   0B33 3ErFC              2574 	ld	a,#<_font_w
   0B35 DD 86 FE           2575 	add	a,-2 (ix)
   0B38 5F                 2576 	ld	e,a
   0B39 3Es0B              2577 	ld	a,#>_font_w
   0B3B DD 8E FF           2578 	adc	a,-1 (ix)
   0B3E 57                 2579 	ld	d,a
   0B3F 1A                 2580 	ld	a,(de)
   0B40 5F                 2581 	ld	e,a
   0B41 16 00              2582 	ld	d,#0x00
   0B43 69                 2583 	ld	l,c
   0B44 60                 2584 	ld	h,b
   0B45 73                 2585 	ld	(hl),e
   0B46 23                 2586 	inc	hl
   0B47 72                 2587 	ld	(hl),d
                           2588 ;demo.c:409: cmd.size_y = 8;
   0B48 21rCEs8E           2589 	ld	hl, #_cmd + 10
   0B4B 36 08              2590 	ld	(hl),#0x08
   0B4D 23                 2591 	inc	hl
   0B4E 36 00              2592 	ld	(hl),#0x00
                           2593 ;demo.c:410: cmd.argument = 0x00;
   0B50 3E 00              2594 	ld	a,#0x00
   0B52 32rD1s8E           2595 	ld	(#_cmd + 13),a
                           2596 ;demo.c:411: cmd.command = 0x90; // logical vram to vram
   0B55 3E 90              2597 	ld	a,#0x90
   0B57 32rD2s8E           2598 	ld	(#_cmd + 14),a
                           2599 ;demo.c:412: vdp_copier(&cmd);
   0B5A 21rC4s8E           2600 	ld	hl,#_cmd
   0B5D E5                 2601 	push	hl
   0B5E CDr00s00           2602 	call	_vdp_copier
   0B61 F1                 2603 	pop	af
                           2604 ;demo.c:413: lx+=font_w[cidx]-1;
   0B62 3ErFC              2605 	ld	a,#<_font_w
   0B64 DD 86 FE           2606 	add	a,-2 (ix)
   0B67 4F                 2607 	ld	c,a
   0B68 3Es0B              2608 	ld	a,#>_font_w
   0B6A DD 8E FF           2609 	adc	a,-1 (ix)
   0B6D 47                 2610 	ld	b,a
   0B6E 0A                 2611 	ld	a,(bc)
   0B6F 4F                 2612 	ld	c,a
   0B70 0D                 2613 	dec	c
   0B71 21r0Es8F           2614 	ld	hl,#_lx
   0B74 7E                 2615 	ld	a,(hl)
   0B75 81                 2616 	add	a,c
   0B76 77                 2617 	ld	(hl),a
   0B77 DD F9              2618 	ld	sp,ix
   0B79 DD E1              2619 	pop	ix
   0B7B C9                 2620 	ret
   0B7C                    2621 _do_letter_end::
   0B7C                    2622 _font_x:
   0B7C 01                 2623 	.db #0x01
   0B7D 09                 2624 	.db #0x09
   0B7E 11                 2625 	.db #0x11
   0B7F 19                 2626 	.db #0x19
   0B80 21                 2627 	.db #0x21
   0B81 29                 2628 	.db #0x29
   0B82 31                 2629 	.db #0x31
   0B83 39                 2630 	.db #0x39
   0B84 41                 2631 	.db #0x41
   0B85 46                 2632 	.db #0x46
   0B86 4E                 2633 	.db #0x4E
   0B87 56                 2634 	.db #0x56
   0B88 5E                 2635 	.db #0x5E
   0B89 01                 2636 	.db #0x01
   0B8A 0A                 2637 	.db #0x0A
   0B8B 12                 2638 	.db #0x12
   0B8C 1A                 2639 	.db #0x1A
   0B8D 23                 2640 	.db #0x23
   0B8E 2B                 2641 	.db #0x2B
   0B8F 33                 2642 	.db #0x33
   0B90 3C                 2643 	.db #0x3C
   0B91 44                 2644 	.db #0x44
   0B92 4C                 2645 	.db #0x4C
   0B93 56                 2646 	.db #0x56
   0B94 5E                 2647 	.db #0x5E
   0B95 67                 2648 	.db #0x67
   0B96 00                 2649 	.db #0x00
   0B97 00                 2650 	.db #0x00
   0B98 00                 2651 	.db #0x00
   0B99 00                 2652 	.db #0x00
   0B9A 00                 2653 	.db #0x00
   0B9B 00                 2654 	.db #0x00
   0B9C 01                 2655 	.db #0x01
   0B9D 09                 2656 	.db #0x09
   0B9E 11                 2657 	.db #0x11
   0B9F 18                 2658 	.db #0x18
   0BA0 20                 2659 	.db #0x20
   0BA1 28                 2660 	.db #0x28
   0BA2 2F                 2661 	.db #0x2F
   0BA3 37                 2662 	.db #0x37
   0BA4 3F                 2663 	.db #0x3F
   0BA5 45                 2664 	.db #0x45
   0BA6 4C                 2665 	.db #0x4C
   0BA7 54                 2666 	.db #0x54
   0BA8 5A                 2667 	.db #0x5A
   0BA9 64                 2668 	.db #0x64
   0BAA 01                 2669 	.db #0x01
   0BAB 09                 2670 	.db #0x09
   0BAC 11                 2671 	.db #0x11
   0BAD 19                 2672 	.db #0x19
   0BAE 21                 2673 	.db #0x21
   0BAF 29                 2674 	.db #0x29
   0BB0 30                 2675 	.db #0x30
   0BB1 38                 2676 	.db #0x38
   0BB2 40                 2677 	.db #0x40
   0BB3 4A                 2678 	.db #0x4A
   0BB4 52                 2679 	.db #0x52
   0BB5 5A                 2680 	.db #0x5A
   0BB6 00                 2681 	.db 0x00
   0BB7 00                 2682 	.db 0x00
   0BB8 00                 2683 	.db 0x00
   0BB9 00                 2684 	.db 0x00
   0BBA 00                 2685 	.db 0x00
   0BBB 00                 2686 	.db 0x00
   0BBC                    2687 _font_y:
   0BBC 1C                 2688 	.db #0x1C
   0BBD 1C                 2689 	.db #0x1C
   0BBE 1C                 2690 	.db #0x1C
   0BBF 1C                 2691 	.db #0x1C
   0BC0 1C                 2692 	.db #0x1C
   0BC1 1C                 2693 	.db #0x1C
   0BC2 1C                 2694 	.db #0x1C
   0BC3 1C                 2695 	.db #0x1C
   0BC4 1C                 2696 	.db #0x1C
   0BC5 1C                 2697 	.db #0x1C
   0BC6 1C                 2698 	.db #0x1C
   0BC7 1C                 2699 	.db #0x1C
   0BC8 1C                 2700 	.db #0x1C
   0BC9 25                 2701 	.db #0x25
   0BCA 25                 2702 	.db #0x25
   0BCB 25                 2703 	.db #0x25
   0BCC 25                 2704 	.db #0x25
   0BCD 25                 2705 	.db #0x25
   0BCE 25                 2706 	.db #0x25
   0BCF 25                 2707 	.db #0x25
   0BD0 25                 2708 	.db #0x25
   0BD1 25                 2709 	.db #0x25
   0BD2 25                 2710 	.db #0x25
   0BD3 25                 2711 	.db #0x25
   0BD4 25                 2712 	.db #0x25
   0BD5 25                 2713 	.db #0x25
   0BD6 00                 2714 	.db #0x00
   0BD7 00                 2715 	.db #0x00
   0BD8 00                 2716 	.db #0x00
   0BD9 00                 2717 	.db #0x00
   0BDA 00                 2718 	.db #0x00
   0BDB 00                 2719 	.db #0x00
   0BDC 37                 2720 	.db #0x37
   0BDD 37                 2721 	.db #0x37
   0BDE 37                 2722 	.db #0x37
   0BDF 37                 2723 	.db #0x37
   0BE0 37                 2724 	.db #0x37
   0BE1 37                 2725 	.db #0x37
   0BE2 37                 2726 	.db #0x37
   0BE3 37                 2727 	.db #0x37
   0BE4 37                 2728 	.db #0x37
   0BE5 37                 2729 	.db #0x37
   0BE6 37                 2730 	.db #0x37
   0BE7 37                 2731 	.db #0x37
   0BE8 37                 2732 	.db #0x37
   0BE9 37                 2733 	.db #0x37
   0BEA 40                 2734 	.db #0x40
   0BEB 40                 2735 	.db #0x40
   0BEC 40                 2736 	.db #0x40
   0BED 40                 2737 	.db #0x40
   0BEE 40                 2738 	.db #0x40
   0BEF 40                 2739 	.db #0x40
   0BF0 40                 2740 	.db #0x40
   0BF1 40                 2741 	.db #0x40
   0BF2 40                 2742 	.db #0x40
   0BF3 40                 2743 	.db #0x40
   0BF4 40                 2744 	.db #0x40
   0BF5 40                 2745 	.db #0x40
   0BF6 00                 2746 	.db 0x00
   0BF7 00                 2747 	.db 0x00
   0BF8 00                 2748 	.db 0x00
   0BF9 00                 2749 	.db 0x00
   0BFA 00                 2750 	.db 0x00
   0BFB 00                 2751 	.db 0x00
   0BFC                    2752 _font_w:
   0BFC 07                 2753 	.db #0x07
   0BFD 07                 2754 	.db #0x07
   0BFE 07                 2755 	.db #0x07
   0BFF 07                 2756 	.db #0x07
   0C00 07                 2757 	.db #0x07
   0C01 07                 2758 	.db #0x07
   0C02 07                 2759 	.db #0x07
   0C03 07                 2760 	.db #0x07
   0C04 04                 2761 	.db #0x04
   0C05 07                 2762 	.db #0x07
   0C06 07                 2763 	.db #0x07
   0C07 07                 2764 	.db #0x07
   0C08 09                 2765 	.db #0x09
   0C09 08                 2766 	.db #0x08
   0C0A 07                 2767 	.db #0x07
   0C0B 07                 2768 	.db #0x07
   0C0C 08                 2769 	.db #0x08
   0C0D 07                 2770 	.db #0x07
   0C0E 07                 2771 	.db #0x07
   0C0F 08                 2772 	.db #0x08
   0C10 07                 2773 	.db #0x07
   0C11 07                 2774 	.db #0x07
   0C12 09                 2775 	.db #0x09
   0C13 07                 2776 	.db #0x07
   0C14 08                 2777 	.db #0x08
   0C15 07                 2778 	.db #0x07
   0C16 00                 2779 	.db #0x00
   0C17 00                 2780 	.db #0x00
   0C18 00                 2781 	.db #0x00
   0C19 00                 2782 	.db #0x00
   0C1A 00                 2783 	.db #0x00
   0C1B 00                 2784 	.db #0x00
   0C1C 07                 2785 	.db #0x07
   0C1D 07                 2786 	.db #0x07
   0C1E 06                 2787 	.db #0x06
   0C1F 07                 2788 	.db #0x07
   0C20 07                 2789 	.db #0x07
   0C21 07                 2790 	.db #0x07
   0C22 07                 2791 	.db #0x07
   0C23 07                 2792 	.db #0x07
   0C24 05                 2793 	.db #0x05
   0C25 06                 2794 	.db #0x06
   0C26 07                 2795 	.db #0x07
   0C27 05                 2796 	.db #0x05
   0C28 09                 2797 	.db #0x09
   0C29 07                 2798 	.db #0x07
   0C2A 07                 2799 	.db #0x07
   0C2B 07                 2800 	.db #0x07
   0C2C 07                 2801 	.db #0x07
   0C2D 07                 2802 	.db #0x07
   0C2E 07                 2803 	.db #0x07
   0C2F 06                 2804 	.db #0x06
   0C30 07                 2805 	.db #0x07
   0C31 07                 2806 	.db #0x07
   0C32 09                 2807 	.db #0x09
   0C33 07                 2808 	.db #0x07
   0C34 07                 2809 	.db #0x07
   0C35 07                 2810 	.db #0x07
   0C36 00                 2811 	.db 0x00
   0C37 00                 2812 	.db 0x00
   0C38 00                 2813 	.db 0x00
   0C39 00                 2814 	.db 0x00
   0C3A 00                 2815 	.db 0x00
   0C3B 00                 2816 	.db 0x00
                           2817 ;demo.c:417: void do_letter_tall(char cc) {
                           2818 ;	---------------------------------
                           2819 ; Function do_letter_tall
                           2820 ; ---------------------------------
   0C3C                    2821 _do_letter_tall_start::
   0C3C                    2822 _do_letter_tall:
   0C3C DD E5              2823 	push	ix
   0C3E DD 21 00 00        2824 	ld	ix,#0
   0C42 DD 39              2825 	add	ix,sp
   0C44 F5                 2826 	push	af
                           2827 ;demo.c:418: int cidx = cc - 65;
   0C45 DD 4E 04           2828 	ld	c,4 (ix)
   0C48 DD 7E 04           2829 	ld	a,4 (ix)
   0C4B 17                 2830 	rla	
   0C4C 9F                 2831 	sbc	a,a
   0C4D 47                 2832 	ld	b,a
   0C4E 79                 2833 	ld	a,c
   0C4F C6 BF              2834 	add	a,#0xBF
   0C51 DD 77 FE           2835 	ld	-2 (ix),a
   0C54 78                 2836 	ld	a,b
   0C55 CE FF              2837 	adc	a,#0xFF
   0C57 DD 77 FF           2838 	ld	-1 (ix),a
                           2839 ;demo.c:419: cmd.source_x = 127+font_x[cidx];
   0C5A 3Er7C              2840 	ld	a,#<_font_x
   0C5C DD 86 FE           2841 	add	a,-2 (ix)
   0C5F 5F                 2842 	ld	e,a
   0C60 3Es0B              2843 	ld	a,#>_font_x
   0C62 DD 8E FF           2844 	adc	a,-1 (ix)
   0C65 57                 2845 	ld	d,a
   0C66 1A                 2846 	ld	a,(de)
   0C67 5F                 2847 	ld	e,a
   0C68 16 00              2848 	ld	d,#0x00
   0C6A 21 7F 00           2849 	ld	hl,#0x007F
   0C6D 19                 2850 	add	hl,de
   0C6E EB                 2851 	ex	de,hl
   0C6F 21rC4s8E           2852 	ld	hl,#_cmd
   0C72 73                 2853 	ld	(hl),e
   0C73 23                 2854 	inc	hl
   0C74 72                 2855 	ld	(hl),d
                           2856 ;demo.c:420: cmd.source_y = 512+font_y[cidx]-1;
   0C75 11rC6s8E           2857 	ld	de,#_cmd + 2
   0C78 3ErBC              2858 	ld	a,#<_font_y
   0C7A DD 86 FE           2859 	add	a,-2 (ix)
   0C7D 4F                 2860 	ld	c,a
   0C7E 3Es0B              2861 	ld	a,#>_font_y
   0C80 DD 8E FF           2862 	adc	a,-1 (ix)
   0C83 47                 2863 	ld	b,a
   0C84 0A                 2864 	ld	a,(bc)
   0C85 4F                 2865 	ld	c,a
   0C86 06 00              2866 	ld	b,#0x00
   0C88 21 FF 01           2867 	ld	hl,#0x01FF
   0C8B 09                 2868 	add	hl,bc
   0C8C 4D                 2869 	ld	c,l
   0C8D 44                 2870 	ld	b,h
   0C8E EB                 2871 	ex	de,hl
   0C8F 71                 2872 	ld	(hl),c
   0C90 23                 2873 	inc	hl
   0C91 70                 2874 	ld	(hl),b
                           2875 ;demo.c:421: cmd.dest_x = lx;
   0C92 01rC8s8E           2876 	ld	bc,#_cmd + 4
   0C95 21r0Es8F           2877 	ld	hl,#_lx + 0
   0C98 5E                 2878 	ld	e,(hl)
   0C99 16 00              2879 	ld	d,#0x00
   0C9B 69                 2880 	ld	l,c
   0C9C 60                 2881 	ld	h,b
   0C9D 73                 2882 	ld	(hl),e
   0C9E 23                 2883 	inc	hl
   0C9F 72                 2884 	ld	(hl),d
                           2885 ;demo.c:422: cmd.dest_y = ly;
   0CA0 01rCAs8E           2886 	ld	bc,#_cmd + 6
   0CA3 21r0Fs8F           2887 	ld	hl,#_ly + 0
   0CA6 5E                 2888 	ld	e,(hl)
   0CA7 16 00              2889 	ld	d,#0x00
   0CA9 69                 2890 	ld	l,c
   0CAA 60                 2891 	ld	h,b
   0CAB 73                 2892 	ld	(hl),e
   0CAC 23                 2893 	inc	hl
   0CAD 72                 2894 	ld	(hl),d
                           2895 ;demo.c:423: cmd.size_x = font_w[cidx];
   0CAE 01rCCs8E           2896 	ld	bc,#_cmd + 8
   0CB1 3ErFC              2897 	ld	a,#<_font_w
   0CB3 DD 86 FE           2898 	add	a,-2 (ix)
   0CB6 5F                 2899 	ld	e,a
   0CB7 3Es0B              2900 	ld	a,#>_font_w
   0CB9 DD 8E FF           2901 	adc	a,-1 (ix)
   0CBC 57                 2902 	ld	d,a
   0CBD 1A                 2903 	ld	a,(de)
   0CBE 5F                 2904 	ld	e,a
   0CBF 16 00              2905 	ld	d,#0x00
   0CC1 69                 2906 	ld	l,c
   0CC2 60                 2907 	ld	h,b
   0CC3 73                 2908 	ld	(hl),e
   0CC4 23                 2909 	inc	hl
   0CC5 72                 2910 	ld	(hl),d
                           2911 ;demo.c:424: cmd.size_y = 10;
   0CC6 21rCEs8E           2912 	ld	hl, #_cmd + 10
   0CC9 36 0A              2913 	ld	(hl),#0x0A
   0CCB 23                 2914 	inc	hl
   0CCC 36 00              2915 	ld	(hl),#0x00
                           2916 ;demo.c:425: cmd.argument = 0x00;
   0CCE 3E 00              2917 	ld	a,#0x00
   0CD0 32rD1s8E           2918 	ld	(#_cmd + 13),a
                           2919 ;demo.c:426: cmd.command = 0x90; // logical vram to vram
   0CD3 3E 90              2920 	ld	a,#0x90
   0CD5 32rD2s8E           2921 	ld	(#_cmd + 14),a
                           2922 ;demo.c:427: vdp_copier(&cmd);
   0CD8 21rC4s8E           2923 	ld	hl,#_cmd
   0CDB E5                 2924 	push	hl
   0CDC CDr00s00           2925 	call	_vdp_copier
   0CDF F1                 2926 	pop	af
                           2927 ;demo.c:428: lx+=font_w[cidx]-1;
   0CE0 3ErFC              2928 	ld	a,#<_font_w
   0CE2 DD 86 FE           2929 	add	a,-2 (ix)
   0CE5 4F                 2930 	ld	c,a
   0CE6 3Es0B              2931 	ld	a,#>_font_w
   0CE8 DD 8E FF           2932 	adc	a,-1 (ix)
   0CEB 47                 2933 	ld	b,a
   0CEC 0A                 2934 	ld	a,(bc)
   0CED 4F                 2935 	ld	c,a
   0CEE 0D                 2936 	dec	c
   0CEF 21r0Es8F           2937 	ld	hl,#_lx
   0CF2 7E                 2938 	ld	a,(hl)
   0CF3 81                 2939 	add	a,c
   0CF4 77                 2940 	ld	(hl),a
   0CF5 DD F9              2941 	ld	sp,ix
   0CF7 DD E1              2942 	pop	ix
   0CF9 C9                 2943 	ret
   0CFA                    2944 _do_letter_tall_end::
                           2945 ;demo.c:431: void drawstr(char* str, uint8_t x, uint8_t y) {
                           2946 ;	---------------------------------
                           2947 ; Function drawstr
                           2948 ; ---------------------------------
   0CFA                    2949 _drawstr_start::
   0CFA                    2950 _drawstr:
   0CFA DD E5              2951 	push	ix
   0CFC DD 21 00 00        2952 	ld	ix,#0
   0D00 DD 39              2953 	add	ix,sp
                           2954 ;demo.c:432: char* c = str;
   0D02 DD 4E 04           2955 	ld	c,4 (ix)
   0D05 DD 46 05           2956 	ld	b,5 (ix)
                           2957 ;demo.c:433: lx = x;
   0D08 DD 5E 06           2958 	ld	e,6 (ix)
   0D0B 21r0Es8F           2959 	ld	hl,#_lx + 0
   0D0E 73                 2960 	ld	(hl), e
                           2961 ;demo.c:434: ly = y;
   0D0F DD 7E 07           2962 	ld	a,7 (ix)
   0D12 21r0Fs8F           2963 	ld	hl,#_ly + 0
   0D15 77                 2964 	ld	(hl), a
                           2965 ;demo.c:435: while (*c) {
   0D16                    2966 00107$:
   0D16 0A                 2967 	ld	a,(bc)
   0D17 57                 2968 	ld	d,a
   0D18 B7                 2969 	or	a,a
   0D19 28 42              2970 	jr	Z,00110$
                           2971 ;demo.c:436: char ltr = *c++; 
   0D1B 03                 2972 	inc	bc
                           2973 ;demo.c:437: if (ltr == ' ') lx+=4;
   0D1C 7A                 2974 	ld	a,d
   0D1D D6 20              2975 	sub	a,#0x20
   0D1F 20 1E              2976 	jr	NZ,00105$
   0D21 FD 21r0Es8F        2977 	ld	iy,#_lx
   0D25 FD 34 00           2978 	inc	0 (iy)
   0D28 FD 21r0Es8F        2979 	ld	iy,#_lx
   0D2C FD 34 00           2980 	inc	0 (iy)
   0D2F FD 21r0Es8F        2981 	ld	iy,#_lx
   0D33 FD 34 00           2982 	inc	0 (iy)
   0D36 FD 21r0Es8F        2983 	ld	iy,#_lx
   0D3A FD 34 00           2984 	inc	0 (iy)
   0D3D 18 D7              2985 	jr	00107$
   0D3F                    2986 00105$:
                           2987 ;demo.c:438: else if (ltr == '_') { ly+=9; lx = x; }
   0D3F 7A                 2988 	ld	a,d
   0D40 D6 5F              2989 	sub	a,#0x5F
   0D42 20 0D              2990 	jr	NZ,00102$
   0D44 21r0Fs8F           2991 	ld	hl,#_ly
   0D47 7E                 2992 	ld	a,(hl)
   0D48 C6 09              2993 	add	a,#0x09
   0D4A 77                 2994 	ld	(hl),a
   0D4B 21r0Es8F           2995 	ld	hl,#_lx + 0
   0D4E 73                 2996 	ld	(hl), e
   0D4F 18 C5              2997 	jr	00107$
   0D51                    2998 00102$:
                           2999 ;demo.c:439: else do_letter(ltr);
   0D51 C5                 3000 	push	bc
   0D52 D5                 3001 	push	de
   0D53 D5                 3002 	push	de
   0D54 33                 3003 	inc	sp
   0D55 CDrBEs0A           3004 	call	_do_letter
   0D58 33                 3005 	inc	sp
   0D59 D1                 3006 	pop	de
   0D5A C1                 3007 	pop	bc
   0D5B 18 B9              3008 	jr	00107$
   0D5D                    3009 00110$:
   0D5D DD E1              3010 	pop	ix
   0D5F C9                 3011 	ret
   0D60                    3012 _drawstr_end::
                           3013 ;demo.c:443: void drawsine(char* str, uint8_t x, uint8_t y) {
                           3014 ;	---------------------------------
                           3015 ; Function drawsine
                           3016 ; ---------------------------------
   0D60                    3017 _drawsine_start::
   0D60                    3018 _drawsine:
   0D60 DD E5              3019 	push	ix
   0D62 DD 21 00 00        3020 	ld	ix,#0
   0D66 DD 39              3021 	add	ix,sp
   0D68 3B                 3022 	dec	sp
                           3023 ;demo.c:444: char* c = str;
   0D69 DD 4E 04           3024 	ld	c,4 (ix)
   0D6C DD 46 05           3025 	ld	b,5 (ix)
                           3026 ;demo.c:445: lx = x;
   0D6F DD 7E 06           3027 	ld	a,6 (ix)
   0D72 21r0Es8F           3028 	ld	hl,#_lx + 0
   0D75 77                 3029 	ld	(hl), a
                           3030 ;demo.c:447: while (*c) {
   0D76                    3031 00104$:
   0D76 0A                 3032 	ld	a,(bc)
   0D77 5F                 3033 	ld	e,a
   0D78 B7                 3034 	or	a,a
   0D79 CArEDs0D           3035 	jp	Z,00107$
                           3036 ;demo.c:448: char ltr = *c++; 
   0D7C 03                 3037 	inc	bc
   0D7D DD 73 FF           3038 	ld	-1 (ix),e
                           3039 ;demo.c:449: ly = y+(sintabx[(lx+vbicount>>1) & 255]>>4);
   0D80 21r0Es8F           3040 	ld	hl,#_lx + 0
   0D83 5E                 3041 	ld	e,(hl)
   0D84 16 00              3042 	ld	d,#0x00
   0D86 21rC0s8E           3043 	ld	hl,#_vbicount
   0D89 7B                 3044 	ld	a,e
   0D8A 86                 3045 	add	a,(hl)
   0D8B 5F                 3046 	ld	e,a
   0D8C 7A                 3047 	ld	a,d
   0D8D 23                 3048 	inc	hl
   0D8E 8E                 3049 	adc	a,(hl)
   0D8F 57                 3050 	ld	d,a
   0D90 CB 2A              3051 	sra	d
   0D92 CB 1B              3052 	rr	e
   0D94 16 00              3053 	ld	d,#0x00
   0D96 CB 23              3054 	sla	e
   0D98 CB 12              3055 	rl	d
   0D9A 21r2Cs00           3056 	ld	hl,#_sintabx
   0D9D 19                 3057 	add	hl,de
   0D9E 5E                 3058 	ld	e,(hl)
   0D9F 23                 3059 	inc	hl
   0DA0 56                 3060 	ld	d,(hl)
   0DA1 CB 3A              3061 	srl	d
   0DA3 CB 1B              3062 	rr	e
   0DA5 CB 3A              3063 	srl	d
   0DA7 CB 1B              3064 	rr	e
   0DA9 CB 3A              3065 	srl	d
   0DAB CB 1B              3066 	rr	e
   0DAD CB 3A              3067 	srl	d
   0DAF CB 1B              3068 	rr	e
   0DB1 21r0Fs8F           3069 	ld	hl,#_ly
   0DB4 DD 7E 07           3070 	ld	a,7 (ix)
   0DB7 83                 3071 	add	a,e
   0DB8 77                 3072 	ld	(hl),a
                           3073 ;demo.c:450: if (ltr == ' ') lx+=4;
   0DB9 DD 7E FF           3074 	ld	a,-1 (ix)
   0DBC D6 20              3075 	sub	a,#0x20
   0DBE 20 1F              3076 	jr	NZ,00102$
   0DC0 FD 21r0Es8F        3077 	ld	iy,#_lx
   0DC4 FD 34 00           3078 	inc	0 (iy)
   0DC7 FD 21r0Es8F        3079 	ld	iy,#_lx
   0DCB FD 34 00           3080 	inc	0 (iy)
   0DCE FD 21r0Es8F        3081 	ld	iy,#_lx
   0DD2 FD 34 00           3082 	inc	0 (iy)
   0DD5 FD 21r0Es8F        3083 	ld	iy,#_lx
   0DD9 FD 34 00           3084 	inc	0 (iy)
   0DDC C3r76s0D           3085 	jp	00104$
   0DDF                    3086 00102$:
                           3087 ;demo.c:451: else do_letter_tall(ltr);
   0DDF C5                 3088 	push	bc
   0DE0 DD 7E FF           3089 	ld	a,-1 (ix)
   0DE3 F5                 3090 	push	af
   0DE4 33                 3091 	inc	sp
   0DE5 CDr3Cs0C           3092 	call	_do_letter_tall
   0DE8 33                 3093 	inc	sp
   0DE9 C1                 3094 	pop	bc
   0DEA C3r76s0D           3095 	jp	00104$
   0DED                    3096 00107$:
   0DED DD F9              3097 	ld	sp,ix
   0DEF DD E1              3098 	pop	ix
   0DF1 C9                 3099 	ret
   0DF2                    3100 _drawsine_end::
                           3101 ;demo.c:455: void font() {
                           3102 ;	---------------------------------
                           3103 ; Function font
                           3104 ; ---------------------------------
   0DF2                    3105 _font_start::
   0DF2                    3106 _font:
                           3107 ;demo.c:457: drawstr("DIGITAL SOUNDS SYSTEM__ IN THE HOUSE__  ON MSX__   AT REVISION__    OLDSKOOL_     DEMO_      COMPO",74,60);
   0DF2 21 4A 3C           3108 	ld	hl,#0x3C4A
   0DF5 E5                 3109 	push	hl
   0DF6 21r00s0E           3110 	ld	hl,#__str_8
   0DF9 E5                 3111 	push	hl
   0DFA CDrFAs0C           3112 	call	_drawstr
   0DFD F1                 3113 	pop	af
   0DFE F1                 3114 	pop	af
   0DFF C9                 3115 	ret
   0E00                    3116 _font_end::
   0E00                    3117 __str_8:
   0E00 44 49 47 49 54 41  3118 	.ascii "DIGITAL SOUNDS SYSTEM__ IN THE HOUSE__  ON MSX__   AT REVISI"
        4C 20 53 4F 55 4E
        44 53 20 53 59 53
        54 45 4D 5F 5F 20
        49 4E 20 54 48 45
        20 48 4F 55 53 45
        5F 5F 20 20 4F 4E
        20 4D 53 58 5F 5F
        20 20 20 41 54 20
        52 45 56 49 53 49
   0E3C 4F 4E 5F 5F 20 20  3119 	.ascii "ON__    OLDSKOOL_     DEMO_      COMPO"
        20 20 4F 4C 44 53
        4B 4F 4F 4C 5F 20
        20 20 20 20 44 45
        4D 4F 5F 20 20 20
        20 20 20 43 4F 4D
        50 4F
   0E62 00                 3120 	.db 0x00
                           3121 ;demo.c:466: void twister() {
                           3122 ;	---------------------------------
                           3123 ; Function twister
                           3124 ; ---------------------------------
   0E63                    3125 _twister_start::
   0E63                    3126 _twister:
   0E63 DD E5              3127 	push	ix
   0E65 DD 21 00 00        3128 	ld	ix,#0
   0E69 DD 39              3129 	add	ix,sp
   0E6B F5                 3130 	push	af
                           3131 ;demo.c:470: if (twinited == 0) {
   0E6C 3Ar12s8F           3132 	ld	a,(#_twinited+0)
   0E6F FD 21r12s8F        3133 	ld	iy,#_twinited
   0E73 FD B6 01           3134 	or	a,1 (iy)
   0E76 C2rF0s0E           3135 	jp	NZ,00102$
                           3136 ;demo.c:471: cmd.size_x = 256;
   0E79 21rCCs8E           3137 	ld	hl, #_cmd + 8
   0E7C 36 00              3138 	ld	(hl),#0x00
   0E7E 23                 3139 	inc	hl
   0E7F 36 01              3140 	ld	(hl),#0x01
                           3141 ;demo.c:472: cmd.size_y = 1;
   0E81 21rCEs8E           3142 	ld	hl, #_cmd + 10
   0E84 36 01              3143 	ld	(hl),#0x01
   0E86 23                 3144 	inc	hl
   0E87 36 00              3145 	ld	(hl),#0x00
                           3146 ;demo.c:473: cmd.data = 0;
   0E89 3E 00              3147 	ld	a,#0x00
   0E8B 32rD0s8E           3148 	ld	(#_cmd + 12),a
                           3149 ;demo.c:474: cmd.argument = 0x04; // from 70xY to left
   0E8E 3E 04              3150 	ld	a,#0x04
   0E90 32rD1s8E           3151 	ld	(#_cmd + 13),a
                           3152 ;demo.c:475: cmd.command = 0xe0; // vram to vram, y only
   0E93 01rD2s8E           3153 	ld	bc,#_cmd + 14
   0E96 3E E0              3154 	ld	a,#0xE0
   0E98 02                 3155 	ld	(bc),a
                           3156 ;demo.c:476: cmd.source_x = 256;
   0E99 21rC4s8E           3157 	ld	hl,#_cmd
   0E9C 36 00              3158 	ld	(hl),#0x00
   0E9E 23                 3159 	inc	hl
   0E9F 36 01              3160 	ld	(hl),#0x01
                           3161 ;demo.c:477: cmd.dest_x = 256;
   0EA1 21rC8s8E           3162 	ld	hl, #_cmd + 4
   0EA4 36 00              3163 	ld	(hl),#0x00
   0EA6 23                 3164 	inc	hl
   0EA7 36 01              3165 	ld	(hl),#0x01
                           3166 ;demo.c:479: for (y = 0; y < 212; y+=1) {
   0EA9 01 00 00           3167 	ld	bc,#0x0000
   0EAC                    3168 00103$:
   0EAC 79                 3169 	ld	a,c
   0EAD D6 D4              3170 	sub	a,#0xD4
   0EAF 78                 3171 	ld	a,b
   0EB0 DE 00              3172 	sbc	a,#0x00
   0EB2 F2rD3s0E           3173 	jp	P,00106$
                           3174 ;demo.c:480: waitVB();
   0EB5 76                 3175 		halt 
                           3176 ;demo.c:481: cmd.source_y = 0;
   0EB6 11rC6s8E           3177 	ld	de,#_cmd + 2
   0EB9 EB                 3178 	ex	de,hl
   0EBA 36 00              3179 	ld	(hl),#0x00
   0EBC 23                 3180 	inc	hl
   0EBD 36 00              3181 	ld	(hl),#0x00
                           3182 ;demo.c:482: cmd.dest_y = y;
   0EBF 11rCAs8E           3183 	ld	de,#_cmd + 6
   0EC2 EB                 3184 	ex	de,hl
   0EC3 71                 3185 	ld	(hl),c
   0EC4 23                 3186 	inc	hl
   0EC5 70                 3187 	ld	(hl),b
                           3188 ;demo.c:483: vdp_copier(&cmd);
   0EC6 C5                 3189 	push	bc
   0EC7 21rC4s8E           3190 	ld	hl,#_cmd
   0ECA E5                 3191 	push	hl
   0ECB CDr00s00           3192 	call	_vdp_copier
   0ECE F1                 3193 	pop	af
   0ECF C1                 3194 	pop	bc
                           3195 ;demo.c:479: for (y = 0; y < 212; y+=1) {
   0ED0 03                 3196 	inc	bc
   0ED1 18 D9              3197 	jr	00103$
   0ED3                    3198 00106$:
                           3199 ;demo.c:487: twinited = 1;
   0ED3 21r12s8F           3200 	ld	hl,#_twinited + 0
   0ED6 36 01              3201 	ld	(hl), #0x01
   0ED8 21r13s8F           3202 	ld	hl,#_twinited + 1
   0EDB 36 00              3203 	ld	(hl), #0x00
                           3204 ;demo.c:488: vdp_register(8,0x2); // no sprites
   0EDD 21 08 02           3205 	ld	hl,#0x0208
   0EE0 E5                 3206 	push	hl
   0EE1 CDr00s00           3207 	call	_vdp_register
   0EE4 F1                 3208 	pop	af
                           3209 ;demo.c:489: vdp_load_palette(twister_palette);
   0EE5 21r60s8E           3210 	ld	hl,#_twister_palette
   0EE8 E5                 3211 	push	hl
   0EE9 CDr00s00           3212 	call	_vdp_load_palette
   0EEC F1                 3213 	pop	af
                           3214 ;demo.c:490: font();
   0EED CDrF2s0D           3215 	call	_font
   0EF0                    3216 00102$:
                           3217 ;demo.c:493: cmd.size_x = 70;
   0EF0 21rCCs8E           3218 	ld	hl, #_cmd + 8
   0EF3 36 46              3219 	ld	(hl),#0x46
   0EF5 23                 3220 	inc	hl
   0EF6 36 00              3221 	ld	(hl),#0x00
                           3222 ;demo.c:494: cmd.size_y = 2;
   0EF8 21rCEs8E           3223 	ld	hl, #_cmd + 10
   0EFB 36 02              3224 	ld	(hl),#0x02
   0EFD 23                 3225 	inc	hl
   0EFE 36 00              3226 	ld	(hl),#0x00
                           3227 ;demo.c:495: cmd.data = 0;
   0F00 3E 00              3228 	ld	a,#0x00
   0F02 32rD0s8E           3229 	ld	(#_cmd + 12),a
                           3230 ;demo.c:496: cmd.argument = 0x04; // from 70xY to left
   0F05 3E 04              3231 	ld	a,#0x04
   0F07 32rD1s8E           3232 	ld	(#_cmd + 13),a
                           3233 ;demo.c:497: cmd.command = 0xe0; // vram to vram, y only
   0F0A 01rD2s8E           3234 	ld	bc,#_cmd + 14
   0F0D 3E E0              3235 	ld	a,#0xE0
   0F0F 02                 3236 	ld	(bc),a
                           3237 ;demo.c:498: cmd.source_x = 70;
   0F10 21rC4s8E           3238 	ld	hl,#_cmd
   0F13 36 46              3239 	ld	(hl),#0x46
   0F15 23                 3240 	inc	hl
   0F16 36 00              3241 	ld	(hl),#0x00
                           3242 ;demo.c:499: cmd.dest_x = 70;
   0F18 21rC8s8E           3243 	ld	hl, #_cmd + 4
   0F1B 36 46              3244 	ld	(hl),#0x46
   0F1D 23                 3245 	inc	hl
   0F1E 36 00              3246 	ld	(hl),#0x00
                           3247 ;demo.c:501: for (y = 0; y < 212; y+=2) {
   0F20 DD 36 FE 00        3248 	ld	-2 (ix),#0x00
   0F24 DD 36 FF 00        3249 	ld	-1 (ix),#0x00
   0F28                    3250 00107$:
   0F28 DD 7E FE           3251 	ld	a,-2 (ix)
   0F2B D6 D4              3252 	sub	a,#0xD4
   0F2D DD 7E FF           3253 	ld	a,-1 (ix)
   0F30 DE 00              3254 	sbc	a,#0x00
   0F32 F2r8Bs0F           3255 	jp	P,00110$
                           3256 ;demo.c:502: cmd.source_y = ((sintab[(ff+(y>>1)) & 255])>>1)+512+64;
   0F35 11rC6s8E           3257 	ld	de,#_cmd + 2
   0F38 DD 4E FE           3258 	ld	c,-2 (ix)
   0F3B DD 46 FF           3259 	ld	b,-1 (ix)
   0F3E CB 28              3260 	sra	b
   0F40 CB 19              3261 	rr	c
   0F42 3Ar10s8F           3262 	ld	a,(#_ff+0)
   0F45 81                 3263 	add	a,c
   0F46 4F                 3264 	ld	c,a
   0F47 3Ar11s8F           3265 	ld	a,(#_ff+1)
   0F4A 88                 3266 	adc	a,b
   0F4B 06 00              3267 	ld	b,#0x00
   0F4D 21r00s00           3268 	ld	hl,#_sintab
   0F50 09                 3269 	add	hl,bc
   0F51 7E                 3270 	ld	a,(hl)
   0F52 4F                 3271 	ld	c,a
   0F53 CB 29              3272 	sra	c
   0F55 79                 3273 	ld	a,c
   0F56 17                 3274 	rla	
   0F57 9F                 3275 	sbc	a,a
   0F58 47                 3276 	ld	b,a
   0F59 21 40 02           3277 	ld	hl,#0x0240
   0F5C 09                 3278 	add	hl,bc
   0F5D 4D                 3279 	ld	c,l
   0F5E 44                 3280 	ld	b,h
   0F5F 6B                 3281 	ld	l,e
   0F60 62                 3282 	ld	h,d
   0F61 71                 3283 	ld	(hl),c
   0F62 23                 3284 	inc	hl
   0F63 70                 3285 	ld	(hl),b
                           3286 ;demo.c:503: cmd.dest_y = y;
   0F64 21rCAs8E           3287 	ld	hl, #_cmd + 6
   0F67 DD 7E FE           3288 	ld	a,-2 (ix)
   0F6A 77                 3289 	ld	(hl),a
   0F6B 23                 3290 	inc	hl
   0F6C DD 7E FF           3291 	ld	a,-1 (ix)
   0F6F 77                 3292 	ld	(hl),a
                           3293 ;demo.c:504: vdp_copier(&cmd);
   0F70 21rC4s8E           3294 	ld	hl,#_cmd
   0F73 E5                 3295 	push	hl
   0F74 CDr00s00           3296 	call	_vdp_copier
   0F77 F1                 3297 	pop	af
                           3298 ;demo.c:501: for (y = 0; y < 212; y+=2) {
   0F78 DD 7E FE           3299 	ld	a,-2 (ix)
   0F7B C6 02              3300 	add	a,#0x02
   0F7D DD 77 FE           3301 	ld	-2 (ix),a
   0F80 DD 7E FF           3302 	ld	a,-1 (ix)
   0F83 CE 00              3303 	adc	a,#0x00
   0F85 DD 77 FF           3304 	ld	-1 (ix),a
   0F88 C3r28s0F           3305 	jp	00107$
   0F8B                    3306 00110$:
                           3307 ;demo.c:508: msx2_palette(4,ff>>2,ff>>3,ff>>2);
   0F8B 21r10s8F           3308 	ld	hl,#_ff + 0
   0F8E 4E                 3309 	ld	c,(hl)
   0F8F 21r11s8F           3310 	ld	hl,#_ff + 1
   0F92 46                 3311 	ld	b,(hl)
   0F93 CB 28              3312 	sra	b
   0F95 CB 19              3313 	rr	c
   0F97 CB 28              3314 	sra	b
   0F99 CB 19              3315 	rr	c
   0F9B 21r10s8F           3316 	ld	hl,#_ff + 0
   0F9E 5E                 3317 	ld	e,(hl)
   0F9F 21r11s8F           3318 	ld	hl,#_ff + 1
   0FA2 56                 3319 	ld	d,(hl)
   0FA3 CB 2A              3320 	sra	d
   0FA5 CB 1B              3321 	rr	e
   0FA7 CB 2A              3322 	sra	d
   0FA9 CB 1B              3323 	rr	e
   0FAB CB 2A              3324 	sra	d
   0FAD CB 1B              3325 	rr	e
   0FAF 43                 3326 	ld	b,e
   0FB0 79                 3327 	ld	a,c
   0FB1 F5                 3328 	push	af
   0FB2 33                 3329 	inc	sp
   0FB3 C5                 3330 	push	bc
   0FB4 33                 3331 	inc	sp
   0FB5 41                 3332 	ld	b,c
   0FB6 0E 04              3333 	ld	c,#0x04
   0FB8 C5                 3334 	push	bc
   0FB9 CDr00s00           3335 	call	_msx2_palette
   0FBC F1                 3336 	pop	af
   0FBD F1                 3337 	pop	af
                           3338 ;demo.c:510: ff+=4;
   0FBE 21r10s8F           3339 	ld	hl,#_ff
   0FC1 7E                 3340 	ld	a,(hl)
   0FC2 C6 04              3341 	add	a,#0x04
   0FC4 23                 3342 	inc	hl
   0FC5 2B                 3343 	dec	hl
   0FC6 C5                 3344 	push	bc
   0FC7 4F                 3345 	ld	c, a
   0FC8 23                 3346 	inc	hl
   0FC9 7E                 3347 	ld	a, (hl)
   0FCA 47                 3348 	ld	b, a
   0FCB 79                 3349 	ld	a, c
   0FCC 2B                 3350 	dec	hl
   0FCD 77                 3351 	ld	(hl), a
   0FCE 78                 3352 	ld	a, b
   0FCF C1                 3353 	pop	bc
   0FD0 CE 00              3354 	adc	a,#0x00
   0FD2 23                 3355 	inc	hl
   0FD3 77                 3356 	ld	(hl),a
   0FD4 DD F9              3357 	ld	sp,ix
   0FD6 DD E1              3358 	pop	ix
   0FD8 C9                 3359 	ret
   0FD9                    3360 _twister_end::
                           3361 ;demo.c:520: void bulbs() {
                           3362 ;	---------------------------------
                           3363 ; Function bulbs
                           3364 ; ---------------------------------
   0FD9                    3365 _bulbs_start::
   0FD9                    3366 _bulbs:
   0FD9 DD E5              3367 	push	ix
   0FDB DD 21 00 00        3368 	ld	ix,#0
   0FDF DD 39              3369 	add	ix,sp
   0FE1 F5                 3370 	push	af
   0FE2 F5                 3371 	push	af
                           3372 ;demo.c:524: ender+=enderdir;
   0FE3 21r1Cs8F           3373 	ld	hl,#_enderdir
   0FE6 D5                 3374 	push	de
   0FE7 FD 21r1As8F        3375 	ld	iy,#_ender
   0FEB FD E5              3376 	push	iy
   0FED D1                 3377 	pop	de
   0FEE 1A                 3378 	ld	a,(de)
   0FEF 86                 3379 	add	a,(hl)
   0FF0 13                 3380 	inc	de
   0FF1 1B                 3381 	dec	de
   0FF2 C5                 3382 	push	bc
   0FF3 4F                 3383 	ld	c, a
   0FF4 13                 3384 	inc	de
   0FF5 1A                 3385 	ld	a, (de)
   0FF6 47                 3386 	ld	b, a
   0FF7 79                 3387 	ld	a, c
   0FF8 1B                 3388 	dec	de
   0FF9 12                 3389 	ld	(de), a
   0FFA 78                 3390 	ld	a, b
   0FFB C1                 3391 	pop	bc
   0FFC 23                 3392 	inc	hl
   0FFD 8E                 3393 	adc	a,(hl)
   0FFE 13                 3394 	inc	de
   0FFF 12                 3395 	ld	(de),a
   1000 D1                 3396 	pop	de
                           3397 ;demo.c:525: if (ender < 2) enderdir = -enderdir;
   1001 3Ar1As8F           3398 	ld	a,(#_ender+0)
   1004 D6 02              3399 	sub	a,#0x02
   1006 3Ar1Bs8F           3400 	ld	a,(#_ender+1)
   1009 DE 00              3401 	sbc	a,#0x00
   100B F2r2Fs10           3402 	jp	P,00102$
   100E AF                 3403 	xor	a,a
   100F FD 21r1Cs8F        3404 	ld	iy,#_enderdir
   1013 3E 00              3405 	ld	a,#0x00
   1015 FD 9E 00           3406 	sbc	a,0 (iy)
   1018 FD 21r1Cs8F        3407 	ld	iy,#_enderdir
   101C FD 77 00           3408 	ld	0 (iy),a
   101F FD 21r1Cs8F        3409 	ld	iy,#_enderdir
   1023 3E 00              3410 	ld	a,#0x00
   1025 FD 9E 01           3411 	sbc	a,1 (iy)
   1028 FD 21r1Cs8F        3412 	ld	iy,#_enderdir
   102C FD 77 01           3413 	ld	1 (iy),a
   102F                    3414 00102$:
                           3415 ;demo.c:526: if (ender >= 212) enderdir = -enderdir;
   102F 3Ar1As8F           3416 	ld	a,(#_ender+0)
   1032 D6 D4              3417 	sub	a,#0xD4
   1034 3Ar1Bs8F           3418 	ld	a,(#_ender+1)
   1037 DE 00              3419 	sbc	a,#0x00
   1039 FAr5Ds10           3420 	jp	M,00104$
   103C AF                 3421 	xor	a,a
   103D FD 21r1Cs8F        3422 	ld	iy,#_enderdir
   1041 3E 00              3423 	ld	a,#0x00
   1043 FD 9E 00           3424 	sbc	a,0 (iy)
   1046 FD 21r1Cs8F        3425 	ld	iy,#_enderdir
   104A FD 77 00           3426 	ld	0 (iy),a
   104D FD 21r1Cs8F        3427 	ld	iy,#_enderdir
   1051 3E 00              3428 	ld	a,#0x00
   1053 FD 9E 01           3429 	sbc	a,1 (iy)
   1056 FD 21r1Cs8F        3430 	ld	iy,#_enderdir
   105A FD 77 01           3431 	ld	1 (iy),a
   105D                    3432 00104$:
                           3433 ;demo.c:528: enderend = ender + 92;
   105D 3Ar1As8F           3434 	ld	a,(#_ender+0)
   1060 C6 5C              3435 	add	a,#0x5C
   1062 DD 77 FE           3436 	ld	-2 (ix),a
   1065 3Ar1Bs8F           3437 	ld	a,(#_ender+1)
   1068 CE 00              3438 	adc	a,#0x00
   106A DD 77 FF           3439 	ld	-1 (ix),a
                           3440 ;demo.c:530: if (enderend > 212) enderend = 212;
   106D 3E D4              3441 	ld	a,#0xD4
   106F DD 96 FE           3442 	sub	a,-2 (ix)
   1072 3E 00              3443 	ld	a,#0x00
   1074 DD 9E FF           3444 	sbc	a,-1 (ix)
   1077 F2r82s10           3445 	jp	P,00106$
   107A DD 36 FE D4        3446 	ld	-2 (ix),#0xD4
   107E DD 36 FF 00        3447 	ld	-1 (ix),#0x00
   1082                    3448 00106$:
                           3449 ;demo.c:532: if(bulbflipper == 1) {
   1082 3Ar14s8F           3450 	ld	a,(#_bulbflipper+0)
   1085 D6 01              3451 	sub	a,#0x01
   1087 20 06              3452 	jr	NZ,00130$
   1089 3Ar15s8F           3453 	ld	a,(#_bulbflipper+1)
   108C B7                 3454 	or	a,a
   108D 28 03              3455 	jr	Z,00131$
   108F                    3456 00130$:
   108F C3r39s11           3457 	jp	00108$
   1092                    3458 00131$:
                           3459 ;demo.c:533: cmd.size_x = 72;
   1092 11rCCs8E           3460 	ld	de,#_cmd + 8
   1095 EB                 3461 	ex	de,hl
   1096 36 48              3462 	ld	(hl),#0x48
   1098 23                 3463 	inc	hl
   1099 36 00              3464 	ld	(hl),#0x00
                           3465 ;demo.c:534: cmd.size_y = 16;
   109B 11rCEs8E           3466 	ld	de,#_cmd + 10
   109E EB                 3467 	ex	de,hl
   109F 36 10              3468 	ld	(hl),#0x10
   10A1 23                 3469 	inc	hl
   10A2 36 00              3470 	ld	(hl),#0x00
                           3471 ;demo.c:535: cmd.data = 0;
   10A4 11rD0s8E           3472 	ld	de,#_cmd + 12
   10A7 3E 00              3473 	ld	a,#0x00
   10A9 12                 3474 	ld	(de),a
                           3475 ;demo.c:536: cmd.argument = 0x04; // from 72xY to left
   10AA 11rD1s8E           3476 	ld	de,#_cmd + 13
   10AD 3E 04              3477 	ld	a,#0x04
   10AF 12                 3478 	ld	(de),a
                           3479 ;demo.c:537: cmd.command = 0xe0; // vram to vram, y only
   10B0 11rD2s8E           3480 	ld	de,#_cmd + 14
   10B3 3E E0              3481 	ld	a,#0xE0
   10B5 12                 3482 	ld	(de),a
                           3483 ;demo.c:538: cmd.source_x = 72;
   10B6 21rC4s8E           3484 	ld	hl,#_cmd
   10B9 36 48              3485 	ld	(hl),#0x48
   10BB 23                 3486 	inc	hl
   10BC 36 00              3487 	ld	(hl),#0x00
                           3488 ;demo.c:539: cmd.dest_x = 72;
   10BE 11rC8s8E           3489 	ld	de,#_cmd + 4
   10C1 6B                 3490 	ld	l,e
   10C2 62                 3491 	ld	h,d
   10C3 36 48              3492 	ld	(hl),#0x48
   10C5 23                 3493 	inc	hl
   10C6 36 00              3494 	ld	(hl),#0x00
                           3495 ;demo.c:541: for (y = ender; y < enderend; y+=16) {
   10C8 ED 4Br1As8F        3496 	ld	bc,(_ender)
   10CC 59                 3497 	ld	e,c
   10CD 50                 3498 	ld	d,b
   10CE                    3499 00110$:
   10CE 7B                 3500 	ld	a,e
   10CF DD 96 FE           3501 	sub	a,-2 (ix)
   10D2 7A                 3502 	ld	a,d
   10D3 DD 9E FF           3503 	sbc	a,-1 (ix)
   10D6 F2r20s11           3504 	jp	P,00113$
                           3505 ;demo.c:542: cmd.source_y = ((sintab[(ff1+(y)) & 255])>>1)+320;
   10D9 21rC6s8E           3506 	ld	hl,#_cmd + 2
   10DC DD 75 FC           3507 	ld	-4 (ix),l
   10DF DD 74 FD           3508 	ld	-3 (ix),h
   10E2 3Ar16s8F           3509 	ld	a,(#_ff1+0)
   10E5 83                 3510 	add	a,e
   10E6 4F                 3511 	ld	c,a
   10E7 3Ar17s8F           3512 	ld	a,(#_ff1+1)
   10EA 8A                 3513 	adc	a,d
   10EB 06 00              3514 	ld	b,#0x00
   10ED 21r00s00           3515 	ld	hl,#_sintab
   10F0 09                 3516 	add	hl,bc
   10F1 7E                 3517 	ld	a,(hl)
   10F2 4F                 3518 	ld	c,a
   10F3 CB 29              3519 	sra	c
   10F5 79                 3520 	ld	a,c
   10F6 17                 3521 	rla	
   10F7 9F                 3522 	sbc	a,a
   10F8 47                 3523 	ld	b,a
   10F9 21 40 01           3524 	ld	hl,#0x0140
   10FC 09                 3525 	add	hl,bc
   10FD 4D                 3526 	ld	c,l
   10FE 44                 3527 	ld	b,h
   10FF DD 6E FC           3528 	ld	l,-4 (ix)
   1102 DD 66 FD           3529 	ld	h,-3 (ix)
   1105 71                 3530 	ld	(hl),c
   1106 23                 3531 	inc	hl
   1107 70                 3532 	ld	(hl),b
                           3533 ;demo.c:543: cmd.dest_y = y;
   1108 21rCAs8E           3534 	ld	hl, #_cmd + 6
   110B 73                 3535 	ld	(hl),e
   110C 23                 3536 	inc	hl
   110D 72                 3537 	ld	(hl),d
                           3538 ;demo.c:544: vdp_copier(&cmd);
   110E D5                 3539 	push	de
   110F 21rC4s8E           3540 	ld	hl,#_cmd
   1112 E5                 3541 	push	hl
   1113 CDr00s00           3542 	call	_vdp_copier
   1116 F1                 3543 	pop	af
   1117 D1                 3544 	pop	de
                           3545 ;demo.c:541: for (y = ender; y < enderend; y+=16) {
   1118 21 10 00           3546 	ld	hl,#0x0010
   111B 19                 3547 	add	hl,de
   111C EB                 3548 	ex	de,hl
   111D C3rCEs10           3549 	jp	00110$
   1120                    3550 00113$:
                           3551 ;demo.c:546: ff1+=4;
   1120 21r16s8F           3552 	ld	hl,#_ff1
   1123 7E                 3553 	ld	a,(hl)
   1124 C6 04              3554 	add	a,#0x04
   1126 23                 3555 	inc	hl
   1127 2B                 3556 	dec	hl
   1128 C5                 3557 	push	bc
   1129 4F                 3558 	ld	c, a
   112A 23                 3559 	inc	hl
   112B 7E                 3560 	ld	a, (hl)
   112C 47                 3561 	ld	b, a
   112D 79                 3562 	ld	a, c
   112E 2B                 3563 	dec	hl
   112F 77                 3564 	ld	(hl), a
   1130 78                 3565 	ld	a, b
   1131 C1                 3566 	pop	bc
   1132 CE 00              3567 	adc	a,#0x00
   1134 23                 3568 	inc	hl
   1135 77                 3569 	ld	(hl),a
   1136 C3rD3s11           3570 	jp	00109$
   1139                    3571 00108$:
                           3572 ;demo.c:550: cmd.size_x = 72;
   1139 21rCCs8E           3573 	ld	hl, #_cmd + 8
   113C 36 48              3574 	ld	(hl),#0x48
   113E 23                 3575 	inc	hl
   113F 36 00              3576 	ld	(hl),#0x00
                           3577 ;demo.c:551: cmd.size_y = 16;
   1141 21rCEs8E           3578 	ld	hl, #_cmd + 10
   1144 36 10              3579 	ld	(hl),#0x10
   1146 23                 3580 	inc	hl
   1147 36 00              3581 	ld	(hl),#0x00
                           3582 ;demo.c:552: cmd.data = 0;
                           3583 ;demo.c:553: cmd.argument = 0x00; // from 182xY to right
   1149 3E 00              3584 	ld	a,#0x00
   114B 32rD0s8E           3585 	ld	(#_cmd + 12),a
   114E 32rD1s8E           3586 	ld	(#_cmd + 13),a
                           3587 ;demo.c:554: cmd.command = 0xe0; // vram to vram, y only
   1151 01rD2s8E           3588 	ld	bc,#_cmd + 14
   1154 3E E0              3589 	ld	a,#0xE0
   1156 02                 3590 	ld	(bc),a
                           3591 ;demo.c:555: cmd.source_x = 182;
   1157 21rC4s8E           3592 	ld	hl,#_cmd
   115A 36 B6              3593 	ld	(hl),#0xB6
   115C 23                 3594 	inc	hl
   115D 36 00              3595 	ld	(hl),#0x00
                           3596 ;demo.c:556: cmd.dest_x = 182;
   115F 21rC8s8E           3597 	ld	hl, #_cmd + 4
   1162 36 B6              3598 	ld	(hl),#0xB6
   1164 23                 3599 	inc	hl
   1165 36 00              3600 	ld	(hl),#0x00
                           3601 ;demo.c:558: for (y = ender; y < enderend; y+=16) {
   1167 ED 4Br1As8F        3602 	ld	bc,(_ender)
   116B                    3603 00114$:
   116B 79                 3604 	ld	a,c
   116C DD 96 FE           3605 	sub	a,-2 (ix)
   116F 78                 3606 	ld	a,b
   1170 DD 9E FF           3607 	sbc	a,-1 (ix)
   1173 F2rBDs11           3608 	jp	P,00117$
                           3609 ;demo.c:559: cmd.source_y = ((sintab[(ff2+(y)) & 255])>>1)+320;
   1176 21rC6s8E           3610 	ld	hl,#_cmd + 2
   1179 DD 75 FC           3611 	ld	-4 (ix),l
   117C DD 74 FD           3612 	ld	-3 (ix),h
   117F 3Ar18s8F           3613 	ld	a,(#_ff2+0)
   1182 81                 3614 	add	a,c
   1183 5F                 3615 	ld	e,a
   1184 3Ar19s8F           3616 	ld	a,(#_ff2+1)
   1187 88                 3617 	adc	a,b
   1188 16 00              3618 	ld	d,#0x00
   118A 21r00s00           3619 	ld	hl,#_sintab
   118D 19                 3620 	add	hl,de
   118E 5E                 3621 	ld	e,(hl)
   118F CB 2B              3622 	sra	e
   1191 7B                 3623 	ld	a,e
   1192 17                 3624 	rla	
   1193 9F                 3625 	sbc	a,a
   1194 57                 3626 	ld	d,a
   1195 21 40 01           3627 	ld	hl,#0x0140
   1198 19                 3628 	add	hl,de
   1199 EB                 3629 	ex	de,hl
   119A DD 6E FC           3630 	ld	l,-4 (ix)
   119D DD 66 FD           3631 	ld	h,-3 (ix)
   11A0 73                 3632 	ld	(hl),e
   11A1 23                 3633 	inc	hl
   11A2 72                 3634 	ld	(hl),d
                           3635 ;demo.c:560: cmd.dest_y = y;
   11A3 11rCAs8E           3636 	ld	de,#_cmd + 6
   11A6 EB                 3637 	ex	de,hl
   11A7 71                 3638 	ld	(hl),c
   11A8 23                 3639 	inc	hl
   11A9 70                 3640 	ld	(hl),b
                           3641 ;demo.c:561: vdp_copier(&cmd);
   11AA C5                 3642 	push	bc
   11AB 21rC4s8E           3643 	ld	hl,#_cmd
   11AE E5                 3644 	push	hl
   11AF CDr00s00           3645 	call	_vdp_copier
   11B2 F1                 3646 	pop	af
   11B3 C1                 3647 	pop	bc
                           3648 ;demo.c:558: for (y = ender; y < enderend; y+=16) {
   11B4 21 10 00           3649 	ld	hl,#0x0010
   11B7 09                 3650 	add	hl,bc
   11B8 4D                 3651 	ld	c,l
   11B9 44                 3652 	ld	b,h
   11BA C3r6Bs11           3653 	jp	00114$
   11BD                    3654 00117$:
                           3655 ;demo.c:563: ff2+=4;
   11BD 21r18s8F           3656 	ld	hl,#_ff2
   11C0 7E                 3657 	ld	a,(hl)
   11C1 C6 04              3658 	add	a,#0x04
   11C3 23                 3659 	inc	hl
   11C4 2B                 3660 	dec	hl
   11C5 C5                 3661 	push	bc
   11C6 4F                 3662 	ld	c, a
   11C7 23                 3663 	inc	hl
   11C8 7E                 3664 	ld	a, (hl)
   11C9 47                 3665 	ld	b, a
   11CA 79                 3666 	ld	a, c
   11CB 2B                 3667 	dec	hl
   11CC 77                 3668 	ld	(hl), a
   11CD 78                 3669 	ld	a, b
   11CE C1                 3670 	pop	bc
   11CF CE 00              3671 	adc	a,#0x00
   11D1 23                 3672 	inc	hl
   11D2 77                 3673 	ld	(hl),a
   11D3                    3674 00109$:
                           3675 ;demo.c:566: bulbflipper = -bulbflipper;
   11D3 AF                 3676 	xor	a,a
   11D4 FD 21r14s8F        3677 	ld	iy,#_bulbflipper
   11D8 3E 00              3678 	ld	a,#0x00
   11DA FD 9E 00           3679 	sbc	a,0 (iy)
   11DD 21r14s8F           3680 	ld	hl,#_bulbflipper + 0
   11E0 77                 3681 	ld	(hl), a
   11E1 FD 21r14s8F        3682 	ld	iy,#_bulbflipper
   11E5 3E 00              3683 	ld	a,#0x00
   11E7 FD 9E 01           3684 	sbc	a,1 (iy)
   11EA 21r15s8F           3685 	ld	hl,#_bulbflipper + 1
   11ED 77                 3686 	ld	(hl), a
   11EE DD F9              3687 	ld	sp,ix
   11F0 DD E1              3688 	pop	ix
   11F2 C9                 3689 	ret
   11F3                    3690 _bulbs_end::
                           3691 ;demo.c:580: void animplay() {
                           3692 ;	---------------------------------
                           3693 ; Function animplay
                           3694 ; ---------------------------------
   11F3                    3695 _animplay_start::
   11F3                    3696 _animplay:
   11F3 DD E5              3697 	push	ix
   11F5 DD 21 00 00        3698 	ld	ix,#0
   11F9 DD 39              3699 	add	ix,sp
   11FB F5                 3700 	push	af
   11FC 3B                 3701 	dec	sp
                           3702 ;demo.c:585: if (anim_init == 0) {
   11FD 3Ar26s8F           3703 	ld	a,(#_anim_init+0)
   1200 21r27s8F           3704 	ld	hl,#_anim_init + 1
   1203 B6                 3705 	or	a,(hl)
   1204 C2r60s12           3706 	jp	NZ,00117$
                           3707 ;demo.c:587: vdp_register(0,0);
   1207 21 00 00           3708 	ld	hl,#0x0000
   120A E5                 3709 	push	hl
   120B CDr00s00           3710 	call	_vdp_register
   120E F1                 3711 	pop	af
                           3712 ;demo.c:588: vdp_register(1,0);
   120F 21 01 00           3713 	ld	hl,#0x0001
   1212 E5                 3714 	push	hl
   1213 CDr00s00           3715 	call	_vdp_register
   1216 F1                 3716 	pop	af
                           3717 ;demo.c:590: bitbuster(tf1,0x8000,VRAM_0);
   1217 3E 01              3718 	ld	a,#0x01
   1219 F5                 3719 	push	af
   121A 33                 3720 	inc	sp
   121B 21 00 80           3721 	ld	hl,#0x8000
   121E E5                 3722 	push	hl
   121F 21rE0s2F           3723 	ld	hl,#_tf1
   1222 E5                 3724 	push	hl
   1223 CDr00s00           3725 	call	_bitbuster
   1226 F1                 3726 	pop	af
   1227 F1                 3727 	pop	af
   1228 33                 3728 	inc	sp
                           3729 ;demo.c:591: bitbuster(tf2,0x0000,VRAM_1);
   1229 3E 00              3730 	ld	a,#0x00
   122B F5                 3731 	push	af
   122C 33                 3732 	inc	sp
   122D 21 00 00           3733 	ld	hl,#0x0000
   1230 E5                 3734 	push	hl
   1231 21rC0s5E           3735 	ld	hl,#_tf2
   1234 E5                 3736 	push	hl
   1235 CDr00s00           3737 	call	_bitbuster
   1238 F1                 3738 	pop	af
   1239 F1                 3739 	pop	af
   123A 33                 3740 	inc	sp
                           3741 ;demo.c:593: vdp_set_screen5();
   123B CDr00s00           3742 	call	_vdp_set_screen5
                           3743 ;demo.c:594: vdp_register(1,0x60);
   123E 21 01 60           3744 	ld	hl,#0x6001
   1241 E5                 3745 	push	hl
   1242 CDr00s00           3746 	call	_vdp_register
   1245 F1                 3747 	pop	af
                           3748 ;demo.c:595: vdp_register(9,2); // 192 lines
   1246 21 09 02           3749 	ld	hl,#0x0209
   1249 E5                 3750 	push	hl
   124A CDr00s00           3751 	call	_vdp_register
   124D F1                 3752 	pop	af
                           3753 ;demo.c:598: anim_init = 1;
   124E 21r26s8F           3754 	ld	hl,#_anim_init + 0
   1251 36 01              3755 	ld	(hl), #0x01
   1253 21r27s8F           3756 	ld	hl,#_anim_init + 1
   1256 36 00              3757 	ld	(hl), #0x00
                           3758 ;demo.c:599: vdp_load_palette(tf_palette);
   1258 21r80s8E           3759 	ld	hl,#_tf_palette
   125B E5                 3760 	push	hl
   125C CDr00s00           3761 	call	_vdp_load_palette
   125F F1                 3762 	pop	af
                           3763 ;demo.c:602: for (y = 0; y < 96; y+=1) {
   1260                    3764 00117$:
   1260 DD 36 FF 00        3765 	ld	-1 (ix),#0x00
   1264                    3766 00109$:
   1264 DD 7E FF           3767 	ld	a,-1 (ix)
   1267 D6 60              3768 	sub	a,#0x60
   1269 D2rEBs12           3769 	jp	NC,00112$
                           3770 ;demo.c:603: cmd.source_x = xo;
   126C ED 5Br1Es8F        3771 	ld	de,(_xo)
   1270 21rC4s8E           3772 	ld	hl,#_cmd
   1273 73                 3773 	ld	(hl),e
   1274 23                 3774 	inc	hl
   1275 72                 3775 	ld	(hl),d
                           3776 ;demo.c:604: cmd.source_y = 256+po+yo+(y>>1);
   1276 11rC6s8E           3777 	ld	de,#_cmd + 2
   1279 3Ar22s8F           3778 	ld	a,(#_po+0)
   127C 4F                 3779 	ld	c,a
   127D 3Ar23s8F           3780 	ld	a,(#_po+1)
   1280 C6 01              3781 	add	a,#0x01
   1282 47                 3782 	ld	b,a
   1283 21r20s8F           3783 	ld	hl,#_yo
   1286 79                 3784 	ld	a,c
   1287 86                 3785 	add	a,(hl)
   1288 DD 77 FD           3786 	ld	-3 (ix),a
   128B 78                 3787 	ld	a,b
   128C 23                 3788 	inc	hl
   128D 8E                 3789 	adc	a,(hl)
   128E DD 77 FE           3790 	ld	-2 (ix),a
   1291 DD 4E FF           3791 	ld	c,-1 (ix)
   1294 CB 39              3792 	srl	c
   1296 06 00              3793 	ld	b,#0x00
   1298 DD 7E FD           3794 	ld	a,-3 (ix)
   129B 81                 3795 	add	a,c
   129C 4F                 3796 	ld	c,a
   129D DD 7E FE           3797 	ld	a,-2 (ix)
   12A0 88                 3798 	adc	a,b
   12A1 47                 3799 	ld	b,a
   12A2 6B                 3800 	ld	l,e
   12A3 62                 3801 	ld	h,d
   12A4 71                 3802 	ld	(hl),c
   12A5 23                 3803 	inc	hl
   12A6 70                 3804 	ld	(hl),b
                           3805 ;demo.c:605: cmd.dest_x = 0;
   12A7 21rC8s8E           3806 	ld	hl, #_cmd + 4
   12AA 36 00              3807 	ld	(hl),#0x00
   12AC 23                 3808 	inc	hl
   12AD 36 00              3809 	ld	(hl),#0x00
                           3810 ;demo.c:606: cmd.dest_y = (y<<1);
   12AF 01rCAs8E           3811 	ld	bc,#_cmd + 6
   12B2 DD 5E FF           3812 	ld	e,-1 (ix)
   12B5 16 00              3813 	ld	d,#0x00
   12B7 CB 23              3814 	sla	e
   12B9 CB 12              3815 	rl	d
   12BB 69                 3816 	ld	l,c
   12BC 60                 3817 	ld	h,b
   12BD 73                 3818 	ld	(hl),e
   12BE 23                 3819 	inc	hl
   12BF 72                 3820 	ld	(hl),d
                           3821 ;demo.c:607: cmd.size_x = 128;
   12C0 21rCCs8E           3822 	ld	hl, #_cmd + 8
   12C3 36 80              3823 	ld	(hl),#0x80
   12C5 23                 3824 	inc	hl
   12C6 36 00              3825 	ld	(hl),#0x00
                           3826 ;demo.c:608: cmd.size_y = 1;
   12C8 21rCEs8E           3827 	ld	hl, #_cmd + 10
   12CB 36 01              3828 	ld	(hl),#0x01
   12CD 23                 3829 	inc	hl
   12CE 36 00              3830 	ld	(hl),#0x00
                           3831 ;demo.c:609: cmd.data = 0;
                           3832 ;demo.c:610: cmd.argument = 0x00;
   12D0 3E 00              3833 	ld	a,#0x00
   12D2 32rD0s8E           3834 	ld	(#_cmd + 12),a
   12D5 32rD1s8E           3835 	ld	(#_cmd + 13),a
                           3836 ;demo.c:611: cmd.command = 0xD0;
   12D8 3E D0              3837 	ld	a,#0xD0
   12DA 32rD2s8E           3838 	ld	(#_cmd + 14),a
                           3839 ;demo.c:612: vdp_copier(&cmd);
   12DD 21rC4s8E           3840 	ld	hl,#_cmd
   12E0 E5                 3841 	push	hl
   12E1 CDr00s00           3842 	call	_vdp_copier
   12E4 F1                 3843 	pop	af
                           3844 ;demo.c:602: for (y = 0; y < 96; y+=1) {
   12E5 DD 34 FF           3845 	inc	-1 (ix)
   12E8 C3r64s12           3846 	jp	00109$
   12EB                    3847 00112$:
                           3848 ;demo.c:615: xo+=128;
   12EB 21r1Es8F           3849 	ld	hl,#_xo
   12EE 7E                 3850 	ld	a,(hl)
   12EF C6 80              3851 	add	a,#0x80
   12F1 23                 3852 	inc	hl
   12F2 2B                 3853 	dec	hl
   12F3 C5                 3854 	push	bc
   12F4 4F                 3855 	ld	c, a
   12F5 23                 3856 	inc	hl
   12F6 7E                 3857 	ld	a, (hl)
   12F7 47                 3858 	ld	b, a
   12F8 79                 3859 	ld	a, c
   12F9 2B                 3860 	dec	hl
   12FA 77                 3861 	ld	(hl), a
   12FB 78                 3862 	ld	a, b
   12FC C1                 3863 	pop	bc
   12FD CE 00              3864 	adc	a,#0x00
   12FF 23                 3865 	inc	hl
   1300 77                 3866 	ld	(hl),a
                           3867 ;demo.c:616: if (xo >= 256) {
   1301 3Ar1Es8F           3868 	ld	a,(#_xo+0)
   1304 D6 00              3869 	sub	a,#0x00
   1306 3Ar1Fs8F           3870 	ld	a,(#_xo+1)
   1309 DE 01              3871 	sbc	a,#0x01
   130B FAr72s13           3872 	jp	M,00108$
                           3873 ;demo.c:617: xo = 0;
   130E 21r1Es8F           3874 	ld	hl,#_xo + 0
   1311 36 00              3875 	ld	(hl), #0x00
   1313 21r1Fs8F           3876 	ld	hl,#_xo + 1
   1316 36 00              3877 	ld	(hl), #0x00
                           3878 ;demo.c:618: yo+=48;
   1318 21r20s8F           3879 	ld	hl,#_yo
   131B 7E                 3880 	ld	a,(hl)
   131C C6 30              3881 	add	a,#0x30
   131E 23                 3882 	inc	hl
   131F 2B                 3883 	dec	hl
   1320 C5                 3884 	push	bc
   1321 4F                 3885 	ld	c, a
   1322 23                 3886 	inc	hl
   1323 7E                 3887 	ld	a, (hl)
   1324 47                 3888 	ld	b, a
   1325 79                 3889 	ld	a, c
   1326 2B                 3890 	dec	hl
   1327 77                 3891 	ld	(hl), a
   1328 78                 3892 	ld	a, b
   1329 C1                 3893 	pop	bc
   132A CE 00              3894 	adc	a,#0x00
   132C 23                 3895 	inc	hl
   132D 77                 3896 	ld	(hl),a
                           3897 ;demo.c:619: if (yo >= 192) { yo = 0; po+=256; }
   132E 3Ar20s8F           3898 	ld	a,(#_yo+0)
   1331 D6 C0              3899 	sub	a,#0xC0
   1333 3Ar21s8F           3900 	ld	a,(#_yo+1)
   1336 DE 00              3901 	sbc	a,#0x00
   1338 FAr5Bs13           3902 	jp	M,00104$
   133B 21r20s8F           3903 	ld	hl,#_yo + 0
   133E 36 00              3904 	ld	(hl), #0x00
   1340 21r21s8F           3905 	ld	hl,#_yo + 1
   1343 36 00              3906 	ld	(hl), #0x00
   1345 21r22s8F           3907 	ld	hl,#_po
   1348 7E                 3908 	ld	a,(hl)
   1349 C6 00              3909 	add	a,#0x00
   134B 23                 3910 	inc	hl
   134C 2B                 3911 	dec	hl
   134D C5                 3912 	push	bc
   134E 4F                 3913 	ld	c, a
   134F 23                 3914 	inc	hl
   1350 7E                 3915 	ld	a, (hl)
   1351 47                 3916 	ld	b, a
   1352 79                 3917 	ld	a, c
   1353 2B                 3918 	dec	hl
   1354 77                 3919 	ld	(hl), a
   1355 78                 3920 	ld	a, b
   1356 C1                 3921 	pop	bc
   1357 CE 01              3922 	adc	a,#0x01
   1359 23                 3923 	inc	hl
   135A 77                 3924 	ld	(hl),a
   135B                    3925 00104$:
                           3926 ;demo.c:620: if (po >= 768) {
   135B 3Ar22s8F           3927 	ld	a,(#_po+0)
   135E D6 00              3928 	sub	a,#0x00
   1360 3Ar23s8F           3929 	ld	a,(#_po+1)
   1363 DE 03              3930 	sbc	a,#0x03
   1365 FAr72s13           3931 	jp	M,00108$
                           3932 ;demo.c:621: po = 0;
   1368 21r22s8F           3933 	ld	hl,#_po + 0
   136B 36 00              3934 	ld	(hl), #0x00
   136D 21r23s8F           3935 	ld	hl,#_po + 1
   1370 36 00              3936 	ld	(hl), #0x00
   1372                    3937 00108$:
                           3938 ;demo.c:628: fffaaa++;
   1372 FD 21r24s8F        3939 	ld	iy,#_fffaaa
   1376 FD 34 00           3940 	inc	0 (iy)
   1379 20 07              3941 	jr	NZ,00124$
   137B FD 21r24s8F        3942 	ld	iy,#_fffaaa
   137F FD 34 01           3943 	inc	1 (iy)
   1382                    3944 00124$:
   1382 DD F9              3945 	ld	sp,ix
   1384 DD E1              3946 	pop	ix
   1386 C9                 3947 	ret
   1387                    3948 _animplay_end::
                           3949 ;demo.c:640: void drawbox(int box_x, int box_y, uint8_t x, uint8_t y) {
                           3950 ;	---------------------------------
                           3951 ; Function drawbox
                           3952 ; ---------------------------------
   1387                    3953 _drawbox_start::
   1387                    3954 _drawbox:
   1387 DD E5              3955 	push	ix
   1389 DD 21 00 00        3956 	ld	ix,#0
   138D DD 39              3957 	add	ix,sp
                           3958 ;demo.c:641: dbly = 0;
   138F 21r2Bs8F           3959 	ld	hl,#_dbly + 0
   1392 36 00              3960 	ld	(hl), #0x00
   1394 21r2Cs8F           3961 	ld	hl,#_dbly + 1
   1397 36 00              3962 	ld	(hl), #0x00
                           3963 ;demo.c:643: cmd.source_x = box_x * 42;
   1399 DD 5E 04           3964 	ld	e,4 (ix)
   139C DD 56 05           3965 	ld	d,5 (ix)
   139F 6B                 3966 	ld	l,e
   13A0 62                 3967 	ld	h,d
   13A1 29                 3968 	add	hl,hl
   13A2 29                 3969 	add	hl,hl
   13A3 19                 3970 	add	hl,de
   13A4 29                 3971 	add	hl,hl
   13A5 29                 3972 	add	hl,hl
   13A6 19                 3973 	add	hl,de
   13A7 29                 3974 	add	hl,hl
   13A8 4D                 3975 	ld	c,l
   13A9 44                 3976 	ld	b,h
   13AA 21rC4s8E           3977 	ld	hl,#_cmd
   13AD 71                 3978 	ld	(hl),c
   13AE 23                 3979 	inc	hl
   13AF 70                 3980 	ld	(hl),b
                           3981 ;demo.c:644: cmd.source_y = 768+box_y * 42;
   13B0 01rC6s8E           3982 	ld	bc,#_cmd + 2
   13B3 DD 5E 06           3983 	ld	e,6 (ix)
   13B6 DD 56 07           3984 	ld	d,7 (ix)
   13B9 6B                 3985 	ld	l,e
   13BA 62                 3986 	ld	h,d
   13BB 29                 3987 	add	hl,hl
   13BC 29                 3988 	add	hl,hl
   13BD 19                 3989 	add	hl,de
   13BE 29                 3990 	add	hl,hl
   13BF 29                 3991 	add	hl,hl
   13C0 19                 3992 	add	hl,de
   13C1 29                 3993 	add	hl,hl
   13C2 EB                 3994 	ex	de,hl
   13C3 21 00 03           3995 	ld	hl,#0x0300
   13C6 19                 3996 	add	hl,de
   13C7 EB                 3997 	ex	de,hl
   13C8 69                 3998 	ld	l,c
   13C9 60                 3999 	ld	h,b
   13CA 73                 4000 	ld	(hl),e
   13CB 23                 4001 	inc	hl
   13CC 72                 4002 	ld	(hl),d
                           4003 ;demo.c:645: cmd.dest_x = x;
   13CD 01rC8s8E           4004 	ld	bc,#_cmd + 4
   13D0 DD 5E 08           4005 	ld	e,8 (ix)
   13D3 16 00              4006 	ld	d,#0x00
   13D5 69                 4007 	ld	l,c
   13D6 60                 4008 	ld	h,b
   13D7 73                 4009 	ld	(hl),e
   13D8 23                 4010 	inc	hl
   13D9 72                 4011 	ld	(hl),d
                           4012 ;demo.c:646: cmd.dest_y = dbly+y;
   13DA 01rCAs8E           4013 	ld	bc,#_cmd + 6
   13DD DD 5E 09           4014 	ld	e,9 (ix)
   13E0 16 00              4015 	ld	d,#0x00
   13E2 69                 4016 	ld	l,c
   13E3 60                 4017 	ld	h,b
   13E4 73                 4018 	ld	(hl),e
   13E5 23                 4019 	inc	hl
   13E6 72                 4020 	ld	(hl),d
                           4021 ;demo.c:647: cmd.size_x = 42;
   13E7 21rCCs8E           4022 	ld	hl, #_cmd + 8
   13EA 36 2A              4023 	ld	(hl),#0x2A
   13EC 23                 4024 	inc	hl
   13ED 36 00              4025 	ld	(hl),#0x00
                           4026 ;demo.c:648: cmd.size_y = 42;
   13EF 21rCEs8E           4027 	ld	hl, #_cmd + 10
   13F2 36 2A              4028 	ld	(hl),#0x2A
   13F4 23                 4029 	inc	hl
   13F5 36 00              4030 	ld	(hl),#0x00
                           4031 ;demo.c:649: cmd.data = 0;
                           4032 ;demo.c:650: cmd.argument = 0x00;
   13F7 3E 00              4033 	ld	a,#0x00
   13F9 32rD0s8E           4034 	ld	(#_cmd + 12),a
   13FC 32rD1s8E           4035 	ld	(#_cmd + 13),a
                           4036 ;demo.c:651: cmd.command = 0x98; // TIMP sprite
   13FF 3E 98              4037 	ld	a,#0x98
   1401 32rD2s8E           4038 	ld	(#_cmd + 14),a
                           4039 ;demo.c:652: vdp_copier(&cmd);
   1404 D5                 4040 	push	de
   1405 21rC4s8E           4041 	ld	hl,#_cmd
   1408 E5                 4042 	push	hl
   1409 CDr00s00           4043 	call	_vdp_copier
   140C F1                 4044 	pop	af
   140D D1                 4045 	pop	de
                           4046 ;demo.c:654: prevx = x;
   140E DD 7E 08           4047 	ld	a,8 (ix)
   1411 21r2Ds8F           4048 	ld	hl,#_prevx + 0
   1414 77                 4049 	ld	(hl), a
   1415 21r2Es8F           4050 	ld	hl,#_prevx + 1
   1418 36 00              4051 	ld	(hl), #0x00
                           4052 ;demo.c:655: prevy = y;
   141A 21r2Fs8F           4053 	ld	hl,#_prevy + 0
   141D 73                 4054 	ld	(hl), e
   141E 21r30s8F           4055 	ld	hl,#_prevy + 1
   1421 72                 4056 	ld	(hl), d
                           4057 ;demo.c:656: prevbx = box_x;
   1422 DD 7E 04           4058 	ld	a,4 (ix)
   1425 21r31s8F           4059 	ld	hl,#_prevbx + 0
   1428 77                 4060 	ld	(hl), a
   1429 DD 7E 05           4061 	ld	a,5 (ix)
   142C 21r32s8F           4062 	ld	hl,#_prevbx + 1
   142F 77                 4063 	ld	(hl), a
                           4064 ;demo.c:657: prevby = box_y;
   1430 DD 7E 06           4065 	ld	a,6 (ix)
   1433 21r33s8F           4066 	ld	hl,#_prevby + 0
   1436 77                 4067 	ld	(hl), a
   1437 DD 7E 07           4068 	ld	a,7 (ix)
   143A 21r34s8F           4069 	ld	hl,#_prevby + 1
   143D 77                 4070 	ld	(hl), a
   143E DD E1              4071 	pop	ix
   1440 C9                 4072 	ret
   1441                    4073 _drawbox_end::
                           4074 ;demo.c:671: void boxes() {
                           4075 ;	---------------------------------
                           4076 ; Function boxes
                           4077 ; ---------------------------------
   1441                    4078 _boxes_start::
   1441                    4079 _boxes:
                           4080 ;demo.c:675: if (bonc == 1) {
   1441 3Ar41s8F           4081 	ld	a,(#_bonc+0)
   1444 D6 01              4082 	sub	a,#0x01
   1446 20 06              4083 	jr	NZ,00156$
   1448 3Ar42s8F           4084 	ld	a,(#_bonc+1)
   144B B7                 4085 	or	a,a
   144C 28 02              4086 	jr	Z,00157$
   144E                    4087 00156$:
   144E 18 4D              4088 	jr	00102$
   1450                    4089 00157$:
                           4090 ;demo.c:677: cmd.source_x = 0;
   1450 21rC4s8E           4091 	ld	hl,#_cmd
   1453 36 00              4092 	ld	(hl),#0x00
   1455 23                 4093 	inc	hl
   1456 36 00              4094 	ld	(hl),#0x00
                           4095 ;demo.c:678: cmd.source_y = 256;
   1458 21rC6s8E           4096 	ld	hl, #_cmd + 2
   145B 36 00              4097 	ld	(hl),#0x00
   145D 23                 4098 	inc	hl
   145E 36 01              4099 	ld	(hl),#0x01
                           4100 ;demo.c:679: cmd.dest_x = pbx;
   1460 01rC8s8E           4101 	ld	bc,#_cmd + 4
   1463 ED 5Br43s8F        4102 	ld	de,(_pbx)
   1467 69                 4103 	ld	l,c
   1468 60                 4104 	ld	h,b
   1469 73                 4105 	ld	(hl),e
   146A 23                 4106 	inc	hl
   146B 72                 4107 	ld	(hl),d
                           4108 ;demo.c:680: cmd.dest_y = pbt;
   146C 01rCAs8E           4109 	ld	bc,#_cmd + 6
   146F ED 5Br45s8F        4110 	ld	de,(_pbt)
   1473 69                 4111 	ld	l,c
   1474 60                 4112 	ld	h,b
   1475 73                 4113 	ld	(hl),e
   1476 23                 4114 	inc	hl
   1477 72                 4115 	ld	(hl),d
                           4116 ;demo.c:681: cmd.size_x = 42;
   1478 21rCCs8E           4117 	ld	hl, #_cmd + 8
   147B 36 2A              4118 	ld	(hl),#0x2A
   147D 23                 4119 	inc	hl
   147E 36 00              4120 	ld	(hl),#0x00
                           4121 ;demo.c:682: cmd.size_y = 42;
   1480 21rCEs8E           4122 	ld	hl, #_cmd + 10
   1483 36 2A              4123 	ld	(hl),#0x2A
   1485 23                 4124 	inc	hl
   1486 36 00              4125 	ld	(hl),#0x00
                           4126 ;demo.c:683: cmd.data = 0;
                           4127 ;demo.c:684: cmd.argument = 0x00;
   1488 3E 00              4128 	ld	a,#0x00
   148A 32rD0s8E           4129 	ld	(#_cmd + 12),a
   148D 32rD1s8E           4130 	ld	(#_cmd + 13),a
                           4131 ;demo.c:685: cmd.command = 0xD0; // HMMM
   1490 3E D0              4132 	ld	a,#0xD0
   1492 32rD2s8E           4133 	ld	(#_cmd + 14),a
                           4134 ;demo.c:686: vdp_copier(&cmd);
   1495 21rC4s8E           4135 	ld	hl,#_cmd
   1498 E5                 4136 	push	hl
   1499 CDr00s00           4137 	call	_vdp_copier
   149C F1                 4138 	pop	af
   149D                    4139 00102$:
                           4140 ;demo.c:690: if (boxes_init == 0) {
   149D AF                 4141 	xor	a,a
   149E 21r28s8F           4142 	ld	hl,#_boxes_init + 0
   14A1 B6                 4143 	or	a,(hl)
   14A2 C2r38s15           4144 	jp	NZ,00104$
                           4145 ;demo.c:691: boxes_init = 1;
   14A5 FD 21r28s8F        4146 	ld	iy,#_boxes_init
   14A9 FD 36 00 01        4147 	ld	0 (iy),#0x01
                           4148 ;demo.c:693: cmd.size_x = 8;
   14AD 21rCCs8E           4149 	ld	hl, #_cmd + 8
   14B0 36 08              4150 	ld	(hl),#0x08
   14B2 23                 4151 	inc	hl
   14B3 36 00              4152 	ld	(hl),#0x00
                           4153 ;demo.c:694: cmd.size_y = 212;
   14B5 21rCEs8E           4154 	ld	hl, #_cmd + 10
   14B8 36 D4              4155 	ld	(hl),#0xD4
   14BA 23                 4156 	inc	hl
   14BB 36 00              4157 	ld	(hl),#0x00
                           4158 ;demo.c:695: cmd.data = 0;
                           4159 ;demo.c:696: cmd.argument = 0x00; // from 70xY to left
   14BD 3E 00              4160 	ld	a,#0x00
   14BF 32rD0s8E           4161 	ld	(#_cmd + 12),a
   14C2 32rD1s8E           4162 	ld	(#_cmd + 13),a
                           4163 ;demo.c:697: cmd.command = 0xd0; // vram to vram, y only
   14C5 01rD2s8E           4164 	ld	bc,#_cmd + 14
   14C8 3E D0              4165 	ld	a,#0xD0
   14CA 02                 4166 	ld	(bc),a
                           4167 ;demo.c:698: cmd.source_x = 248;
   14CB 21rC4s8E           4168 	ld	hl,#_cmd
   14CE 36 F8              4169 	ld	(hl),#0xF8
   14D0 23                 4170 	inc	hl
   14D1 36 00              4171 	ld	(hl),#0x00
                           4172 ;demo.c:699: cmd.source_y = 0;
   14D3 21rC6s8E           4173 	ld	hl, #_cmd + 2
   14D6 36 00              4174 	ld	(hl),#0x00
   14D8 23                 4175 	inc	hl
   14D9 36 00              4176 	ld	(hl),#0x00
                           4177 ;demo.c:700: cmd.dest_y = 0;
   14DB 21rCAs8E           4178 	ld	hl, #_cmd + 6
   14DE 36 00              4179 	ld	(hl),#0x00
   14E0 23                 4180 	inc	hl
   14E1 36 00              4181 	ld	(hl),#0x00
                           4182 ;demo.c:702: for (x = 248; x >= 0; x-=8) {
   14E3 01 F8 00           4183 	ld	bc,#0x00F8
   14E6                    4184 00131$:
   14E6 78                 4185 	ld	a,b
   14E7 CB 7F              4186 	bit	7,a
   14E9 20 38              4187 	jr	NZ,00134$
                           4188 ;demo.c:703: waitVB();
   14EB 76                 4189 		halt 
                           4190 ;demo.c:704: cmd.dest_x = x;
   14EC 11rC8s8E           4191 	ld	de,#_cmd + 4
   14EF EB                 4192 	ex	de,hl
   14F0 71                 4193 	ld	(hl),c
   14F1 23                 4194 	inc	hl
   14F2 70                 4195 	ld	(hl),b
                           4196 ;demo.c:705: cmd.dest_y = 0;
   14F3 11rCAs8E           4197 	ld	de,#_cmd + 6
   14F6 EB                 4198 	ex	de,hl
   14F7 36 00              4199 	ld	(hl),#0x00
   14F9 23                 4200 	inc	hl
   14FA 36 00              4201 	ld	(hl),#0x00
                           4202 ;demo.c:706: vdp_copier(&cmd);
   14FC C5                 4203 	push	bc
   14FD 21rC4s8E           4204 	ld	hl,#_cmd
   1500 E5                 4205 	push	hl
   1501 CDr00s00           4206 	call	_vdp_copier
   1504 F1                 4207 	pop	af
   1505 C1                 4208 	pop	bc
                           4209 ;demo.c:707: cmd.dest_y = 256;
   1506 11rCAs8E           4210 	ld	de,#_cmd + 6
   1509 EB                 4211 	ex	de,hl
   150A 36 00              4212 	ld	(hl),#0x00
   150C 23                 4213 	inc	hl
   150D 36 01              4214 	ld	(hl),#0x01
                           4215 ;demo.c:708: vdp_copier(&cmd);
   150F C5                 4216 	push	bc
   1510 21rC4s8E           4217 	ld	hl,#_cmd
   1513 E5                 4218 	push	hl
   1514 CDr00s00           4219 	call	_vdp_copier
   1517 F1                 4220 	pop	af
   1518 C1                 4221 	pop	bc
                           4222 ;demo.c:702: for (x = 248; x >= 0; x-=8) {
   1519 79                 4223 	ld	a,c
   151A C6 F8              4224 	add	a,#0xF8
   151C 4F                 4225 	ld	c,a
   151D 78                 4226 	ld	a,b
   151E CE FF              4227 	adc	a,#0xFF
   1520 47                 4228 	ld	b,a
   1521 18 C3              4229 	jr	00131$
   1523                    4230 00134$:
                           4231 ;demo.c:711: drawsine("LET US STOP   WE ARE BUILDING WALLS BETWEEN",8,180);
   1523 21 08 B4           4232 	ld	hl,#0xB408
   1526 E5                 4233 	push	hl
   1527 21rBCs17           4234 	ld	hl,#__str_9
   152A E5                 4235 	push	hl
   152B CDr60s0D           4236 	call	_drawsine
   152E F1                 4237 	pop	af
   152F F1                 4238 	pop	af
                           4239 ;demo.c:713: vdp_load_palette(boxes_palette);
   1530 21rA0s8E           4240 	ld	hl,#_boxes_palette
   1533 E5                 4241 	push	hl
   1534 CDr00s00           4242 	call	_vdp_load_palette
   1537 F1                 4243 	pop	af
   1538                    4244 00104$:
                           4245 ;demo.c:716: if (bt >= 80) bt+=6;
   1538 3Ar39s8F           4246 	ld	a,(#_bt+0)
   153B D6 50              4247 	sub	a,#0x50
   153D 3Ar3As8F           4248 	ld	a,(#_bt+1)
   1540 DE 00              4249 	sbc	a,#0x00
   1542 FAr5Bs15           4250 	jp	M,00106$
   1545 21r39s8F           4251 	ld	hl,#_bt
   1548 7E                 4252 	ld	a,(hl)
   1549 C6 06              4253 	add	a,#0x06
   154B 23                 4254 	inc	hl
   154C 2B                 4255 	dec	hl
   154D C5                 4256 	push	bc
   154E 4F                 4257 	ld	c, a
   154F 23                 4258 	inc	hl
   1550 7E                 4259 	ld	a, (hl)
   1551 47                 4260 	ld	b, a
   1552 79                 4261 	ld	a, c
   1553 2B                 4262 	dec	hl
   1554 77                 4263 	ld	(hl), a
   1555 78                 4264 	ld	a, b
   1556 C1                 4265 	pop	bc
   1557 CE 00              4266 	adc	a,#0x00
   1559 23                 4267 	inc	hl
   155A 77                 4268 	ld	(hl),a
   155B                    4269 00106$:
                           4270 ;demo.c:717: if (bt < 80 && bt >= 60) bt+=5;
   155B 3Ar39s8F           4271 	ld	a,(#_bt+0)
   155E D6 50              4272 	sub	a,#0x50
   1560 3Ar3As8F           4273 	ld	a,(#_bt+1)
   1563 DE 00              4274 	sbc	a,#0x00
   1565 F2r8Bs15           4275 	jp	P,00108$
   1568 3Ar39s8F           4276 	ld	a,(#_bt+0)
   156B D6 3C              4277 	sub	a,#0x3C
   156D 3Ar3As8F           4278 	ld	a,(#_bt+1)
   1570 DE 00              4279 	sbc	a,#0x00
   1572 FAr8Bs15           4280 	jp	M,00108$
   1575 21r39s8F           4281 	ld	hl,#_bt
   1578 7E                 4282 	ld	a,(hl)
   1579 C6 05              4283 	add	a,#0x05
   157B 23                 4284 	inc	hl
   157C 2B                 4285 	dec	hl
   157D C5                 4286 	push	bc
   157E 4F                 4287 	ld	c, a
   157F 23                 4288 	inc	hl
   1580 7E                 4289 	ld	a, (hl)
   1581 47                 4290 	ld	b, a
   1582 79                 4291 	ld	a, c
   1583 2B                 4292 	dec	hl
   1584 77                 4293 	ld	(hl), a
   1585 78                 4294 	ld	a, b
   1586 C1                 4295 	pop	bc
   1587 CE 00              4296 	adc	a,#0x00
   1589 23                 4297 	inc	hl
   158A 77                 4298 	ld	(hl),a
   158B                    4299 00108$:
                           4300 ;demo.c:718: if (bt < 60 && bt >= 40) bt+=4;
   158B 3Ar39s8F           4301 	ld	a,(#_bt+0)
   158E D6 3C              4302 	sub	a,#0x3C
   1590 3Ar3As8F           4303 	ld	a,(#_bt+1)
   1593 DE 00              4304 	sbc	a,#0x00
   1595 F2rBBs15           4305 	jp	P,00111$
   1598 3Ar39s8F           4306 	ld	a,(#_bt+0)
   159B D6 28              4307 	sub	a,#0x28
   159D 3Ar3As8F           4308 	ld	a,(#_bt+1)
   15A0 DE 00              4309 	sbc	a,#0x00
   15A2 FArBBs15           4310 	jp	M,00111$
   15A5 21r39s8F           4311 	ld	hl,#_bt
   15A8 7E                 4312 	ld	a,(hl)
   15A9 C6 04              4313 	add	a,#0x04
   15AB 23                 4314 	inc	hl
   15AC 2B                 4315 	dec	hl
   15AD C5                 4316 	push	bc
   15AE 4F                 4317 	ld	c, a
   15AF 23                 4318 	inc	hl
   15B0 7E                 4319 	ld	a, (hl)
   15B1 47                 4320 	ld	b, a
   15B2 79                 4321 	ld	a, c
   15B3 2B                 4322 	dec	hl
   15B4 77                 4323 	ld	(hl), a
   15B5 78                 4324 	ld	a, b
   15B6 C1                 4325 	pop	bc
   15B7 CE 00              4326 	adc	a,#0x00
   15B9 23                 4327 	inc	hl
   15BA 77                 4328 	ld	(hl),a
   15BB                    4329 00111$:
                           4330 ;demo.c:719: if (bt < 40 && bt >= 10) bt+=3;
   15BB 3Ar39s8F           4331 	ld	a,(#_bt+0)
   15BE D6 28              4332 	sub	a,#0x28
   15C0 3Ar3As8F           4333 	ld	a,(#_bt+1)
   15C3 DE 00              4334 	sbc	a,#0x00
   15C5 F2rEBs15           4335 	jp	P,00114$
   15C8 3Ar39s8F           4336 	ld	a,(#_bt+0)
   15CB D6 0A              4337 	sub	a,#0x0A
   15CD 3Ar3As8F           4338 	ld	a,(#_bt+1)
   15D0 DE 00              4339 	sbc	a,#0x00
   15D2 FArEBs15           4340 	jp	M,00114$
   15D5 21r39s8F           4341 	ld	hl,#_bt
   15D8 7E                 4342 	ld	a,(hl)
   15D9 C6 03              4343 	add	a,#0x03
   15DB 23                 4344 	inc	hl
   15DC 2B                 4345 	dec	hl
   15DD C5                 4346 	push	bc
   15DE 4F                 4347 	ld	c, a
   15DF 23                 4348 	inc	hl
   15E0 7E                 4349 	ld	a, (hl)
   15E1 47                 4350 	ld	b, a
   15E2 79                 4351 	ld	a, c
   15E3 2B                 4352 	dec	hl
   15E4 77                 4353 	ld	(hl), a
   15E5 78                 4354 	ld	a, b
   15E6 C1                 4355 	pop	bc
   15E7 CE 00              4356 	adc	a,#0x00
   15E9 23                 4357 	inc	hl
   15EA 77                 4358 	ld	(hl),a
   15EB                    4359 00114$:
                           4360 ;demo.c:720: if (bt < 10 ) bt+=2;
   15EB 3Ar39s8F           4361 	ld	a,(#_bt+0)
   15EE D6 0A              4362 	sub	a,#0x0A
   15F0 3Ar3As8F           4363 	ld	a,(#_bt+1)
   15F3 DE 00              4364 	sbc	a,#0x00
   15F5 F2r0Es16           4365 	jp	P,00117$
   15F8 21r39s8F           4366 	ld	hl,#_bt
   15FB 7E                 4367 	ld	a,(hl)
   15FC C6 02              4368 	add	a,#0x02
   15FE 23                 4369 	inc	hl
   15FF 2B                 4370 	dec	hl
   1600 C5                 4371 	push	bc
   1601 4F                 4372 	ld	c, a
   1602 23                 4373 	inc	hl
   1603 7E                 4374 	ld	a, (hl)
   1604 47                 4375 	ld	b, a
   1605 79                 4376 	ld	a, c
   1606 2B                 4377 	dec	hl
   1607 77                 4378 	ld	(hl), a
   1608 78                 4379 	ld	a, b
   1609 C1                 4380 	pop	bc
   160A CE 00              4381 	adc	a,#0x00
   160C 23                 4382 	inc	hl
   160D 77                 4383 	ld	(hl),a
   160E                    4384 00117$:
                           4385 ;demo.c:724: cmd.source_x = bx;
   160E ED 4Br35s8F        4386 	ld	bc,(_bx)
   1612 21rC4s8E           4387 	ld	hl,#_cmd
   1615 71                 4388 	ld	(hl),c
   1616 23                 4389 	inc	hl
   1617 70                 4390 	ld	(hl),b
                           4391 ;demo.c:725: cmd.source_y = bt;
   1618 01rC6s8E           4392 	ld	bc,#_cmd + 2
   161B ED 5Br39s8F        4393 	ld	de,(_bt)
   161F 69                 4394 	ld	l,c
   1620 60                 4395 	ld	h,b
   1621 73                 4396 	ld	(hl),e
   1622 23                 4397 	inc	hl
   1623 72                 4398 	ld	(hl),d
                           4399 ;demo.c:726: cmd.dest_x = 0;
   1624 21rC8s8E           4400 	ld	hl, #_cmd + 4
   1627 36 00              4401 	ld	(hl),#0x00
   1629 23                 4402 	inc	hl
   162A 36 00              4403 	ld	(hl),#0x00
                           4404 ;demo.c:727: cmd.dest_y = 256;
   162C 21rCAs8E           4405 	ld	hl, #_cmd + 6
   162F 36 00              4406 	ld	(hl),#0x00
   1631 23                 4407 	inc	hl
   1632 36 01              4408 	ld	(hl),#0x01
                           4409 ;demo.c:728: cmd.size_x = 42;
   1634 21rCCs8E           4410 	ld	hl, #_cmd + 8
   1637 36 2A              4411 	ld	(hl),#0x2A
   1639 23                 4412 	inc	hl
   163A 36 00              4413 	ld	(hl),#0x00
                           4414 ;demo.c:729: cmd.size_y = 42;
   163C 21rCEs8E           4415 	ld	hl, #_cmd + 10
   163F 36 2A              4416 	ld	(hl),#0x2A
   1641 23                 4417 	inc	hl
   1642 36 00              4418 	ld	(hl),#0x00
                           4419 ;demo.c:730: cmd.data = 0;
                           4420 ;demo.c:731: cmd.argument = 0x00;
   1644 3E 00              4421 	ld	a,#0x00
   1646 32rD0s8E           4422 	ld	(#_cmd + 12),a
   1649 32rD1s8E           4423 	ld	(#_cmd + 13),a
                           4424 ;demo.c:732: cmd.command = 0xD0; // HMMM
   164C 3E D0              4425 	ld	a,#0xD0
   164E 32rD2s8E           4426 	ld	(#_cmd + 14),a
                           4427 ;demo.c:733: vdp_copier(&cmd);
   1651 21rC4s8E           4428 	ld	hl,#_cmd
   1654 E5                 4429 	push	hl
   1655 CDr00s00           4430 	call	_vdp_copier
   1658 F1                 4431 	pop	af
                           4432 ;demo.c:735: pbx = bx;
   1659 2Ar35s8F           4433 	ld	hl,(_bx)
   165C FD 21r43s8F        4434 	ld	iy,#_pbx
   1660 FD 75 00           4435 	ld	0 (iy),l
   1663 FD 21r43s8F        4436 	ld	iy,#_pbx
   1667 FD 74 01           4437 	ld	1 (iy),h
                           4438 ;demo.c:736: pbt = bt;
   166A 2Ar39s8F           4439 	ld	hl,(_bt)
   166D FD 21r45s8F        4440 	ld	iy,#_pbt
   1671 FD 75 00           4441 	ld	0 (iy),l
   1674 FD 21r45s8F        4442 	ld	iy,#_pbt
   1678 FD 74 01           4443 	ld	1 (iy),h
                           4444 ;demo.c:738: waitVB();
   167B 76                 4445 		halt 
                           4446 ;demo.c:740: drawbox(bxx,byy,bx,bt);
   167C 21r39s8F           4447 	ld	hl,#_bt + 0
   167F 4E                 4448 	ld	c,(hl)
   1680 21r35s8F           4449 	ld	hl,#_bx + 0
   1683 46                 4450 	ld	b,(hl)
   1684 79                 4451 	ld	a,c
   1685 F5                 4452 	push	af
   1686 33                 4453 	inc	sp
   1687 C5                 4454 	push	bc
   1688 33                 4455 	inc	sp
   1689 2Ar3Ds8F           4456 	ld	hl,(_byy)
   168C E5                 4457 	push	hl
   168D 2Ar3Bs8F           4458 	ld	hl,(_bxx)
   1690 E5                 4459 	push	hl
   1691 CDr87s13           4460 	call	_drawbox
   1694 F1                 4461 	pop	af
   1695 F1                 4462 	pop	af
   1696 F1                 4463 	pop	af
                           4464 ;demo.c:742: waitVB();
   1697 76                 4465 		halt 
                           4466 ;demo.c:744: bonc = 1;
   1698 21r41s8F           4467 	ld	hl,#_bonc + 0
   169B 36 01              4468 	ld	(hl), #0x01
   169D 21r42s8F           4469 	ld	hl,#_bonc + 1
   16A0 36 00              4470 	ld	(hl), #0x00
                           4471 ;demo.c:745: if (bt > by) {
   16A2 21r37s8F           4472 	ld	hl,#_by
   16A5 7E                 4473 	ld	a,(hl)
   16A6 FD 21r39s8F        4474 	ld	iy,#_bt
   16AA FD 96 00           4475 	sub	a,0 (iy)
   16AD 23                 4476 	inc	hl
   16AE 7E                 4477 	ld	a,(hl)
   16AF FD 21r39s8F        4478 	ld	iy,#_bt
   16B3 FD 9E 01           4479 	sbc	a,1 (iy)
   16B6 F0                 4480 	ret	P
                           4481 ;demo.c:747: bt = 0;
   16B7 21r39s8F           4482 	ld	hl,#_bt + 0
   16BA 36 00              4483 	ld	(hl), #0x00
   16BC 21r3As8F           4484 	ld	hl,#_bt + 1
   16BF 36 00              4485 	ld	(hl), #0x00
                           4486 ;demo.c:748: if (by > 0) {
   16C1 3E 00              4487 	ld	a,#0x00
   16C3 FD 21r37s8F        4488 	ld	iy,#_by
   16C7 FD 96 00           4489 	sub	a,0 (iy)
   16CA 3E 00              4490 	ld	a,#0x00
   16CC FD 21r37s8F        4491 	ld	iy,#_by
   16D0 FD 9E 01           4492 	sbc	a,1 (iy)
   16D3 F2r39s17           4493 	jp	P,00127$
                           4494 ;demo.c:749: bonc = 0;
   16D6 21r41s8F           4495 	ld	hl,#_bonc + 0
   16D9 36 00              4496 	ld	(hl), #0x00
   16DB 21r42s8F           4497 	ld	hl,#_bonc + 1
   16DE 36 00              4498 	ld	(hl), #0x00
                           4499 ;demo.c:750: by-=16;
   16E0 21r37s8F           4500 	ld	hl,#_by
   16E3 7E                 4501 	ld	a,(hl)
   16E4 C6 F0              4502 	add	a,#0xF0
   16E6 77                 4503 	ld	(hl),a
   16E7 23                 4504 	inc	hl
   16E8 7E                 4505 	ld	a,(hl)
   16E9 CE FF              4506 	adc	a,#0xFF
   16EB 77                 4507 	ld	(hl),a
                           4508 ;demo.c:751: bxx++;
   16EC FD 21r3Bs8F        4509 	ld	iy,#_bxx
   16F0 FD 34 00           4510 	inc	0 (iy)
   16F3 20 07              4511 	jr	NZ,00158$
   16F5 FD 21r3Bs8F        4512 	ld	iy,#_bxx
   16F9 FD 34 01           4513 	inc	1 (iy)
   16FC                    4514 00158$:
                           4515 ;demo.c:752: if (bxx >= 4) { bxx = 0; byy++; }
   16FC 3Ar3Bs8F           4516 	ld	a,(#_bxx+0)
   16FF D6 04              4517 	sub	a,#0x04
   1701 3Ar3Cs8F           4518 	ld	a,(#_bxx+1)
   1704 DE 00              4519 	sbc	a,#0x00
   1706 FAr23s17           4520 	jp	M,00119$
   1709 21r3Bs8F           4521 	ld	hl,#_bxx + 0
   170C 36 00              4522 	ld	(hl), #0x00
   170E 21r3Cs8F           4523 	ld	hl,#_bxx + 1
   1711 36 00              4524 	ld	(hl), #0x00
   1713 FD 21r3Ds8F        4525 	ld	iy,#_byy
   1717 FD 34 00           4526 	inc	0 (iy)
   171A 20 07              4527 	jr	NZ,00159$
   171C FD 21r3Ds8F        4528 	ld	iy,#_byy
   1720 FD 34 01           4529 	inc	1 (iy)
   1723                    4530 00159$:
   1723                    4531 00119$:
                           4532 ;demo.c:753: if (byy >= 2) { byy = 0; }
   1723 3Ar3Ds8F           4533 	ld	a,(#_byy+0)
   1726 D6 02              4534 	sub	a,#0x02
   1728 3Ar3Es8F           4535 	ld	a,(#_byy+1)
   172B DE 00              4536 	sbc	a,#0x00
   172D F8                 4537 	ret	M
   172E 21r3Ds8F           4538 	ld	hl,#_byy + 0
   1731 36 00              4539 	ld	(hl), #0x00
   1733 21r3Es8F           4540 	ld	hl,#_byy + 1
   1736 36 00              4541 	ld	(hl), #0x00
   1738 C9                 4542 	ret
   1739                    4543 00127$:
                           4544 ;demo.c:755: bx-=21;
   1739 21r35s8F           4545 	ld	hl,#_bx
   173C 7E                 4546 	ld	a,(hl)
   173D C6 EB              4547 	add	a,#0xEB
   173F 77                 4548 	ld	(hl),a
   1740 23                 4549 	inc	hl
   1741 7E                 4550 	ld	a,(hl)
   1742 CE FF              4551 	adc	a,#0xFF
   1744 77                 4552 	ld	(hl),a
                           4553 ;demo.c:756: bo+=11;
   1745 21r3Fs8F           4554 	ld	hl,#_bo
   1748 7E                 4555 	ld	a,(hl)
   1749 C6 0B              4556 	add	a,#0x0B
   174B 23                 4557 	inc	hl
   174C 2B                 4558 	dec	hl
   174D C5                 4559 	push	bc
   174E 4F                 4560 	ld	c, a
   174F 23                 4561 	inc	hl
   1750 7E                 4562 	ld	a, (hl)
   1751 47                 4563 	ld	b, a
   1752 79                 4564 	ld	a, c
   1753 2B                 4565 	dec	hl
   1754 77                 4566 	ld	(hl), a
   1755 78                 4567 	ld	a, b
   1756 C1                 4568 	pop	bc
   1757 CE 00              4569 	adc	a,#0x00
   1759 23                 4570 	inc	hl
   175A 77                 4571 	ld	(hl),a
                           4572 ;demo.c:757: if (bo > 192) bo = 0;
   175B 3E C0              4573 	ld	a,#0xC0
   175D FD 21r3Fs8F        4574 	ld	iy,#_bo
   1761 FD 96 00           4575 	sub	a,0 (iy)
   1764 3E 00              4576 	ld	a,#0x00
   1766 FD 21r3Fs8F        4577 	ld	iy,#_bo
   176A FD 9E 01           4578 	sbc	a,1 (iy)
   176D F2r7As17           4579 	jp	P,00123$
   1770 21r3Fs8F           4580 	ld	hl,#_bo + 0
   1773 36 00              4581 	ld	(hl), #0x00
   1775 21r40s8F           4582 	ld	hl,#_bo + 1
   1778 36 00              4583 	ld	(hl), #0x00
   177A                    4584 00123$:
                           4585 ;demo.c:758: by=84+bo;
   177A 21r37s8F           4586 	ld	hl,#_by
   177D 3Ar3Fs8F           4587 	ld	a,(#_bo+0)
   1780 C6 54              4588 	add	a,#0x54
   1782 77                 4589 	ld	(hl),a
   1783 3Ar40s8F           4590 	ld	a,(#_bo+1)
   1786 CE 00              4591 	adc	a,#0x00
   1788 23                 4592 	inc	hl
   1789 77                 4593 	ld	(hl),a
                           4594 ;demo.c:759: if (bx <= 0) {
   178A 3E 00              4595 	ld	a,#0x00
   178C FD 21r35s8F        4596 	ld	iy,#_bx
   1790 FD 96 00           4597 	sub	a,0 (iy)
   1793 3E 00              4598 	ld	a,#0x00
   1795 FD 21r35s8F        4599 	ld	iy,#_bx
   1799 FD 9E 01           4600 	sbc	a,1 (iy)
   179C F8                 4601 	ret	M
                           4602 ;demo.c:760: bx = 256;
   179D 21r35s8F           4603 	ld	hl,#_bx + 0
   17A0 36 00              4604 	ld	(hl), #0x00
   17A2 21r36s8F           4605 	ld	hl,#_bx + 1
   17A5 36 01              4606 	ld	(hl), #0x01
                           4607 ;demo.c:761: bo = 0;
   17A7 21r3Fs8F           4608 	ld	hl,#_bo + 0
   17AA 36 00              4609 	ld	(hl), #0x00
   17AC 21r40s8F           4610 	ld	hl,#_bo + 1
   17AF 36 00              4611 	ld	(hl), #0x00
                           4612 ;demo.c:762: by = 84;
   17B1 21r37s8F           4613 	ld	hl,#_by + 0
   17B4 36 54              4614 	ld	(hl), #0x54
   17B6 21r38s8F           4615 	ld	hl,#_by + 1
   17B9 36 00              4616 	ld	(hl), #0x00
   17BB C9                 4617 	ret
   17BC                    4618 _boxes_end::
   17BC                    4619 __str_9:
   17BC 4C 45 54 20 55 53  4620 	.ascii "LET US STOP   WE ARE BUILDING WALLS BETWEEN"
        20 53 54 4F 50 20
        20 20 57 45 20 41
        52 45 20 42 55 49
        4C 44 49 4E 47 20
        57 41 4C 4C 53 20
        42 45 54 57 45 45
        4E
   17E7 00                 4621 	.db 0x00
                           4622 ;demo.c:775: void do_quit() {
                           4623 ;	---------------------------------
                           4624 ; Function do_quit
                           4625 ; ---------------------------------
   17E8                    4626 _do_quit_start::
   17E8                    4627 _do_quit:
                           4628 ;demo.c:776: waitVB();
   17E8 76                 4629 		halt 
                           4630 ;demo.c:777: uninstall_isr();
   17E9 CDr00s00           4631 	call	_uninstall_isr
                           4632 ;demo.c:778: PLY_Stop();
   17EC CDr00s00           4633 	call	_PLY_Stop
                           4634 ;demo.c:779: PLY_SendRegisters();
   17EF CDr00s00           4635 	call	_PLY_SendRegisters
                           4636 ;demo.c:781: screen(0);
   17F2 3E 00              4637 	ld	a,#0x00
   17F4 F5                 4638 	push	af
   17F5 33                 4639 	inc	sp
   17F6 CDr00s00           4640 	call	_screen
   17F9 33                 4641 	inc	sp
                           4642 ;demo.c:783: puts("demo quit\r\n\r\n");
   17FA 21r0Bs18           4643 	ld	hl,#__str_10
   17FD E5                 4644 	push	hl
   17FE CDr00s00           4645 	call	_puts
   1801 F1                 4646 	pop	af
                           4647 ;demo.c:785: exit(0);	
   1802 3E 00              4648 	ld	a,#0x00
   1804 F5                 4649 	push	af
   1805 33                 4650 	inc	sp
   1806 CDr00s00           4651 	call	_exit
   1809 33                 4652 	inc	sp
   180A C9                 4653 	ret
   180B                    4654 _do_quit_end::
   180B                    4655 __str_10:
   180B 64 65 6D 6F 20 71  4656 	.ascii "demo quit"
        75 69 74
   1814 0D                 4657 	.db 0x0D
   1815 0A                 4658 	.db 0x0A
   1816 0D                 4659 	.db 0x0D
   1817 0A                 4660 	.db 0x0A
   1818 00                 4661 	.db 0x00
                           4662 ;demo.c:788: void main() {
                           4663 ;	---------------------------------
                           4664 ; Function main
                           4665 ; ---------------------------------
   1819                    4666 _main_start::
   1819                    4667 _main:
                           4668 ;demo.c:789: unsigned char quit=0;
   1819 0E 00              4669 	ld	c,#0x00
                           4670 ;demo.c:790: int modes = 128; // interlace bit on
   181B 11 80 00           4671 	ld	de,#0x0080
                           4672 ;demo.c:794: spindown();
   181E C5                 4673 	push	bc
   181F D5                 4674 	push	de
   1820 CDr00s00           4675 	call	_spindown
   1823 D1                 4676 	pop	de
   1824 C1                 4677 	pop	bc
                           4678 ;demo.c:796: puts("demo init\r\n\r\n");
   1825 C5                 4679 	push	bc
   1826 D5                 4680 	push	de
   1827 21rB1s1A           4681 	ld	hl,#__str_11
   182A E5                 4682 	push	hl
   182B CDr00s00           4683 	call	_puts
   182E F1                 4684 	pop	af
   182F D1                 4685 	pop	de
   1830 C1                 4686 	pop	bc
                           4687 ;demo.c:809: puts("music init...");
   1831 C5                 4688 	push	bc
   1832 D5                 4689 	push	de
   1833 21rBFs1A           4690 	ld	hl,#__str_12
   1836 E5                 4691 	push	hl
   1837 CDr00s00           4692 	call	_puts
   183A F1                 4693 	pop	af
   183B D1                 4694 	pop	de
   183C C1                 4695 	pop	bc
                           4696 ;demo.c:811: PLY_SongPtr = (char *)0x0103;
   183D 21r00s00           4697 	ld	hl,#_PLY_SongPtr + 0
   1840 36 03              4698 	ld	(hl), #0x03
   1842 21r01s00           4699 	ld	hl,#_PLY_SongPtr + 1
   1845 36 01              4700 	ld	(hl), #0x01
                           4701 ;demo.c:812: PLY_Init();
   1847 C5                 4702 	push	bc
   1848 D5                 4703 	push	de
   1849 CDr00s00           4704 	call	_PLY_Init
   184C D1                 4705 	pop	de
   184D C1                 4706 	pop	bc
                           4707 ;demo.c:813: puts("done.\r\n");
   184E C5                 4708 	push	bc
   184F D5                 4709 	push	de
   1850 21rCDs1A           4710 	ld	hl,#__str_13
   1853 E5                 4711 	push	hl
   1854 CDr00s00           4712 	call	_puts
   1857 F1                 4713 	pop	af
   1858 D1                 4714 	pop	de
   1859 C1                 4715 	pop	bc
                           4716 ;demo.c:815: puts("detecting vdp type...");
   185A C5                 4717 	push	bc
   185B D5                 4718 	push	de
   185C 21rD5s1A           4719 	ld	hl,#__str_14
   185F E5                 4720 	push	hl
   1860 CDr00s00           4721 	call	_puts
   1863 F1                 4722 	pop	af
   1864 D1                 4723 	pop	de
   1865 C1                 4724 	pop	bc
                           4725 ;demo.c:816: if(isvdp2())
   1866 C5                 4726 	push	bc
   1867 D5                 4727 	push	de
   1868 CDr00s00           4728 	call	_isvdp2
   186B 45                 4729 	ld	b,l
   186C D1                 4730 	pop	de
   186D 78                 4731 	ld	a,b
   186E C1                 4732 	pop	bc
   186F 47                 4733 	ld	b,a
   1870 B7                 4734 	or	a,a
   1871 28 0F              4735 	jr	Z,00102$
                           4736 ;demo.c:818: puts(" vdp2 found!\r\n\r\n");
   1873 C5                 4737 	push	bc
   1874 21rEBs1A           4738 	ld	hl,#__str_15
   1877 E5                 4739 	push	hl
   1878 CDr00s00           4740 	call	_puts
   187B F1                 4741 	pop	af
   187C C1                 4742 	pop	bc
                           4743 ;demo.c:819: modes+=2; // pal
   187D 11 82 00           4744 	ld	de,#0x0082
   1880 18 13              4745 	jr	00103$
   1882                    4746 00102$:
                           4747 ;demo.c:822: puts(" vdp1 found.\r\nSorry, this demo requires a VDP2 with 128k for VRAM.\r\n\r\n");
   1882 C5                 4748 	push	bc
   1883 D5                 4749 	push	de
   1884 21rFCs1A           4750 	ld	hl,#__str_16
   1887 E5                 4751 	push	hl
   1888 CDr00s00           4752 	call	_puts
   188B F1                 4753 	pop	af
   188C D1                 4754 	pop	de
   188D C1                 4755 	pop	bc
                           4756 ;demo.c:823: do_quit();
   188E C5                 4757 	push	bc
   188F D5                 4758 	push	de
   1890 CDrE8s17           4759 	call	_do_quit
   1893 D1                 4760 	pop	de
   1894 C1                 4761 	pop	bc
   1895                    4762 00103$:
                           4763 ;demo.c:826: pal_load("TWISTER PL5",32,1);
   1895 C5                 4764 	push	bc
   1896 D5                 4765 	push	de
   1897 21 01 00           4766 	ld	hl,#0x0001
   189A E5                 4767 	push	hl
   189B 3E 20              4768 	ld	a,#0x20
   189D F5                 4769 	push	af
   189E 33                 4770 	inc	sp
   189F 21r43s1B           4771 	ld	hl,#__str_17
   18A2 E5                 4772 	push	hl
   18A3 CDrE3s03           4773 	call	_pal_load
   18A6 F1                 4774 	pop	af
   18A7 F1                 4775 	pop	af
   18A8 33                 4776 	inc	sp
   18A9 D1                 4777 	pop	de
   18AA C1                 4778 	pop	bc
                           4779 ;demo.c:827: memcpy(twister_palette, cur_palette, 32);
   18AB C5                 4780 	push	bc
   18AC D5                 4781 	push	de
   18AD 21 20 00           4782 	ld	hl,#0x0020
   18B0 E5                 4783 	push	hl
   18B1 21r20s8E           4784 	ld	hl,#_cur_palette
   18B4 E5                 4785 	push	hl
   18B5 21r60s8E           4786 	ld	hl,#_twister_palette
   18B8 E5                 4787 	push	hl
   18B9 CDr00s00           4788 	call	_memcpy
   18BC F1                 4789 	pop	af
   18BD F1                 4790 	pop	af
   18BE F1                 4791 	pop	af
   18BF D1                 4792 	pop	de
   18C0 C1                 4793 	pop	bc
                           4794 ;demo.c:828: pal_load("TF1     PL5",32,1);
   18C1 C5                 4795 	push	bc
   18C2 D5                 4796 	push	de
   18C3 21 01 00           4797 	ld	hl,#0x0001
   18C6 E5                 4798 	push	hl
   18C7 3E 20              4799 	ld	a,#0x20
   18C9 F5                 4800 	push	af
   18CA 33                 4801 	inc	sp
   18CB 21r4Fs1B           4802 	ld	hl,#__str_18
   18CE E5                 4803 	push	hl
   18CF CDrE3s03           4804 	call	_pal_load
   18D2 F1                 4805 	pop	af
   18D3 F1                 4806 	pop	af
   18D4 33                 4807 	inc	sp
   18D5 D1                 4808 	pop	de
   18D6 C1                 4809 	pop	bc
                           4810 ;demo.c:829: memcpy(tf_palette, cur_palette, 32);
   18D7 C5                 4811 	push	bc
   18D8 D5                 4812 	push	de
   18D9 21 20 00           4813 	ld	hl,#0x0020
   18DC E5                 4814 	push	hl
   18DD 21r20s8E           4815 	ld	hl,#_cur_palette
   18E0 E5                 4816 	push	hl
   18E1 21r80s8E           4817 	ld	hl,#_tf_palette
   18E4 E5                 4818 	push	hl
   18E5 CDr00s00           4819 	call	_memcpy
   18E8 F1                 4820 	pop	af
   18E9 F1                 4821 	pop	af
   18EA F1                 4822 	pop	af
   18EB D1                 4823 	pop	de
   18EC C1                 4824 	pop	bc
                           4825 ;demo.c:830: pal_load("BOXES   PL5",32,1);
   18ED C5                 4826 	push	bc
   18EE D5                 4827 	push	de
   18EF 21 01 00           4828 	ld	hl,#0x0001
   18F2 E5                 4829 	push	hl
   18F3 3E 20              4830 	ld	a,#0x20
   18F5 F5                 4831 	push	af
   18F6 33                 4832 	inc	sp
   18F7 21r5Bs1B           4833 	ld	hl,#__str_19
   18FA E5                 4834 	push	hl
   18FB CDrE3s03           4835 	call	_pal_load
   18FE F1                 4836 	pop	af
   18FF F1                 4837 	pop	af
   1900 33                 4838 	inc	sp
   1901 D1                 4839 	pop	de
   1902 C1                 4840 	pop	bc
                           4841 ;demo.c:831: memcpy(boxes_palette, cur_palette, 32);
   1903 C5                 4842 	push	bc
   1904 D5                 4843 	push	de
   1905 21 20 00           4844 	ld	hl,#0x0020
   1908 E5                 4845 	push	hl
   1909 21r20s8E           4846 	ld	hl,#_cur_palette
   190C E5                 4847 	push	hl
   190D 21rA0s8E           4848 	ld	hl,#_boxes_palette
   1910 E5                 4849 	push	hl
   1911 CDr00s00           4850 	call	_memcpy
   1914 F1                 4851 	pop	af
   1915 F1                 4852 	pop	af
   1916 F1                 4853 	pop	af
   1917 D1                 4854 	pop	de
   1918 C1                 4855 	pop	bc
                           4856 ;demo.c:834: pal_load("BULBS   PL5",32,1);
   1919 C5                 4857 	push	bc
   191A D5                 4858 	push	de
   191B 21 01 00           4859 	ld	hl,#0x0001
   191E E5                 4860 	push	hl
   191F 3E 20              4861 	ld	a,#0x20
   1921 F5                 4862 	push	af
   1922 33                 4863 	inc	sp
   1923 21r67s1B           4864 	ld	hl,#__str_20
   1926 E5                 4865 	push	hl
   1927 CDrE3s03           4866 	call	_pal_load
   192A F1                 4867 	pop	af
   192B F1                 4868 	pop	af
   192C 33                 4869 	inc	sp
   192D D1                 4870 	pop	de
   192E C1                 4871 	pop	bc
                           4872 ;demo.c:836: pck_load("BULBS   PCK",2431,0x8000,VRAM_0,1);
   192F C5                 4873 	push	bc
   1930 D5                 4874 	push	de
   1931 21 01 00           4875 	ld	hl,#0x0001
   1934 E5                 4876 	push	hl
   1935 2E 01              4877 	ld	l, #0x01
   1937 E5                 4878 	push	hl
   1938 21 00 80           4879 	ld	hl,#0x8000
   193B E5                 4880 	push	hl
   193C 21 7F 09           4881 	ld	hl,#0x097F
   193F E5                 4882 	push	hl
   1940 21r73s1B           4883 	ld	hl,#__str_21
   1943 E5                 4884 	push	hl
   1944 CDrD9s05           4885 	call	_pck_load
   1947 FD 21 0A 00        4886 	ld	iy,#0x000A
   194B FD 39              4887 	add	iy,sp
   194D FD F9              4888 	ld	sp,iy
   194F D1                 4889 	pop	de
   1950 C1                 4890 	pop	bc
                           4891 ;demo.c:838: pck_load("TWISTER PCK",4032,0x0000,VRAM_1,1);
   1951 C5                 4892 	push	bc
   1952 D5                 4893 	push	de
   1953 21 01 00           4894 	ld	hl,#0x0001
   1956 E5                 4895 	push	hl
   1957 2E 00              4896 	ld	l, #0x00
   1959 E5                 4897 	push	hl
   195A 2E 00              4898 	ld	l, #0x00
   195C E5                 4899 	push	hl
   195D 21 C0 0F           4900 	ld	hl,#0x0FC0
   1960 E5                 4901 	push	hl
   1961 21r7Fs1B           4902 	ld	hl,#__str_22
   1964 E5                 4903 	push	hl
   1965 CDrD9s05           4904 	call	_pck_load
   1968 FD 21 0A 00        4905 	ld	iy,#0x000A
   196C FD 39              4906 	add	iy,sp
   196E FD F9              4907 	ld	sp,iy
   1970 D1                 4908 	pop	de
   1971 C1                 4909 	pop	bc
                           4910 ;demo.c:839: pck_load("BOXES   PCK",3741,0x8000,VRAM_1,1);
   1972 C5                 4911 	push	bc
   1973 D5                 4912 	push	de
   1974 21 01 00           4913 	ld	hl,#0x0001
   1977 E5                 4914 	push	hl
   1978 2E 00              4915 	ld	l, #0x00
   197A E5                 4916 	push	hl
   197B 26 80              4917 	ld	h, #0x80
   197D E5                 4918 	push	hl
   197E 21 9D 0E           4919 	ld	hl,#0x0E9D
   1981 E5                 4920 	push	hl
   1982 21r8Bs1B           4921 	ld	hl,#__str_23
   1985 E5                 4922 	push	hl
   1986 CDrD9s05           4923 	call	_pck_load
   1989 FD 21 0A 00        4924 	ld	iy,#0x000A
   198D FD 39              4925 	add	iy,sp
   198F FD F9              4926 	ld	sp,iy
   1991 D1                 4927 	pop	de
   1992 C1                 4928 	pop	bc
                           4929 ;demo.c:843: vdp_set_screen5();
   1993 C5                 4930 	push	bc
   1994 D5                 4931 	push	de
   1995 CDr00s00           4932 	call	_vdp_set_screen5
   1998 D1                 4933 	pop	de
   1999 C1                 4934 	pop	bc
                           4935 ;demo.c:845: vdp_register(VDP_MODE3,modes); // interlace on, screen mode pal or ntsc
   199A 43                 4936 	ld	b,e
   199B C5                 4937 	push	bc
   199C C5                 4938 	push	bc
   199D 33                 4939 	inc	sp
   199E 3E 09              4940 	ld	a,#0x09
   19A0 F5                 4941 	push	af
   19A1 33                 4942 	inc	sp
   19A2 CDr00s00           4943 	call	_vdp_register
   19A5 F1                 4944 	pop	af
   19A6 C1                 4945 	pop	bc
                           4946 ;demo.c:848: puts("demo start\r\n");
   19A7 C5                 4947 	push	bc
   19A8 21r97s1B           4948 	ld	hl,#__str_24
   19AB E5                 4949 	push	hl
   19AC CDr00s00           4950 	call	_puts
   19AF F1                 4951 	pop	af
   19B0 C1                 4952 	pop	bc
                           4953 ;demo.c:850: scratch_clear();
   19B1 C5                 4954 	push	bc
   19B2 CDrD0s03           4955 	call	_scratch_clear
   19B5 C1                 4956 	pop	bc
                           4957 ;demo.c:851: vdp_load_palette(scratch);
   19B6 C5                 4958 	push	bc
   19B7 21rA0s8D           4959 	ld	hl,#_scratch
   19BA E5                 4960 	push	hl
   19BB CDr00s00           4961 	call	_vdp_load_palette
   19BE F1                 4962 	pop	af
   19BF C1                 4963 	pop	bc
                           4964 ;demo.c:853: pck_load("DSSLOGO PCK",2154,0x0000,VRAM_0,0);
   19C0 C5                 4965 	push	bc
   19C1 21 00 00           4966 	ld	hl,#0x0000
   19C4 E5                 4967 	push	hl
   19C5 2E 01              4968 	ld	l, #0x01
   19C7 E5                 4969 	push	hl
   19C8 2E 00              4970 	ld	l, #0x00
   19CA E5                 4971 	push	hl
   19CB 21 6A 08           4972 	ld	hl,#0x086A
   19CE E5                 4973 	push	hl
   19CF 21rA4s1B           4974 	ld	hl,#__str_25
   19D2 E5                 4975 	push	hl
   19D3 CDrD9s05           4976 	call	_pck_load
   19D6 FD 21 0A 00        4977 	ld	iy,#0x000A
   19DA FD 39              4978 	add	iy,sp
   19DC FD F9              4979 	ld	sp,iy
   19DE C1                 4980 	pop	bc
                           4981 ;demo.c:854: pal_load("DSSLOGO PL5",32,1);
   19DF C5                 4982 	push	bc
   19E0 21 01 00           4983 	ld	hl,#0x0001
   19E3 E5                 4984 	push	hl
   19E4 3E 20              4985 	ld	a,#0x20
   19E6 F5                 4986 	push	af
   19E7 33                 4987 	inc	sp
   19E8 21rB0s1B           4988 	ld	hl,#__str_26
   19EB E5                 4989 	push	hl
   19EC CDrE3s03           4990 	call	_pal_load
   19EF F1                 4991 	pop	af
   19F0 F1                 4992 	pop	af
   19F1 33                 4993 	inc	sp
   19F2 C1                 4994 	pop	bc
                           4995 ;demo.c:855: vdp_load_palette(cur_palette);
   19F3 C5                 4996 	push	bc
   19F4 21r20s8E           4997 	ld	hl,#_cur_palette
   19F7 E5                 4998 	push	hl
   19F8 CDr00s00           4999 	call	_vdp_load_palette
   19FB F1                 5000 	pop	af
   19FC C1                 5001 	pop	bc
                           5002 ;demo.c:857: vdp_register(VDP_VOFFSET,0);
   19FD C5                 5003 	push	bc
   19FE 21 17 00           5004 	ld	hl,#0x0017
   1A01 E5                 5005 	push	hl
   1A02 CDr00s00           5006 	call	_vdp_register
   1A05 F1                 5007 	pop	af
   1A06 C1                 5008 	pop	bc
                           5009 ;demo.c:869: install_isr(my_isr);
   1A07 C5                 5010 	push	bc
   1A08 21r2Cs02           5011 	ld	hl,#_my_isr
   1A0B E5                 5012 	push	hl
   1A0C CDr00s00           5013 	call	_install_isr
   1A0F F1                 5014 	pop	af
   1A10 C1                 5015 	pop	bc
                           5016 ;demo.c:871: while (!quit) {
   1A11                    5017 00117$:
   1A11 AF                 5018 	xor	a,a
   1A12 B1                 5019 	or	a,c
   1A13 C2rAEs1A           5020 	jp	NZ,00119$
                           5021 ;demo.c:874: if (vbicount < 64) { 
   1A16 3ArC0s8E           5022 	ld	a,(#_vbicount+0)
   1A19 D6 40              5023 	sub	a,#0x40
   1A1B FD 21rC0s8E        5024 	ld	iy,#_vbicount
   1A1F FD 7E 01           5025 	ld	a,1 (iy)
   1A22 DE 00              5026 	sbc	a,#0x00
   1A24 F2r2Ds1A           5027 	jp	P,00105$
                           5028 ;demo.c:875: waitVB();
   1A27 76                 5029 		halt 
                           5030 ;demo.c:876: fadein(); 
   1A28 C5                 5031 	push	bc
   1A29 CDr67s06           5032 	call	_fadein
   1A2C C1                 5033 	pop	bc
   1A2D                    5034 00105$:
                           5035 ;demo.c:878: if (vbicount >= 192 && vbicount < 800) {
   1A2D 3ArC0s8E           5036 	ld	a,(#_vbicount+0)
   1A30 D6 C0              5037 	sub	a,#0xC0
   1A32 3ArC1s8E           5038 	ld	a,(#_vbicount+1)
   1A35 DE 00              5039 	sbc	a,#0x00
   1A37 FAr51s1A           5040 	jp	M,00107$
   1A3A 3ArC0s8E           5041 	ld	a,(#_vbicount+0)
   1A3D D6 20              5042 	sub	a,#0x20
   1A3F FD 21rC0s8E        5043 	ld	iy,#_vbicount
   1A43 FD 7E 01           5044 	ld	a,1 (iy)
   1A46 DE 03              5045 	sbc	a,#0x03
   1A48 F2r51s1A           5046 	jp	P,00107$
                           5047 ;demo.c:879: waitVB();
   1A4B 76                 5048 		halt 
                           5049 ;demo.c:880: bulbs();
   1A4C C5                 5050 	push	bc
   1A4D CDrD9s0F           5051 	call	_bulbs
   1A50 C1                 5052 	pop	bc
   1A51                    5053 00107$:
                           5054 ;demo.c:883: if (vbicount >= 800 && vbicount < 1500) {
   1A51 3ArC0s8E           5055 	ld	a,(#_vbicount+0)
   1A54 D6 20              5056 	sub	a,#0x20
   1A56 3ArC1s8E           5057 	ld	a,(#_vbicount+1)
   1A59 DE 03              5058 	sbc	a,#0x03
   1A5B FAr75s1A           5059 	jp	M,00110$
   1A5E 3ArC0s8E           5060 	ld	a,(#_vbicount+0)
   1A61 D6 DC              5061 	sub	a,#0xDC
   1A63 FD 21rC0s8E        5062 	ld	iy,#_vbicount
   1A67 FD 7E 01           5063 	ld	a,1 (iy)
   1A6A DE 05              5064 	sbc	a,#0x05
   1A6C F2r75s1A           5065 	jp	P,00110$
                           5066 ;demo.c:884: waitVB();
   1A6F 76                 5067 		halt 
                           5068 ;demo.c:885: twister();
   1A70 C5                 5069 	push	bc
   1A71 CDr63s0E           5070 	call	_twister
   1A74 C1                 5071 	pop	bc
   1A75                    5072 00110$:
                           5073 ;demo.c:888: if (vbicount >= 1500 && vbicount < 3000) {
   1A75 3ArC0s8E           5074 	ld	a,(#_vbicount+0)
   1A78 D6 DC              5075 	sub	a,#0xDC
   1A7A 3ArC1s8E           5076 	ld	a,(#_vbicount+1)
   1A7D DE 05              5077 	sbc	a,#0x05
   1A7F FAr99s1A           5078 	jp	M,00113$
   1A82 3ArC0s8E           5079 	ld	a,(#_vbicount+0)
   1A85 D6 B8              5080 	sub	a,#0xB8
   1A87 FD 21rC0s8E        5081 	ld	iy,#_vbicount
   1A8B FD 7E 01           5082 	ld	a,1 (iy)
   1A8E DE 0B              5083 	sbc	a,#0x0B
   1A90 F2r99s1A           5084 	jp	P,00113$
                           5085 ;demo.c:889: waitVB();
   1A93 76                 5086 		halt 
                           5087 ;demo.c:890: boxes();
   1A94 C5                 5088 	push	bc
   1A95 CDr41s14           5089 	call	_boxes
   1A98 C1                 5090 	pop	bc
   1A99                    5091 00113$:
                           5092 ;demo.c:895: if(space())
   1A99 C5                 5093 	push	bc
   1A9A 21 08 01           5094 	ld	hl,#0x0108
   1A9D E5                 5095 	push	hl
   1A9E CDr00s00           5096 	call	_ispressed
   1AA1 F1                 5097 	pop	af
   1AA2 7D                 5098 	ld	a,l
   1AA3 C1                 5099 	pop	bc
   1AA4 47                 5100 	ld	b,a
   1AA5 B7                 5101 	or	a,a
   1AA6 CAr11s1A           5102 	jp	Z,00117$
                           5103 ;demo.c:896: quit=1;
   1AA9 0E 01              5104 	ld	c,#0x01
   1AAB C3r11s1A           5105 	jp	00117$
   1AAE                    5106 00119$:
                           5107 ;demo.c:899: do_quit();
   1AAE C3rE8s17           5108 	jp	_do_quit
   1AB1                    5109 _main_end::
   1AB1                    5110 __str_11:
   1AB1 64 65 6D 6F 20 69  5111 	.ascii "demo init"
        6E 69 74
   1ABA 0D                 5112 	.db 0x0D
   1ABB 0A                 5113 	.db 0x0A
   1ABC 0D                 5114 	.db 0x0D
   1ABD 0A                 5115 	.db 0x0A
   1ABE 00                 5116 	.db 0x00
   1ABF                    5117 __str_12:
   1ABF 6D 75 73 69 63 20  5118 	.ascii "music init..."
        69 6E 69 74 2E 2E
        2E
   1ACC 00                 5119 	.db 0x00
   1ACD                    5120 __str_13:
   1ACD 64 6F 6E 65 2E     5121 	.ascii "done."
   1AD2 0D                 5122 	.db 0x0D
   1AD3 0A                 5123 	.db 0x0A
   1AD4 00                 5124 	.db 0x00
   1AD5                    5125 __str_14:
   1AD5 64 65 74 65 63 74  5126 	.ascii "detecting vdp type..."
        69 6E 67 20 76 64
        70 20 74 79 70 65
        2E 2E 2E
   1AEA 00                 5127 	.db 0x00
   1AEB                    5128 __str_15:
   1AEB 20 76 64 70 32 20  5129 	.ascii " vdp2 found!"
        66 6F 75 6E 64 21
   1AF7 0D                 5130 	.db 0x0D
   1AF8 0A                 5131 	.db 0x0A
   1AF9 0D                 5132 	.db 0x0D
   1AFA 0A                 5133 	.db 0x0A
   1AFB 00                 5134 	.db 0x00
   1AFC                    5135 __str_16:
   1AFC 20 76 64 70 31 20  5136 	.ascii " vdp1 found."
        66 6F 75 6E 64 2E
   1B08 0D                 5137 	.db 0x0D
   1B09 0A                 5138 	.db 0x0A
   1B0A 53 6F 72 72 79 2C  5139 	.ascii "Sorry, this demo requires a VDP2 with 128k for"
        20 74 68 69 73 20
        64 65 6D 6F 20 72
        65 71 75 69 72 65
        73 20 61 20 56 44
        50 32 20 77 69 74
        68 20 31 32 38 6B
        20 66 6F 72
   1B38 20 56 52 41 4D 2E  5140 	.ascii " VRAM."
   1B3E 0D                 5141 	.db 0x0D
   1B3F 0A                 5142 	.db 0x0A
   1B40 0D                 5143 	.db 0x0D
   1B41 0A                 5144 	.db 0x0A
   1B42 00                 5145 	.db 0x00
   1B43                    5146 __str_17:
   1B43 54 57 49 53 54 45  5147 	.ascii "TWISTER PL5"
        52 20 50 4C 35
   1B4E 00                 5148 	.db 0x00
   1B4F                    5149 __str_18:
   1B4F 54 46 31 20 20 20  5150 	.ascii "TF1     PL5"
        20 20 50 4C 35
   1B5A 00                 5151 	.db 0x00
   1B5B                    5152 __str_19:
   1B5B 42 4F 58 45 53 20  5153 	.ascii "BOXES   PL5"
        20 20 50 4C 35
   1B66 00                 5154 	.db 0x00
   1B67                    5155 __str_20:
   1B67 42 55 4C 42 53 20  5156 	.ascii "BULBS   PL5"
        20 20 50 4C 35
   1B72 00                 5157 	.db 0x00
   1B73                    5158 __str_21:
   1B73 42 55 4C 42 53 20  5159 	.ascii "BULBS   PCK"
        20 20 50 43 4B
   1B7E 00                 5160 	.db 0x00
   1B7F                    5161 __str_22:
   1B7F 54 57 49 53 54 45  5162 	.ascii "TWISTER PCK"
        52 20 50 43 4B
   1B8A 00                 5163 	.db 0x00
   1B8B                    5164 __str_23:
   1B8B 42 4F 58 45 53 20  5165 	.ascii "BOXES   PCK"
        20 20 50 43 4B
   1B96 00                 5166 	.db 0x00
   1B97                    5167 __str_24:
   1B97 64 65 6D 6F 20 73  5168 	.ascii "demo start"
        74 61 72 74
   1BA1 0D                 5169 	.db 0x0D
   1BA2 0A                 5170 	.db 0x0A
   1BA3 00                 5171 	.db 0x00
   1BA4                    5172 __str_25:
   1BA4 44 53 53 4C 4F 47  5173 	.ascii "DSSLOGO PCK"
        4F 20 50 43 4B
   1BAF 00                 5174 	.db 0x00
   1BB0                    5175 __str_26:
   1BB0 44 53 53 4C 4F 47  5176 	.ascii "DSSLOGO PL5"
        4F 20 50 4C 35
   1BBB 00                 5177 	.db 0x00
                           5178 	.area _CODE
                           5179 	.area _CABS
