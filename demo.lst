                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Mar 22 2009) (Mac OS X i386)
                              4 ; This file was generated Sat Feb 24 17:22:51 2018
                              5 ;--------------------------------------------------------
                              6 	.module demo
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _do_animplay
                             14 	.globl _font
                             15 	.globl _drawsine
                             16 	.globl _drawstr
                             17 	.globl _do_letter_tall
                             18 	.globl _do_letter
                             19 	.globl _bulbs
                             20 	.globl _twister
                             21 	.globl _raster_effu
                             22 	.globl _do_blocks
                             23 	.globl _do_ymmm
                             24 	.globl _fadein
                             25 	.globl _raw_load
                             26 	.globl _pause
                             27 	.globl _pal_load
                             28 	.globl _scratch_clear
                             29 	.globl _ge5_load
                             30 	.globl _color_isr
                             31 	.globl _my_isr
                             32 	.globl _isNthBitSet
                             33 	.globl _ly
                             34 	.globl _lx
                             35 	.globl _ff2
                             36 	.globl _ff1
                             37 	.globl _bulbflipper
                             38 	.globl _ff
                             39 	.globl _linenum
                             40 	.globl _flof
                             41 	.globl _btab
                             42 	.globl _bty
                             43 	.globl _btx
                             44 	.globl _bsy
                             45 	.globl _bsx
                             46 	.globl _block_init
                             47 	.globl _cc
                             48 	.globl _yofff
                             49 	.globl _tick
                             50 	.globl _vbicount
                             51 	.globl _block_palette
                             52 	.globl _cur_palette
                             53 	.globl _scratch
                             54 	.globl _packbuffer
                             55 	.globl _sintab
                             56 	.globl _font_w
                             57 	.globl _font_y
                             58 	.globl _font_x
                             59 	.globl _sintabx
                             60 ;--------------------------------------------------------
                             61 ; special function registers
                             62 ;--------------------------------------------------------
                             63 ;--------------------------------------------------------
                             64 ;  ram data
                             65 ;--------------------------------------------------------
                             66 	.area _DATA
   0000                      67 _sintab::
   0000                      68 	.ds 256
   0100                      69 _packbuffer::
   0100                      70 	.ds 16000
   3F80                      71 _scratch::
   3F80                      72 	.ds 128
   4000                      73 _cur_palette::
   4000                      74 	.ds 32
   4020                      75 _block_palette::
   4020                      76 	.ds 32
   4040                      77 _vbicount::
   4040                      78 	.ds 2
   4042                      79 _tick::
   4042                      80 	.ds 2
   4044                      81 _isNthBitSet_mask_1_1:
   4044                      82 	.ds 8
   404C                      83 _yofff::
   404C                      84 	.ds 1
   404D                      85 _cc::
   404D                      86 	.ds 1
   404E                      87 _flipper:
   404E                      88 	.ds 2
   4050                      89 _ymmmf:
   4050                      90 	.ds 2
   4052                      91 _block_init::
   4052                      92 	.ds 1
   4053                      93 _bsx::
   4053                      94 	.ds 2
   4055                      95 _bsy::
   4055                      96 	.ds 2
   4057                      97 _btx::
   4057                      98 	.ds 2
   4059                      99 _bty::
   4059                     100 	.ds 2
   405B                     101 _btab::
   405B                     102 	.ds 32
   407B                     103 _flof::
   407B                     104 	.ds 2
   407D                     105 _linenum::
   407D                     106 	.ds 2
   407F                     107 _ff::
   407F                     108 	.ds 2
   4081                     109 _bulbflipper::
   4081                     110 	.ds 2
   4083                     111 _ff1::
   4083                     112 	.ds 2
   4085                     113 _ff2::
   4085                     114 	.ds 2
   4087                     115 _lx::
   4087                     116 	.ds 1
   4088                     117 _ly::
   4088                     118 	.ds 1
   4089                     119 _xo:
   4089                     120 	.ds 2
   408B                     121 _yo:
   408B                     122 	.ds 2
   408D                     123 _po:
   408D                     124 	.ds 2
   408F                     125 _fffaaa:
   408F                     126 	.ds 2
                            127 ;--------------------------------------------------------
                            128 ; overlayable items in  ram 
                            129 ;--------------------------------------------------------
                            130 	.area _OVERLAY
                            131 ;--------------------------------------------------------
                            132 ; external initialized ram data
                            133 ;--------------------------------------------------------
                            134 ;--------------------------------------------------------
                            135 ; global & static initialisations
                            136 ;--------------------------------------------------------
                            137 	.area _HOME
                            138 	.area _GSINIT
                            139 	.area _GSFINAL
                            140 	.area _GSINIT
                            141 ;demo.c:47: static unsigned char mask[] = {1, 2, 4, 8, 16, 32, 64, 128};
   0000 21r44s40            142 	ld	hl,#_isNthBitSet_mask_1_1
   0003 CDr00s00            143 	call	__initrleblock
   0006 08                  144 	.db	8
   0007 01 02 04 08 10 20   145 	.db	0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80
        40 80
   000F 00                  146 	.db	0
                            147 ;types.h:27: signed char sintab[256]={
   0010 21r00s00            148 	ld	hl,#_sintab
   0013 CDr00s00            149 	call	__initrleblock
   0016 3B                  150 	.db	59
   0017 00 03 06 09 0C 0F   151 	.db	0x00, 0x03, 0x06, 0x09, 0x0C, 0x0F, 0x12, 0x15
        12 15
   001F 18 1B 1E 21 24 27   152 	.db	0x18, 0x1B, 0x1E, 0x21, 0x24, 0x27, 0x2A, 0x2D
        2A 2D
   0027 30 33 36 39 3B 3E   153 	.db	0x30, 0x33, 0x36, 0x39, 0x3B, 0x3E, 0x41, 0x43
        41 43
   002F 46 49 4B 4E 50 52   154 	.db	0x46, 0x49, 0x4B, 0x4E, 0x50, 0x52, 0x55, 0x57
        55 57
   0037 59 5B 5E 60 62 64   155 	.db	0x59, 0x5B, 0x5E, 0x60, 0x62, 0x64, 0x66, 0x67
        66 67
   003F 69 6B 6C 6E 70 71   156 	.db	0x69, 0x6B, 0x6C, 0x6E, 0x70, 0x71, 0x72, 0x74
        72 74
   0047 75 76 77 78 79 7A   157 	.db	0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7B
        7B 7B
   004F 7C 7D 7D            158 	.db	0x7C, 0x7D, 0x7D
   0052 FB 7E               159 	.db	#-5,#0x7E
   0054 01                  160 	.db	1
   0055 7F                  161 	.db	0x7F
   0056 FB 7E               162 	.db	#-5,#0x7E
   0058 75                  163 	.db	117
   0059 7D 7D 7C 7B 7B 7A   164 	.db	0x7D, 0x7D, 0x7C, 0x7B, 0x7B, 0x7A, 0x79, 0x78
        79 78
   0061 77 76 75 74 72 71   165 	.db	0x77, 0x76, 0x75, 0x74, 0x72, 0x71, 0x70, 0x6E
        70 6E
   0069 6C 6B 69 67 66 64   166 	.db	0x6C, 0x6B, 0x69, 0x67, 0x66, 0x64, 0x62, 0x60
        62 60
   0071 5E 5B 59 57 55 52   167 	.db	0x5E, 0x5B, 0x59, 0x57, 0x55, 0x52, 0x50, 0x4E
        50 4E
   0079 4B 49 46 43 41 3E   168 	.db	0x4B, 0x49, 0x46, 0x43, 0x41, 0x3E, 0x3B, 0x39
        3B 39
   0081 36 33 30 2D 2A 27   169 	.db	0x36, 0x33, 0x30, 0x2D, 0x2A, 0x27, 0x24, 0x21
        24 21
   0089 1E 1B 18 15 12 0F   170 	.db	0x1E, 0x1B, 0x18, 0x15, 0x12, 0x0F, 0x0C, 0x09
        0C 09
   0091 06 03 00 FD FA F7   171 	.db	0x06, 0x03, 0x00, 0xFD, 0xFA, 0xF7, 0xF4, 0xF1
        F4 F1
   0099 EE EB E8 E5 E2 DF   172 	.db	0xEE, 0xEB, 0xE8, 0xE5, 0xE2, 0xDF, 0xDC, 0xD9
        DC D9
   00A1 D6 D3 D0 CD CA C7   173 	.db	0xD6, 0xD3, 0xD0, 0xCD, 0xCA, 0xC7, 0xC5, 0xC2
        C5 C2
   00A9 BF BD BA B7 B5 B2   174 	.db	0xBF, 0xBD, 0xBA, 0xB7, 0xB5, 0xB2, 0xB0, 0xAE
        B0 AE
   00B1 AB A9 A7 A5 A2 A0   175 	.db	0xAB, 0xA9, 0xA7, 0xA5, 0xA2, 0xA0, 0x9E, 0x9C
        9E 9C
   00B9 9A 99 97 95 94 92   176 	.db	0x9A, 0x99, 0x97, 0x95, 0x94, 0x92, 0x90, 0x8F
        90 8F
   00C1 8E 8C 8B 8A 89 88   177 	.db	0x8E, 0x8C, 0x8B, 0x8A, 0x89, 0x88, 0x87, 0x86
        87 86
   00C9 85 85 84 83 83      178 	.db	0x85, 0x85, 0x84, 0x83, 0x83
   00CE FB 82               179 	.db	#-5,#0x82
   00D0 01                  180 	.db	1
   00D1 81                  181 	.db	0x81
   00D2 FB 82               182 	.db	#-5,#0x82
   00D4 3A                  183 	.db	58
   00D5 83 83 84 85 85 86   184 	.db	0x83, 0x83, 0x84, 0x85, 0x85, 0x86, 0x87, 0x88
        87 88
   00DD 89 8A 8B 8C 8E 8F   185 	.db	0x89, 0x8A, 0x8B, 0x8C, 0x8E, 0x8F, 0x90, 0x92
        90 92
   00E5 94 95 97 99 9A 9C   186 	.db	0x94, 0x95, 0x97, 0x99, 0x9A, 0x9C, 0x9E, 0xA0
        9E A0
   00ED A2 A5 A7 A9 AB AE   187 	.db	0xA2, 0xA5, 0xA7, 0xA9, 0xAB, 0xAE, 0xB0, 0xB2
        B0 B2
   00F5 B5 B7 BA BD BF C2   188 	.db	0xB5, 0xB7, 0xBA, 0xBD, 0xBF, 0xC2, 0xC5, 0xC7
        C5 C7
   00FD CA CD D0 D3 D6 D9   189 	.db	0xCA, 0xCD, 0xD0, 0xD3, 0xD6, 0xD9, 0xDC, 0xDF
        DC DF
   0105 E2 E5 E8 EB EE F1   190 	.db	0xE2, 0xE5, 0xE8, 0xEB, 0xEE, 0xF1, 0xF4, 0xF7
        F4 F7
   010D FA FD               191 	.db	0xFA, 0xFD
   010F 00                  192 	.db	0
                            193 ;demo.c:36: uint8_t packbuffer[16000] = {0};
   0110 21r00s01            194 	ld	hl,#_packbuffer
   0113 CDr00s00            195 	call	__initrleblock
   0116 81 00               196 	.db	#-127,#0x00
   0118 81 00               197 	.db	#-127,#0x00
   011A 81 00               198 	.db	#-127,#0x00
   011C 81 00               199 	.db	#-127,#0x00
   011E 81 00               200 	.db	#-127,#0x00
   0120 81 00               201 	.db	#-127,#0x00
   0122 81 00               202 	.db	#-127,#0x00
   0124 81 00               203 	.db	#-127,#0x00
   0126 81 00               204 	.db	#-127,#0x00
   0128 81 00               205 	.db	#-127,#0x00
   012A 81 00               206 	.db	#-127,#0x00
   012C 81 00               207 	.db	#-127,#0x00
   012E 81 00               208 	.db	#-127,#0x00
   0130 81 00               209 	.db	#-127,#0x00
   0132 81 00               210 	.db	#-127,#0x00
   0134 81 00               211 	.db	#-127,#0x00
   0136 81 00               212 	.db	#-127,#0x00
   0138 81 00               213 	.db	#-127,#0x00
   013A 81 00               214 	.db	#-127,#0x00
   013C 81 00               215 	.db	#-127,#0x00
   013E 81 00               216 	.db	#-127,#0x00
   0140 81 00               217 	.db	#-127,#0x00
   0142 81 00               218 	.db	#-127,#0x00
   0144 81 00               219 	.db	#-127,#0x00
   0146 81 00               220 	.db	#-127,#0x00
   0148 81 00               221 	.db	#-127,#0x00
   014A 81 00               222 	.db	#-127,#0x00
   014C 81 00               223 	.db	#-127,#0x00
   014E 81 00               224 	.db	#-127,#0x00
   0150 81 00               225 	.db	#-127,#0x00
   0152 81 00               226 	.db	#-127,#0x00
   0154 81 00               227 	.db	#-127,#0x00
   0156 81 00               228 	.db	#-127,#0x00
   0158 81 00               229 	.db	#-127,#0x00
   015A 81 00               230 	.db	#-127,#0x00
   015C 81 00               231 	.db	#-127,#0x00
   015E 81 00               232 	.db	#-127,#0x00
   0160 81 00               233 	.db	#-127,#0x00
   0162 81 00               234 	.db	#-127,#0x00
   0164 81 00               235 	.db	#-127,#0x00
   0166 81 00               236 	.db	#-127,#0x00
   0168 81 00               237 	.db	#-127,#0x00
   016A 81 00               238 	.db	#-127,#0x00
   016C 81 00               239 	.db	#-127,#0x00
   016E 81 00               240 	.db	#-127,#0x00
   0170 81 00               241 	.db	#-127,#0x00
   0172 81 00               242 	.db	#-127,#0x00
   0174 81 00               243 	.db	#-127,#0x00
   0176 81 00               244 	.db	#-127,#0x00
   0178 81 00               245 	.db	#-127,#0x00
   017A 81 00               246 	.db	#-127,#0x00
   017C 81 00               247 	.db	#-127,#0x00
   017E 81 00               248 	.db	#-127,#0x00
   0180 81 00               249 	.db	#-127,#0x00
   0182 81 00               250 	.db	#-127,#0x00
   0184 81 00               251 	.db	#-127,#0x00
   0186 81 00               252 	.db	#-127,#0x00
   0188 81 00               253 	.db	#-127,#0x00
   018A 81 00               254 	.db	#-127,#0x00
   018C 81 00               255 	.db	#-127,#0x00
   018E 81 00               256 	.db	#-127,#0x00
   0190 81 00               257 	.db	#-127,#0x00
   0192 81 00               258 	.db	#-127,#0x00
   0194 81 00               259 	.db	#-127,#0x00
   0196 81 00               260 	.db	#-127,#0x00
   0198 81 00               261 	.db	#-127,#0x00
   019A 81 00               262 	.db	#-127,#0x00
   019C 81 00               263 	.db	#-127,#0x00
   019E 81 00               264 	.db	#-127,#0x00
   01A0 81 00               265 	.db	#-127,#0x00
   01A2 81 00               266 	.db	#-127,#0x00
   01A4 81 00               267 	.db	#-127,#0x00
   01A6 81 00               268 	.db	#-127,#0x00
   01A8 81 00               269 	.db	#-127,#0x00
   01AA 81 00               270 	.db	#-127,#0x00
   01AC 81 00               271 	.db	#-127,#0x00
   01AE 81 00               272 	.db	#-127,#0x00
   01B0 81 00               273 	.db	#-127,#0x00
   01B2 81 00               274 	.db	#-127,#0x00
   01B4 81 00               275 	.db	#-127,#0x00
   01B6 81 00               276 	.db	#-127,#0x00
   01B8 81 00               277 	.db	#-127,#0x00
   01BA 81 00               278 	.db	#-127,#0x00
   01BC 81 00               279 	.db	#-127,#0x00
   01BE 81 00               280 	.db	#-127,#0x00
   01C0 81 00               281 	.db	#-127,#0x00
   01C2 81 00               282 	.db	#-127,#0x00
   01C4 81 00               283 	.db	#-127,#0x00
   01C6 81 00               284 	.db	#-127,#0x00
   01C8 81 00               285 	.db	#-127,#0x00
   01CA 81 00               286 	.db	#-127,#0x00
   01CC 81 00               287 	.db	#-127,#0x00
   01CE 81 00               288 	.db	#-127,#0x00
   01D0 81 00               289 	.db	#-127,#0x00
   01D2 81 00               290 	.db	#-127,#0x00
   01D4 81 00               291 	.db	#-127,#0x00
   01D6 81 00               292 	.db	#-127,#0x00
   01D8 81 00               293 	.db	#-127,#0x00
   01DA 81 00               294 	.db	#-127,#0x00
   01DC 81 00               295 	.db	#-127,#0x00
   01DE 81 00               296 	.db	#-127,#0x00
   01E0 81 00               297 	.db	#-127,#0x00
   01E2 81 00               298 	.db	#-127,#0x00
   01E4 81 00               299 	.db	#-127,#0x00
   01E6 81 00               300 	.db	#-127,#0x00
   01E8 81 00               301 	.db	#-127,#0x00
   01EA 81 00               302 	.db	#-127,#0x00
   01EC 81 00               303 	.db	#-127,#0x00
   01EE 81 00               304 	.db	#-127,#0x00
   01F0 81 00               305 	.db	#-127,#0x00
   01F2 81 00               306 	.db	#-127,#0x00
   01F4 81 00               307 	.db	#-127,#0x00
   01F6 81 00               308 	.db	#-127,#0x00
   01F8 81 00               309 	.db	#-127,#0x00
   01FA 81 00               310 	.db	#-127,#0x00
   01FC 81 00               311 	.db	#-127,#0x00
   01FE 81 00               312 	.db	#-127,#0x00
   0200 81 00               313 	.db	#-127,#0x00
   0202 81 00               314 	.db	#-127,#0x00
   0204 81 00               315 	.db	#-127,#0x00
   0206 81 00               316 	.db	#-127,#0x00
   0208 81 00               317 	.db	#-127,#0x00
   020A 81 00               318 	.db	#-127,#0x00
   020C 81 00               319 	.db	#-127,#0x00
   020E 81 00               320 	.db	#-127,#0x00
   0210 83 00               321 	.db	#-125,#0x00
   0212 00                  322 	.db	0
                            323 ;demo.c:42: volatile int vbicount=0;
   0213 FD 21r40s40         324 	ld	iy,#_vbicount
   0217 FD 36 00 00         325 	ld	0 (iy),#0x00
   021B FD 21r40s40         326 	ld	iy,#_vbicount
   021F FD 36 01 00         327 	ld	1 (iy),#0x00
                            328 ;demo.c:43: volatile int tick=0;
   0223 FD 21r42s40         329 	ld	iy,#_tick
   0227 FD 36 00 00         330 	ld	0 (iy),#0x00
   022B FD 21r42s40         331 	ld	iy,#_tick
   022F FD 36 01 00         332 	ld	1 (iy),#0x00
                            333 ;demo.c:213: uint8_t yofff = 0;
   0233 FD 21r4Cs40         334 	ld	iy,#_yofff
   0237 FD 36 00 00         335 	ld	0 (iy),#0x00
                            336 ;demo.c:214: uint8_t cc = 0;
   023B FD 21r4Ds40         337 	ld	iy,#_cc
   023F FD 36 00 00         338 	ld	0 (iy),#0x00
                            339 ;demo.c:215: static int flipper = 0;
   0243 FD 21r4Es40         340 	ld	iy,#_flipper
   0247 FD 36 00 00         341 	ld	0 (iy),#0x00
   024B FD 21r4Es40         342 	ld	iy,#_flipper
   024F FD 36 01 00         343 	ld	1 (iy),#0x00
                            344 ;demo.c:216: static int ymmmf = 0;
   0253 FD 21r50s40         345 	ld	iy,#_ymmmf
   0257 FD 36 00 00         346 	ld	0 (iy),#0x00
   025B FD 21r50s40         347 	ld	iy,#_ymmmf
   025F FD 36 01 00         348 	ld	1 (iy),#0x00
                            349 ;demo.c:248: char block_init = 0;
   0263 FD 21r52s40         350 	ld	iy,#_block_init
   0267 FD 36 00 00         351 	ld	0 (iy),#0x00
                            352 ;demo.c:250: int bsx = 0;
   026B FD 21r53s40         353 	ld	iy,#_bsx
   026F FD 36 00 00         354 	ld	0 (iy),#0x00
   0273 FD 21r53s40         355 	ld	iy,#_bsx
   0277 FD 36 01 00         356 	ld	1 (iy),#0x00
                            357 ;demo.c:251: int bsy = 0;
   027B FD 21r55s40         358 	ld	iy,#_bsy
   027F FD 36 00 00         359 	ld	0 (iy),#0x00
   0283 FD 21r55s40         360 	ld	iy,#_bsy
   0287 FD 36 01 00         361 	ld	1 (iy),#0x00
                            362 ;demo.c:252: int btx = 0;
   028B FD 21r57s40         363 	ld	iy,#_btx
   028F FD 36 00 00         364 	ld	0 (iy),#0x00
   0293 FD 21r57s40         365 	ld	iy,#_btx
   0297 FD 36 01 00         366 	ld	1 (iy),#0x00
                            367 ;demo.c:253: int bty = 0;
   029B FD 21r59s40         368 	ld	iy,#_bty
   029F FD 36 00 00         369 	ld	0 (iy),#0x00
   02A3 FD 21r59s40         370 	ld	iy,#_bty
   02A7 FD 36 01 00         371 	ld	1 (iy),#0x00
                            372 ;demo.c:255: int btab[16] = {0};
   02AB 21r5Bs40            373 	ld	hl,#_btab
   02AE CDr00s00            374 	call	__initrleblock
   02B1 E0 00               375 	.db	#-32,#0x00
   02B3 00                  376 	.db	0
                            377 ;demo.c:257: int flof = 0;
   02B4 FD 21r7Bs40         378 	ld	iy,#_flof
   02B8 FD 36 00 00         379 	ld	0 (iy),#0x00
   02BC FD 21r7Bs40         380 	ld	iy,#_flof
   02C0 FD 36 01 00         381 	ld	1 (iy),#0x00
                            382 ;demo.c:307: int linenum = 0;
   02C4 FD 21r7Ds40         383 	ld	iy,#_linenum
   02C8 FD 36 00 00         384 	ld	0 (iy),#0x00
   02CC FD 21r7Ds40         385 	ld	iy,#_linenum
   02D0 FD 36 01 00         386 	ld	1 (iy),#0x00
                            387 ;demo.c:340: int ff = 0;
   02D4 FD 21r7Fs40         388 	ld	iy,#_ff
   02D8 FD 36 00 00         389 	ld	0 (iy),#0x00
   02DC FD 21r7Fs40         390 	ld	iy,#_ff
   02E0 FD 36 01 00         391 	ld	1 (iy),#0x00
                            392 ;demo.c:369: int bulbflipper = 1;
   02E4 FD 21r81s40         393 	ld	iy,#_bulbflipper
   02E8 FD 36 00 01         394 	ld	0 (iy),#0x01
   02EC FD 21r81s40         395 	ld	iy,#_bulbflipper
   02F0 FD 36 01 00         396 	ld	1 (iy),#0x00
                            397 ;demo.c:371: int ff1,ff2 = 0;
   02F4 FD 21r85s40         398 	ld	iy,#_ff2
   02F8 FD 36 00 00         399 	ld	0 (iy),#0x00
   02FC FD 21r85s40         400 	ld	iy,#_ff2
   0300 FD 36 01 00         401 	ld	1 (iy),#0x00
                            402 ;demo.c:439: uint8_t lx = 0;
   0304 FD 21r87s40         403 	ld	iy,#_lx
   0308 FD 36 00 00         404 	ld	0 (iy),#0x00
                            405 ;demo.c:440: uint8_t ly = 0;
   030C FD 21r88s40         406 	ld	iy,#_ly
   0310 FD 36 00 00         407 	ld	0 (iy),#0x00
                            408 ;demo.c:508: static int xo = 0;
   0314 FD 21r89s40         409 	ld	iy,#_xo
   0318 FD 36 00 00         410 	ld	0 (iy),#0x00
   031C FD 21r89s40         411 	ld	iy,#_xo
   0320 FD 36 01 00         412 	ld	1 (iy),#0x00
                            413 ;demo.c:509: static int yo = 0;
   0324 FD 21r8Bs40         414 	ld	iy,#_yo
   0328 FD 36 00 00         415 	ld	0 (iy),#0x00
   032C FD 21r8Bs40         416 	ld	iy,#_yo
   0330 FD 36 01 00         417 	ld	1 (iy),#0x00
                            418 ;demo.c:510: static int po = 0;
   0334 FD 21r8Ds40         419 	ld	iy,#_po
   0338 FD 36 00 00         420 	ld	0 (iy),#0x00
   033C FD 21r8Ds40         421 	ld	iy,#_po
   0340 FD 36 01 00         422 	ld	1 (iy),#0x00
                            423 ;demo.c:511: static int fffaaa = 0;
   0344 FD 21r8Fs40         424 	ld	iy,#_fffaaa
   0348 FD 36 00 00         425 	ld	0 (iy),#0x00
   034C FD 21r8Fs40         426 	ld	iy,#_fffaaa
   0350 FD 36 01 00         427 	ld	1 (iy),#0x00
                            428 ;--------------------------------------------------------
                            429 ; Home
                            430 ;--------------------------------------------------------
                            431 	.area _HOME
                            432 	.area _HOME
                            433 ;--------------------------------------------------------
                            434 ; code
                            435 ;--------------------------------------------------------
                            436 	.area _CODE
                            437 ;demo.c:46: int isNthBitSet (unsigned char c, int n) {
                            438 ;	---------------------------------
                            439 ; Function isNthBitSet
                            440 ; ---------------------------------
   0000                     441 _isNthBitSet_start::
   0000                     442 _isNthBitSet:
   0000 DD E5               443 	push	ix
   0002 DD 21 00 00         444 	ld	ix,#0
   0006 DD 39               445 	add	ix,sp
                            446 ;demo.c:48: return ((c & mask[n]) != 0);
   0008 3Er44               447 	ld	a,#<_isNthBitSet_mask_1_1
   000A DD 86 05            448 	add	a,5 (ix)
   000D 4F                  449 	ld	c,a
   000E 3Es40               450 	ld	a,#>_isNthBitSet_mask_1_1
   0010 DD 8E 06            451 	adc	a,6 (ix)
   0013 47                  452 	ld	b,a
   0014 0A                  453 	ld	a,(bc)
   0015 DD A6 04            454 	and	a,4 (ix)
   0018 20 04               455 	jr	NZ,00103$
   001A 3E 01               456 	ld	a,#0x01
   001C 18 01               457 	jr	00104$
   001E                     458 00103$:
   001E AF                  459 	xor	a,a
   001F                     460 00104$:
   001F B7                  461 	or	a,a
   0020 D6 01               462 	sub	a,#0x01
   0022 3E 00               463 	ld	a,#0x00
   0024 17                  464 	rla
   0025 4F                  465 	ld	c,a
   0026 69                  466 	ld	l,c
   0027 26 00               467 	ld	h,#0x00
   0029 DD E1               468 	pop	ix
   002B C9                  469 	ret
   002C                     470 _isNthBitSet_end::
   002C                     471 _sintabx:
   002C 78 00               472 	.dw #0x0078
   002E 7A 00               473 	.dw #0x007A
   0030 7D 00               474 	.dw #0x007D
   0032 80 00               475 	.dw #0x0080
   0034 83 00               476 	.dw #0x0083
   0036 86 00               477 	.dw #0x0086
   0038 89 00               478 	.dw #0x0089
   003A 8C 00               479 	.dw #0x008C
   003C 8F 00               480 	.dw #0x008F
   003E 92 00               481 	.dw #0x0092
   0040 95 00               482 	.dw #0x0095
   0042 98 00               483 	.dw #0x0098
   0044 9A 00               484 	.dw #0x009A
   0046 9D 00               485 	.dw #0x009D
   0048 A0 00               486 	.dw #0x00A0
   004A A3 00               487 	.dw #0x00A3
   004C A5 00               488 	.dw #0x00A5
   004E A8 00               489 	.dw #0x00A8
   0050 AB 00               490 	.dw #0x00AB
   0052 AD 00               491 	.dw #0x00AD
   0054 B0 00               492 	.dw #0x00B0
   0056 B3 00               493 	.dw #0x00B3
   0058 B5 00               494 	.dw #0x00B5
   005A B8 00               495 	.dw #0x00B8
   005C BA 00               496 	.dw #0x00BA
   005E BD 00               497 	.dw #0x00BD
   0060 BF 00               498 	.dw #0x00BF
   0062 C1 00               499 	.dw #0x00C1
   0064 C4 00               500 	.dw #0x00C4
   0066 C6 00               501 	.dw #0x00C6
   0068 C8 00               502 	.dw #0x00C8
   006A CA 00               503 	.dw #0x00CA
   006C CC 00               504 	.dw #0x00CC
   006E CE 00               505 	.dw #0x00CE
   0070 D0 00               506 	.dw #0x00D0
   0072 D2 00               507 	.dw #0x00D2
   0074 D4 00               508 	.dw #0x00D4
   0076 D6 00               509 	.dw #0x00D6
   0078 D8 00               510 	.dw #0x00D8
   007A DA 00               511 	.dw #0x00DA
   007C DB 00               512 	.dw #0x00DB
   007E DD 00               513 	.dw #0x00DD
   0080 DE 00               514 	.dw #0x00DE
   0082 E0 00               515 	.dw #0x00E0
   0084 E1 00               516 	.dw #0x00E1
   0086 E3 00               517 	.dw #0x00E3
   0088 E4 00               518 	.dw #0x00E4
   008A E5 00               519 	.dw #0x00E5
   008C E6 00               520 	.dw #0x00E6
   008E E7 00               521 	.dw #0x00E7
   0090 E8 00               522 	.dw #0x00E8
   0092 E9 00               523 	.dw #0x00E9
   0094 EA 00               524 	.dw #0x00EA
   0096 EB 00               525 	.dw #0x00EB
   0098 EC 00               526 	.dw #0x00EC
   009A ED 00               527 	.dw #0x00ED
   009C ED 00               528 	.dw #0x00ED
   009E EE 00               529 	.dw #0x00EE
   00A0 EE 00               530 	.dw #0x00EE
   00A2 EF 00               531 	.dw #0x00EF
   00A4 EF 00               532 	.dw #0x00EF
   00A6 EF 00               533 	.dw #0x00EF
   00A8 EF 00               534 	.dw #0x00EF
   00AA EF 00               535 	.dw #0x00EF
   00AC F0 00               536 	.dw #0x00F0
   00AE EF 00               537 	.dw #0x00EF
   00B0 EF 00               538 	.dw #0x00EF
   00B2 EF 00               539 	.dw #0x00EF
   00B4 EF 00               540 	.dw #0x00EF
   00B6 EF 00               541 	.dw #0x00EF
   00B8 EE 00               542 	.dw #0x00EE
   00BA EE 00               543 	.dw #0x00EE
   00BC ED 00               544 	.dw #0x00ED
   00BE ED 00               545 	.dw #0x00ED
   00C0 EC 00               546 	.dw #0x00EC
   00C2 EB 00               547 	.dw #0x00EB
   00C4 EA 00               548 	.dw #0x00EA
   00C6 E9 00               549 	.dw #0x00E9
   00C8 E8 00               550 	.dw #0x00E8
   00CA E7 00               551 	.dw #0x00E7
   00CC E6 00               552 	.dw #0x00E6
   00CE E5 00               553 	.dw #0x00E5
   00D0 E4 00               554 	.dw #0x00E4
   00D2 E3 00               555 	.dw #0x00E3
   00D4 E1 00               556 	.dw #0x00E1
   00D6 E0 00               557 	.dw #0x00E0
   00D8 DE 00               558 	.dw #0x00DE
   00DA DD 00               559 	.dw #0x00DD
   00DC DB 00               560 	.dw #0x00DB
   00DE DA 00               561 	.dw #0x00DA
   00E0 D8 00               562 	.dw #0x00D8
   00E2 D6 00               563 	.dw #0x00D6
   00E4 D4 00               564 	.dw #0x00D4
   00E6 D2 00               565 	.dw #0x00D2
   00E8 D0 00               566 	.dw #0x00D0
   00EA CE 00               567 	.dw #0x00CE
   00EC CC 00               568 	.dw #0x00CC
   00EE CA 00               569 	.dw #0x00CA
   00F0 C8 00               570 	.dw #0x00C8
   00F2 C6 00               571 	.dw #0x00C6
   00F4 C4 00               572 	.dw #0x00C4
   00F6 C1 00               573 	.dw #0x00C1
   00F8 BF 00               574 	.dw #0x00BF
   00FA BD 00               575 	.dw #0x00BD
   00FC BA 00               576 	.dw #0x00BA
   00FE B8 00               577 	.dw #0x00B8
   0100 B5 00               578 	.dw #0x00B5
   0102 B3 00               579 	.dw #0x00B3
   0104 B0 00               580 	.dw #0x00B0
   0106 AD 00               581 	.dw #0x00AD
   0108 AB 00               582 	.dw #0x00AB
   010A A8 00               583 	.dw #0x00A8
   010C A5 00               584 	.dw #0x00A5
   010E A3 00               585 	.dw #0x00A3
   0110 A0 00               586 	.dw #0x00A0
   0112 9D 00               587 	.dw #0x009D
   0114 9A 00               588 	.dw #0x009A
   0116 98 00               589 	.dw #0x0098
   0118 95 00               590 	.dw #0x0095
   011A 92 00               591 	.dw #0x0092
   011C 8F 00               592 	.dw #0x008F
   011E 8C 00               593 	.dw #0x008C
   0120 89 00               594 	.dw #0x0089
   0122 86 00               595 	.dw #0x0086
   0124 83 00               596 	.dw #0x0083
   0126 80 00               597 	.dw #0x0080
   0128 7D 00               598 	.dw #0x007D
   012A 7A 00               599 	.dw #0x007A
   012C 78 00               600 	.dw #0x0078
   012E 75 00               601 	.dw #0x0075
   0130 72 00               602 	.dw #0x0072
   0132 6F 00               603 	.dw #0x006F
   0134 6C 00               604 	.dw #0x006C
   0136 69 00               605 	.dw #0x0069
   0138 66 00               606 	.dw #0x0066
   013A 63 00               607 	.dw #0x0063
   013C 60 00               608 	.dw #0x0060
   013E 5D 00               609 	.dw #0x005D
   0140 5A 00               610 	.dw #0x005A
   0142 57 00               611 	.dw #0x0057
   0144 55 00               612 	.dw #0x0055
   0146 52 00               613 	.dw #0x0052
   0148 4F 00               614 	.dw #0x004F
   014A 4C 00               615 	.dw #0x004C
   014C 4A 00               616 	.dw #0x004A
   014E 47 00               617 	.dw #0x0047
   0150 44 00               618 	.dw #0x0044
   0152 42 00               619 	.dw #0x0042
   0154 3F 00               620 	.dw #0x003F
   0156 3C 00               621 	.dw #0x003C
   0158 3A 00               622 	.dw #0x003A
   015A 37 00               623 	.dw #0x0037
   015C 35 00               624 	.dw #0x0035
   015E 32 00               625 	.dw #0x0032
   0160 30 00               626 	.dw #0x0030
   0162 2E 00               627 	.dw #0x002E
   0164 2B 00               628 	.dw #0x002B
   0166 29 00               629 	.dw #0x0029
   0168 27 00               630 	.dw #0x0027
   016A 25 00               631 	.dw #0x0025
   016C 23 00               632 	.dw #0x0023
   016E 21 00               633 	.dw #0x0021
   0170 1F 00               634 	.dw #0x001F
   0172 1D 00               635 	.dw #0x001D
   0174 1B 00               636 	.dw #0x001B
   0176 19 00               637 	.dw #0x0019
   0178 17 00               638 	.dw #0x0017
   017A 15 00               639 	.dw #0x0015
   017C 14 00               640 	.dw #0x0014
   017E 12 00               641 	.dw #0x0012
   0180 11 00               642 	.dw #0x0011
   0182 0F 00               643 	.dw #0x000F
   0184 0E 00               644 	.dw #0x000E
   0186 0C 00               645 	.dw #0x000C
   0188 0B 00               646 	.dw #0x000B
   018A 0A 00               647 	.dw #0x000A
   018C 09 00               648 	.dw #0x0009
   018E 08 00               649 	.dw #0x0008
   0190 07 00               650 	.dw #0x0007
   0192 06 00               651 	.dw #0x0006
   0194 05 00               652 	.dw #0x0005
   0196 04 00               653 	.dw #0x0004
   0198 03 00               654 	.dw #0x0003
   019A 02 00               655 	.dw #0x0002
   019C 02 00               656 	.dw #0x0002
   019E 01 00               657 	.dw #0x0001
   01A0 01 00               658 	.dw #0x0001
   01A2 00 00               659 	.dw #0x0000
   01A4 00 00               660 	.dw #0x0000
   01A6 00 00               661 	.dw #0x0000
   01A8 00 00               662 	.dw #0x0000
   01AA 00 00               663 	.dw #0x0000
   01AC 00 00               664 	.dw #0x0000
   01AE 00 00               665 	.dw #0x0000
   01B0 00 00               666 	.dw #0x0000
   01B2 00 00               667 	.dw #0x0000
   01B4 00 00               668 	.dw #0x0000
   01B6 00 00               669 	.dw #0x0000
   01B8 01 00               670 	.dw #0x0001
   01BA 01 00               671 	.dw #0x0001
   01BC 02 00               672 	.dw #0x0002
   01BE 02 00               673 	.dw #0x0002
   01C0 03 00               674 	.dw #0x0003
   01C2 04 00               675 	.dw #0x0004
   01C4 05 00               676 	.dw #0x0005
   01C6 06 00               677 	.dw #0x0006
   01C8 07 00               678 	.dw #0x0007
   01CA 08 00               679 	.dw #0x0008
   01CC 09 00               680 	.dw #0x0009
   01CE 0A 00               681 	.dw #0x000A
   01D0 0B 00               682 	.dw #0x000B
   01D2 0C 00               683 	.dw #0x000C
   01D4 0E 00               684 	.dw #0x000E
   01D6 0F 00               685 	.dw #0x000F
   01D8 11 00               686 	.dw #0x0011
   01DA 12 00               687 	.dw #0x0012
   01DC 14 00               688 	.dw #0x0014
   01DE 15 00               689 	.dw #0x0015
   01E0 17 00               690 	.dw #0x0017
   01E2 19 00               691 	.dw #0x0019
   01E4 1B 00               692 	.dw #0x001B
   01E6 1D 00               693 	.dw #0x001D
   01E8 1F 00               694 	.dw #0x001F
   01EA 21 00               695 	.dw #0x0021
   01EC 23 00               696 	.dw #0x0023
   01EE 25 00               697 	.dw #0x0025
   01F0 27 00               698 	.dw #0x0027
   01F2 29 00               699 	.dw #0x0029
   01F4 2B 00               700 	.dw #0x002B
   01F6 2E 00               701 	.dw #0x002E
   01F8 30 00               702 	.dw #0x0030
   01FA 32 00               703 	.dw #0x0032
   01FC 35 00               704 	.dw #0x0035
   01FE 37 00               705 	.dw #0x0037
   0200 3A 00               706 	.dw #0x003A
   0202 3C 00               707 	.dw #0x003C
   0204 3F 00               708 	.dw #0x003F
   0206 42 00               709 	.dw #0x0042
   0208 44 00               710 	.dw #0x0044
   020A 47 00               711 	.dw #0x0047
   020C 4A 00               712 	.dw #0x004A
   020E 4C 00               713 	.dw #0x004C
   0210 4F 00               714 	.dw #0x004F
   0212 52 00               715 	.dw #0x0052
   0214 55 00               716 	.dw #0x0055
   0216 57 00               717 	.dw #0x0057
   0218 5A 00               718 	.dw #0x005A
   021A 5D 00               719 	.dw #0x005D
   021C 60 00               720 	.dw #0x0060
   021E 63 00               721 	.dw #0x0063
   0220 66 00               722 	.dw #0x0066
   0222 69 00               723 	.dw #0x0069
   0224 6C 00               724 	.dw #0x006C
   0226 6F 00               725 	.dw #0x006F
   0228 72 00               726 	.dw #0x0072
   022A 75 00               727 	.dw #0x0075
                            728 ;demo.c:55: void my_isr(void) interrupt
                            729 ;	---------------------------------
                            730 ; Function my_isr
                            731 ; ---------------------------------
   022C                     732 _my_isr_start::
   022C                     733 _my_isr:
   022C F5                  734 	push	af
   022D C5                  735 	push	bc
   022E D5                  736 	push	de
   022F E5                  737 	push	hl
   0230 FD E5               738 	push	iy
                            739 ;demo.c:57: DI;
   0232 F3                  740 		di 
                            741 ;demo.c:59: READ_VDP_STATUS;
   0233 DB 99               742 		in a,(#0x99) 
                            743 ;demo.c:61: PLY_Play();
   0235 CDr00s00            744 	call	_PLY_Play
                            745 ;demo.c:62: PLY_SendRegisters();
   0238 CDr00s00            746 	call	_PLY_SendRegisters
                            747 ;demo.c:64: vbicount+=2;
   023B 21r40s40            748 	ld	hl,#_vbicount
   023E 7E                  749 	ld	a,(hl)
   023F C6 02               750 	add	a,#0x02
   0241 23                  751 	inc	hl
   0242 2B                  752 	dec	hl
   0243 C5                  753 	push	bc
   0244 4F                  754 	ld	c, a
   0245 23                  755 	inc	hl
   0246 7E                  756 	ld	a, (hl)
   0247 47                  757 	ld	b, a
   0248 79                  758 	ld	a, c
   0249 2B                  759 	dec	hl
   024A 77                  760 	ld	(hl), a
   024B 78                  761 	ld	a, b
   024C C1                  762 	pop	bc
   024D CE 00               763 	adc	a,#0x00
   024F 23                  764 	inc	hl
   0250 77                  765 	ld	(hl),a
                            766 ;demo.c:65: tick++;
   0251 FD 21r42s40         767 	ld	iy,#_tick
   0255 FD 34 00            768 	inc	0 (iy)
   0258 20 07               769 	jr	NZ,00103$
   025A FD 21r42s40         770 	ld	iy,#_tick
   025E FD 34 01            771 	inc	1 (iy)
   0261                     772 00103$:
                            773 ;demo.c:67: EI;
   0261 FB                  774 		ei 
   0262 FD E1               775 	pop	iy
   0264 E1                  776 	pop	hl
   0265 D1                  777 	pop	de
   0266 C1                  778 	pop	bc
   0267 F1                  779 	pop	af
   0268 ED 4D               780 	reti
   026A                     781 _my_isr_end::
                            782 ;demo.c:70: void color_isr(void) interrupt
                            783 ;	---------------------------------
                            784 ; Function color_isr
                            785 ; ---------------------------------
   026A                     786 _color_isr_start::
   026A                     787 _color_isr:
   026A F5                  788 	push	af
   026B C5                  789 	push	bc
   026C D5                  790 	push	de
   026D E5                  791 	push	hl
   026E FD E5               792 	push	iy
                            793 ;demo.c:72: DI;
   0270 F3                  794 		di 
                            795 ;demo.c:74: if(isNthBitSet(vdp2_status(1),0)) {
   0271 3E 01               796 	ld	a,#0x01
   0273 F5                  797 	push	af
   0274 33                  798 	inc	sp
   0275 CDr00s00            799 	call	_vdp2_status
   0278 33                  800 	inc	sp
   0279 4D                  801 	ld	c,l
   027A 21 00 00            802 	ld	hl,#0x0000
   027D E5                  803 	push	hl
   027E 79                  804 	ld	a,c
   027F F5                  805 	push	af
   0280 33                  806 	inc	sp
   0281 CDr00s00            807 	call	_isNthBitSet
   0284 F1                  808 	pop	af
   0285 33                  809 	inc	sp
   0286 44                  810 	ld	b,h
   0287 4D                  811 	ld	c,l
   0288 79                  812 	ld	a,c
   0289 B0                  813 	or	a,b
   028A 28 19               814 	jr	Z,00102$
                            815 ;demo.c:75: vdp_register(VDP_VOFFSET,sintab[vbicount & 255]);
   028C 21r40s40            816 	ld	hl,#_vbicount + 0
   028F 4E                  817 	ld	c,(hl)
   0290 06 00               818 	ld	b,#0x00
   0292 21r00s00            819 	ld	hl,#_sintab
   0295 09                  820 	add	hl,bc
   0296 7E                  821 	ld	a,(hl)
   0297 F5                  822 	push	af
   0298 33                  823 	inc	sp
   0299 3E 17               824 	ld	a,#0x17
   029B F5                  825 	push	af
   029C 33                  826 	inc	sp
   029D CDr00s00            827 	call	_vdp_register
   02A0 F1                  828 	pop	af
                            829 ;demo.c:76: READ_VDP_STATUS;
   02A1 DB 99               830 		in a,(#0x99) 
   02A3 18 18               831 	jr	00103$
   02A5                     832 00102$:
                            833 ;demo.c:79: READ_VDP_STATUS;
   02A5 DB 99               834 		in a,(#0x99) 
                            835 ;demo.c:80: vbicount++;
   02A7 FD 21r40s40         836 	ld	iy,#_vbicount
   02AB FD 34 00            837 	inc	0 (iy)
   02AE 20 07               838 	jr	NZ,00107$
   02B0 FD 21r40s40         839 	ld	iy,#_vbicount
   02B4 FD 34 01            840 	inc	1 (iy)
   02B7                     841 00107$:
                            842 ;demo.c:83: PLY_Play();
   02B7 CDr00s00            843 	call	_PLY_Play
                            844 ;demo.c:84: PLY_SendRegisters();
   02BA CDr00s00            845 	call	_PLY_SendRegisters
   02BD                     846 00103$:
                            847 ;demo.c:87: EI;
   02BD FB                  848 		ei 
   02BE FD E1               849 	pop	iy
   02C0 E1                  850 	pop	hl
   02C1 D1                  851 	pop	de
   02C2 C1                  852 	pop	bc
   02C3 F1                  853 	pop	af
   02C4 ED 4D               854 	reti
   02C6                     855 _color_isr_end::
                            856 ;demo.c:94: uint8_t ge5_load(char *file_name, uint8_t vramh, uint16_t vraml) {
                            857 ;	---------------------------------
                            858 ; Function ge5_load
                            859 ; ---------------------------------
   02C6                     860 _ge5_load_start::
   02C6                     861 _ge5_load:
   02C6 DD E5               862 	push	ix
   02C8 DD 21 00 00         863 	ld	ix,#0
   02CC DD 39               864 	add	ix,sp
   02CE 21 D2 FF            865 	ld	hl,#-46
   02D1 39                  866 	add	hl,sp
   02D2 F9                  867 	ld	sp,hl
                            868 ;demo.c:98: memset((uint8_t *) &f, 0, sizeof(fcb));
   02D3 21 00 00            869 	ld	hl,#0x0000
   02D6 39                  870 	add	hl,sp
   02D7 4D                  871 	ld	c,l
   02D8 44                  872 	ld	b,h
   02D9 21 2E 00            873 	ld	hl,#0x002E
   02DC E5                  874 	push	hl
   02DD 3E 00               875 	ld	a,#0x00
   02DF F5                  876 	push	af
   02E0 33                  877 	inc	sp
   02E1 C5                  878 	push	bc
   02E2 CDr00s00            879 	call	_memset
   02E5 F1                  880 	pop	af
   02E6 F1                  881 	pop	af
   02E7 33                  882 	inc	sp
                            883 ;demo.c:100: f.record_size = 128;
   02E8 21 00 00            884 	ld	hl,#0x0000
   02EB 39                  885 	add	hl,sp
   02EC 4D                  886 	ld	c,l
   02ED 44                  887 	ld	b,h
   02EE 21 0F 00            888 	ld	hl,#0x000F
   02F1 09                  889 	add	hl,bc
   02F2 EB                  890 	ex	de,hl
   02F3 3E 80               891 	ld	a,#0x80
   02F5 12                  892 	ld	(de),a
                            893 ;demo.c:101: f.drive = 0;
   02F6 3E 00               894 	ld	a,#0x00
   02F8 02                  895 	ld	(bc),a
                            896 ;demo.c:103: memcpy(f.name, file_name, 11);
   02F9 DD 5E 04            897 	ld	e,4 (ix)
   02FC DD 56 05            898 	ld	d,5 (ix)
   02FF 03                  899 	inc	bc
   0300 21 0B 00            900 	ld	hl,#0x000B
   0303 E5                  901 	push	hl
   0304 D5                  902 	push	de
   0305 C5                  903 	push	bc
   0306 CDr00s00            904 	call	_memcpy
   0309 F1                  905 	pop	af
   030A F1                  906 	pop	af
   030B F1                  907 	pop	af
                            908 ;demo.c:105: if (open(&f) != 0) return 0;
   030C 21 00 00            909 	ld	hl,#0x0000
   030F 39                  910 	add	hl,sp
   0310 E5                  911 	push	hl
   0311 CDr00s00            912 	call	_open
   0314 F1                  913 	pop	af
   0315 AF                  914 	xor	a,a
   0316 B5                  915 	or	a,l
   0317 28 05               916 	jr	Z,00102$
   0319 2E 00               917 	ld	l,#0x00
   031B C3r92s03            918 	jp	00114$
   031E                     919 00102$:
                            920 ;demo.c:106: vdp_set_write_address(vramh, vraml);
   031E DD 6E 07            921 	ld	l,7 (ix)
   0321 DD 66 08            922 	ld	h,8 (ix)
   0324 E5                  923 	push	hl
   0325 DD 7E 06            924 	ld	a,6 (ix)
   0328 F5                  925 	push	af
   0329 33                  926 	inc	sp
   032A CDr00s00            927 	call	_vdp_set_write_address
   032D F1                  928 	pop	af
   032E 33                  929 	inc	sp
                            930 ;demo.c:108: for (i = 0; i < 213; i++) {
   032F 0E 00               931 	ld	c,#0x00
   0331                     932 00110$:
   0331 79                  933 	ld	a,c
   0332 D6 D5               934 	sub	a,#0xD5
   0334 D2r87s03            935 	jp	NC,00113$
                            936 ;demo.c:109: if (block_set_data_ptr(scratch) != 0) return 0;
   0337 C5                  937 	push	bc
   0338 21r80s3F            938 	ld	hl,#_scratch
   033B E5                  939 	push	hl
   033C CDr00s00            940 	call	_block_set_data_ptr
   033F F1                  941 	pop	af
   0340 7D                  942 	ld	a,l
   0341 C1                  943 	pop	bc
   0342 47                  944 	ld	b,a
   0343 B7                  945 	or	a,a
   0344 28 05               946 	jr	Z,00104$
   0346 2E 00               947 	ld	l,#0x00
   0348 C3r92s03            948 	jp	00114$
   034B                     949 00104$:
                            950 ;demo.c:110: if (block_read(&f) != 0) return 0;
   034B 21 00 00            951 	ld	hl,#0x0000
   034E 39                  952 	add	hl,sp
   034F C5                  953 	push	bc
   0350 E5                  954 	push	hl
   0351 CDr00s00            955 	call	_block_read
   0354 F1                  956 	pop	af
   0355 7D                  957 	ld	a,l
   0356 C1                  958 	pop	bc
   0357 47                  959 	ld	b,a
   0358 B7                  960 	or	a,a
   0359 28 04               961 	jr	Z,00106$
   035B 2E 00               962 	ld	l,#0x00
   035D 18 33               963 	jr	00114$
   035F                     964 00106$:
                            965 ;demo.c:112: if (i == 0) vdp_load_screen(scratch + 7, 121);   // to skip GE5 header
   035F AF                  966 	xor	a,a
   0360 B1                  967 	or	a,c
   0361 20 11               968 	jr	NZ,00108$
   0363 11r87s3F            969 	ld	de,#_scratch + 7
   0366 C5                  970 	push	bc
   0367 3E 79               971 	ld	a,#0x79
   0369 F5                  972 	push	af
   036A 33                  973 	inc	sp
   036B D5                  974 	push	de
   036C CDr00s00            975 	call	_vdp_load_screen
   036F F1                  976 	pop	af
   0370 33                  977 	inc	sp
   0371 C1                  978 	pop	bc
   0372 18 0F               979 	jr	00112$
   0374                     980 00108$:
                            981 ;demo.c:113: else vdp_load_screen(scratch, 128);
   0374 C5                  982 	push	bc
   0375 3E 80               983 	ld	a,#0x80
   0377 F5                  984 	push	af
   0378 33                  985 	inc	sp
   0379 21r80s3F            986 	ld	hl,#_scratch
   037C E5                  987 	push	hl
   037D CDr00s00            988 	call	_vdp_load_screen
   0380 F1                  989 	pop	af
   0381 33                  990 	inc	sp
   0382 C1                  991 	pop	bc
   0383                     992 00112$:
                            993 ;demo.c:108: for (i = 0; i < 213; i++) {
   0383 0C                  994 	inc	c
   0384 C3r31s03            995 	jp	00110$
   0387                     996 00113$:
                            997 ;demo.c:116: close(&f);
   0387 21 00 00            998 	ld	hl,#0x0000
   038A 39                  999 	add	hl,sp
   038B E5                 1000 	push	hl
   038C CDr00s00           1001 	call	_close
   038F F1                 1002 	pop	af
                           1003 ;demo.c:118: return 1;
   0390 2E 01              1004 	ld	l,#0x01
   0392                    1005 00114$:
   0392 DD F9              1006 	ld	sp,ix
   0394 DD E1              1007 	pop	ix
   0396 C9                 1008 	ret
   0397                    1009 _ge5_load_end::
                           1010 ;demo.c:121: void scratch_clear() {
                           1011 ;	---------------------------------
                           1012 ; Function scratch_clear
                           1013 ; ---------------------------------
   0397                    1014 _scratch_clear_start::
   0397                    1015 _scratch_clear:
                           1016 ;demo.c:122: memset((uint8_t *) &scratch, 0, 128);
   0397 21 80 00           1017 	ld	hl,#0x0080
   039A E5                 1018 	push	hl
   039B 3E 00              1019 	ld	a,#0x00
   039D F5                 1020 	push	af
   039E 33                 1021 	inc	sp
   039F 21r80s3F           1022 	ld	hl,#_scratch
   03A2 E5                 1023 	push	hl
   03A3 CDr00s00           1024 	call	_memset
   03A6 F1                 1025 	pop	af
   03A7 F1                 1026 	pop	af
   03A8 33                 1027 	inc	sp
   03A9 C9                 1028 	ret
   03AA                    1029 _scratch_clear_end::
                           1030 ;demo.c:125: uint8_t pal_load(char *file_name, uint8_t ss) {
                           1031 ;	---------------------------------
                           1032 ; Function pal_load
                           1033 ; ---------------------------------
   03AA                    1034 _pal_load_start::
   03AA                    1035 _pal_load:
   03AA DD E5              1036 	push	ix
   03AC DD 21 00 00        1037 	ld	ix,#0
   03B0 DD 39              1038 	add	ix,sp
   03B2 21 D2 FF           1039 	ld	hl,#-46
   03B5 39                 1040 	add	hl,sp
   03B6 F9                 1041 	ld	sp,hl
                           1042 ;demo.c:128: memset((uint8_t *) &f, 0, sizeof(fcb));
   03B7 21 00 00           1043 	ld	hl,#0x0000
   03BA 39                 1044 	add	hl,sp
   03BB 4D                 1045 	ld	c,l
   03BC 44                 1046 	ld	b,h
   03BD 21 2E 00           1047 	ld	hl,#0x002E
   03C0 E5                 1048 	push	hl
   03C1 3E 00              1049 	ld	a,#0x00
   03C3 F5                 1050 	push	af
   03C4 33                 1051 	inc	sp
   03C5 C5                 1052 	push	bc
   03C6 CDr00s00           1053 	call	_memset
   03C9 F1                 1054 	pop	af
   03CA F1                 1055 	pop	af
   03CB 33                 1056 	inc	sp
                           1057 ;demo.c:129: scratch_clear();
   03CC CDr97s03           1058 	call	_scratch_clear
                           1059 ;demo.c:131: f.record_size = ss;
   03CF 21 00 00           1060 	ld	hl,#0x0000
   03D2 39                 1061 	add	hl,sp
   03D3 4D                 1062 	ld	c,l
   03D4 44                 1063 	ld	b,h
   03D5 21 0F 00           1064 	ld	hl,#0x000F
   03D8 09                 1065 	add	hl,bc
   03D9 EB                 1066 	ex	de,hl
   03DA DD 7E 06           1067 	ld	a,6 (ix)
   03DD 12                 1068 	ld	(de),a
                           1069 ;demo.c:132: f.drive = 0;
   03DE 3E 00              1070 	ld	a,#0x00
   03E0 02                 1071 	ld	(bc),a
                           1072 ;demo.c:134: memcpy(f.name, file_name, 11);
   03E1 DD 5E 04           1073 	ld	e,4 (ix)
   03E4 DD 56 05           1074 	ld	d,5 (ix)
   03E7 03                 1075 	inc	bc
   03E8 21 0B 00           1076 	ld	hl,#0x000B
   03EB E5                 1077 	push	hl
   03EC D5                 1078 	push	de
   03ED C5                 1079 	push	bc
   03EE CDr00s00           1080 	call	_memcpy
   03F1 F1                 1081 	pop	af
   03F2 F1                 1082 	pop	af
   03F3 F1                 1083 	pop	af
                           1084 ;demo.c:136: if (open(&f) != 0) return 0;
   03F4 21 00 00           1085 	ld	hl,#0x0000
   03F7 39                 1086 	add	hl,sp
   03F8 E5                 1087 	push	hl
   03F9 CDr00s00           1088 	call	_open
   03FC F1                 1089 	pop	af
   03FD AF                 1090 	xor	a,a
   03FE B5                 1091 	or	a,l
   03FF 28 04              1092 	jr	Z,00102$
   0401 2E 00              1093 	ld	l,#0x00
   0403 18 40              1094 	jr	00107$
   0405                    1095 00102$:
                           1096 ;demo.c:137: if (block_set_data_ptr(scratch) != 0) return 0;
   0405 21r80s3F           1097 	ld	hl,#_scratch
   0408 E5                 1098 	push	hl
   0409 CDr00s00           1099 	call	_block_set_data_ptr
   040C F1                 1100 	pop	af
   040D AF                 1101 	xor	a,a
   040E B5                 1102 	or	a,l
   040F 28 04              1103 	jr	Z,00104$
   0411 2E 00              1104 	ld	l,#0x00
   0413 18 30              1105 	jr	00107$
   0415                    1106 00104$:
                           1107 ;demo.c:138: if (block_read(&f) != 0) return 0;
   0415 21 00 00           1108 	ld	hl,#0x0000
   0418 39                 1109 	add	hl,sp
   0419 E5                 1110 	push	hl
   041A CDr00s00           1111 	call	_block_read
   041D F1                 1112 	pop	af
   041E AF                 1113 	xor	a,a
   041F B5                 1114 	or	a,l
   0420 28 04              1115 	jr	Z,00106$
   0422 2E 00              1116 	ld	l,#0x00
   0424 18 1F              1117 	jr	00107$
   0426                    1118 00106$:
                           1119 ;demo.c:140: memcpy(cur_palette, scratch+7, ss);
   0426 DD 4E 06           1120 	ld	c,6 (ix)
   0429 06 00              1121 	ld	b,#0x00
   042B 11r87s3F           1122 	ld	de,#_scratch + 7
   042E C5                 1123 	push	bc
   042F D5                 1124 	push	de
   0430 21r00s40           1125 	ld	hl,#_cur_palette
   0433 E5                 1126 	push	hl
   0434 CDr00s00           1127 	call	_memcpy
   0437 F1                 1128 	pop	af
   0438 F1                 1129 	pop	af
   0439 F1                 1130 	pop	af
                           1131 ;demo.c:142: close(&f);
   043A 21 00 00           1132 	ld	hl,#0x0000
   043D 39                 1133 	add	hl,sp
   043E E5                 1134 	push	hl
   043F CDr00s00           1135 	call	_close
   0442 F1                 1136 	pop	af
                           1137 ;demo.c:143: return 1;
   0443 2E 01              1138 	ld	l,#0x01
   0445                    1139 00107$:
   0445 DD F9              1140 	ld	sp,ix
   0447 DD E1              1141 	pop	ix
   0449 C9                 1142 	ret
   044A                    1143 _pal_load_end::
                           1144 ;demo.c:147: void pause() {
                           1145 ;	---------------------------------
                           1146 ; Function pause
                           1147 ; ---------------------------------
   044A                    1148 _pause_start::
   044A                    1149 _pause:
                           1150 ;demo.c:148: uint8_t i,j,k = 0;
                           1151 ;demo.c:149: for (i = 0; i < 255; i++) {	
   044A 01 00 00           1152 	ld	bc,#0x0000
   044D                    1153 00104$:
   044D 78                 1154 	ld	a,b
   044E D6 FF              1155 	sub	a,#0xFF
   0450 D0                 1156 	ret	NC
                           1157 ;demo.c:150: for (j = 0; j < 255; j++) {
   0451 59                 1158 	ld	e,c
   0452 16 FF              1159 	ld	d,#0xFF
   0454                    1160 00103$:
                           1161 ;demo.c:151: k++;
   0454 1C                 1162 	inc	e
   0455 15                 1163 	dec	d
                           1164 ;demo.c:150: for (j = 0; j < 255; j++) {
   0456 AF                 1165 	xor	a,a
   0457 B2                 1166 	or	a,d
   0458 20 FA              1167 	jr	NZ,00103$
                           1168 ;demo.c:149: for (i = 0; i < 255; i++) {	
   045A 4B                 1169 	ld	c,e
   045B 04                 1170 	inc	b
   045C 18 EF              1171 	jr	00104$
   045E                    1172 _pause_end::
                           1173 ;demo.c:157: uint8_t raw_load(char *file_name, int size, char* buffer) {
                           1174 ;	---------------------------------
                           1175 ; Function raw_load
                           1176 ; ---------------------------------
   045E                    1177 _raw_load_start::
   045E                    1178 _raw_load:
   045E DD E5              1179 	push	ix
   0460 DD 21 00 00        1180 	ld	ix,#0
   0464 DD 39              1181 	add	ix,sp
   0466 21 D2 FF           1182 	ld	hl,#-46
   0469 39                 1183 	add	hl,sp
   046A F9                 1184 	ld	sp,hl
                           1185 ;demo.c:162: memset((uint8_t *) &f, 0, sizeof(fcb));
   046B 21 00 00           1186 	ld	hl,#0x0000
   046E 39                 1187 	add	hl,sp
   046F 4D                 1188 	ld	c,l
   0470 44                 1189 	ld	b,h
   0471 21 2E 00           1190 	ld	hl,#0x002E
   0474 E5                 1191 	push	hl
   0475 3E 00              1192 	ld	a,#0x00
   0477 F5                 1193 	push	af
   0478 33                 1194 	inc	sp
   0479 C5                 1195 	push	bc
   047A CDr00s00           1196 	call	_memset
   047D F1                 1197 	pop	af
   047E F1                 1198 	pop	af
   047F 33                 1199 	inc	sp
                           1200 ;demo.c:163: scratch_clear();
   0480 CDr97s03           1201 	call	_scratch_clear
                           1202 ;demo.c:165: f.record_size = 128;
   0483 21 00 00           1203 	ld	hl,#0x0000
   0486 39                 1204 	add	hl,sp
   0487 4D                 1205 	ld	c,l
   0488 44                 1206 	ld	b,h
   0489 21 0F 00           1207 	ld	hl,#0x000F
   048C 09                 1208 	add	hl,bc
   048D EB                 1209 	ex	de,hl
   048E 3E 80              1210 	ld	a,#0x80
   0490 12                 1211 	ld	(de),a
                           1212 ;demo.c:166: f.drive = 0;
   0491 3E 00              1213 	ld	a,#0x00
   0493 02                 1214 	ld	(bc),a
                           1215 ;demo.c:168: memcpy(f.name, file_name, 11);
   0494 DD 5E 04           1216 	ld	e,4 (ix)
   0497 DD 56 05           1217 	ld	d,5 (ix)
   049A 03                 1218 	inc	bc
   049B 21 0B 00           1219 	ld	hl,#0x000B
   049E E5                 1220 	push	hl
   049F D5                 1221 	push	de
   04A0 C5                 1222 	push	bc
   04A1 CDr00s00           1223 	call	_memcpy
   04A4 F1                 1224 	pop	af
   04A5 F1                 1225 	pop	af
   04A6 F1                 1226 	pop	af
                           1227 ;demo.c:170: if (open(&f) != 0) return 0;
   04A7 21 00 00           1228 	ld	hl,#0x0000
   04AA 39                 1229 	add	hl,sp
   04AB E5                 1230 	push	hl
   04AC CDr00s00           1231 	call	_open
   04AF F1                 1232 	pop	af
   04B0 AF                 1233 	xor	a,a
   04B1 B5                 1234 	or	a,l
   04B2 28 05              1235 	jr	Z,00116$
   04B4 2E 00              1236 	ld	l,#0x00
   04B6 C3r1Ds05           1237 	jp	00110$
                           1238 ;demo.c:172: while(total < size) {
   04B9                    1239 00116$:
   04B9 01 00 00           1240 	ld	bc,#0x0000
   04BC                    1241 00107$:
   04BC 79                 1242 	ld	a,c
   04BD DD 96 06           1243 	sub	a,6 (ix)
   04C0 78                 1244 	ld	a,b
   04C1 DD 9E 07           1245 	sbc	a,7 (ix)
   04C4 F2r12s05           1246 	jp	P,00109$
                           1247 ;demo.c:173: if (block_set_data_ptr(scratch) != 0) return 0;
   04C7 C5                 1248 	push	bc
   04C8 21r80s3F           1249 	ld	hl,#_scratch
   04CB E5                 1250 	push	hl
   04CC CDr00s00           1251 	call	_block_set_data_ptr
   04CF F1                 1252 	pop	af
   04D0 5D                 1253 	ld	e,l
   04D1 C1                 1254 	pop	bc
   04D2 AF                 1255 	xor	a,a
   04D3 B3                 1256 	or	a,e
   04D4 28 04              1257 	jr	Z,00104$
   04D6 2E 00              1258 	ld	l,#0x00
   04D8 18 43              1259 	jr	00110$
   04DA                    1260 00104$:
                           1261 ;demo.c:174: if (block_read(&f) != 0) return 0;
   04DA 21 00 00           1262 	ld	hl,#0x0000
   04DD 39                 1263 	add	hl,sp
   04DE C5                 1264 	push	bc
   04DF E5                 1265 	push	hl
   04E0 CDr00s00           1266 	call	_block_read
   04E3 F1                 1267 	pop	af
   04E4 5D                 1268 	ld	e,l
   04E5 C1                 1269 	pop	bc
   04E6 AF                 1270 	xor	a,a
   04E7 B3                 1271 	or	a,e
   04E8 28 04              1272 	jr	Z,00106$
   04EA 2E 00              1273 	ld	l,#0x00
   04EC 18 2F              1274 	jr	00110$
   04EE                    1275 00106$:
                           1276 ;demo.c:176: memcpy(buffer+total,scratch,incr);
   04EE DD 7E 08           1277 	ld	a,8 (ix)
   04F1 81                 1278 	add	a,c
   04F2 5F                 1279 	ld	e,a
   04F3 DD 7E 09           1280 	ld	a,9 (ix)
   04F6 88                 1281 	adc	a,b
   04F7 57                 1282 	ld	d,a
   04F8 C5                 1283 	push	bc
   04F9 21 80 00           1284 	ld	hl,#0x0080
   04FC E5                 1285 	push	hl
   04FD 21r80s3F           1286 	ld	hl,#_scratch
   0500 E5                 1287 	push	hl
   0501 D5                 1288 	push	de
   0502 CDr00s00           1289 	call	_memcpy
   0505 F1                 1290 	pop	af
   0506 F1                 1291 	pop	af
   0507 F1                 1292 	pop	af
   0508 C1                 1293 	pop	bc
                           1294 ;demo.c:178: total+=incr;
   0509 21 80 00           1295 	ld	hl,#0x0080
   050C 09                 1296 	add	hl,bc
   050D 4D                 1297 	ld	c,l
   050E 44                 1298 	ld	b,h
   050F C3rBCs04           1299 	jp	00107$
   0512                    1300 00109$:
                           1301 ;demo.c:181: close(&f);
   0512 21 00 00           1302 	ld	hl,#0x0000
   0515 39                 1303 	add	hl,sp
   0516 E5                 1304 	push	hl
   0517 CDr00s00           1305 	call	_close
   051A F1                 1306 	pop	af
                           1307 ;demo.c:183: return 1;
   051B 2E 01              1308 	ld	l,#0x01
   051D                    1309 00110$:
   051D DD F9              1310 	ld	sp,ix
   051F DD E1              1311 	pop	ix
   0521 C9                 1312 	ret
   0522                    1313 _raw_load_end::
                           1314 ;demo.c:186: void fadein() {
                           1315 ;	---------------------------------
                           1316 ; Function fadein
                           1317 ; ---------------------------------
   0522                    1318 _fadein_start::
   0522                    1319 _fadein:
   0522 DD E5              1320 	push	ix
   0524 DD 21 00 00        1321 	ld	ix,#0
   0528 DD 39              1322 	add	ix,sp
   052A F5                 1323 	push	af
                           1324 ;demo.c:189: if (tick < 4) return;
   052B 3Ar42s40           1325 	ld	a,(#_tick+0)
   052E D6 04              1326 	sub	a,#0x04
   0530 3Ar43s40           1327 	ld	a,(#_tick+1)
   0533 DE 00              1328 	sbc	a,#0x00
   0535 F2r3Bs05           1329 	jp	P,00102$
   0538 C3rE9s05           1330 	jp	00113$
   053B                    1331 00102$:
                           1332 ;demo.c:191: tick = 0;
   053B 21r42s40           1333 	ld	hl,#_tick + 0
   053E 36 00              1334 	ld	(hl), #0x00
   0540 21r43s40           1335 	ld	hl,#_tick + 1
   0543 36 00              1336 	ld	(hl), #0x00
                           1337 ;demo.c:193: for(i = 0; i < 32; i+=2) {
   0545 0E 00              1338 	ld	c,#0x00
   0547                    1339 00109$:
   0547 79                 1340 	ld	a,c
   0548 D6 20              1341 	sub	a,#0x20
   054A D2rE1s05           1342 	jp	NC,00112$
                           1343 ;demo.c:194: uint8_t r = scratch[i] >> 4;
   054D 3Er80              1344 	ld	a,#<_scratch
   054F 81                 1345 	add	a,c
   0550 5F                 1346 	ld	e,a
   0551 3Es3F              1347 	ld	a,#>_scratch
   0553 CE 00              1348 	adc	a,#0x00
   0555 57                 1349 	ld	d,a
   0556 1A                 1350 	ld	a,(de)
   0557 47                 1351 	ld	b,a
   0558 58                 1352 	ld	e,b
   0559 CB 3B              1353 	srl	e
   055B CB 3B              1354 	srl	e
   055D CB 3B              1355 	srl	e
   055F CB 3B              1356 	srl	e
                           1357 ;demo.c:195: uint8_t b = scratch[i] & 0xf;
   0561 78                 1358 	ld	a,b
   0562 E6 0F              1359 	and	a,#0x0F
   0564 DD 77 FF           1360 	ld	-1 (ix),a
                           1361 ;demo.c:196: uint8_t g = scratch[i+1];
   0567 51                 1362 	ld	d,c
   0568 14                 1363 	inc	d
   0569 3Er80              1364 	ld	a,#<_scratch
   056B 82                 1365 	add	a,d
   056C 6F                 1366 	ld	l,a
   056D 3Es3F              1367 	ld	a,#>_scratch
   056F CE 00              1368 	adc	a,#0x00
   0571 67                 1369 	ld	h,a
   0572 56                 1370 	ld	d,(hl)
   0573 DD 72 FE           1371 	ld	-2 (ix),d
                           1372 ;demo.c:198: if (r < (cur_palette[i] >> 4)) r++;
   0576 3Er00              1373 	ld	a,#<_cur_palette
   0578 81                 1374 	add	a,c
   0579 6F                 1375 	ld	l,a
   057A 3Es40              1376 	ld	a,#>_cur_palette
   057C CE 00              1377 	adc	a,#0x00
   057E 67                 1378 	ld	h,a
   057F 56                 1379 	ld	d,(hl)
   0580 CB 3A              1380 	srl	d
   0582 CB 3A              1381 	srl	d
   0584 CB 3A              1382 	srl	d
   0586 CB 3A              1383 	srl	d
   0588 7B                 1384 	ld	a,e
   0589 92                 1385 	sub	a,d
   058A 30 01              1386 	jr	NC,00104$
   058C 1C                 1387 	inc	e
   058D                    1388 00104$:
                           1389 ;demo.c:199: if (b < (cur_palette[i] & 0xf)) b++;
   058D 3Er00              1390 	ld	a,#<_cur_palette
   058F 81                 1391 	add	a,c
   0590 6F                 1392 	ld	l,a
   0591 3Es40              1393 	ld	a,#>_cur_palette
   0593 CE 00              1394 	adc	a,#0x00
   0595 67                 1395 	ld	h,a
   0596 7E                 1396 	ld	a,(hl)
   0597 E6 0F              1397 	and	a,#0x0F
   0599 47                 1398 	ld	b,a
   059A DD 7E FF           1399 	ld	a,-1 (ix)
   059D 90                 1400 	sub	a,b
   059E 30 03              1401 	jr	NC,00106$
   05A0 DD 34 FF           1402 	inc	-1 (ix)
   05A3                    1403 00106$:
                           1404 ;demo.c:201: scratch[i] = (r << 4) | b;
   05A3 3Er80              1405 	ld	a,#<_scratch
   05A5 81                 1406 	add	a,c
   05A6 47                 1407 	ld	b,a
   05A7 3Es3F              1408 	ld	a,#>_scratch
   05A9 CE 00              1409 	adc	a,#0x00
   05AB 57                 1410 	ld	d,a
   05AC 7B                 1411 	ld	a,e
   05AD 07                 1412 	rlca
   05AE 07                 1413 	rlca
   05AF 07                 1414 	rlca
   05B0 07                 1415 	rlca
   05B1 E6 F0              1416 	and	a,#0xF0
   05B3 DD B6 FF           1417 	or	a,-1 (ix)
   05B6 68                 1418 	ld	l,b
   05B7 62                 1419 	ld	h,d
   05B8 77                 1420 	ld	(hl),a
                           1421 ;demo.c:202: if (g < cur_palette[i+1]) scratch[i+1]++;
   05B9 41                 1422 	ld	b,c
   05BA 04                 1423 	inc	b
   05BB 3Er00              1424 	ld	a,#<_cur_palette
   05BD 80                 1425 	add	a,b
   05BE 5F                 1426 	ld	e,a
   05BF 3Es40              1427 	ld	a,#>_cur_palette
   05C1 CE 00              1428 	adc	a,#0x00
   05C3 57                 1429 	ld	d,a
   05C4 1A                 1430 	ld	a,(de)
   05C5 5F                 1431 	ld	e,a
   05C6 DD 7E FE           1432 	ld	a,-2 (ix)
   05C9 93                 1433 	sub	a,e
   05CA 30 10              1434 	jr	NC,00111$
   05CC 3Er80              1435 	ld	a,#<_scratch
   05CE 80                 1436 	add	a,b
   05CF 47                 1437 	ld	b,a
   05D0 3Es3F              1438 	ld	a,#>_scratch
   05D2 CE 00              1439 	adc	a,#0x00
   05D4 5F                 1440 	ld	e,a
   05D5 68                 1441 	ld	l,b
   05D6 67                 1442 	ld	h,a
   05D7 7E                 1443 	ld	a,(hl)
   05D8 3C                 1444 	inc	a
   05D9 68                 1445 	ld	l,b
   05DA 63                 1446 	ld	h,e
   05DB 77                 1447 	ld	(hl),a
   05DC                    1448 00111$:
                           1449 ;demo.c:193: for(i = 0; i < 32; i+=2) {
   05DC 0C                 1450 	inc	c
   05DD 0C                 1451 	inc	c
   05DE C3r47s05           1452 	jp	00109$
   05E1                    1453 00112$:
                           1454 ;demo.c:206: vdp_load_palette(scratch);
   05E1 21r80s3F           1455 	ld	hl,#_scratch
   05E4 E5                 1456 	push	hl
   05E5 CDr00s00           1457 	call	_vdp_load_palette
   05E8 F1                 1458 	pop	af
   05E9                    1459 00113$:
   05E9 DD F9              1460 	ld	sp,ix
   05EB DD E1              1461 	pop	ix
   05ED C9                 1462 	ret
   05EE                    1463 _fadein_end::
                           1464 ;demo.c:218: void do_ymmm() {
                           1465 ;	---------------------------------
                           1466 ; Function do_ymmm
                           1467 ; ---------------------------------
   05EE                    1468 _do_ymmm_start::
   05EE                    1469 _do_ymmm:
   05EE DD E5              1470 	push	ix
   05F0 DD 21 00 00        1471 	ld	ix,#0
   05F4 DD 39              1472 	add	ix,sp
   05F6 21 EB FF           1473 	ld	hl,#-21
   05F9 39                 1474 	add	hl,sp
   05FA F9                 1475 	ld	sp,hl
                           1476 ;demo.c:223: if (tick > 32) { tick = 0; flipper++;}
   05FB 3E 20              1477 	ld	a,#0x20
   05FD FD 21r42s40        1478 	ld	iy,#_tick
   0601 FD 96 00           1479 	sub	a,0 (iy)
   0604 3E 00              1480 	ld	a,#0x00
   0606 FD 21r42s40        1481 	ld	iy,#_tick
   060A FD 9E 01           1482 	sbc	a,1 (iy)
   060D F2r2As06           1483 	jp	P,00102$
   0610 21r42s40           1484 	ld	hl,#_tick + 0
   0613 36 00              1485 	ld	(hl), #0x00
   0615 21r43s40           1486 	ld	hl,#_tick + 1
   0618 36 00              1487 	ld	(hl), #0x00
   061A FD 21r4Es40        1488 	ld	iy,#_flipper
   061E FD 34 00           1489 	inc	0 (iy)
   0621 20 07              1490 	jr	NZ,00115$
   0623 FD 21r4Es40        1491 	ld	iy,#_flipper
   0627 FD 34 01           1492 	inc	1 (iy)
   062A                    1493 00115$:
   062A                    1494 00102$:
                           1495 ;demo.c:224: if (flipper > 10) { flipper = 0;}
   062A 3E 0A              1496 	ld	a,#0x0A
   062C FD 21r4Es40        1497 	ld	iy,#_flipper
   0630 FD 96 00           1498 	sub	a,0 (iy)
   0633 3E 00              1499 	ld	a,#0x00
   0635 FD 21r4Es40        1500 	ld	iy,#_flipper
   0639 FD 9E 01           1501 	sbc	a,1 (iy)
   063C F2r49s06           1502 	jp	P,00104$
   063F 21r4Es40           1503 	ld	hl,#_flipper + 0
   0642 36 00              1504 	ld	(hl), #0x00
   0644 21r4Fs40           1505 	ld	hl,#_flipper + 1
   0647 36 00              1506 	ld	(hl), #0x00
   0649                    1507 00104$:
                           1508 ;demo.c:226: ymmmf++;
   0649 FD 21r50s40        1509 	ld	iy,#_ymmmf
   064D FD 34 00           1510 	inc	0 (iy)
   0650 20 07              1511 	jr	NZ,00116$
   0652 FD 21r50s40        1512 	ld	iy,#_ymmmf
   0656 FD 34 01           1513 	inc	1 (iy)
   0659                    1514 00116$:
                           1515 ;demo.c:227: for (yofff = 0; yofff<212-step;yofff+=step) {
   0659 21r4Cs40           1516 	ld	hl,#_yofff + 0
   065C 36 00              1517 	ld	(hl), #0x00
   065E                    1518 00105$:
   065E 3Ar4Cs40           1519 	ld	a,(#_yofff+0)
   0661 DD 77 ED           1520 	ld	-19 (ix),a
   0664 DD 36 EE 00        1521 	ld	-18 (ix),#0x00
   0668 DD 7E ED           1522 	ld	a,-19 (ix)
   066B D6 D2              1523 	sub	a,#0xD2
   066D DD 7E EE           1524 	ld	a,-18 (ix)
   0670 DE 00              1525 	sbc	a,#0x00
   0672 F2r1Es07           1526 	jp	P,00109$
                           1527 ;demo.c:228: xo = (sintabx[(yofff+ymmmf) & 255]);
   0675 21r50s40           1528 	ld	hl,#_ymmmf
   0678 DD 7E ED           1529 	ld	a,-19 (ix)
   067B 86                 1530 	add	a,(hl)
   067C 5F                 1531 	ld	e,a
   067D DD 7E EE           1532 	ld	a,-18 (ix)
   0680 23                 1533 	inc	hl
   0681 8E                 1534 	adc	a,(hl)
   0682 16 00              1535 	ld	d,#0x00
   0684 CB 23              1536 	sla	e
   0686 CB 12              1537 	rl	d
   0688 21r2Cs00           1538 	ld	hl,#_sintabx
   068B 19                 1539 	add	hl,de
   068C 5E                 1540 	ld	e,(hl)
   068D 23                 1541 	inc	hl
   068E 56                 1542 	ld	d,(hl)
   068F DD 73 EF           1543 	ld	-17 (ix),e
   0692 DD 72 F0           1544 	ld	-16 (ix),d
                           1545 ;demo.c:231: cmd.source_x = 0;
   0695 21 06 00           1546 	ld	hl,#0x0006
   0698 39                 1547 	add	hl,sp
   0699 36 00              1548 	ld	(hl),#0x00
   069B 23                 1549 	inc	hl
   069C 36 00              1550 	ld	(hl),#0x00
                           1551 ;demo.c:232: cmd.source_y = 0+yofff;
   069E 21 06 00           1552 	ld	hl,#0x0006
   06A1 39                 1553 	add	hl,sp
   06A2 EB                 1554 	ex	de,hl
   06A3 4B                 1555 	ld	c,e
   06A4 42                 1556 	ld	b,d
   06A5 69                 1557 	ld	l,c
   06A6 60                 1558 	ld	h,b
   06A7 23                 1559 	inc	hl
   06A8 23                 1560 	inc	hl
   06A9 DD 7E ED           1561 	ld	a,-19 (ix)
   06AC 77                 1562 	ld	(hl),a
   06AD 23                 1563 	inc	hl
   06AE DD 7E EE           1564 	ld	a,-18 (ix)
   06B1 77                 1565 	ld	(hl),a
                           1566 ;demo.c:233: cmd.dest_x = xo;
   06B2 21 04 00           1567 	ld	hl,#0x0004
   06B5 19                 1568 	add	hl,de
   06B6 DD 7E EF           1569 	ld	a,-17 (ix)
   06B9 77                 1570 	ld	(hl),a
   06BA 23                 1571 	inc	hl
   06BB DD 7E F0           1572 	ld	a,-16 (ix)
   06BE 77                 1573 	ld	(hl),a
                           1574 ;demo.c:234: cmd.dest_y = 3+yofff;
   06BF 21 06 00           1575 	ld	hl,#0x0006
   06C2 19                 1576 	add	hl,de
   06C3 DD 75 EB           1577 	ld	-21 (ix),l
   06C6 DD 74 EC           1578 	ld	-20 (ix),h
   06C9 DD 7E ED           1579 	ld	a,-19 (ix)
   06CC C6 03              1580 	add	a,#0x03
   06CE 4F                 1581 	ld	c,a
   06CF DD 7E EE           1582 	ld	a,-18 (ix)
   06D2 CE 00              1583 	adc	a,#0x00
   06D4 47                 1584 	ld	b,a
   06D5 DD 6E EB           1585 	ld	l,-21 (ix)
   06D8 DD 66 EC           1586 	ld	h,-20 (ix)
   06DB 71                 1587 	ld	(hl),c
   06DC 23                 1588 	inc	hl
   06DD 70                 1589 	ld	(hl),b
                           1590 ;demo.c:235: cmd.size_x = 256;
   06DE 21 08 00           1591 	ld	hl,#0x0008
   06E1 19                 1592 	add	hl,de
   06E2 36 00              1593 	ld	(hl),#0x00
   06E4 23                 1594 	inc	hl
   06E5 36 01              1595 	ld	(hl),#0x01
                           1596 ;demo.c:236: cmd.size_y = 1;
   06E7 21 0A 00           1597 	ld	hl,#0x000A
   06EA 19                 1598 	add	hl,de
   06EB 36 01              1599 	ld	(hl),#0x01
   06ED 23                 1600 	inc	hl
   06EE 36 00              1601 	ld	(hl),#0x00
                           1602 ;demo.c:237: cmd.data = 0;
   06F0 21 0C 00           1603 	ld	hl,#0x000C
   06F3 19                 1604 	add	hl,de
   06F4 4D                 1605 	ld	c,l
   06F5 44                 1606 	ld	b,h
   06F6 3E 00              1607 	ld	a,#0x00
   06F8 02                 1608 	ld	(bc),a
                           1609 ;demo.c:238: cmd.argument = 0;
   06F9 21 0D 00           1610 	ld	hl,#0x000D
   06FC 19                 1611 	add	hl,de
   06FD 4D                 1612 	ld	c,l
   06FE 44                 1613 	ld	b,h
   06FF 3E 00              1614 	ld	a,#0x00
   0701 02                 1615 	ld	(bc),a
                           1616 ;demo.c:239: cmd.command = 0xD0;
   0702 21 0E 00           1617 	ld	hl,#0x000E
   0705 19                 1618 	add	hl,de
   0706 4D                 1619 	ld	c,l
   0707 44                 1620 	ld	b,h
   0708 3E D0              1621 	ld	a,#0xD0
   070A 02                 1622 	ld	(bc),a
                           1623 ;demo.c:242: vdp_copier(&cmd);
   070B D5                 1624 	push	de
   070C CDr00s00           1625 	call	_vdp_copier
   070F F1                 1626 	pop	af
                           1627 ;demo.c:227: for (yofff = 0; yofff<212-step;yofff+=step) {
   0710 21r4Cs40           1628 	ld	hl,#_yofff + 0
   0713 4E                 1629 	ld	c,(hl)
   0714 21r4Cs40           1630 	ld	hl,#_yofff
   0717 79                 1631 	ld	a,c
   0718 C6 02              1632 	add	a,#0x02
   071A 77                 1633 	ld	(hl),a
   071B C3r5Es06           1634 	jp	00105$
   071E                    1635 00109$:
   071E DD F9              1636 	ld	sp,ix
   0720 DD E1              1637 	pop	ix
   0722 C9                 1638 	ret
   0723                    1639 _do_ymmm_end::
                           1640 ;demo.c:259: void do_blocks() {
                           1641 ;	---------------------------------
                           1642 ; Function do_blocks
                           1643 ; ---------------------------------
   0723                    1644 _do_blocks_start::
   0723                    1645 _do_blocks:
   0723 DD E5              1646 	push	ix
   0725 DD 21 00 00        1647 	ld	ix,#0
   0729 DD 39              1648 	add	ix,sp
   072B 21 E9 FF           1649 	ld	hl,#-23
   072E 39                 1650 	add	hl,sp
   072F F9                 1651 	ld	sp,hl
                           1652 ;demo.c:262: int ys = 0;
   0730 DD 36 ED 00        1653 	ld	-19 (ix),#0x00
   0734 DD 36 EE 00        1654 	ld	-18 (ix),#0x00
                           1655 ;demo.c:263: int ye = 0;
   0738 DD 36 EB 00        1656 	ld	-21 (ix),#0x00
   073C DD 36 EC 00        1657 	ld	-20 (ix),#0x00
                           1658 ;demo.c:265: vdp_register(VDP_VOFFSET,0);
   0740 21 17 00           1659 	ld	hl,#0x0017
   0743 E5                 1660 	push	hl
   0744 CDr00s00           1661 	call	_vdp_register
   0747 F1                 1662 	pop	af
                           1663 ;demo.c:267: if (block_init == 0) {
   0748 AF                 1664 	xor	a,a
   0749 FD 21r52s40        1665 	ld	iy,#_block_init
   074D FD B6 00           1666 	or	a,0 (iy)
   0750 C2rB8s07           1667 	jp	NZ,00108$
                           1668 ;demo.c:269: vdp_set_screen5();
   0753 CDr00s00           1669 	call	_vdp_set_screen5
                           1670 ;demo.c:271: vdp_register(2, 0x5F);
   0756 21 02 5F           1671 	ld	hl,#0x5F02
   0759 E5                 1672 	push	hl
   075A CDr00s00           1673 	call	_vdp_register
   075D F1                 1674 	pop	af
                           1675 ;demo.c:273: for(i=0;i<16;i++) btab[i] = i*16;
   075E DD 36 EF 00        1676 	ld	-17 (ix),#0x00
   0762 DD 36 F0 00        1677 	ld	-16 (ix),#0x00
   0766                    1678 00110$:
   0766 DD 7E EF           1679 	ld	a,-17 (ix)
   0769 D6 10              1680 	sub	a,#0x10
   076B DD 7E F0           1681 	ld	a,-16 (ix)
   076E DE 00              1682 	sbc	a,#0x00
   0770 F2rA8s07           1683 	jp	P,00113$
   0773 DD 4E EF           1684 	ld	c,-17 (ix)
   0776 DD 46 F0           1685 	ld	b,-16 (ix)
   0779 CB 21              1686 	sla	c
   077B CB 10              1687 	rl	b
   077D 21r5Bs40           1688 	ld	hl,#_btab
   0780 09                 1689 	add	hl,bc
   0781 4D                 1690 	ld	c,l
   0782 44                 1691 	ld	b,h
   0783 DD 5E EF           1692 	ld	e,-17 (ix)
   0786 DD 56 F0           1693 	ld	d,-16 (ix)
   0789 CB 23              1694 	sla	e
   078B CB 12              1695 	rl	d
   078D CB 23              1696 	sla	e
   078F CB 12              1697 	rl	d
   0791 CB 23              1698 	sla	e
   0793 CB 12              1699 	rl	d
   0795 CB 23              1700 	sla	e
   0797 CB 12              1701 	rl	d
   0799 69                 1702 	ld	l,c
   079A 60                 1703 	ld	h,b
   079B 73                 1704 	ld	(hl),e
   079C 23                 1705 	inc	hl
   079D 72                 1706 	ld	(hl),d
   079E DD 34 EF           1707 	inc	-17 (ix)
   07A1 20 03              1708 	jr	NZ,00139$
   07A3 DD 34 F0           1709 	inc	-16 (ix)
   07A6                    1710 00139$:
   07A6 18 BE              1711 	jr	00110$
   07A8                    1712 00113$:
                           1713 ;demo.c:274: vdp_load_palette(block_palette);
   07A8 21r20s40           1714 	ld	hl,#_block_palette
   07AB E5                 1715 	push	hl
   07AC CDr00s00           1716 	call	_vdp_load_palette
   07AF F1                 1717 	pop	af
                           1718 ;demo.c:276: block_init = 1;
   07B0 21r52s40           1719 	ld	hl,#_block_init + 0
   07B3 36 01              1720 	ld	(hl), #0x01
   07B5 C3r77s09           1721 	jp	00122$
   07B8                    1722 00108$:
                           1723 ;demo.c:280: if (flof == 0) { ys = 0; ye = 8; }
   07B8 3Ar7Bs40           1724 	ld	a,(#_flof+0)
   07BB FD 21r7Bs40        1725 	ld	iy,#_flof
   07BF FD B6 01           1726 	or	a,1 (iy)
   07C2 20 10              1727 	jr	NZ,00102$
   07C4 DD 36 ED 00        1728 	ld	-19 (ix),#0x00
   07C8 DD 36 EE 00        1729 	ld	-18 (ix),#0x00
   07CC DD 36 EB 08        1730 	ld	-21 (ix),#0x08
   07D0 DD 36 EC 00        1731 	ld	-20 (ix),#0x00
   07D4                    1732 00102$:
                           1733 ;demo.c:281: if (flof == 1) { ys = 8; ye = 16; }
   07D4 3Ar7Bs40           1734 	ld	a,(#_flof+0)
   07D7 D6 01              1735 	sub	a,#0x01
   07D9 20 06              1736 	jr	NZ,00140$
   07DB 3Ar7Cs40           1737 	ld	a,(#_flof+1)
   07DE B7                 1738 	or	a,a
   07DF 28 02              1739 	jr	Z,00141$
   07E1                    1740 00140$:
   07E1 18 10              1741 	jr	00104$
   07E3                    1742 00141$:
   07E3 DD 36 ED 08        1743 	ld	-19 (ix),#0x08
   07E7 DD 36 EE 00        1744 	ld	-18 (ix),#0x00
   07EB DD 36 EB 10        1745 	ld	-21 (ix),#0x10
   07EF DD 36 EC 00        1746 	ld	-20 (ix),#0x00
   07F3                    1747 00104$:
                           1748 ;demo.c:283: for(bty=3;bty<11;bty++) {
   07F3 FD 21r59s40        1749 	ld	iy,#_bty
   07F7 FD 36 00 03        1750 	ld	0 (iy),#0x03
   07FB FD 21r59s40        1751 	ld	iy,#_bty
   07FF FD 36 01 00        1752 	ld	1 (iy),#0x00
   0803                    1753 00118$:
   0803 3Ar59s40           1754 	ld	a,(#_bty+0)
   0806 D6 0B              1755 	sub	a,#0x0B
   0808 3Ar5As40           1756 	ld	a,(#_bty+1)
   080B DE 00              1757 	sbc	a,#0x00
   080D F2r4Es09           1758 	jp	P,00121$
                           1759 ;demo.c:284: for(btx=ys;btx<ye;btx++) {
   0810 DD 7E ED           1760 	ld	a,-19 (ix)
   0813 FD 21r57s40        1761 	ld	iy,#_btx
   0817 FD 77 00           1762 	ld	0 (iy),a
   081A DD 7E EE           1763 	ld	a,-18 (ix)
   081D FD 21r57s40        1764 	ld	iy,#_btx
   0821 FD 77 01           1765 	ld	1 (iy),a
   0824                    1766 00114$:
   0824 3Ar57s40           1767 	ld	a,(#_btx+0)
   0827 DD 96 EB           1768 	sub	a,-21 (ix)
   082A 3Ar58s40           1769 	ld	a,(#_btx+1)
   082D DD 9E EC           1770 	sbc	a,-20 (ix)
   0830 F2r3Bs09           1771 	jp	P,00120$
                           1772 ;demo.c:285: bsx = (PLY_PSGReg8 & PLY_PSGReg9 | PLY_PSGReg10)>>1;
   0833 3Ar00s00           1773 	ld	a,(#_PLY_PSGReg8+0)
   0836 FD 21r00s00        1774 	ld	iy,#_PLY_PSGReg9
   083A FD A6 00           1775 	and	a,0 (iy)
   083D 21r00s00           1776 	ld	hl,#_PLY_PSGReg10 + 0
   0840 B6                 1777 	or	a,(hl)
   0841 4F                 1778 	ld	c,a
   0842 CB 39              1779 	srl	c
   0844 21r53s40           1780 	ld	hl,#_bsx + 0
   0847 71                 1781 	ld	(hl), c
   0848 21r54s40           1782 	ld	hl,#_bsx + 1
   084B 36 00              1783 	ld	(hl), #0x00
                           1784 ;demo.c:286: bsy = PLY_PSGReg10;
   084D 3Ar00s00           1785 	ld	a,(#_PLY_PSGReg10+0)
   0850 21r55s40           1786 	ld	hl,#_bsy + 0
   0853 77                 1787 	ld	(hl), a
   0854 21r56s40           1788 	ld	hl,#_bsy + 1
   0857 36 00              1789 	ld	(hl), #0x00
                           1790 ;demo.c:287: cmd.source_x = btab[bsx];
   0859 21 08 00           1791 	ld	hl,#0x0008
   085C 39                 1792 	add	hl,sp
   085D 4D                 1793 	ld	c,l
   085E 44                 1794 	ld	b,h
   085F 21r53s40           1795 	ld	hl,#_bsx + 0
   0862 5E                 1796 	ld	e,(hl)
   0863 21r54s40           1797 	ld	hl,#_bsx + 1
   0866 56                 1798 	ld	d,(hl)
   0867 CB 23              1799 	sla	e
   0869 CB 12              1800 	rl	d
   086B 21r5Bs40           1801 	ld	hl,#_btab
   086E 19                 1802 	add	hl,de
   086F 5E                 1803 	ld	e,(hl)
   0870 23                 1804 	inc	hl
   0871 56                 1805 	ld	d,(hl)
   0872 69                 1806 	ld	l,c
   0873 60                 1807 	ld	h,b
   0874 73                 1808 	ld	(hl),e
   0875 23                 1809 	inc	hl
   0876 72                 1810 	ld	(hl),d
                           1811 ;demo.c:288: cmd.source_y = 768+btab[bsy];
   0877 21 08 00           1812 	ld	hl,#0x0008
   087A 39                 1813 	add	hl,sp
   087B 4D                 1814 	ld	c,l
   087C 44                 1815 	ld	b,h
   087D 21 02 00           1816 	ld	hl,#0x0002
   0880 09                 1817 	add	hl,bc
   0881 DD 75 E9           1818 	ld	-23 (ix),l
   0884 DD 74 EA           1819 	ld	-22 (ix),h
   0887 21r55s40           1820 	ld	hl,#_bsy + 0
   088A 5E                 1821 	ld	e,(hl)
   088B 21r56s40           1822 	ld	hl,#_bsy + 1
   088E 56                 1823 	ld	d,(hl)
   088F CB 23              1824 	sla	e
   0891 CB 12              1825 	rl	d
   0893 21r5Bs40           1826 	ld	hl,#_btab
   0896 19                 1827 	add	hl,de
   0897 5E                 1828 	ld	e,(hl)
   0898 23                 1829 	inc	hl
   0899 56                 1830 	ld	d,(hl)
   089A 21 00 03           1831 	ld	hl,#0x0300
   089D 19                 1832 	add	hl,de
   089E EB                 1833 	ex	de,hl
   089F DD 6E E9           1834 	ld	l,-23 (ix)
   08A2 DD 66 EA           1835 	ld	h,-22 (ix)
   08A5 73                 1836 	ld	(hl),e
   08A6 23                 1837 	inc	hl
   08A7 72                 1838 	ld	(hl),d
                           1839 ;demo.c:289: cmd.dest_x = btab[btx];
   08A8 21 04 00           1840 	ld	hl,#0x0004
   08AB 09                 1841 	add	hl,bc
   08AC DD 75 E9           1842 	ld	-23 (ix),l
   08AF DD 74 EA           1843 	ld	-22 (ix),h
   08B2 21r57s40           1844 	ld	hl,#_btx + 0
   08B5 5E                 1845 	ld	e,(hl)
   08B6 21r58s40           1846 	ld	hl,#_btx + 1
   08B9 56                 1847 	ld	d,(hl)
   08BA CB 23              1848 	sla	e
   08BC CB 12              1849 	rl	d
   08BE 21r5Bs40           1850 	ld	hl,#_btab
   08C1 19                 1851 	add	hl,de
   08C2 5E                 1852 	ld	e,(hl)
   08C3 23                 1853 	inc	hl
   08C4 56                 1854 	ld	d,(hl)
   08C5 DD 6E E9           1855 	ld	l,-23 (ix)
   08C8 DD 66 EA           1856 	ld	h,-22 (ix)
   08CB 73                 1857 	ld	(hl),e
   08CC 23                 1858 	inc	hl
   08CD 72                 1859 	ld	(hl),d
                           1860 ;demo.c:290: cmd.dest_y = 512+btab[bty];
   08CE 21 06 00           1861 	ld	hl,#0x0006
   08D1 09                 1862 	add	hl,bc
   08D2 DD 75 E9           1863 	ld	-23 (ix),l
   08D5 DD 74 EA           1864 	ld	-22 (ix),h
   08D8 21r59s40           1865 	ld	hl,#_bty + 0
   08DB 5E                 1866 	ld	e,(hl)
   08DC 21r5As40           1867 	ld	hl,#_bty + 1
   08DF 56                 1868 	ld	d,(hl)
   08E0 CB 23              1869 	sla	e
   08E2 CB 12              1870 	rl	d
   08E4 21r5Bs40           1871 	ld	hl,#_btab
   08E7 19                 1872 	add	hl,de
   08E8 5E                 1873 	ld	e,(hl)
   08E9 23                 1874 	inc	hl
   08EA 56                 1875 	ld	d,(hl)
   08EB 21 00 02           1876 	ld	hl,#0x0200
   08EE 19                 1877 	add	hl,de
   08EF EB                 1878 	ex	de,hl
   08F0 DD 6E E9           1879 	ld	l,-23 (ix)
   08F3 DD 66 EA           1880 	ld	h,-22 (ix)
   08F6 73                 1881 	ld	(hl),e
   08F7 23                 1882 	inc	hl
   08F8 72                 1883 	ld	(hl),d
                           1884 ;demo.c:291: cmd.size_x = 16;
   08F9 21 08 00           1885 	ld	hl,#0x0008
   08FC 09                 1886 	add	hl,bc
   08FD 36 10              1887 	ld	(hl),#0x10
   08FF 23                 1888 	inc	hl
   0900 36 00              1889 	ld	(hl),#0x00
                           1890 ;demo.c:292: cmd.size_y = 16;
   0902 21 0A 00           1891 	ld	hl,#0x000A
   0905 09                 1892 	add	hl,bc
   0906 36 10              1893 	ld	(hl),#0x10
   0908 23                 1894 	inc	hl
   0909 36 00              1895 	ld	(hl),#0x00
                           1896 ;demo.c:293: cmd.data = 0;
   090B 21 0C 00           1897 	ld	hl,#0x000C
   090E 09                 1898 	add	hl,bc
   090F EB                 1899 	ex	de,hl
   0910 3E 00              1900 	ld	a,#0x00
   0912 12                 1901 	ld	(de),a
                           1902 ;demo.c:294: cmd.argument = 0x00;
   0913 21 0D 00           1903 	ld	hl,#0x000D
   0916 09                 1904 	add	hl,bc
   0917 EB                 1905 	ex	de,hl
   0918 3E 00              1906 	ld	a,#0x00
   091A 12                 1907 	ld	(de),a
                           1908 ;demo.c:295: cmd.command = 0xD0;
   091B 21 0E 00           1909 	ld	hl,#0x000E
   091E 09                 1910 	add	hl,bc
   091F EB                 1911 	ex	de,hl
   0920 3E D0              1912 	ld	a,#0xD0
   0922 12                 1913 	ld	(de),a
                           1914 ;demo.c:296: vdp_copier(&cmd);
   0923 C5                 1915 	push	bc
   0924 CDr00s00           1916 	call	_vdp_copier
   0927 F1                 1917 	pop	af
                           1918 ;demo.c:284: for(btx=ys;btx<ye;btx++) {
   0928 FD 21r57s40        1919 	ld	iy,#_btx
   092C FD 34 00           1920 	inc	0 (iy)
   092F 20 07              1921 	jr	NZ,00150$
   0931 FD 21r57s40        1922 	ld	iy,#_btx
   0935 FD 34 01           1923 	inc	1 (iy)
   0938                    1924 00150$:
   0938 C3r24s08           1925 	jp	00114$
   093B                    1926 00120$:
                           1927 ;demo.c:283: for(bty=3;bty<11;bty++) {
   093B FD 21r59s40        1928 	ld	iy,#_bty
   093F FD 34 00           1929 	inc	0 (iy)
   0942 20 07              1930 	jr	NZ,00151$
   0944 FD 21r59s40        1931 	ld	iy,#_bty
   0948 FD 34 01           1932 	inc	1 (iy)
   094B                    1933 00151$:
   094B C3r03s08           1934 	jp	00118$
   094E                    1935 00121$:
                           1936 ;demo.c:300: flof++;
   094E FD 21r7Bs40        1937 	ld	iy,#_flof
   0952 FD 34 00           1938 	inc	0 (iy)
   0955 20 07              1939 	jr	NZ,00152$
   0957 FD 21r7Bs40        1940 	ld	iy,#_flof
   095B FD 34 01           1941 	inc	1 (iy)
   095E                    1942 00152$:
                           1943 ;demo.c:301: if (flof == 2) flof = 0;
   095E 3Ar7Bs40           1944 	ld	a,(#_flof+0)
   0961 D6 02              1945 	sub	a,#0x02
   0963 20 06              1946 	jr	NZ,00153$
   0965 3Ar7Cs40           1947 	ld	a,(#_flof+1)
   0968 B7                 1948 	or	a,a
   0969 28 02              1949 	jr	Z,00154$
   096B                    1950 00153$:
   096B 18 0A              1951 	jr	00122$
   096D                    1952 00154$:
   096D 21r7Bs40           1953 	ld	hl,#_flof + 0
   0970 36 00              1954 	ld	(hl), #0x00
   0972 21r7Cs40           1955 	ld	hl,#_flof + 1
   0975 36 00              1956 	ld	(hl), #0x00
   0977                    1957 00122$:
   0977 DD F9              1958 	ld	sp,ix
   0979 DD E1              1959 	pop	ix
   097B C9                 1960 	ret
   097C                    1961 _do_blocks_end::
                           1962 ;demo.c:309: void raster_effu() {
                           1963 ;	---------------------------------
                           1964 ; Function raster_effu
                           1965 ; ---------------------------------
   097C                    1966 _raster_effu_start::
   097C                    1967 _raster_effu:
                           1968 ;demo.c:310: vdp_register(VDP_VOFFSET,0);
   097C 21 17 00           1969 	ld	hl,#0x0017
   097F E5                 1970 	push	hl
   0980 CDr00s00           1971 	call	_vdp_register
   0983 F1                 1972 	pop	af
                           1973 ;demo.c:311: waitVB();
   0984 76                 1974 		halt 
                           1975 ;demo.c:313: vdp_register(1,0x40); // disable vblank
   0985 21 01 40           1976 	ld	hl,#0x4001
   0988 E5                 1977 	push	hl
   0989 CDr00s00           1978 	call	_vdp_register
                           1979 ;demo.c:315: for (linenum = 40; linenum < 212; linenum+=4) {
   098C 3E 28              1980 	ld	a,#0x28
   098E 32r7Ds40           1981 	ld	(#_linenum + 0),a
   0991 F1                 1982 	pop	af
   0992 FD 21r7Ds40        1983 	ld	iy,#_linenum
   0996 FD 36 01 00        1984 	ld	1 (iy),#0x00
   099A                    1985 00101$:
   099A 3Ar7Ds40           1986 	ld	a,(#_linenum+0)
   099D D6 D4              1987 	sub	a,#0xD4
   099F 3Ar7Es40           1988 	ld	a,(#_linenum+1)
   09A2 DE 00              1989 	sbc	a,#0x00
   09A4 F2rD5s09           1990 	jp	P,00104$
                           1991 ;demo.c:316: vdp_register(19,linenum); // interrupt on line
   09A7 3Ar7Ds40           1992 	ld	a,(#_linenum+0)
   09AA F5                 1993 	push	af
   09AB 33                 1994 	inc	sp
   09AC 3E 13              1995 	ld	a,#0x13
   09AE F5                 1996 	push	af
   09AF 33                 1997 	inc	sp
   09B0 CDr00s00           1998 	call	_vdp_register
   09B3 F1                 1999 	pop	af
                           2000 ;demo.c:317: vdp_register(0,0x16); // mode SC5, IE1 interrupts on
   09B4 21 00 16           2001 	ld	hl,#0x1600
   09B7 E5                 2002 	push	hl
   09B8 CDr00s00           2003 	call	_vdp_register
   09BB F1                 2004 	pop	af
                           2005 ;demo.c:319: waitVB();
   09BC 76                 2006 		halt 
                           2007 ;demo.c:315: for (linenum = 40; linenum < 212; linenum+=4) {
   09BD 21r7Ds40           2008 	ld	hl,#_linenum
   09C0 7E                 2009 	ld	a,(hl)
   09C1 C6 04              2010 	add	a,#0x04
   09C3 23                 2011 	inc	hl
   09C4 2B                 2012 	dec	hl
   09C5 C5                 2013 	push	bc
   09C6 4F                 2014 	ld	c, a
   09C7 23                 2015 	inc	hl
   09C8 7E                 2016 	ld	a, (hl)
   09C9 47                 2017 	ld	b, a
   09CA 79                 2018 	ld	a, c
   09CB 2B                 2019 	dec	hl
   09CC 77                 2020 	ld	(hl), a
   09CD 78                 2021 	ld	a, b
   09CE C1                 2022 	pop	bc
   09CF CE 00              2023 	adc	a,#0x00
   09D1 23                 2024 	inc	hl
   09D2 77                 2025 	ld	(hl),a
   09D3 18 C5              2026 	jr	00101$
   09D5                    2027 00104$:
                           2028 ;demo.c:322: vdp_register(VDP_VOFFSET,0);
   09D5 21 17 00           2029 	ld	hl,#0x0017
   09D8 E5                 2030 	push	hl
   09D9 CDr00s00           2031 	call	_vdp_register
   09DC F1                 2032 	pop	af
                           2033 ;demo.c:336: vdp_register(0,0x6); // mode SC5, IE1 interrupts off
   09DD 21 00 06           2034 	ld	hl,#0x0600
   09E0 E5                 2035 	push	hl
   09E1 CDr00s00           2036 	call	_vdp_register
   09E4 F1                 2037 	pop	af
                           2038 ;demo.c:337: vdp_register(1,0x60); // enable vblank
   09E5 21 01 60           2039 	ld	hl,#0x6001
   09E8 E5                 2040 	push	hl
   09E9 CDr00s00           2041 	call	_vdp_register
   09EC F1                 2042 	pop	af
   09ED C9                 2043 	ret
   09EE                    2044 _raster_effu_end::
                           2045 ;demo.c:342: void twister() {
                           2046 ;	---------------------------------
                           2047 ; Function twister
                           2048 ; ---------------------------------
   09EE                    2049 _twister_start::
   09EE                    2050 _twister:
   09EE DD E5              2051 	push	ix
   09F0 DD 21 00 00        2052 	ld	ix,#0
   09F4 DD 39              2053 	add	ix,sp
   09F6 21 ED FF           2054 	ld	hl,#-19
   09F9 39                 2055 	add	hl,sp
   09FA F9                 2056 	ld	sp,hl
                           2057 ;demo.c:346: vdp_register(8,0x2); // no sprites
   09FB 21 08 02           2058 	ld	hl,#0x0208
   09FE E5                 2059 	push	hl
   09FF CDr00s00           2060 	call	_vdp_register
   0A02 F1                 2061 	pop	af
                           2062 ;demo.c:348: cmd.size_x = 70;
   0A03 21 04 00           2063 	ld	hl,#0x0004
   0A06 39                 2064 	add	hl,sp
   0A07 4D                 2065 	ld	c,l
   0A08 44                 2066 	ld	b,h
   0A09 21 08 00           2067 	ld	hl,#0x0008
   0A0C 09                 2068 	add	hl,bc
   0A0D 36 46              2069 	ld	(hl),#0x46
   0A0F 23                 2070 	inc	hl
   0A10 36 00              2071 	ld	(hl),#0x00
                           2072 ;demo.c:349: cmd.size_y = 2;
   0A12 21 0A 00           2073 	ld	hl,#0x000A
   0A15 09                 2074 	add	hl,bc
   0A16 36 02              2075 	ld	(hl),#0x02
   0A18 23                 2076 	inc	hl
   0A19 36 00              2077 	ld	(hl),#0x00
                           2078 ;demo.c:350: cmd.data = 0;
   0A1B 21 0C 00           2079 	ld	hl,#0x000C
   0A1E 09                 2080 	add	hl,bc
   0A1F EB                 2081 	ex	de,hl
   0A20 3E 00              2082 	ld	a,#0x00
   0A22 12                 2083 	ld	(de),a
                           2084 ;demo.c:351: cmd.argument = 0x04; // from 70xY to left
   0A23 21 0D 00           2085 	ld	hl,#0x000D
   0A26 09                 2086 	add	hl,bc
   0A27 EB                 2087 	ex	de,hl
   0A28 3E 04              2088 	ld	a,#0x04
   0A2A 12                 2089 	ld	(de),a
                           2090 ;demo.c:352: cmd.command = 0xe0; // vram to vram, y only
   0A2B 21 0E 00           2091 	ld	hl,#0x000E
   0A2E 09                 2092 	add	hl,bc
   0A2F EB                 2093 	ex	de,hl
   0A30 3E E0              2094 	ld	a,#0xE0
   0A32 12                 2095 	ld	(de),a
                           2096 ;demo.c:353: cmd.source_x = 70;
   0A33 69                 2097 	ld	l,c
   0A34 60                 2098 	ld	h,b
   0A35 36 46              2099 	ld	(hl),#0x46
   0A37 23                 2100 	inc	hl
   0A38 36 00              2101 	ld	(hl),#0x00
                           2102 ;demo.c:354: cmd.dest_x = 70;
   0A3A 69                 2103 	ld	l,c
   0A3B 60                 2104 	ld	h,b
   0A3C 23                 2105 	inc	hl
   0A3D 23                 2106 	inc	hl
   0A3E 23                 2107 	inc	hl
   0A3F 23                 2108 	inc	hl
   0A40 36 46              2109 	ld	(hl),#0x46
   0A42 23                 2110 	inc	hl
   0A43 36 00              2111 	ld	(hl),#0x00
                           2112 ;demo.c:356: for (y = 0; y < 212; y+=2) {
   0A45 DD 36 EF 00        2113 	ld	-17 (ix),#0x00
   0A49 DD 36 F0 00        2114 	ld	-16 (ix),#0x00
   0A4D                    2115 00101$:
   0A4D DD 7E EF           2116 	ld	a,-17 (ix)
   0A50 D6 D4              2117 	sub	a,#0xD4
   0A52 DD 7E F0           2118 	ld	a,-16 (ix)
   0A55 DE 00              2119 	sbc	a,#0x00
   0A57 F2rBEs0A           2120 	jp	P,00104$
                           2121 ;demo.c:357: cmd.source_y = ((sintab[(ff+(y>>1)) & 255])>>1)+320;
   0A5A 21 04 00           2122 	ld	hl,#0x0004
   0A5D 39                 2123 	add	hl,sp
   0A5E EB                 2124 	ex	de,hl
   0A5F 21 02 00           2125 	ld	hl,#0x0002
   0A62 19                 2126 	add	hl,de
   0A63 DD 75 ED           2127 	ld	-19 (ix),l
   0A66 DD 74 EE           2128 	ld	-18 (ix),h
   0A69 DD 4E EF           2129 	ld	c,-17 (ix)
   0A6C DD 46 F0           2130 	ld	b,-16 (ix)
   0A6F CB 28              2131 	sra	b
   0A71 CB 19              2132 	rr	c
   0A73 3Ar7Fs40           2133 	ld	a,(#_ff+0)
   0A76 81                 2134 	add	a,c
   0A77 4F                 2135 	ld	c,a
   0A78 3Ar80s40           2136 	ld	a,(#_ff+1)
   0A7B 88                 2137 	adc	a,b
   0A7C 06 00              2138 	ld	b,#0x00
   0A7E 21r00s00           2139 	ld	hl,#_sintab
   0A81 09                 2140 	add	hl,bc
   0A82 7E                 2141 	ld	a,(hl)
   0A83 4F                 2142 	ld	c,a
   0A84 CB 29              2143 	sra	c
   0A86 79                 2144 	ld	a,c
   0A87 17                 2145 	rla	
   0A88 9F                 2146 	sbc	a,a
   0A89 47                 2147 	ld	b,a
   0A8A 21 40 01           2148 	ld	hl,#0x0140
   0A8D 09                 2149 	add	hl,bc
   0A8E 4D                 2150 	ld	c,l
   0A8F 44                 2151 	ld	b,h
   0A90 DD 6E ED           2152 	ld	l,-19 (ix)
   0A93 DD 66 EE           2153 	ld	h,-18 (ix)
   0A96 71                 2154 	ld	(hl),c
   0A97 23                 2155 	inc	hl
   0A98 70                 2156 	ld	(hl),b
                           2157 ;demo.c:358: cmd.dest_y = y;
   0A99 21 06 00           2158 	ld	hl,#0x0006
   0A9C 19                 2159 	add	hl,de
   0A9D DD 7E EF           2160 	ld	a,-17 (ix)
   0AA0 77                 2161 	ld	(hl),a
   0AA1 23                 2162 	inc	hl
   0AA2 DD 7E F0           2163 	ld	a,-16 (ix)
   0AA5 77                 2164 	ld	(hl),a
                           2165 ;demo.c:359: vdp_copier(&cmd);
   0AA6 D5                 2166 	push	de
   0AA7 CDr00s00           2167 	call	_vdp_copier
   0AAA F1                 2168 	pop	af
                           2169 ;demo.c:356: for (y = 0; y < 212; y+=2) {
   0AAB DD 7E EF           2170 	ld	a,-17 (ix)
   0AAE C6 02              2171 	add	a,#0x02
   0AB0 DD 77 EF           2172 	ld	-17 (ix),a
   0AB3 DD 7E F0           2173 	ld	a,-16 (ix)
   0AB6 CE 00              2174 	adc	a,#0x00
   0AB8 DD 77 F0           2175 	ld	-16 (ix),a
   0ABB C3r4Ds0A           2176 	jp	00101$
   0ABE                    2177 00104$:
                           2178 ;demo.c:363: msx2_palette(4,ff>>2,ff>>3,ff>>2);
   0ABE 21r7Fs40           2179 	ld	hl,#_ff + 0
   0AC1 4E                 2180 	ld	c,(hl)
   0AC2 21r80s40           2181 	ld	hl,#_ff + 1
   0AC5 46                 2182 	ld	b,(hl)
   0AC6 CB 28              2183 	sra	b
   0AC8 CB 19              2184 	rr	c
   0ACA CB 28              2185 	sra	b
   0ACC CB 19              2186 	rr	c
   0ACE 21r7Fs40           2187 	ld	hl,#_ff + 0
   0AD1 5E                 2188 	ld	e,(hl)
   0AD2 21r80s40           2189 	ld	hl,#_ff + 1
   0AD5 56                 2190 	ld	d,(hl)
   0AD6 CB 2A              2191 	sra	d
   0AD8 CB 1B              2192 	rr	e
   0ADA CB 2A              2193 	sra	d
   0ADC CB 1B              2194 	rr	e
   0ADE CB 2A              2195 	sra	d
   0AE0 CB 1B              2196 	rr	e
   0AE2 43                 2197 	ld	b,e
   0AE3 79                 2198 	ld	a,c
   0AE4 F5                 2199 	push	af
   0AE5 33                 2200 	inc	sp
   0AE6 C5                 2201 	push	bc
   0AE7 33                 2202 	inc	sp
   0AE8 41                 2203 	ld	b,c
   0AE9 0E 04              2204 	ld	c,#0x04
   0AEB C5                 2205 	push	bc
   0AEC CDr00s00           2206 	call	_msx2_palette
   0AEF F1                 2207 	pop	af
   0AF0 F1                 2208 	pop	af
                           2209 ;demo.c:365: ff+=4;
   0AF1 21r7Fs40           2210 	ld	hl,#_ff
   0AF4 7E                 2211 	ld	a,(hl)
   0AF5 C6 04              2212 	add	a,#0x04
   0AF7 23                 2213 	inc	hl
   0AF8 2B                 2214 	dec	hl
   0AF9 C5                 2215 	push	bc
   0AFA 4F                 2216 	ld	c, a
   0AFB 23                 2217 	inc	hl
   0AFC 7E                 2218 	ld	a, (hl)
   0AFD 47                 2219 	ld	b, a
   0AFE 79                 2220 	ld	a, c
   0AFF 2B                 2221 	dec	hl
   0B00 77                 2222 	ld	(hl), a
   0B01 78                 2223 	ld	a, b
   0B02 C1                 2224 	pop	bc
   0B03 CE 00              2225 	adc	a,#0x00
   0B05 23                 2226 	inc	hl
   0B06 77                 2227 	ld	(hl),a
   0B07 DD F9              2228 	ld	sp,ix
   0B09 DD E1              2229 	pop	ix
   0B0B C9                 2230 	ret
   0B0C                    2231 _twister_end::
                           2232 ;demo.c:373: void bulbs() {
                           2233 ;	---------------------------------
                           2234 ; Function bulbs
                           2235 ; ---------------------------------
   0B0C                    2236 _bulbs_start::
   0B0C                    2237 _bulbs:
   0B0C DD E5              2238 	push	ix
   0B0E DD 21 00 00        2239 	ld	ix,#0
   0B12 DD 39              2240 	add	ix,sp
   0B14 21 ED FF           2241 	ld	hl,#-19
   0B17 39                 2242 	add	hl,sp
   0B18 F9                 2243 	ld	sp,hl
                           2244 ;demo.c:377: if(bulbflipper == 1) {
   0B19 3Ar81s40           2245 	ld	a,(#_bulbflipper+0)
   0B1C D6 01              2246 	sub	a,#0x01
   0B1E 20 06              2247 	jr	NZ,00121$
   0B20 3Ar82s40           2248 	ld	a,(#_bulbflipper+1)
   0B23 B7                 2249 	or	a,a
   0B24 28 03              2250 	jr	Z,00122$
   0B26                    2251 00121$:
   0B26 C3rF7s0B           2252 	jp	00102$
   0B29                    2253 00122$:
                           2254 ;demo.c:378: cmd.size_x = 72;
   0B29 21 04 00           2255 	ld	hl,#0x0004
   0B2C 39                 2256 	add	hl,sp
   0B2D 4D                 2257 	ld	c,l
   0B2E 44                 2258 	ld	b,h
   0B2F 21 08 00           2259 	ld	hl,#0x0008
   0B32 09                 2260 	add	hl,bc
   0B33 36 48              2261 	ld	(hl),#0x48
   0B35 23                 2262 	inc	hl
   0B36 36 00              2263 	ld	(hl),#0x00
                           2264 ;demo.c:379: cmd.size_y = 8;
   0B38 21 0A 00           2265 	ld	hl,#0x000A
   0B3B 09                 2266 	add	hl,bc
   0B3C 36 08              2267 	ld	(hl),#0x08
   0B3E 23                 2268 	inc	hl
   0B3F 36 00              2269 	ld	(hl),#0x00
                           2270 ;demo.c:380: cmd.data = 0;
   0B41 21 0C 00           2271 	ld	hl,#0x000C
   0B44 09                 2272 	add	hl,bc
   0B45 EB                 2273 	ex	de,hl
   0B46 3E 00              2274 	ld	a,#0x00
   0B48 12                 2275 	ld	(de),a
                           2276 ;demo.c:381: cmd.argument = 0x04; // from 72xY to left
   0B49 21 0D 00           2277 	ld	hl,#0x000D
   0B4C 09                 2278 	add	hl,bc
   0B4D EB                 2279 	ex	de,hl
   0B4E 3E 04              2280 	ld	a,#0x04
   0B50 12                 2281 	ld	(de),a
                           2282 ;demo.c:382: cmd.command = 0xe0; // vram to vram, y only
   0B51 21 0E 00           2283 	ld	hl,#0x000E
   0B54 09                 2284 	add	hl,bc
   0B55 EB                 2285 	ex	de,hl
   0B56 3E E0              2286 	ld	a,#0xE0
   0B58 12                 2287 	ld	(de),a
                           2288 ;demo.c:383: cmd.source_x = 72;
   0B59 69                 2289 	ld	l,c
   0B5A 60                 2290 	ld	h,b
   0B5B 36 48              2291 	ld	(hl),#0x48
   0B5D 23                 2292 	inc	hl
   0B5E 36 00              2293 	ld	(hl),#0x00
                           2294 ;demo.c:384: cmd.dest_x = 72;
   0B60 03                 2295 	inc	bc
   0B61 03                 2296 	inc	bc
   0B62 03                 2297 	inc	bc
   0B63 03                 2298 	inc	bc
   0B64 69                 2299 	ld	l,c
   0B65 60                 2300 	ld	h,b
   0B66 36 48              2301 	ld	(hl),#0x48
   0B68 23                 2302 	inc	hl
   0B69 36 00              2303 	ld	(hl),#0x00
                           2304 ;demo.c:386: for (y = 0; y < 212; y+=8) {
   0B6B DD 36 EF 00        2305 	ld	-17 (ix),#0x00
   0B6F DD 36 F0 00        2306 	ld	-16 (ix),#0x00
   0B73                    2307 00104$:
   0B73 DD 7E EF           2308 	ld	a,-17 (ix)
   0B76 D6 D4              2309 	sub	a,#0xD4
   0B78 DD 7E F0           2310 	ld	a,-16 (ix)
   0B7B DE 00              2311 	sbc	a,#0x00
   0B7D F2rDEs0B           2312 	jp	P,00107$
                           2313 ;demo.c:387: cmd.source_y = ((sintab[(ff1+(y)) & 255])>>1)+320;
   0B80 21 04 00           2314 	ld	hl,#0x0004
   0B83 39                 2315 	add	hl,sp
   0B84 EB                 2316 	ex	de,hl
   0B85 21 02 00           2317 	ld	hl,#0x0002
   0B88 19                 2318 	add	hl,de
   0B89 DD 75 ED           2319 	ld	-19 (ix),l
   0B8C DD 74 EE           2320 	ld	-18 (ix),h
   0B8F 3Ar83s40           2321 	ld	a,(#_ff1+0)
   0B92 DD 86 EF           2322 	add	a,-17 (ix)
   0B95 4F                 2323 	ld	c,a
   0B96 3Ar84s40           2324 	ld	a,(#_ff1+1)
   0B99 DD 8E F0           2325 	adc	a,-16 (ix)
   0B9C 06 00              2326 	ld	b,#0x00
   0B9E 21r00s00           2327 	ld	hl,#_sintab
   0BA1 09                 2328 	add	hl,bc
   0BA2 7E                 2329 	ld	a,(hl)
   0BA3 4F                 2330 	ld	c,a
   0BA4 CB 29              2331 	sra	c
   0BA6 79                 2332 	ld	a,c
   0BA7 17                 2333 	rla	
   0BA8 9F                 2334 	sbc	a,a
   0BA9 47                 2335 	ld	b,a
   0BAA 21 40 01           2336 	ld	hl,#0x0140
   0BAD 09                 2337 	add	hl,bc
   0BAE 4D                 2338 	ld	c,l
   0BAF 44                 2339 	ld	b,h
   0BB0 DD 6E ED           2340 	ld	l,-19 (ix)
   0BB3 DD 66 EE           2341 	ld	h,-18 (ix)
   0BB6 71                 2342 	ld	(hl),c
   0BB7 23                 2343 	inc	hl
   0BB8 70                 2344 	ld	(hl),b
                           2345 ;demo.c:388: cmd.dest_y = y;
   0BB9 21 06 00           2346 	ld	hl,#0x0006
   0BBC 19                 2347 	add	hl,de
   0BBD DD 7E EF           2348 	ld	a,-17 (ix)
   0BC0 77                 2349 	ld	(hl),a
   0BC1 23                 2350 	inc	hl
   0BC2 DD 7E F0           2351 	ld	a,-16 (ix)
   0BC5 77                 2352 	ld	(hl),a
                           2353 ;demo.c:389: vdp_copier(&cmd);
   0BC6 D5                 2354 	push	de
   0BC7 CDr00s00           2355 	call	_vdp_copier
   0BCA F1                 2356 	pop	af
                           2357 ;demo.c:386: for (y = 0; y < 212; y+=8) {
   0BCB DD 7E EF           2358 	ld	a,-17 (ix)
   0BCE C6 08              2359 	add	a,#0x08
   0BD0 DD 77 EF           2360 	ld	-17 (ix),a
   0BD3 DD 7E F0           2361 	ld	a,-16 (ix)
   0BD6 CE 00              2362 	adc	a,#0x00
   0BD8 DD 77 F0           2363 	ld	-16 (ix),a
   0BDB C3r73s0B           2364 	jp	00104$
   0BDE                    2365 00107$:
                           2366 ;demo.c:391: ff1+=4;
   0BDE 21r83s40           2367 	ld	hl,#_ff1
   0BE1 7E                 2368 	ld	a,(hl)
   0BE2 C6 04              2369 	add	a,#0x04
   0BE4 23                 2370 	inc	hl
   0BE5 2B                 2371 	dec	hl
   0BE6 C5                 2372 	push	bc
   0BE7 4F                 2373 	ld	c, a
   0BE8 23                 2374 	inc	hl
   0BE9 7E                 2375 	ld	a, (hl)
   0BEA 47                 2376 	ld	b, a
   0BEB 79                 2377 	ld	a, c
   0BEC 2B                 2378 	dec	hl
   0BED 77                 2379 	ld	(hl), a
   0BEE 78                 2380 	ld	a, b
   0BEF C1                 2381 	pop	bc
   0BF0 CE 00              2382 	adc	a,#0x00
   0BF2 23                 2383 	inc	hl
   0BF3 77                 2384 	ld	(hl),a
   0BF4 C3rC8s0C           2385 	jp	00103$
   0BF7                    2386 00102$:
                           2387 ;demo.c:395: cmd.size_x = 72;
   0BF7 21 04 00           2388 	ld	hl,#0x0004
   0BFA 39                 2389 	add	hl,sp
   0BFB 4D                 2390 	ld	c,l
   0BFC 44                 2391 	ld	b,h
   0BFD 21 08 00           2392 	ld	hl,#0x0008
   0C00 09                 2393 	add	hl,bc
   0C01 36 48              2394 	ld	(hl),#0x48
   0C03 23                 2395 	inc	hl
   0C04 36 00              2396 	ld	(hl),#0x00
                           2397 ;demo.c:396: cmd.size_y = 8;
   0C06 21 0A 00           2398 	ld	hl,#0x000A
   0C09 09                 2399 	add	hl,bc
   0C0A 36 08              2400 	ld	(hl),#0x08
   0C0C 23                 2401 	inc	hl
   0C0D 36 00              2402 	ld	(hl),#0x00
                           2403 ;demo.c:397: cmd.data = 0;
   0C0F 21 0C 00           2404 	ld	hl,#0x000C
   0C12 09                 2405 	add	hl,bc
   0C13 EB                 2406 	ex	de,hl
   0C14 3E 00              2407 	ld	a,#0x00
   0C16 12                 2408 	ld	(de),a
                           2409 ;demo.c:398: cmd.argument = 0x00; // from 182xY to right
   0C17 21 0D 00           2410 	ld	hl,#0x000D
   0C1A 09                 2411 	add	hl,bc
   0C1B EB                 2412 	ex	de,hl
   0C1C 3E 00              2413 	ld	a,#0x00
   0C1E 12                 2414 	ld	(de),a
                           2415 ;demo.c:399: cmd.command = 0xe0; // vram to vram, y only
   0C1F 21 0E 00           2416 	ld	hl,#0x000E
   0C22 09                 2417 	add	hl,bc
   0C23 EB                 2418 	ex	de,hl
   0C24 3E E0              2419 	ld	a,#0xE0
   0C26 12                 2420 	ld	(de),a
                           2421 ;demo.c:400: cmd.source_x = 182;
   0C27 69                 2422 	ld	l,c
   0C28 60                 2423 	ld	h,b
   0C29 36 B6              2424 	ld	(hl),#0xB6
   0C2B 23                 2425 	inc	hl
   0C2C 36 00              2426 	ld	(hl),#0x00
                           2427 ;demo.c:401: cmd.dest_x = 182;
   0C2E 03                 2428 	inc	bc
   0C2F 03                 2429 	inc	bc
   0C30 03                 2430 	inc	bc
   0C31 03                 2431 	inc	bc
   0C32 69                 2432 	ld	l,c
   0C33 60                 2433 	ld	h,b
   0C34 36 B6              2434 	ld	(hl),#0xB6
   0C36 23                 2435 	inc	hl
   0C37 36 00              2436 	ld	(hl),#0x00
                           2437 ;demo.c:403: for (y = 0; y < 212; y+=8) {
   0C39 DD 36 EF 00        2438 	ld	-17 (ix),#0x00
   0C3D DD 36 F0 00        2439 	ld	-16 (ix),#0x00
   0C41                    2440 00108$:
   0C41 DD 7E EF           2441 	ld	a,-17 (ix)
   0C44 D6 D4              2442 	sub	a,#0xD4
   0C46 DD 7E F0           2443 	ld	a,-16 (ix)
   0C49 DE 00              2444 	sbc	a,#0x00
   0C4B F2rB2s0C           2445 	jp	P,00111$
                           2446 ;demo.c:404: cmd.source_y = ((sintab[(ff2+(y>>1)) & 255])>>1)+320;
   0C4E 21 04 00           2447 	ld	hl,#0x0004
   0C51 39                 2448 	add	hl,sp
   0C52 EB                 2449 	ex	de,hl
   0C53 21 02 00           2450 	ld	hl,#0x0002
   0C56 19                 2451 	add	hl,de
   0C57 DD 75 ED           2452 	ld	-19 (ix),l
   0C5A DD 74 EE           2453 	ld	-18 (ix),h
   0C5D DD 4E EF           2454 	ld	c,-17 (ix)
   0C60 DD 46 F0           2455 	ld	b,-16 (ix)
   0C63 CB 28              2456 	sra	b
   0C65 CB 19              2457 	rr	c
   0C67 3Ar85s40           2458 	ld	a,(#_ff2+0)
   0C6A 81                 2459 	add	a,c
   0C6B 4F                 2460 	ld	c,a
   0C6C 3Ar86s40           2461 	ld	a,(#_ff2+1)
   0C6F 88                 2462 	adc	a,b
   0C70 06 00              2463 	ld	b,#0x00
   0C72 21r00s00           2464 	ld	hl,#_sintab
   0C75 09                 2465 	add	hl,bc
   0C76 7E                 2466 	ld	a,(hl)
   0C77 4F                 2467 	ld	c,a
   0C78 CB 29              2468 	sra	c
   0C7A 79                 2469 	ld	a,c
   0C7B 17                 2470 	rla	
   0C7C 9F                 2471 	sbc	a,a
   0C7D 47                 2472 	ld	b,a
   0C7E 21 40 01           2473 	ld	hl,#0x0140
   0C81 09                 2474 	add	hl,bc
   0C82 4D                 2475 	ld	c,l
   0C83 44                 2476 	ld	b,h
   0C84 DD 6E ED           2477 	ld	l,-19 (ix)
   0C87 DD 66 EE           2478 	ld	h,-18 (ix)
   0C8A 71                 2479 	ld	(hl),c
   0C8B 23                 2480 	inc	hl
   0C8C 70                 2481 	ld	(hl),b
                           2482 ;demo.c:405: cmd.dest_y = y;
   0C8D 21 06 00           2483 	ld	hl,#0x0006
   0C90 19                 2484 	add	hl,de
   0C91 DD 7E EF           2485 	ld	a,-17 (ix)
   0C94 77                 2486 	ld	(hl),a
   0C95 23                 2487 	inc	hl
   0C96 DD 7E F0           2488 	ld	a,-16 (ix)
   0C99 77                 2489 	ld	(hl),a
                           2490 ;demo.c:406: vdp_copier(&cmd);
   0C9A D5                 2491 	push	de
   0C9B CDr00s00           2492 	call	_vdp_copier
   0C9E F1                 2493 	pop	af
                           2494 ;demo.c:403: for (y = 0; y < 212; y+=8) {
   0C9F DD 7E EF           2495 	ld	a,-17 (ix)
   0CA2 C6 08              2496 	add	a,#0x08
   0CA4 DD 77 EF           2497 	ld	-17 (ix),a
   0CA7 DD 7E F0           2498 	ld	a,-16 (ix)
   0CAA CE 00              2499 	adc	a,#0x00
   0CAC DD 77 F0           2500 	ld	-16 (ix),a
   0CAF C3r41s0C           2501 	jp	00108$
   0CB2                    2502 00111$:
                           2503 ;demo.c:408: ff2+=3;
   0CB2 21r85s40           2504 	ld	hl,#_ff2
   0CB5 7E                 2505 	ld	a,(hl)
   0CB6 C6 03              2506 	add	a,#0x03
   0CB8 23                 2507 	inc	hl
   0CB9 2B                 2508 	dec	hl
   0CBA C5                 2509 	push	bc
   0CBB 4F                 2510 	ld	c, a
   0CBC 23                 2511 	inc	hl
   0CBD 7E                 2512 	ld	a, (hl)
   0CBE 47                 2513 	ld	b, a
   0CBF 79                 2514 	ld	a, c
   0CC0 2B                 2515 	dec	hl
   0CC1 77                 2516 	ld	(hl), a
   0CC2 78                 2517 	ld	a, b
   0CC3 C1                 2518 	pop	bc
   0CC4 CE 00              2519 	adc	a,#0x00
   0CC6 23                 2520 	inc	hl
   0CC7 77                 2521 	ld	(hl),a
   0CC8                    2522 00103$:
                           2523 ;demo.c:411: bulbflipper = -bulbflipper;
   0CC8 AF                 2524 	xor	a,a
   0CC9 FD 21r81s40        2525 	ld	iy,#_bulbflipper
   0CCD 3E 00              2526 	ld	a,#0x00
   0CCF FD 9E 00           2527 	sbc	a,0 (iy)
   0CD2 21r81s40           2528 	ld	hl,#_bulbflipper + 0
   0CD5 77                 2529 	ld	(hl), a
   0CD6 FD 21r81s40        2530 	ld	iy,#_bulbflipper
   0CDA 3E 00              2531 	ld	a,#0x00
   0CDC FD 9E 01           2532 	sbc	a,1 (iy)
   0CDF 21r82s40           2533 	ld	hl,#_bulbflipper + 1
   0CE2 77                 2534 	ld	(hl), a
   0CE3 DD F9              2535 	ld	sp,ix
   0CE5 DD E1              2536 	pop	ix
   0CE7 C9                 2537 	ret
   0CE8                    2538 _bulbs_end::
                           2539 ;demo.c:442: void do_letter(char cc) {
                           2540 ;	---------------------------------
                           2541 ; Function do_letter
                           2542 ; ---------------------------------
   0CE8                    2543 _do_letter_start::
   0CE8                    2544 _do_letter:
   0CE8 DD E5              2545 	push	ix
   0CEA DD 21 00 00        2546 	ld	ix,#0
   0CEE DD 39              2547 	add	ix,sp
   0CF0 21 ED FF           2548 	ld	hl,#-19
   0CF3 39                 2549 	add	hl,sp
   0CF4 F9                 2550 	ld	sp,hl
                           2551 ;demo.c:444: int cidx = cc - 65;
   0CF5 DD 4E 04           2552 	ld	c,4 (ix)
   0CF8 DD 7E 04           2553 	ld	a,4 (ix)
   0CFB 17                 2554 	rla	
   0CFC 9F                 2555 	sbc	a,a
   0CFD 47                 2556 	ld	b,a
   0CFE 79                 2557 	ld	a,c
   0CFF C6 BF              2558 	add	a,#0xBF
   0D01 DD 77 EF           2559 	ld	-17 (ix),a
   0D04 78                 2560 	ld	a,b
   0D05 CE FF              2561 	adc	a,#0xFF
   0D07 DD 77 F0           2562 	ld	-16 (ix),a
                           2563 ;demo.c:445: cmd.source_x = 127+font_x[cidx];
   0D0A 21 04 00           2564 	ld	hl,#0x0004
   0D0D 39                 2565 	add	hl,sp
   0D0E EB                 2566 	ex	de,hl
   0D0F 3ErE4              2567 	ld	a,#<_font_x
   0D11 DD 86 EF           2568 	add	a,-17 (ix)
   0D14 4F                 2569 	ld	c,a
   0D15 3Es0D              2570 	ld	a,#>_font_x
   0D17 DD 8E F0           2571 	adc	a,-16 (ix)
   0D1A 47                 2572 	ld	b,a
   0D1B 0A                 2573 	ld	a,(bc)
   0D1C 4F                 2574 	ld	c,a
   0D1D 06 00              2575 	ld	b,#0x00
   0D1F 21 7F 00           2576 	ld	hl,#0x007F
   0D22 09                 2577 	add	hl,bc
   0D23 4D                 2578 	ld	c,l
   0D24 44                 2579 	ld	b,h
   0D25 EB                 2580 	ex	de,hl
   0D26 71                 2581 	ld	(hl),c
   0D27 23                 2582 	inc	hl
   0D28 70                 2583 	ld	(hl),b
                           2584 ;demo.c:446: cmd.source_y = 256+font_y[cidx];
   0D29 21 04 00           2585 	ld	hl,#0x0004
   0D2C 39                 2586 	add	hl,sp
   0D2D 4D                 2587 	ld	c,l
   0D2E 44                 2588 	ld	b,h
   0D2F 21 02 00           2589 	ld	hl,#0x0002
   0D32 09                 2590 	add	hl,bc
   0D33 DD 75 ED           2591 	ld	-19 (ix),l
   0D36 DD 74 EE           2592 	ld	-18 (ix),h
   0D39 3Er24              2593 	ld	a,#<_font_y
   0D3B DD 86 EF           2594 	add	a,-17 (ix)
   0D3E 5F                 2595 	ld	e,a
   0D3F 3Es0E              2596 	ld	a,#>_font_y
   0D41 DD 8E F0           2597 	adc	a,-16 (ix)
   0D44 57                 2598 	ld	d,a
   0D45 1A                 2599 	ld	a,(de)
   0D46 5F                 2600 	ld	e,a
   0D47 16 00              2601 	ld	d,#0x00
   0D49 21 00 01           2602 	ld	hl,#0x0100
   0D4C 19                 2603 	add	hl,de
   0D4D EB                 2604 	ex	de,hl
   0D4E DD 6E ED           2605 	ld	l,-19 (ix)
   0D51 DD 66 EE           2606 	ld	h,-18 (ix)
   0D54 73                 2607 	ld	(hl),e
   0D55 23                 2608 	inc	hl
   0D56 72                 2609 	ld	(hl),d
                           2610 ;demo.c:447: cmd.dest_x = lx;
   0D57 21 04 00           2611 	ld	hl,#0x0004
   0D5A 09                 2612 	add	hl,bc
   0D5B DD 75 ED           2613 	ld	-19 (ix),l
   0D5E DD 74 EE           2614 	ld	-18 (ix),h
   0D61 21r87s40           2615 	ld	hl,#_lx + 0
   0D64 5E                 2616 	ld	e,(hl)
   0D65 16 00              2617 	ld	d,#0x00
   0D67 DD 6E ED           2618 	ld	l,-19 (ix)
   0D6A DD 66 EE           2619 	ld	h,-18 (ix)
   0D6D 73                 2620 	ld	(hl),e
   0D6E 23                 2621 	inc	hl
   0D6F 72                 2622 	ld	(hl),d
                           2623 ;demo.c:448: cmd.dest_y = ly;
   0D70 21 06 00           2624 	ld	hl,#0x0006
   0D73 09                 2625 	add	hl,bc
   0D74 DD 75 ED           2626 	ld	-19 (ix),l
   0D77 DD 74 EE           2627 	ld	-18 (ix),h
   0D7A 21r88s40           2628 	ld	hl,#_ly + 0
   0D7D 5E                 2629 	ld	e,(hl)
   0D7E 16 00              2630 	ld	d,#0x00
   0D80 DD 6E ED           2631 	ld	l,-19 (ix)
   0D83 DD 66 EE           2632 	ld	h,-18 (ix)
   0D86 73                 2633 	ld	(hl),e
   0D87 23                 2634 	inc	hl
   0D88 72                 2635 	ld	(hl),d
                           2636 ;demo.c:449: cmd.size_x = font_w[cidx];
   0D89 21 08 00           2637 	ld	hl,#0x0008
   0D8C 09                 2638 	add	hl,bc
   0D8D DD 75 ED           2639 	ld	-19 (ix),l
   0D90 DD 74 EE           2640 	ld	-18 (ix),h
   0D93 3Er64              2641 	ld	a,#<_font_w
   0D95 DD 86 EF           2642 	add	a,-17 (ix)
   0D98 5F                 2643 	ld	e,a
   0D99 3Es0E              2644 	ld	a,#>_font_w
   0D9B DD 8E F0           2645 	adc	a,-16 (ix)
   0D9E 57                 2646 	ld	d,a
   0D9F 1A                 2647 	ld	a,(de)
   0DA0 5F                 2648 	ld	e,a
   0DA1 16 00              2649 	ld	d,#0x00
   0DA3 DD 6E ED           2650 	ld	l,-19 (ix)
   0DA6 DD 66 EE           2651 	ld	h,-18 (ix)
   0DA9 73                 2652 	ld	(hl),e
   0DAA 23                 2653 	inc	hl
   0DAB 72                 2654 	ld	(hl),d
                           2655 ;demo.c:450: cmd.size_y = 8;
   0DAC 21 0A 00           2656 	ld	hl,#0x000A
   0DAF 09                 2657 	add	hl,bc
   0DB0 36 08              2658 	ld	(hl),#0x08
   0DB2 23                 2659 	inc	hl
   0DB3 36 00              2660 	ld	(hl),#0x00
                           2661 ;demo.c:451: cmd.argument = 0x00;
   0DB5 21 0D 00           2662 	ld	hl,#0x000D
   0DB8 09                 2663 	add	hl,bc
   0DB9 EB                 2664 	ex	de,hl
   0DBA 3E 00              2665 	ld	a,#0x00
   0DBC 12                 2666 	ld	(de),a
                           2667 ;demo.c:452: cmd.command = 0x90; // logical vram to vram
   0DBD 21 0E 00           2668 	ld	hl,#0x000E
   0DC0 09                 2669 	add	hl,bc
   0DC1 EB                 2670 	ex	de,hl
   0DC2 3E 90              2671 	ld	a,#0x90
   0DC4 12                 2672 	ld	(de),a
                           2673 ;demo.c:453: vdp_copier(&cmd);
   0DC5 C5                 2674 	push	bc
   0DC6 CDr00s00           2675 	call	_vdp_copier
   0DC9 F1                 2676 	pop	af
                           2677 ;demo.c:454: lx+=font_w[cidx]-1;
   0DCA 3Er64              2678 	ld	a,#<_font_w
   0DCC DD 86 EF           2679 	add	a,-17 (ix)
   0DCF 4F                 2680 	ld	c,a
   0DD0 3Es0E              2681 	ld	a,#>_font_w
   0DD2 DD 8E F0           2682 	adc	a,-16 (ix)
   0DD5 47                 2683 	ld	b,a
   0DD6 0A                 2684 	ld	a,(bc)
   0DD7 4F                 2685 	ld	c,a
   0DD8 0D                 2686 	dec	c
   0DD9 21r87s40           2687 	ld	hl,#_lx
   0DDC 7E                 2688 	ld	a,(hl)
   0DDD 81                 2689 	add	a,c
   0DDE 77                 2690 	ld	(hl),a
   0DDF DD F9              2691 	ld	sp,ix
   0DE1 DD E1              2692 	pop	ix
   0DE3 C9                 2693 	ret
   0DE4                    2694 _do_letter_end::
   0DE4                    2695 _font_x:
   0DE4 01                 2696 	.db #0x01
   0DE5 09                 2697 	.db #0x09
   0DE6 11                 2698 	.db #0x11
   0DE7 19                 2699 	.db #0x19
   0DE8 21                 2700 	.db #0x21
   0DE9 29                 2701 	.db #0x29
   0DEA 31                 2702 	.db #0x31
   0DEB 39                 2703 	.db #0x39
   0DEC 41                 2704 	.db #0x41
   0DED 46                 2705 	.db #0x46
   0DEE 4E                 2706 	.db #0x4E
   0DEF 56                 2707 	.db #0x56
   0DF0 5E                 2708 	.db #0x5E
   0DF1 01                 2709 	.db #0x01
   0DF2 0A                 2710 	.db #0x0A
   0DF3 12                 2711 	.db #0x12
   0DF4 1A                 2712 	.db #0x1A
   0DF5 23                 2713 	.db #0x23
   0DF6 2B                 2714 	.db #0x2B
   0DF7 33                 2715 	.db #0x33
   0DF8 3C                 2716 	.db #0x3C
   0DF9 44                 2717 	.db #0x44
   0DFA 4C                 2718 	.db #0x4C
   0DFB 56                 2719 	.db #0x56
   0DFC 5E                 2720 	.db #0x5E
   0DFD 67                 2721 	.db #0x67
   0DFE 00                 2722 	.db #0x00
   0DFF 00                 2723 	.db #0x00
   0E00 00                 2724 	.db #0x00
   0E01 00                 2725 	.db #0x00
   0E02 00                 2726 	.db #0x00
   0E03 00                 2727 	.db #0x00
   0E04 01                 2728 	.db #0x01
   0E05 09                 2729 	.db #0x09
   0E06 11                 2730 	.db #0x11
   0E07 18                 2731 	.db #0x18
   0E08 20                 2732 	.db #0x20
   0E09 28                 2733 	.db #0x28
   0E0A 2F                 2734 	.db #0x2F
   0E0B 37                 2735 	.db #0x37
   0E0C 3F                 2736 	.db #0x3F
   0E0D 45                 2737 	.db #0x45
   0E0E 4C                 2738 	.db #0x4C
   0E0F 54                 2739 	.db #0x54
   0E10 5A                 2740 	.db #0x5A
   0E11 64                 2741 	.db #0x64
   0E12 01                 2742 	.db #0x01
   0E13 09                 2743 	.db #0x09
   0E14 11                 2744 	.db #0x11
   0E15 19                 2745 	.db #0x19
   0E16 21                 2746 	.db #0x21
   0E17 29                 2747 	.db #0x29
   0E18 30                 2748 	.db #0x30
   0E19 38                 2749 	.db #0x38
   0E1A 40                 2750 	.db #0x40
   0E1B 4A                 2751 	.db #0x4A
   0E1C 52                 2752 	.db #0x52
   0E1D 5A                 2753 	.db #0x5A
   0E1E 00                 2754 	.db 0x00
   0E1F 00                 2755 	.db 0x00
   0E20 00                 2756 	.db 0x00
   0E21 00                 2757 	.db 0x00
   0E22 00                 2758 	.db 0x00
   0E23 00                 2759 	.db 0x00
   0E24                    2760 _font_y:
   0E24 1C                 2761 	.db #0x1C
   0E25 1C                 2762 	.db #0x1C
   0E26 1C                 2763 	.db #0x1C
   0E27 1C                 2764 	.db #0x1C
   0E28 1C                 2765 	.db #0x1C
   0E29 1C                 2766 	.db #0x1C
   0E2A 1C                 2767 	.db #0x1C
   0E2B 1C                 2768 	.db #0x1C
   0E2C 1C                 2769 	.db #0x1C
   0E2D 1C                 2770 	.db #0x1C
   0E2E 1C                 2771 	.db #0x1C
   0E2F 1C                 2772 	.db #0x1C
   0E30 1C                 2773 	.db #0x1C
   0E31 25                 2774 	.db #0x25
   0E32 25                 2775 	.db #0x25
   0E33 25                 2776 	.db #0x25
   0E34 25                 2777 	.db #0x25
   0E35 25                 2778 	.db #0x25
   0E36 25                 2779 	.db #0x25
   0E37 25                 2780 	.db #0x25
   0E38 25                 2781 	.db #0x25
   0E39 25                 2782 	.db #0x25
   0E3A 25                 2783 	.db #0x25
   0E3B 25                 2784 	.db #0x25
   0E3C 25                 2785 	.db #0x25
   0E3D 25                 2786 	.db #0x25
   0E3E 00                 2787 	.db #0x00
   0E3F 00                 2788 	.db #0x00
   0E40 00                 2789 	.db #0x00
   0E41 00                 2790 	.db #0x00
   0E42 00                 2791 	.db #0x00
   0E43 00                 2792 	.db #0x00
   0E44 37                 2793 	.db #0x37
   0E45 37                 2794 	.db #0x37
   0E46 37                 2795 	.db #0x37
   0E47 37                 2796 	.db #0x37
   0E48 37                 2797 	.db #0x37
   0E49 37                 2798 	.db #0x37
   0E4A 37                 2799 	.db #0x37
   0E4B 37                 2800 	.db #0x37
   0E4C 37                 2801 	.db #0x37
   0E4D 37                 2802 	.db #0x37
   0E4E 37                 2803 	.db #0x37
   0E4F 37                 2804 	.db #0x37
   0E50 37                 2805 	.db #0x37
   0E51 37                 2806 	.db #0x37
   0E52 40                 2807 	.db #0x40
   0E53 40                 2808 	.db #0x40
   0E54 40                 2809 	.db #0x40
   0E55 40                 2810 	.db #0x40
   0E56 40                 2811 	.db #0x40
   0E57 40                 2812 	.db #0x40
   0E58 40                 2813 	.db #0x40
   0E59 40                 2814 	.db #0x40
   0E5A 40                 2815 	.db #0x40
   0E5B 40                 2816 	.db #0x40
   0E5C 40                 2817 	.db #0x40
   0E5D 40                 2818 	.db #0x40
   0E5E 00                 2819 	.db 0x00
   0E5F 00                 2820 	.db 0x00
   0E60 00                 2821 	.db 0x00
   0E61 00                 2822 	.db 0x00
   0E62 00                 2823 	.db 0x00
   0E63 00                 2824 	.db 0x00
   0E64                    2825 _font_w:
   0E64 07                 2826 	.db #0x07
   0E65 07                 2827 	.db #0x07
   0E66 07                 2828 	.db #0x07
   0E67 07                 2829 	.db #0x07
   0E68 07                 2830 	.db #0x07
   0E69 07                 2831 	.db #0x07
   0E6A 07                 2832 	.db #0x07
   0E6B 07                 2833 	.db #0x07
   0E6C 04                 2834 	.db #0x04
   0E6D 07                 2835 	.db #0x07
   0E6E 07                 2836 	.db #0x07
   0E6F 07                 2837 	.db #0x07
   0E70 09                 2838 	.db #0x09
   0E71 08                 2839 	.db #0x08
   0E72 07                 2840 	.db #0x07
   0E73 07                 2841 	.db #0x07
   0E74 08                 2842 	.db #0x08
   0E75 07                 2843 	.db #0x07
   0E76 07                 2844 	.db #0x07
   0E77 08                 2845 	.db #0x08
   0E78 07                 2846 	.db #0x07
   0E79 07                 2847 	.db #0x07
   0E7A 09                 2848 	.db #0x09
   0E7B 07                 2849 	.db #0x07
   0E7C 08                 2850 	.db #0x08
   0E7D 07                 2851 	.db #0x07
   0E7E 00                 2852 	.db #0x00
   0E7F 00                 2853 	.db #0x00
   0E80 00                 2854 	.db #0x00
   0E81 00                 2855 	.db #0x00
   0E82 00                 2856 	.db #0x00
   0E83 00                 2857 	.db #0x00
   0E84 07                 2858 	.db #0x07
   0E85 07                 2859 	.db #0x07
   0E86 06                 2860 	.db #0x06
   0E87 07                 2861 	.db #0x07
   0E88 07                 2862 	.db #0x07
   0E89 07                 2863 	.db #0x07
   0E8A 07                 2864 	.db #0x07
   0E8B 07                 2865 	.db #0x07
   0E8C 05                 2866 	.db #0x05
   0E8D 06                 2867 	.db #0x06
   0E8E 07                 2868 	.db #0x07
   0E8F 05                 2869 	.db #0x05
   0E90 09                 2870 	.db #0x09
   0E91 07                 2871 	.db #0x07
   0E92 07                 2872 	.db #0x07
   0E93 07                 2873 	.db #0x07
   0E94 07                 2874 	.db #0x07
   0E95 07                 2875 	.db #0x07
   0E96 07                 2876 	.db #0x07
   0E97 06                 2877 	.db #0x06
   0E98 07                 2878 	.db #0x07
   0E99 07                 2879 	.db #0x07
   0E9A 09                 2880 	.db #0x09
   0E9B 07                 2881 	.db #0x07
   0E9C 07                 2882 	.db #0x07
   0E9D 07                 2883 	.db #0x07
   0E9E 00                 2884 	.db 0x00
   0E9F 00                 2885 	.db 0x00
   0EA0 00                 2886 	.db 0x00
   0EA1 00                 2887 	.db 0x00
   0EA2 00                 2888 	.db 0x00
   0EA3 00                 2889 	.db 0x00
                           2890 ;demo.c:458: void do_letter_tall(char cc) {
                           2891 ;	---------------------------------
                           2892 ; Function do_letter_tall
                           2893 ; ---------------------------------
   0EA4                    2894 _do_letter_tall_start::
   0EA4                    2895 _do_letter_tall:
   0EA4 DD E5              2896 	push	ix
   0EA6 DD 21 00 00        2897 	ld	ix,#0
   0EAA DD 39              2898 	add	ix,sp
   0EAC 21 ED FF           2899 	ld	hl,#-19
   0EAF 39                 2900 	add	hl,sp
   0EB0 F9                 2901 	ld	sp,hl
                           2902 ;demo.c:460: int cidx = cc - 65;
   0EB1 DD 4E 04           2903 	ld	c,4 (ix)
   0EB4 DD 7E 04           2904 	ld	a,4 (ix)
   0EB7 17                 2905 	rla	
   0EB8 9F                 2906 	sbc	a,a
   0EB9 47                 2907 	ld	b,a
   0EBA 79                 2908 	ld	a,c
   0EBB C6 BF              2909 	add	a,#0xBF
   0EBD DD 77 EF           2910 	ld	-17 (ix),a
   0EC0 78                 2911 	ld	a,b
   0EC1 CE FF              2912 	adc	a,#0xFF
   0EC3 DD 77 F0           2913 	ld	-16 (ix),a
                           2914 ;demo.c:461: cmd.source_x = 127+font_x[cidx];
   0EC6 21 04 00           2915 	ld	hl,#0x0004
   0EC9 39                 2916 	add	hl,sp
   0ECA EB                 2917 	ex	de,hl
   0ECB 3ErE4              2918 	ld	a,#<_font_x
   0ECD DD 86 EF           2919 	add	a,-17 (ix)
   0ED0 4F                 2920 	ld	c,a
   0ED1 3Es0D              2921 	ld	a,#>_font_x
   0ED3 DD 8E F0           2922 	adc	a,-16 (ix)
   0ED6 47                 2923 	ld	b,a
   0ED7 0A                 2924 	ld	a,(bc)
   0ED8 4F                 2925 	ld	c,a
   0ED9 06 00              2926 	ld	b,#0x00
   0EDB 21 7F 00           2927 	ld	hl,#0x007F
   0EDE 09                 2928 	add	hl,bc
   0EDF 4D                 2929 	ld	c,l
   0EE0 44                 2930 	ld	b,h
   0EE1 EB                 2931 	ex	de,hl
   0EE2 71                 2932 	ld	(hl),c
   0EE3 23                 2933 	inc	hl
   0EE4 70                 2934 	ld	(hl),b
                           2935 ;demo.c:462: cmd.source_y = 256+font_y[cidx]-1;
   0EE5 21 04 00           2936 	ld	hl,#0x0004
   0EE8 39                 2937 	add	hl,sp
   0EE9 4D                 2938 	ld	c,l
   0EEA 44                 2939 	ld	b,h
   0EEB 21 02 00           2940 	ld	hl,#0x0002
   0EEE 09                 2941 	add	hl,bc
   0EEF DD 75 ED           2942 	ld	-19 (ix),l
   0EF2 DD 74 EE           2943 	ld	-18 (ix),h
   0EF5 3Er24              2944 	ld	a,#<_font_y
   0EF7 DD 86 EF           2945 	add	a,-17 (ix)
   0EFA 5F                 2946 	ld	e,a
   0EFB 3Es0E              2947 	ld	a,#>_font_y
   0EFD DD 8E F0           2948 	adc	a,-16 (ix)
   0F00 57                 2949 	ld	d,a
   0F01 1A                 2950 	ld	a,(de)
   0F02 5F                 2951 	ld	e,a
   0F03 16 00              2952 	ld	d,#0x00
   0F05 21 FF 00           2953 	ld	hl,#0x00FF
   0F08 19                 2954 	add	hl,de
   0F09 EB                 2955 	ex	de,hl
   0F0A DD 6E ED           2956 	ld	l,-19 (ix)
   0F0D DD 66 EE           2957 	ld	h,-18 (ix)
   0F10 73                 2958 	ld	(hl),e
   0F11 23                 2959 	inc	hl
   0F12 72                 2960 	ld	(hl),d
                           2961 ;demo.c:463: cmd.dest_x = lx;
   0F13 21 04 00           2962 	ld	hl,#0x0004
   0F16 09                 2963 	add	hl,bc
   0F17 DD 75 ED           2964 	ld	-19 (ix),l
   0F1A DD 74 EE           2965 	ld	-18 (ix),h
   0F1D 21r87s40           2966 	ld	hl,#_lx + 0
   0F20 5E                 2967 	ld	e,(hl)
   0F21 16 00              2968 	ld	d,#0x00
   0F23 DD 6E ED           2969 	ld	l,-19 (ix)
   0F26 DD 66 EE           2970 	ld	h,-18 (ix)
   0F29 73                 2971 	ld	(hl),e
   0F2A 23                 2972 	inc	hl
   0F2B 72                 2973 	ld	(hl),d
                           2974 ;demo.c:464: cmd.dest_y = ly;
   0F2C 21 06 00           2975 	ld	hl,#0x0006
   0F2F 09                 2976 	add	hl,bc
   0F30 DD 75 ED           2977 	ld	-19 (ix),l
   0F33 DD 74 EE           2978 	ld	-18 (ix),h
   0F36 21r88s40           2979 	ld	hl,#_ly + 0
   0F39 5E                 2980 	ld	e,(hl)
   0F3A 16 00              2981 	ld	d,#0x00
   0F3C DD 6E ED           2982 	ld	l,-19 (ix)
   0F3F DD 66 EE           2983 	ld	h,-18 (ix)
   0F42 73                 2984 	ld	(hl),e
   0F43 23                 2985 	inc	hl
   0F44 72                 2986 	ld	(hl),d
                           2987 ;demo.c:465: cmd.size_x = font_w[cidx];
   0F45 21 08 00           2988 	ld	hl,#0x0008
   0F48 09                 2989 	add	hl,bc
   0F49 DD 75 ED           2990 	ld	-19 (ix),l
   0F4C DD 74 EE           2991 	ld	-18 (ix),h
   0F4F 3Er64              2992 	ld	a,#<_font_w
   0F51 DD 86 EF           2993 	add	a,-17 (ix)
   0F54 5F                 2994 	ld	e,a
   0F55 3Es0E              2995 	ld	a,#>_font_w
   0F57 DD 8E F0           2996 	adc	a,-16 (ix)
   0F5A 57                 2997 	ld	d,a
   0F5B 1A                 2998 	ld	a,(de)
   0F5C 5F                 2999 	ld	e,a
   0F5D 16 00              3000 	ld	d,#0x00
   0F5F DD 6E ED           3001 	ld	l,-19 (ix)
   0F62 DD 66 EE           3002 	ld	h,-18 (ix)
   0F65 73                 3003 	ld	(hl),e
   0F66 23                 3004 	inc	hl
   0F67 72                 3005 	ld	(hl),d
                           3006 ;demo.c:466: cmd.size_y = 10;
   0F68 21 0A 00           3007 	ld	hl,#0x000A
   0F6B 09                 3008 	add	hl,bc
   0F6C 36 0A              3009 	ld	(hl),#0x0A
   0F6E 23                 3010 	inc	hl
   0F6F 36 00              3011 	ld	(hl),#0x00
                           3012 ;demo.c:467: cmd.argument = 0x00;
   0F71 21 0D 00           3013 	ld	hl,#0x000D
   0F74 09                 3014 	add	hl,bc
   0F75 EB                 3015 	ex	de,hl
   0F76 3E 00              3016 	ld	a,#0x00
   0F78 12                 3017 	ld	(de),a
                           3018 ;demo.c:468: cmd.command = 0x90; // logical vram to vram
   0F79 21 0E 00           3019 	ld	hl,#0x000E
   0F7C 09                 3020 	add	hl,bc
   0F7D EB                 3021 	ex	de,hl
   0F7E 3E 90              3022 	ld	a,#0x90
   0F80 12                 3023 	ld	(de),a
                           3024 ;demo.c:469: vdp_copier(&cmd);
   0F81 C5                 3025 	push	bc
   0F82 CDr00s00           3026 	call	_vdp_copier
   0F85 F1                 3027 	pop	af
                           3028 ;demo.c:470: lx+=font_w[cidx]-1;
   0F86 3Er64              3029 	ld	a,#<_font_w
   0F88 DD 86 EF           3030 	add	a,-17 (ix)
   0F8B 4F                 3031 	ld	c,a
   0F8C 3Es0E              3032 	ld	a,#>_font_w
   0F8E DD 8E F0           3033 	adc	a,-16 (ix)
   0F91 47                 3034 	ld	b,a
   0F92 0A                 3035 	ld	a,(bc)
   0F93 4F                 3036 	ld	c,a
   0F94 0D                 3037 	dec	c
   0F95 21r87s40           3038 	ld	hl,#_lx
   0F98 7E                 3039 	ld	a,(hl)
   0F99 81                 3040 	add	a,c
   0F9A 77                 3041 	ld	(hl),a
   0F9B DD F9              3042 	ld	sp,ix
   0F9D DD E1              3043 	pop	ix
   0F9F C9                 3044 	ret
   0FA0                    3045 _do_letter_tall_end::
                           3046 ;demo.c:473: void drawstr(char* str, uint8_t x, uint8_t y) {
                           3047 ;	---------------------------------
                           3048 ; Function drawstr
                           3049 ; ---------------------------------
   0FA0                    3050 _drawstr_start::
   0FA0                    3051 _drawstr:
   0FA0 DD E5              3052 	push	ix
   0FA2 DD 21 00 00        3053 	ld	ix,#0
   0FA6 DD 39              3054 	add	ix,sp
                           3055 ;demo.c:474: char* c = str;
   0FA8 DD 4E 04           3056 	ld	c,4 (ix)
   0FAB DD 46 05           3057 	ld	b,5 (ix)
                           3058 ;demo.c:475: lx = x;
   0FAE DD 5E 06           3059 	ld	e,6 (ix)
   0FB1 21r87s40           3060 	ld	hl,#_lx + 0
   0FB4 73                 3061 	ld	(hl), e
                           3062 ;demo.c:476: ly = y;
   0FB5 DD 7E 07           3063 	ld	a,7 (ix)
   0FB8 21r88s40           3064 	ld	hl,#_ly + 0
   0FBB 77                 3065 	ld	(hl), a
                           3066 ;demo.c:477: while (*c) {
   0FBC                    3067 00107$:
   0FBC 0A                 3068 	ld	a,(bc)
   0FBD 57                 3069 	ld	d,a
   0FBE B7                 3070 	or	a,a
   0FBF 28 42              3071 	jr	Z,00110$
                           3072 ;demo.c:478: char ltr = *c++; 
   0FC1 03                 3073 	inc	bc
                           3074 ;demo.c:479: if (ltr == ' ') lx+=4;
   0FC2 7A                 3075 	ld	a,d
   0FC3 D6 20              3076 	sub	a,#0x20
   0FC5 20 1E              3077 	jr	NZ,00105$
   0FC7 FD 21r87s40        3078 	ld	iy,#_lx
   0FCB FD 34 00           3079 	inc	0 (iy)
   0FCE FD 21r87s40        3080 	ld	iy,#_lx
   0FD2 FD 34 00           3081 	inc	0 (iy)
   0FD5 FD 21r87s40        3082 	ld	iy,#_lx
   0FD9 FD 34 00           3083 	inc	0 (iy)
   0FDC FD 21r87s40        3084 	ld	iy,#_lx
   0FE0 FD 34 00           3085 	inc	0 (iy)
   0FE3 18 D7              3086 	jr	00107$
   0FE5                    3087 00105$:
                           3088 ;demo.c:480: else if (ltr == '_') { ly+=9; lx = x; }
   0FE5 7A                 3089 	ld	a,d
   0FE6 D6 5F              3090 	sub	a,#0x5F
   0FE8 20 0D              3091 	jr	NZ,00102$
   0FEA 21r88s40           3092 	ld	hl,#_ly
   0FED 7E                 3093 	ld	a,(hl)
   0FEE C6 09              3094 	add	a,#0x09
   0FF0 77                 3095 	ld	(hl),a
   0FF1 21r87s40           3096 	ld	hl,#_lx + 0
   0FF4 73                 3097 	ld	(hl), e
   0FF5 18 C5              3098 	jr	00107$
   0FF7                    3099 00102$:
                           3100 ;demo.c:481: else do_letter(ltr);
   0FF7 C5                 3101 	push	bc
   0FF8 D5                 3102 	push	de
   0FF9 D5                 3103 	push	de
   0FFA 33                 3104 	inc	sp
   0FFB CDrE8s0C           3105 	call	_do_letter
   0FFE 33                 3106 	inc	sp
   0FFF D1                 3107 	pop	de
   1000 C1                 3108 	pop	bc
   1001 18 B9              3109 	jr	00107$
   1003                    3110 00110$:
   1003 DD E1              3111 	pop	ix
   1005 C9                 3112 	ret
   1006                    3113 _drawstr_end::
                           3114 ;demo.c:485: void drawsine(char* str, uint8_t x, uint8_t y) {
                           3115 ;	---------------------------------
                           3116 ; Function drawsine
                           3117 ; ---------------------------------
   1006                    3118 _drawsine_start::
   1006                    3119 _drawsine:
   1006 DD E5              3120 	push	ix
   1008 DD 21 00 00        3121 	ld	ix,#0
   100C DD 39              3122 	add	ix,sp
   100E 3B                 3123 	dec	sp
                           3124 ;demo.c:486: char* c = str;
   100F DD 4E 04           3125 	ld	c,4 (ix)
   1012 DD 46 05           3126 	ld	b,5 (ix)
                           3127 ;demo.c:487: lx = x;
   1015 DD 7E 06           3128 	ld	a,6 (ix)
   1018 21r87s40           3129 	ld	hl,#_lx + 0
   101B 77                 3130 	ld	(hl), a
                           3131 ;demo.c:489: while (*c) {
   101C                    3132 00104$:
   101C 0A                 3133 	ld	a,(bc)
   101D 5F                 3134 	ld	e,a
   101E B7                 3135 	or	a,a
   101F CAr93s10           3136 	jp	Z,00107$
                           3137 ;demo.c:490: char ltr = *c++; 
   1022 03                 3138 	inc	bc
   1023 DD 73 FF           3139 	ld	-1 (ix),e
                           3140 ;demo.c:491: ly = y+(sintabx[(lx+vbicount>>1) & 255]>>4);
   1026 21r87s40           3141 	ld	hl,#_lx + 0
   1029 5E                 3142 	ld	e,(hl)
   102A 16 00              3143 	ld	d,#0x00
   102C 21r40s40           3144 	ld	hl,#_vbicount
   102F 7B                 3145 	ld	a,e
   1030 86                 3146 	add	a,(hl)
   1031 5F                 3147 	ld	e,a
   1032 7A                 3148 	ld	a,d
   1033 23                 3149 	inc	hl
   1034 8E                 3150 	adc	a,(hl)
   1035 57                 3151 	ld	d,a
   1036 CB 2A              3152 	sra	d
   1038 CB 1B              3153 	rr	e
   103A 16 00              3154 	ld	d,#0x00
   103C CB 23              3155 	sla	e
   103E CB 12              3156 	rl	d
   1040 21r2Cs00           3157 	ld	hl,#_sintabx
   1043 19                 3158 	add	hl,de
   1044 5E                 3159 	ld	e,(hl)
   1045 23                 3160 	inc	hl
   1046 56                 3161 	ld	d,(hl)
   1047 CB 3A              3162 	srl	d
   1049 CB 1B              3163 	rr	e
   104B CB 3A              3164 	srl	d
   104D CB 1B              3165 	rr	e
   104F CB 3A              3166 	srl	d
   1051 CB 1B              3167 	rr	e
   1053 CB 3A              3168 	srl	d
   1055 CB 1B              3169 	rr	e
   1057 21r88s40           3170 	ld	hl,#_ly
   105A DD 7E 07           3171 	ld	a,7 (ix)
   105D 83                 3172 	add	a,e
   105E 77                 3173 	ld	(hl),a
                           3174 ;demo.c:492: if (ltr == ' ') lx+=4;
   105F DD 7E FF           3175 	ld	a,-1 (ix)
   1062 D6 20              3176 	sub	a,#0x20
   1064 20 1F              3177 	jr	NZ,00102$
   1066 FD 21r87s40        3178 	ld	iy,#_lx
   106A FD 34 00           3179 	inc	0 (iy)
   106D FD 21r87s40        3180 	ld	iy,#_lx
   1071 FD 34 00           3181 	inc	0 (iy)
   1074 FD 21r87s40        3182 	ld	iy,#_lx
   1078 FD 34 00           3183 	inc	0 (iy)
   107B FD 21r87s40        3184 	ld	iy,#_lx
   107F FD 34 00           3185 	inc	0 (iy)
   1082 C3r1Cs10           3186 	jp	00104$
   1085                    3187 00102$:
                           3188 ;demo.c:493: else do_letter_tall(ltr);
   1085 C5                 3189 	push	bc
   1086 DD 7E FF           3190 	ld	a,-1 (ix)
   1089 F5                 3191 	push	af
   108A 33                 3192 	inc	sp
   108B CDrA4s0E           3193 	call	_do_letter_tall
   108E 33                 3194 	inc	sp
   108F C1                 3195 	pop	bc
   1090 C3r1Cs10           3196 	jp	00104$
   1093                    3197 00107$:
   1093 DD F9              3198 	ld	sp,ix
   1095 DD E1              3199 	pop	ix
   1097 C9                 3200 	ret
   1098                    3201 _drawsine_end::
                           3202 ;demo.c:497: void font() {
                           3203 ;	---------------------------------
                           3204 ; Function font
                           3205 ; ---------------------------------
   1098                    3206 _font_start::
   1098                    3207 _font:
                           3208 ;demo.c:498: drawstr("THE QUICK BROWN FOX",74,20);
   1098 21 4A 14           3209 	ld	hl,#0x144A
   109B E5                 3210 	push	hl
   109C 21rDAs10           3211 	ld	hl,#__str_0
   109F E5                 3212 	push	hl
   10A0 CDrA0s0F           3213 	call	_drawstr
   10A3 F1                 3214 	pop	af
   10A4 F1                 3215 	pop	af
                           3216 ;demo.c:499: drawstr("JUMPS OVER THE LAZY DOG",74,29);
   10A5 21 4A 1D           3217 	ld	hl,#0x1D4A
   10A8 E5                 3218 	push	hl
   10A9 21rEEs10           3219 	ld	hl,#__str_1
   10AC E5                 3220 	push	hl
   10AD CDrA0s0F           3221 	call	_drawstr
   10B0 F1                 3222 	pop	af
   10B1 F1                 3223 	pop	af
                           3224 ;demo.c:501: drawstr("the quick brown fox",74,40);
   10B2 21 4A 28           3225 	ld	hl,#0x284A
   10B5 E5                 3226 	push	hl
   10B6 21r06s11           3227 	ld	hl,#__str_2
   10B9 E5                 3228 	push	hl
   10BA CDrA0s0F           3229 	call	_drawstr
   10BD F1                 3230 	pop	af
   10BE F1                 3231 	pop	af
                           3232 ;demo.c:502: drawstr("jumps over the lazy dog",74,49);
   10BF 21 4A 31           3233 	ld	hl,#0x314A
   10C2 E5                 3234 	push	hl
   10C3 21r1As11           3235 	ld	hl,#__str_3
   10C6 E5                 3236 	push	hl
   10C7 CDrA0s0F           3237 	call	_drawstr
   10CA F1                 3238 	pop	af
   10CB F1                 3239 	pop	af
                           3240 ;demo.c:504: drawstr("This is a test of the_emergency alert system__This is only a test__Please locate your_nearest exit and proceed_to your gate at once",74,60);
   10CC 21 4A 3C           3241 	ld	hl,#0x3C4A
   10CF E5                 3242 	push	hl
   10D0 21r32s11           3243 	ld	hl,#__str_4
   10D3 E5                 3244 	push	hl
   10D4 CDrA0s0F           3245 	call	_drawstr
   10D7 F1                 3246 	pop	af
   10D8 F1                 3247 	pop	af
   10D9 C9                 3248 	ret
   10DA                    3249 _font_end::
   10DA                    3250 __str_0:
   10DA 54 48 45 20 51 55  3251 	.ascii "THE QUICK BROWN FOX"
        49 43 4B 20 42 52
        4F 57 4E 20 46 4F
        58
   10ED 00                 3252 	.db 0x00
   10EE                    3253 __str_1:
   10EE 4A 55 4D 50 53 20  3254 	.ascii "JUMPS OVER THE LAZY DOG"
        4F 56 45 52 20 54
        48 45 20 4C 41 5A
        59 20 44 4F 47
   1105 00                 3255 	.db 0x00
   1106                    3256 __str_2:
   1106 74 68 65 20 71 75  3257 	.ascii "the quick brown fox"
        69 63 6B 20 62 72
        6F 77 6E 20 66 6F
        78
   1119 00                 3258 	.db 0x00
   111A                    3259 __str_3:
   111A 6A 75 6D 70 73 20  3260 	.ascii "jumps over the lazy dog"
        6F 76 65 72 20 74
        68 65 20 6C 61 7A
        79 20 64 6F 67
   1131 00                 3261 	.db 0x00
   1132                    3262 __str_4:
   1132 54 68 69 73 20 69  3263 	.ascii "This is a test of the_emergency alert system__This is only a"
        73 20 61 20 74 65
        73 74 20 6F 66 20
        74 68 65 5F 65 6D
        65 72 67 65 6E 63
        79 20 61 6C 65 72
        74 20 73 79 73 74
        65 6D 5F 5F 54 68
        69 73 20 69 73 20
        6F 6E 6C 79 20 61
   116E 20 74 65 73 74 5F  3264 	.ascii " test__Please locate your_nearest exit and proceed_to your g"
        5F 50 6C 65 61 73
        65 20 6C 6F 63 61
        74 65 20 79 6F 75
        72 5F 6E 65 61 72
        65 73 74 20 65 78
        69 74 20 61 6E 64
        20 70 72 6F 63 65
        65 64 5F 74 6F 20
        79 6F 75 72 20 67
   11AA 61 74 65 20 61 74  3265 	.ascii "ate at once"
        20 6F 6E 63 65
   11B5 00                 3266 	.db 0x00
                           3267 ;demo.c:512: void do_animplay() {
                           3268 ;	---------------------------------
                           3269 ; Function do_animplay
                           3270 ; ---------------------------------
   11B6                    3271 _do_animplay_start::
   11B6                    3272 _do_animplay:
   11B6 DD E5              3273 	push	ix
   11B8 DD 21 00 00        3274 	ld	ix,#0
   11BC DD 39              3275 	add	ix,sp
   11BE 21 EC FF           3276 	ld	hl,#-20
   11C1 39                 3277 	add	hl,sp
   11C2 F9                 3278 	ld	sp,hl
                           3279 ;demo.c:518: for (y = 0; y < 106; y+=1) {
   11C3 DD 36 FF 00        3280 	ld	-1 (ix),#0x00
   11C7                    3281 00107$:
   11C7 DD 7E FF           3282 	ld	a,-1 (ix)
   11CA D6 6A              3283 	sub	a,#0x6A
   11CC D2r78s12           3284 	jp	NC,00110$
                           3285 ;demo.c:519: cmd.source_x = xo;
   11CF 21 04 00           3286 	ld	hl,#0x0004
   11D2 39                 3287 	add	hl,sp
   11D3 EB                 3288 	ex	de,hl
   11D4 ED 4Br89s40        3289 	ld	bc,(_xo)
   11D8 EB                 3290 	ex	de,hl
   11D9 71                 3291 	ld	(hl),c
   11DA 23                 3292 	inc	hl
   11DB 70                 3293 	ld	(hl),b
                           3294 ;demo.c:520: cmd.source_y = 256+po+yo+(y>>1);
   11DC 21 04 00           3295 	ld	hl,#0x0004
   11DF 39                 3296 	add	hl,sp
   11E0 4D                 3297 	ld	c,l
   11E1 44                 3298 	ld	b,h
   11E2 21 02 00           3299 	ld	hl,#0x0002
   11E5 09                 3300 	add	hl,bc
   11E6 DD 75 EE           3301 	ld	-18 (ix),l
   11E9 DD 74 EF           3302 	ld	-17 (ix),h
   11EC 3Ar8Ds40           3303 	ld	a,(#_po+0)
   11EF 5F                 3304 	ld	e,a
   11F0 3Ar8Es40           3305 	ld	a,(#_po+1)
   11F3 C6 01              3306 	add	a,#0x01
   11F5 57                 3307 	ld	d,a
   11F6 21r8Bs40           3308 	ld	hl,#_yo
   11F9 7B                 3309 	ld	a,e
   11FA 86                 3310 	add	a,(hl)
   11FB DD 77 EC           3311 	ld	-20 (ix),a
   11FE 7A                 3312 	ld	a,d
   11FF 23                 3313 	inc	hl
   1200 8E                 3314 	adc	a,(hl)
   1201 DD 77 ED           3315 	ld	-19 (ix),a
   1204 DD 5E FF           3316 	ld	e,-1 (ix)
   1207 CB 3B              3317 	srl	e
   1209 16 00              3318 	ld	d,#0x00
   120B DD 7E EC           3319 	ld	a,-20 (ix)
   120E 83                 3320 	add	a,e
   120F 5F                 3321 	ld	e,a
   1210 DD 7E ED           3322 	ld	a,-19 (ix)
   1213 8A                 3323 	adc	a,d
   1214 57                 3324 	ld	d,a
   1215 DD 6E EE           3325 	ld	l,-18 (ix)
   1218 DD 66 EF           3326 	ld	h,-17 (ix)
   121B 73                 3327 	ld	(hl),e
   121C 23                 3328 	inc	hl
   121D 72                 3329 	ld	(hl),d
                           3330 ;demo.c:521: cmd.dest_x = 0;
   121E 21 04 00           3331 	ld	hl,#0x0004
   1221 09                 3332 	add	hl,bc
   1222 36 00              3333 	ld	(hl),#0x00
   1224 23                 3334 	inc	hl
   1225 36 00              3335 	ld	(hl),#0x00
                           3336 ;demo.c:522: cmd.dest_y = (y<<1);
   1227 21 06 00           3337 	ld	hl,#0x0006
   122A 09                 3338 	add	hl,bc
   122B DD 75 EC           3339 	ld	-20 (ix),l
   122E DD 74 ED           3340 	ld	-19 (ix),h
   1231 DD 5E FF           3341 	ld	e,-1 (ix)
   1234 16 00              3342 	ld	d,#0x00
   1236 CB 23              3343 	sla	e
   1238 CB 12              3344 	rl	d
   123A DD 6E EC           3345 	ld	l,-20 (ix)
   123D DD 66 ED           3346 	ld	h,-19 (ix)
   1240 73                 3347 	ld	(hl),e
   1241 23                 3348 	inc	hl
   1242 72                 3349 	ld	(hl),d
                           3350 ;demo.c:523: cmd.size_x = 128;
   1243 21 08 00           3351 	ld	hl,#0x0008
   1246 09                 3352 	add	hl,bc
   1247 36 80              3353 	ld	(hl),#0x80
   1249 23                 3354 	inc	hl
   124A 36 00              3355 	ld	(hl),#0x00
                           3356 ;demo.c:524: cmd.size_y = 1;
   124C 21 0A 00           3357 	ld	hl,#0x000A
   124F 09                 3358 	add	hl,bc
   1250 36 01              3359 	ld	(hl),#0x01
   1252 23                 3360 	inc	hl
   1253 36 00              3361 	ld	(hl),#0x00
                           3362 ;demo.c:525: cmd.data = 0;
   1255 21 0C 00           3363 	ld	hl,#0x000C
   1258 09                 3364 	add	hl,bc
   1259 EB                 3365 	ex	de,hl
   125A 3E 00              3366 	ld	a,#0x00
   125C 12                 3367 	ld	(de),a
                           3368 ;demo.c:526: cmd.argument = 0x00;
   125D 21 0D 00           3369 	ld	hl,#0x000D
   1260 09                 3370 	add	hl,bc
   1261 EB                 3371 	ex	de,hl
   1262 3E 00              3372 	ld	a,#0x00
   1264 12                 3373 	ld	(de),a
                           3374 ;demo.c:527: cmd.command = 0xD0;
   1265 21 0E 00           3375 	ld	hl,#0x000E
   1268 09                 3376 	add	hl,bc
   1269 EB                 3377 	ex	de,hl
   126A 3E D0              3378 	ld	a,#0xD0
   126C 12                 3379 	ld	(de),a
                           3380 ;demo.c:528: vdp_copier(&cmd);
   126D C5                 3381 	push	bc
   126E CDr00s00           3382 	call	_vdp_copier
   1271 F1                 3383 	pop	af
                           3384 ;demo.c:518: for (y = 0; y < 106; y+=1) {
   1272 DD 34 FF           3385 	inc	-1 (ix)
   1275 C3rC7s11           3386 	jp	00107$
   1278                    3387 00110$:
                           3388 ;demo.c:531: for (y = 0; y < 106; y+=1) {
   1278 DD 36 FF 00        3389 	ld	-1 (ix),#0x00
   127C                    3390 00111$:
   127C DD 7E FF           3391 	ld	a,-1 (ix)
   127F D6 6A              3392 	sub	a,#0x6A
   1281 D2r2Ds13           3393 	jp	NC,00114$
                           3394 ;demo.c:532: cmd.source_x = xo;
   1284 21 04 00           3395 	ld	hl,#0x0004
   1287 39                 3396 	add	hl,sp
   1288 EB                 3397 	ex	de,hl
   1289 ED 4Br89s40        3398 	ld	bc,(_xo)
   128D EB                 3399 	ex	de,hl
   128E 71                 3400 	ld	(hl),c
   128F 23                 3401 	inc	hl
   1290 70                 3402 	ld	(hl),b
                           3403 ;demo.c:533: cmd.source_y = 256+po+yo+(y>>1);
   1291 21 04 00           3404 	ld	hl,#0x0004
   1294 39                 3405 	add	hl,sp
   1295 4D                 3406 	ld	c,l
   1296 44                 3407 	ld	b,h
   1297 21 02 00           3408 	ld	hl,#0x0002
   129A 09                 3409 	add	hl,bc
   129B DD 75 EC           3410 	ld	-20 (ix),l
   129E DD 74 ED           3411 	ld	-19 (ix),h
   12A1 3Ar8Ds40           3412 	ld	a,(#_po+0)
   12A4 5F                 3413 	ld	e,a
   12A5 3Ar8Es40           3414 	ld	a,(#_po+1)
   12A8 C6 01              3415 	add	a,#0x01
   12AA 57                 3416 	ld	d,a
   12AB 21r8Bs40           3417 	ld	hl,#_yo
   12AE 7B                 3418 	ld	a,e
   12AF 86                 3419 	add	a,(hl)
   12B0 DD 77 EE           3420 	ld	-18 (ix),a
   12B3 7A                 3421 	ld	a,d
   12B4 23                 3422 	inc	hl
   12B5 8E                 3423 	adc	a,(hl)
   12B6 DD 77 EF           3424 	ld	-17 (ix),a
   12B9 DD 5E FF           3425 	ld	e,-1 (ix)
   12BC CB 3B              3426 	srl	e
   12BE 16 00              3427 	ld	d,#0x00
   12C0 DD 7E EE           3428 	ld	a,-18 (ix)
   12C3 83                 3429 	add	a,e
   12C4 5F                 3430 	ld	e,a
   12C5 DD 7E EF           3431 	ld	a,-17 (ix)
   12C8 8A                 3432 	adc	a,d
   12C9 57                 3433 	ld	d,a
   12CA DD 6E EC           3434 	ld	l,-20 (ix)
   12CD DD 66 ED           3435 	ld	h,-19 (ix)
   12D0 73                 3436 	ld	(hl),e
   12D1 23                 3437 	inc	hl
   12D2 72                 3438 	ld	(hl),d
                           3439 ;demo.c:534: cmd.dest_x = 128;
   12D3 21 04 00           3440 	ld	hl,#0x0004
   12D6 09                 3441 	add	hl,bc
   12D7 36 80              3442 	ld	(hl),#0x80
   12D9 23                 3443 	inc	hl
   12DA 36 00              3444 	ld	(hl),#0x00
                           3445 ;demo.c:535: cmd.dest_y = (y<<1);
   12DC 21 06 00           3446 	ld	hl,#0x0006
   12DF 09                 3447 	add	hl,bc
   12E0 DD 75 EC           3448 	ld	-20 (ix),l
   12E3 DD 74 ED           3449 	ld	-19 (ix),h
   12E6 DD 5E FF           3450 	ld	e,-1 (ix)
   12E9 16 00              3451 	ld	d,#0x00
   12EB CB 23              3452 	sla	e
   12ED CB 12              3453 	rl	d
   12EF DD 6E EC           3454 	ld	l,-20 (ix)
   12F2 DD 66 ED           3455 	ld	h,-19 (ix)
   12F5 73                 3456 	ld	(hl),e
   12F6 23                 3457 	inc	hl
   12F7 72                 3458 	ld	(hl),d
                           3459 ;demo.c:536: cmd.size_x = 128;
   12F8 21 08 00           3460 	ld	hl,#0x0008
   12FB 09                 3461 	add	hl,bc
   12FC 36 80              3462 	ld	(hl),#0x80
   12FE 23                 3463 	inc	hl
   12FF 36 00              3464 	ld	(hl),#0x00
                           3465 ;demo.c:537: cmd.size_y = 1;
   1301 21 0A 00           3466 	ld	hl,#0x000A
   1304 09                 3467 	add	hl,bc
   1305 36 01              3468 	ld	(hl),#0x01
   1307 23                 3469 	inc	hl
   1308 36 00              3470 	ld	(hl),#0x00
                           3471 ;demo.c:538: cmd.data = 0;
   130A 21 0C 00           3472 	ld	hl,#0x000C
   130D 09                 3473 	add	hl,bc
   130E EB                 3474 	ex	de,hl
   130F 3E 00              3475 	ld	a,#0x00
   1311 12                 3476 	ld	(de),a
                           3477 ;demo.c:539: cmd.argument = 0x00;
   1312 21 0D 00           3478 	ld	hl,#0x000D
   1315 09                 3479 	add	hl,bc
   1316 EB                 3480 	ex	de,hl
   1317 3E 00              3481 	ld	a,#0x00
   1319 12                 3482 	ld	(de),a
                           3483 ;demo.c:540: cmd.command = 0xd2; // logical vram to vram, xor
   131A 21 0E 00           3484 	ld	hl,#0x000E
   131D 09                 3485 	add	hl,bc
   131E EB                 3486 	ex	de,hl
   131F 3E D2              3487 	ld	a,#0xD2
   1321 12                 3488 	ld	(de),a
                           3489 ;demo.c:541: vdp_copier(&cmd);
   1322 C5                 3490 	push	bc
   1323 CDr00s00           3491 	call	_vdp_copier
   1326 F1                 3492 	pop	af
                           3493 ;demo.c:531: for (y = 0; y < 106; y+=1) {
   1327 DD 34 FF           3494 	inc	-1 (ix)
   132A C3r7Cs12           3495 	jp	00111$
   132D                    3496 00114$:
                           3497 ;demo.c:545: xo+=128;
   132D 21r89s40           3498 	ld	hl,#_xo
   1330 7E                 3499 	ld	a,(hl)
   1331 C6 80              3500 	add	a,#0x80
   1333 23                 3501 	inc	hl
   1334 2B                 3502 	dec	hl
   1335 C5                 3503 	push	bc
   1336 4F                 3504 	ld	c, a
   1337 23                 3505 	inc	hl
   1338 7E                 3506 	ld	a, (hl)
   1339 47                 3507 	ld	b, a
   133A 79                 3508 	ld	a, c
   133B 2B                 3509 	dec	hl
   133C 77                 3510 	ld	(hl), a
   133D 78                 3511 	ld	a, b
   133E C1                 3512 	pop	bc
   133F CE 00              3513 	adc	a,#0x00
   1341 23                 3514 	inc	hl
   1342 77                 3515 	ld	(hl),a
                           3516 ;demo.c:546: if (xo >= 256) {
   1343 3Ar89s40           3517 	ld	a,(#_xo+0)
   1346 D6 00              3518 	sub	a,#0x00
   1348 3Ar8As40           3519 	ld	a,(#_xo+1)
   134B DE 01              3520 	sbc	a,#0x01
   134D FArB4s13           3521 	jp	M,00106$
                           3522 ;demo.c:547: xo = 0;
   1350 21r89s40           3523 	ld	hl,#_xo + 0
   1353 36 00              3524 	ld	(hl), #0x00
   1355 21r8As40           3525 	ld	hl,#_xo + 1
   1358 36 00              3526 	ld	(hl), #0x00
                           3527 ;demo.c:548: yo+=53;
   135A 21r8Bs40           3528 	ld	hl,#_yo
   135D 7E                 3529 	ld	a,(hl)
   135E C6 35              3530 	add	a,#0x35
   1360 23                 3531 	inc	hl
   1361 2B                 3532 	dec	hl
   1362 C5                 3533 	push	bc
   1363 4F                 3534 	ld	c, a
   1364 23                 3535 	inc	hl
   1365 7E                 3536 	ld	a, (hl)
   1366 47                 3537 	ld	b, a
   1367 79                 3538 	ld	a, c
   1368 2B                 3539 	dec	hl
   1369 77                 3540 	ld	(hl), a
   136A 78                 3541 	ld	a, b
   136B C1                 3542 	pop	bc
   136C CE 00              3543 	adc	a,#0x00
   136E 23                 3544 	inc	hl
   136F 77                 3545 	ld	(hl),a
                           3546 ;demo.c:549: if (yo >= 212) { yo = 0; po+=256; }
   1370 3Ar8Bs40           3547 	ld	a,(#_yo+0)
   1373 D6 D4              3548 	sub	a,#0xD4
   1375 3Ar8Cs40           3549 	ld	a,(#_yo+1)
   1378 DE 00              3550 	sbc	a,#0x00
   137A FAr9Ds13           3551 	jp	M,00102$
   137D 21r8Bs40           3552 	ld	hl,#_yo + 0
   1380 36 00              3553 	ld	(hl), #0x00
   1382 21r8Cs40           3554 	ld	hl,#_yo + 1
   1385 36 00              3555 	ld	(hl), #0x00
   1387 21r8Ds40           3556 	ld	hl,#_po
   138A 7E                 3557 	ld	a,(hl)
   138B C6 00              3558 	add	a,#0x00
   138D 23                 3559 	inc	hl
   138E 2B                 3560 	dec	hl
   138F C5                 3561 	push	bc
   1390 4F                 3562 	ld	c, a
   1391 23                 3563 	inc	hl
   1392 7E                 3564 	ld	a, (hl)
   1393 47                 3565 	ld	b, a
   1394 79                 3566 	ld	a, c
   1395 2B                 3567 	dec	hl
   1396 77                 3568 	ld	(hl), a
   1397 78                 3569 	ld	a, b
   1398 C1                 3570 	pop	bc
   1399 CE 01              3571 	adc	a,#0x01
   139B 23                 3572 	inc	hl
   139C 77                 3573 	ld	(hl),a
   139D                    3574 00102$:
                           3575 ;demo.c:550: if (po >= 768) {
   139D 3Ar8Ds40           3576 	ld	a,(#_po+0)
   13A0 D6 00              3577 	sub	a,#0x00
   13A2 3Ar8Es40           3578 	ld	a,(#_po+1)
   13A5 DE 03              3579 	sbc	a,#0x03
   13A7 FArB4s13           3580 	jp	M,00106$
                           3581 ;demo.c:551: po = 0;
   13AA 21r8Ds40           3582 	ld	hl,#_po + 0
   13AD 36 00              3583 	ld	(hl), #0x00
   13AF 21r8Es40           3584 	ld	hl,#_po + 1
   13B2 36 00              3585 	ld	(hl), #0x00
   13B4                    3586 00106$:
                           3587 ;demo.c:556: msx2_palette(15,3+sintab[fffaaa & 255]>>5,3,4);
   13B4 21r8Fs40           3588 	ld	hl,#_fffaaa + 0
   13B7 4E                 3589 	ld	c,(hl)
   13B8 06 00              3590 	ld	b,#0x00
   13BA 21r00s00           3591 	ld	hl,#_sintab
   13BD 09                 3592 	add	hl,bc
   13BE 7E                 3593 	ld	a,(hl)
   13BF 4F                 3594 	ld	c,a
   13C0 17                 3595 	rla	
   13C1 9F                 3596 	sbc	a,a
   13C2 47                 3597 	ld	b,a
   13C3 03                 3598 	inc	bc
   13C4 03                 3599 	inc	bc
   13C5 03                 3600 	inc	bc
   13C6 CB 28              3601 	sra	b
   13C8 CB 19              3602 	rr	c
   13CA CB 28              3603 	sra	b
   13CC CB 19              3604 	rr	c
   13CE CB 28              3605 	sra	b
   13D0 CB 19              3606 	rr	c
   13D2 CB 28              3607 	sra	b
   13D4 CB 19              3608 	rr	c
   13D6 CB 28              3609 	sra	b
   13D8 CB 19              3610 	rr	c
   13DA 21 03 04           3611 	ld	hl,#0x0403
   13DD E5                 3612 	push	hl
   13DE 41                 3613 	ld	b,c
   13DF 0E 0F              3614 	ld	c,#0x0F
   13E1 C5                 3615 	push	bc
   13E2 CDr00s00           3616 	call	_msx2_palette
   13E5 F1                 3617 	pop	af
   13E6 F1                 3618 	pop	af
                           3619 ;demo.c:557: msx2_palette(3,2+sintab[fffaaa & 255]>>5,0,0);
   13E7 21r8Fs40           3620 	ld	hl,#_fffaaa + 0
   13EA 4E                 3621 	ld	c,(hl)
   13EB 06 00              3622 	ld	b,#0x00
   13ED 21r00s00           3623 	ld	hl,#_sintab
   13F0 09                 3624 	add	hl,bc
   13F1 7E                 3625 	ld	a,(hl)
   13F2 4F                 3626 	ld	c,a
   13F3 17                 3627 	rla	
   13F4 9F                 3628 	sbc	a,a
   13F5 47                 3629 	ld	b,a
   13F6 03                 3630 	inc	bc
   13F7 03                 3631 	inc	bc
   13F8 CB 28              3632 	sra	b
   13FA CB 19              3633 	rr	c
   13FC CB 28              3634 	sra	b
   13FE CB 19              3635 	rr	c
   1400 CB 28              3636 	sra	b
   1402 CB 19              3637 	rr	c
   1404 CB 28              3638 	sra	b
   1406 CB 19              3639 	rr	c
   1408 CB 28              3640 	sra	b
   140A CB 19              3641 	rr	c
   140C 21 00 00           3642 	ld	hl,#0x0000
   140F E5                 3643 	push	hl
   1410 41                 3644 	ld	b,c
   1411 0E 03              3645 	ld	c,#0x03
   1413 C5                 3646 	push	bc
   1414 CDr00s00           3647 	call	_msx2_palette
   1417 F1                 3648 	pop	af
   1418 F1                 3649 	pop	af
                           3650 ;demo.c:558: fffaaa++;
   1419 FD 21r8Fs40        3651 	ld	iy,#_fffaaa
   141D FD 34 00           3652 	inc	0 (iy)
   1420 20 07              3653 	jr	NZ,00132$
   1422 FD 21r8Fs40        3654 	ld	iy,#_fffaaa
   1426 FD 34 01           3655 	inc	1 (iy)
   1429                    3656 00132$:
   1429 DD F9              3657 	ld	sp,ix
   142B DD E1              3658 	pop	ix
   142D C9                 3659 	ret
   142E                    3660 _do_animplay_end::
                           3661 ;demo.c:567: void main() {
                           3662 ;	---------------------------------
                           3663 ; Function main
                           3664 ; ---------------------------------
   142E                    3665 _main_start::
   142E                    3666 _main:
                           3667 ;demo.c:568: unsigned char quit=0;
   142E 0E 00              3668 	ld	c,#0x00
                           3669 ;demo.c:569: int modes = 128; // interlace bit on
   1430 11 80 00           3670 	ld	de,#0x0080
                           3671 ;demo.c:573: spindown();
   1433 C5                 3672 	push	bc
   1434 D5                 3673 	push	de
   1435 CDr00s00           3674 	call	_spindown
   1438 D1                 3675 	pop	de
   1439 C1                 3676 	pop	bc
                           3677 ;demo.c:575: puts("demo init\r\n\r\n");
   143A C5                 3678 	push	bc
   143B D5                 3679 	push	de
   143C 21r9As15           3680 	ld	hl,#__str_5
   143F E5                 3681 	push	hl
   1440 CDr00s00           3682 	call	_puts
   1443 F1                 3683 	pop	af
   1444 D1                 3684 	pop	de
   1445 C1                 3685 	pop	bc
                           3686 ;demo.c:588: puts("music init...");
   1446 C5                 3687 	push	bc
   1447 D5                 3688 	push	de
   1448 21rA8s15           3689 	ld	hl,#__str_6
   144B E5                 3690 	push	hl
   144C CDr00s00           3691 	call	_puts
   144F F1                 3692 	pop	af
   1450 D1                 3693 	pop	de
   1451 C1                 3694 	pop	bc
                           3695 ;demo.c:590: PLY_SongPtr = (char *)0x0103;
   1452 21r00s00           3696 	ld	hl,#_PLY_SongPtr + 0
   1455 36 03              3697 	ld	(hl), #0x03
   1457 21r01s00           3698 	ld	hl,#_PLY_SongPtr + 1
   145A 36 01              3699 	ld	(hl), #0x01
                           3700 ;demo.c:591: PLY_Init();
   145C C5                 3701 	push	bc
   145D D5                 3702 	push	de
   145E CDr00s00           3703 	call	_PLY_Init
   1461 D1                 3704 	pop	de
   1462 C1                 3705 	pop	bc
                           3706 ;demo.c:592: puts("done.\n\n");
   1463 C5                 3707 	push	bc
   1464 D5                 3708 	push	de
   1465 21rB6s15           3709 	ld	hl,#__str_7
   1468 E5                 3710 	push	hl
   1469 CDr00s00           3711 	call	_puts
   146C F1                 3712 	pop	af
   146D D1                 3713 	pop	de
   146E C1                 3714 	pop	bc
                           3715 ;demo.c:594: if(isvdp2())
   146F C5                 3716 	push	bc
   1470 D5                 3717 	push	de
   1471 CDr00s00           3718 	call	_isvdp2
   1474 45                 3719 	ld	b,l
   1475 D1                 3720 	pop	de
   1476 78                 3721 	ld	a,b
   1477 C1                 3722 	pop	bc
   1478 47                 3723 	ld	b,a
   1479 B7                 3724 	or	a,a
   147A 28 03              3725 	jr	Z,00102$
                           3726 ;demo.c:596: modes+=2; // pal
   147C 11 82 00           3727 	ld	de,#0x0082
   147F                    3728 00102$:
                           3729 ;demo.c:600: vdp_set_screen5();
   147F C5                 3730 	push	bc
   1480 D5                 3731 	push	de
   1481 CDr00s00           3732 	call	_vdp_set_screen5
   1484 D1                 3733 	pop	de
   1485 C1                 3734 	pop	bc
                           3735 ;demo.c:602: vdp_register(VDP_MODE3,modes); // interlace on, screen mode pal or ntsc
   1486 43                 3736 	ld	b,e
   1487 C5                 3737 	push	bc
   1488 C5                 3738 	push	bc
   1489 33                 3739 	inc	sp
   148A 3E 09              3740 	ld	a,#0x09
   148C F5                 3741 	push	af
   148D 33                 3742 	inc	sp
   148E CDr00s00           3743 	call	_vdp_register
   1491 F1                 3744 	pop	af
   1492 C1                 3745 	pop	bc
                           3746 ;demo.c:604: puts("demo start\r\n");
   1493 C5                 3747 	push	bc
   1494 21rBEs15           3748 	ld	hl,#__str_8
   1497 E5                 3749 	push	hl
   1498 CDr00s00           3750 	call	_puts
   149B F1                 3751 	pop	af
   149C C1                 3752 	pop	bc
                           3753 ;demo.c:606: scratch_clear();
   149D C5                 3754 	push	bc
   149E CDr97s03           3755 	call	_scratch_clear
   14A1 C1                 3756 	pop	bc
                           3757 ;demo.c:607: vdp_load_palette(scratch);
   14A2 C5                 3758 	push	bc
   14A3 21r80s3F           3759 	ld	hl,#_scratch
   14A6 E5                 3760 	push	hl
   14A7 CDr00s00           3761 	call	_vdp_load_palette
   14AA F1                 3762 	pop	af
   14AB C1                 3763 	pop	bc
                           3764 ;demo.c:609: vdp_register(VDP_VOFFSET,0);
   14AC C5                 3765 	push	bc
   14AD 21 17 00           3766 	ld	hl,#0x0017
   14B0 E5                 3767 	push	hl
   14B1 CDr00s00           3768 	call	_vdp_register
   14B4 F1                 3769 	pop	af
   14B5 C1                 3770 	pop	bc
                           3771 ;demo.c:616: pal_load("BULBS   PL5",32);
   14B6 C5                 3772 	push	bc
   14B7 3E 20              3773 	ld	a,#0x20
   14B9 F5                 3774 	push	af
   14BA 33                 3775 	inc	sp
   14BB 21rCBs15           3776 	ld	hl,#__str_9
   14BE E5                 3777 	push	hl
   14BF CDrAAs03           3778 	call	_pal_load
   14C2 F1                 3779 	pop	af
   14C3 33                 3780 	inc	sp
   14C4 C1                 3781 	pop	bc
                           3782 ;demo.c:617: vdp_load_palette(cur_palette);
   14C5 C5                 3783 	push	bc
   14C6 21r00s40           3784 	ld	hl,#_cur_palette
   14C9 E5                 3785 	push	hl
   14CA CDr00s00           3786 	call	_vdp_load_palette
   14CD F1                 3787 	pop	af
   14CE C1                 3788 	pop	bc
                           3789 ;demo.c:623: memset((uint8_t *) &packbuffer, 0, 2431);
   14CF C5                 3790 	push	bc
   14D0 21 7F 09           3791 	ld	hl,#0x097F
   14D3 E5                 3792 	push	hl
   14D4 3E 00              3793 	ld	a,#0x00
   14D6 F5                 3794 	push	af
   14D7 33                 3795 	inc	sp
   14D8 21r00s01           3796 	ld	hl,#_packbuffer
   14DB E5                 3797 	push	hl
   14DC CDr00s00           3798 	call	_memset
   14DF F1                 3799 	pop	af
   14E0 F1                 3800 	pop	af
   14E1 33                 3801 	inc	sp
   14E2 C1                 3802 	pop	bc
                           3803 ;demo.c:624: raw_load("BULBS   PCK", 2431, packbuffer);
   14E3 C5                 3804 	push	bc
   14E4 21r00s01           3805 	ld	hl,#_packbuffer
   14E7 E5                 3806 	push	hl
   14E8 21 7F 09           3807 	ld	hl,#0x097F
   14EB E5                 3808 	push	hl
   14EC 21rD7s15           3809 	ld	hl,#__str_10
   14EF E5                 3810 	push	hl
   14F0 CDr5Es04           3811 	call	_raw_load
   14F3 F1                 3812 	pop	af
   14F4 F1                 3813 	pop	af
   14F5 F1                 3814 	pop	af
   14F6 C1                 3815 	pop	bc
                           3816 ;demo.c:625: bitbuster(packbuffer,0x8000,VRAM_0); // to page 2
   14F7 C5                 3817 	push	bc
   14F8 3E 01              3818 	ld	a,#0x01
   14FA F5                 3819 	push	af
   14FB 33                 3820 	inc	sp
   14FC 21 00 80           3821 	ld	hl,#0x8000
   14FF E5                 3822 	push	hl
   1500 21r00s01           3823 	ld	hl,#_packbuffer
   1503 E5                 3824 	push	hl
   1504 CDr00s00           3825 	call	_bitbuster
   1507 F1                 3826 	pop	af
   1508 F1                 3827 	pop	af
   1509 33                 3828 	inc	sp
   150A C1                 3829 	pop	bc
                           3830 ;demo.c:647: vdp_set_write_address(0, 0);
   150B C5                 3831 	push	bc
   150C 21 00 00           3832 	ld	hl,#0x0000
   150F E5                 3833 	push	hl
   1510 3E 00              3834 	ld	a,#0x00
   1512 F5                 3835 	push	af
   1513 33                 3836 	inc	sp
   1514 CDr00s00           3837 	call	_vdp_set_write_address
   1517 F1                 3838 	pop	af
   1518 33                 3839 	inc	sp
   1519 C1                 3840 	pop	bc
                           3841 ;demo.c:648: memset((uint8_t *) &scratch, 0, 256);
   151A C5                 3842 	push	bc
   151B 21 00 01           3843 	ld	hl,#0x0100
   151E E5                 3844 	push	hl
   151F 3E 00              3845 	ld	a,#0x00
   1521 F5                 3846 	push	af
   1522 33                 3847 	inc	sp
   1523 21r80s3F           3848 	ld	hl,#_scratch
   1526 E5                 3849 	push	hl
   1527 CDr00s00           3850 	call	_memset
   152A F1                 3851 	pop	af
   152B F1                 3852 	pop	af
   152C 33                 3853 	inc	sp
   152D C1                 3854 	pop	bc
                           3855 ;demo.c:650: for (i = 0; i < 212; i++) {		
   152E 11 D4 00           3856 	ld	de,#0x00D4
   1531                    3857 00110$:
                           3858 ;demo.c:651: vdp_load_screen(scratch, 128);
   1531 C5                 3859 	push	bc
   1532 D5                 3860 	push	de
   1533 3E 80              3861 	ld	a,#0x80
   1535 F5                 3862 	push	af
   1536 33                 3863 	inc	sp
   1537 21r80s3F           3864 	ld	hl,#_scratch
   153A E5                 3865 	push	hl
   153B CDr00s00           3866 	call	_vdp_load_screen
   153E F1                 3867 	pop	af
   153F 33                 3868 	inc	sp
   1540 D1                 3869 	pop	de
   1541 C1                 3870 	pop	bc
   1542 1B                 3871 	dec	de
                           3872 ;demo.c:650: for (i = 0; i < 212; i++) {		
   1543 7B                 3873 	ld	a,e
   1544 B2                 3874 	or	a,d
   1545 20 EA              3875 	jr	NZ,00110$
                           3876 ;demo.c:655: bulbs();
   1547 C5                 3877 	push	bc
   1548 CDr0Cs0B           3878 	call	_bulbs
   154B C1                 3879 	pop	bc
                           3880 ;demo.c:656: bulbs();
   154C C5                 3881 	push	bc
   154D CDr0Cs0B           3882 	call	_bulbs
   1550 C1                 3883 	pop	bc
                           3884 ;demo.c:660: install_isr(my_isr);
   1551 C5                 3885 	push	bc
   1552 21r2Cs02           3886 	ld	hl,#_my_isr
   1555 E5                 3887 	push	hl
   1556 CDr00s00           3888 	call	_install_isr
   1559 F1                 3889 	pop	af
   155A C1                 3890 	pop	bc
                           3891 ;demo.c:663: while (!quit) {
   155B                    3892 00105$:
   155B AF                 3893 	xor	a,a
   155C B1                 3894 	or	a,c
   155D 20 18              3895 	jr	NZ,00107$
                           3896 ;demo.c:666: bulbs();
   155F C5                 3897 	push	bc
   1560 CDr0Cs0B           3898 	call	_bulbs
   1563 C1                 3899 	pop	bc
                           3900 ;demo.c:680: if(space())
   1564 C5                 3901 	push	bc
   1565 21 08 01           3902 	ld	hl,#0x0108
   1568 E5                 3903 	push	hl
   1569 CDr00s00           3904 	call	_ispressed
   156C F1                 3905 	pop	af
   156D 7D                 3906 	ld	a,l
   156E C1                 3907 	pop	bc
   156F 47                 3908 	ld	b,a
   1570 B7                 3909 	or	a,a
   1571 28 E8              3910 	jr	Z,00105$
                           3911 ;demo.c:681: quit=1;
   1573 0E 01              3912 	ld	c,#0x01
   1575 18 E4              3913 	jr	00105$
   1577                    3914 00107$:
                           3915 ;demo.c:684: waitVB();
   1577 76                 3916 		halt 
                           3917 ;demo.c:685: uninstall_isr();
   1578 CDr00s00           3918 	call	_uninstall_isr
                           3919 ;demo.c:686: PLY_Stop();
   157B CDr00s00           3920 	call	_PLY_Stop
                           3921 ;demo.c:687: PLY_SendRegisters();
   157E CDr00s00           3922 	call	_PLY_SendRegisters
                           3923 ;demo.c:689: screen(0);
   1581 3E 00              3924 	ld	a,#0x00
   1583 F5                 3925 	push	af
   1584 33                 3926 	inc	sp
   1585 CDr00s00           3927 	call	_screen
   1588 33                 3928 	inc	sp
                           3929 ;demo.c:691: puts("demo exit\r\n\r\n");
   1589 21rE3s15           3930 	ld	hl,#__str_11
   158C E5                 3931 	push	hl
   158D CDr00s00           3932 	call	_puts
   1590 F1                 3933 	pop	af
                           3934 ;demo.c:693: exit(0);
   1591 3E 00              3935 	ld	a,#0x00
   1593 F5                 3936 	push	af
   1594 33                 3937 	inc	sp
   1595 CDr00s00           3938 	call	_exit
   1598 33                 3939 	inc	sp
   1599 C9                 3940 	ret
   159A                    3941 _main_end::
   159A                    3942 __str_5:
   159A 64 65 6D 6F 20 69  3943 	.ascii "demo init"
        6E 69 74
   15A3 0D                 3944 	.db 0x0D
   15A4 0A                 3945 	.db 0x0A
   15A5 0D                 3946 	.db 0x0D
   15A6 0A                 3947 	.db 0x0A
   15A7 00                 3948 	.db 0x00
   15A8                    3949 __str_6:
   15A8 6D 75 73 69 63 20  3950 	.ascii "music init..."
        69 6E 69 74 2E 2E
        2E
   15B5 00                 3951 	.db 0x00
   15B6                    3952 __str_7:
   15B6 64 6F 6E 65 2E     3953 	.ascii "done."
   15BB 0A                 3954 	.db 0x0A
   15BC 0A                 3955 	.db 0x0A
   15BD 00                 3956 	.db 0x00
   15BE                    3957 __str_8:
   15BE 64 65 6D 6F 20 73  3958 	.ascii "demo start"
        74 61 72 74
   15C8 0D                 3959 	.db 0x0D
   15C9 0A                 3960 	.db 0x0A
   15CA 00                 3961 	.db 0x00
   15CB                    3962 __str_9:
   15CB 42 55 4C 42 53 20  3963 	.ascii "BULBS   PL5"
        20 20 50 4C 35
   15D6 00                 3964 	.db 0x00
   15D7                    3965 __str_10:
   15D7 42 55 4C 42 53 20  3966 	.ascii "BULBS   PCK"
        20 20 50 43 4B
   15E2 00                 3967 	.db 0x00
   15E3                    3968 __str_11:
   15E3 64 65 6D 6F 20 65  3969 	.ascii "demo exit"
        78 69 74
   15EC 0D                 3970 	.db 0x0D
   15ED 0A                 3971 	.db 0x0A
   15EE 0D                 3972 	.db 0x0D
   15EF 0A                 3973 	.db 0x0A
   15F0 00                 3974 	.db 0x00
                           3975 	.area _CODE
                           3976 	.area _CABS
