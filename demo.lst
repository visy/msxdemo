                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Mar 22 2009) (Mac OS X i386)
                              4 ; This file was generated Thu Feb 22 22:04:35 2018
                              5 ;--------------------------------------------------------
                              6 	.module demo
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _do_animplay
                             14 	.globl _font
                             15 	.globl _drawstr
                             16 	.globl _do_letter
                             17 	.globl _twister
                             18 	.globl _raster_effu
                             19 	.globl _do_blocks
                             20 	.globl _do_ymmm
                             21 	.globl _fadein
                             22 	.globl _raw_load
                             23 	.globl _pause
                             24 	.globl _pal_load
                             25 	.globl _scratch_clear
                             26 	.globl _ge5_load
                             27 	.globl _color_isr
                             28 	.globl _my_isr
                             29 	.globl _isNthBitSet
                             30 	.globl _ly
                             31 	.globl _lx
                             32 	.globl _linenum
                             33 	.globl _flof
                             34 	.globl _btab
                             35 	.globl _bty
                             36 	.globl _btx
                             37 	.globl _bsy
                             38 	.globl _bsx
                             39 	.globl _block_init
                             40 	.globl _cc
                             41 	.globl _yofff
                             42 	.globl _tick
                             43 	.globl _vbicount
                             44 	.globl _block_palette
                             45 	.globl _cur_palette
                             46 	.globl _scratch
                             47 	.globl _packbuffer
                             48 	.globl _sintab
                             49 	.globl _font_h
                             50 	.globl _font_w
                             51 	.globl _font_y
                             52 	.globl _font_x
                             53 	.globl _sintabx
                             54 ;--------------------------------------------------------
                             55 ; special function registers
                             56 ;--------------------------------------------------------
                             57 ;--------------------------------------------------------
                             58 ;  ram data
                             59 ;--------------------------------------------------------
                             60 	.area _DATA
   0000                      61 _sintab::
   0000                      62 	.ds 256
   0100                      63 _packbuffer::
   0100                      64 	.ds 16000
   3F80                      65 _scratch::
   3F80                      66 	.ds 128
   4000                      67 _cur_palette::
   4000                      68 	.ds 32
   4020                      69 _block_palette::
   4020                      70 	.ds 32
   4040                      71 _vbicount::
   4040                      72 	.ds 2
   4042                      73 _tick::
   4042                      74 	.ds 2
   4044                      75 _isNthBitSet_mask_1_1:
   4044                      76 	.ds 8
   404C                      77 _yofff::
   404C                      78 	.ds 1
   404D                      79 _cc::
   404D                      80 	.ds 1
   404E                      81 _flipper:
   404E                      82 	.ds 2
   4050                      83 _ymmmf:
   4050                      84 	.ds 2
   4052                      85 _block_init::
   4052                      86 	.ds 1
   4053                      87 _bsx::
   4053                      88 	.ds 2
   4055                      89 _bsy::
   4055                      90 	.ds 2
   4057                      91 _btx::
   4057                      92 	.ds 2
   4059                      93 _bty::
   4059                      94 	.ds 2
   405B                      95 _btab::
   405B                      96 	.ds 32
   407B                      97 _flof::
   407B                      98 	.ds 2
   407D                      99 _linenum::
   407D                     100 	.ds 2
   407F                     101 _lx::
   407F                     102 	.ds 1
   4080                     103 _ly::
   4080                     104 	.ds 1
   4081                     105 _xo:
   4081                     106 	.ds 2
   4083                     107 _yo:
   4083                     108 	.ds 2
   4085                     109 _po:
   4085                     110 	.ds 2
   4087                     111 _fffaaa:
   4087                     112 	.ds 2
                            113 ;--------------------------------------------------------
                            114 ; overlayable items in  ram 
                            115 ;--------------------------------------------------------
                            116 	.area _OVERLAY
                            117 ;--------------------------------------------------------
                            118 ; external initialized ram data
                            119 ;--------------------------------------------------------
                            120 ;--------------------------------------------------------
                            121 ; global & static initialisations
                            122 ;--------------------------------------------------------
                            123 	.area _HOME
                            124 	.area _GSINIT
                            125 	.area _GSFINAL
                            126 	.area _GSINIT
                            127 ;demo.c:47: static unsigned char mask[] = {1, 2, 4, 8, 16, 32, 64, 128};
   0000 21r44s40            128 	ld	hl,#_isNthBitSet_mask_1_1
   0003 CDr00s00            129 	call	__initrleblock
   0006 08                  130 	.db	8
   0007 01 02 04 08 10 20   131 	.db	0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80
        40 80
   000F 00                  132 	.db	0
                            133 ;types.h:27: signed char sintab[256]={
   0010 21r00s00            134 	ld	hl,#_sintab
   0013 CDr00s00            135 	call	__initrleblock
   0016 3B                  136 	.db	59
   0017 00 03 06 09 0C 0F   137 	.db	0x00, 0x03, 0x06, 0x09, 0x0C, 0x0F, 0x12, 0x15
        12 15
   001F 18 1B 1E 21 24 27   138 	.db	0x18, 0x1B, 0x1E, 0x21, 0x24, 0x27, 0x2A, 0x2D
        2A 2D
   0027 30 33 36 39 3B 3E   139 	.db	0x30, 0x33, 0x36, 0x39, 0x3B, 0x3E, 0x41, 0x43
        41 43
   002F 46 49 4B 4E 50 52   140 	.db	0x46, 0x49, 0x4B, 0x4E, 0x50, 0x52, 0x55, 0x57
        55 57
   0037 59 5B 5E 60 62 64   141 	.db	0x59, 0x5B, 0x5E, 0x60, 0x62, 0x64, 0x66, 0x67
        66 67
   003F 69 6B 6C 6E 70 71   142 	.db	0x69, 0x6B, 0x6C, 0x6E, 0x70, 0x71, 0x72, 0x74
        72 74
   0047 75 76 77 78 79 7A   143 	.db	0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7B
        7B 7B
   004F 7C 7D 7D            144 	.db	0x7C, 0x7D, 0x7D
   0052 FB 7E               145 	.db	#-5,#0x7E
   0054 01                  146 	.db	1
   0055 7F                  147 	.db	0x7F
   0056 FB 7E               148 	.db	#-5,#0x7E
   0058 75                  149 	.db	117
   0059 7D 7D 7C 7B 7B 7A   150 	.db	0x7D, 0x7D, 0x7C, 0x7B, 0x7B, 0x7A, 0x79, 0x78
        79 78
   0061 77 76 75 74 72 71   151 	.db	0x77, 0x76, 0x75, 0x74, 0x72, 0x71, 0x70, 0x6E
        70 6E
   0069 6C 6B 69 67 66 64   152 	.db	0x6C, 0x6B, 0x69, 0x67, 0x66, 0x64, 0x62, 0x60
        62 60
   0071 5E 5B 59 57 55 52   153 	.db	0x5E, 0x5B, 0x59, 0x57, 0x55, 0x52, 0x50, 0x4E
        50 4E
   0079 4B 49 46 43 41 3E   154 	.db	0x4B, 0x49, 0x46, 0x43, 0x41, 0x3E, 0x3B, 0x39
        3B 39
   0081 36 33 30 2D 2A 27   155 	.db	0x36, 0x33, 0x30, 0x2D, 0x2A, 0x27, 0x24, 0x21
        24 21
   0089 1E 1B 18 15 12 0F   156 	.db	0x1E, 0x1B, 0x18, 0x15, 0x12, 0x0F, 0x0C, 0x09
        0C 09
   0091 06 03 00 FD FA F7   157 	.db	0x06, 0x03, 0x00, 0xFD, 0xFA, 0xF7, 0xF4, 0xF1
        F4 F1
   0099 EE EB E8 E5 E2 DF   158 	.db	0xEE, 0xEB, 0xE8, 0xE5, 0xE2, 0xDF, 0xDC, 0xD9
        DC D9
   00A1 D6 D3 D0 CD CA C7   159 	.db	0xD6, 0xD3, 0xD0, 0xCD, 0xCA, 0xC7, 0xC5, 0xC2
        C5 C2
   00A9 BF BD BA B7 B5 B2   160 	.db	0xBF, 0xBD, 0xBA, 0xB7, 0xB5, 0xB2, 0xB0, 0xAE
        B0 AE
   00B1 AB A9 A7 A5 A2 A0   161 	.db	0xAB, 0xA9, 0xA7, 0xA5, 0xA2, 0xA0, 0x9E, 0x9C
        9E 9C
   00B9 9A 99 97 95 94 92   162 	.db	0x9A, 0x99, 0x97, 0x95, 0x94, 0x92, 0x90, 0x8F
        90 8F
   00C1 8E 8C 8B 8A 89 88   163 	.db	0x8E, 0x8C, 0x8B, 0x8A, 0x89, 0x88, 0x87, 0x86
        87 86
   00C9 85 85 84 83 83      164 	.db	0x85, 0x85, 0x84, 0x83, 0x83
   00CE FB 82               165 	.db	#-5,#0x82
   00D0 01                  166 	.db	1
   00D1 81                  167 	.db	0x81
   00D2 FB 82               168 	.db	#-5,#0x82
   00D4 3A                  169 	.db	58
   00D5 83 83 84 85 85 86   170 	.db	0x83, 0x83, 0x84, 0x85, 0x85, 0x86, 0x87, 0x88
        87 88
   00DD 89 8A 8B 8C 8E 8F   171 	.db	0x89, 0x8A, 0x8B, 0x8C, 0x8E, 0x8F, 0x90, 0x92
        90 92
   00E5 94 95 97 99 9A 9C   172 	.db	0x94, 0x95, 0x97, 0x99, 0x9A, 0x9C, 0x9E, 0xA0
        9E A0
   00ED A2 A5 A7 A9 AB AE   173 	.db	0xA2, 0xA5, 0xA7, 0xA9, 0xAB, 0xAE, 0xB0, 0xB2
        B0 B2
   00F5 B5 B7 BA BD BF C2   174 	.db	0xB5, 0xB7, 0xBA, 0xBD, 0xBF, 0xC2, 0xC5, 0xC7
        C5 C7
   00FD CA CD D0 D3 D6 D9   175 	.db	0xCA, 0xCD, 0xD0, 0xD3, 0xD6, 0xD9, 0xDC, 0xDF
        DC DF
   0105 E2 E5 E8 EB EE F1   176 	.db	0xE2, 0xE5, 0xE8, 0xEB, 0xEE, 0xF1, 0xF4, 0xF7
        F4 F7
   010D FA FD               177 	.db	0xFA, 0xFD
   010F 00                  178 	.db	0
                            179 ;demo.c:36: uint8_t packbuffer[16000] = {0};
   0110 21r00s01            180 	ld	hl,#_packbuffer
   0113 CDr00s00            181 	call	__initrleblock
   0116 81 00               182 	.db	#-127,#0x00
   0118 81 00               183 	.db	#-127,#0x00
   011A 81 00               184 	.db	#-127,#0x00
   011C 81 00               185 	.db	#-127,#0x00
   011E 81 00               186 	.db	#-127,#0x00
   0120 81 00               187 	.db	#-127,#0x00
   0122 81 00               188 	.db	#-127,#0x00
   0124 81 00               189 	.db	#-127,#0x00
   0126 81 00               190 	.db	#-127,#0x00
   0128 81 00               191 	.db	#-127,#0x00
   012A 81 00               192 	.db	#-127,#0x00
   012C 81 00               193 	.db	#-127,#0x00
   012E 81 00               194 	.db	#-127,#0x00
   0130 81 00               195 	.db	#-127,#0x00
   0132 81 00               196 	.db	#-127,#0x00
   0134 81 00               197 	.db	#-127,#0x00
   0136 81 00               198 	.db	#-127,#0x00
   0138 81 00               199 	.db	#-127,#0x00
   013A 81 00               200 	.db	#-127,#0x00
   013C 81 00               201 	.db	#-127,#0x00
   013E 81 00               202 	.db	#-127,#0x00
   0140 81 00               203 	.db	#-127,#0x00
   0142 81 00               204 	.db	#-127,#0x00
   0144 81 00               205 	.db	#-127,#0x00
   0146 81 00               206 	.db	#-127,#0x00
   0148 81 00               207 	.db	#-127,#0x00
   014A 81 00               208 	.db	#-127,#0x00
   014C 81 00               209 	.db	#-127,#0x00
   014E 81 00               210 	.db	#-127,#0x00
   0150 81 00               211 	.db	#-127,#0x00
   0152 81 00               212 	.db	#-127,#0x00
   0154 81 00               213 	.db	#-127,#0x00
   0156 81 00               214 	.db	#-127,#0x00
   0158 81 00               215 	.db	#-127,#0x00
   015A 81 00               216 	.db	#-127,#0x00
   015C 81 00               217 	.db	#-127,#0x00
   015E 81 00               218 	.db	#-127,#0x00
   0160 81 00               219 	.db	#-127,#0x00
   0162 81 00               220 	.db	#-127,#0x00
   0164 81 00               221 	.db	#-127,#0x00
   0166 81 00               222 	.db	#-127,#0x00
   0168 81 00               223 	.db	#-127,#0x00
   016A 81 00               224 	.db	#-127,#0x00
   016C 81 00               225 	.db	#-127,#0x00
   016E 81 00               226 	.db	#-127,#0x00
   0170 81 00               227 	.db	#-127,#0x00
   0172 81 00               228 	.db	#-127,#0x00
   0174 81 00               229 	.db	#-127,#0x00
   0176 81 00               230 	.db	#-127,#0x00
   0178 81 00               231 	.db	#-127,#0x00
   017A 81 00               232 	.db	#-127,#0x00
   017C 81 00               233 	.db	#-127,#0x00
   017E 81 00               234 	.db	#-127,#0x00
   0180 81 00               235 	.db	#-127,#0x00
   0182 81 00               236 	.db	#-127,#0x00
   0184 81 00               237 	.db	#-127,#0x00
   0186 81 00               238 	.db	#-127,#0x00
   0188 81 00               239 	.db	#-127,#0x00
   018A 81 00               240 	.db	#-127,#0x00
   018C 81 00               241 	.db	#-127,#0x00
   018E 81 00               242 	.db	#-127,#0x00
   0190 81 00               243 	.db	#-127,#0x00
   0192 81 00               244 	.db	#-127,#0x00
   0194 81 00               245 	.db	#-127,#0x00
   0196 81 00               246 	.db	#-127,#0x00
   0198 81 00               247 	.db	#-127,#0x00
   019A 81 00               248 	.db	#-127,#0x00
   019C 81 00               249 	.db	#-127,#0x00
   019E 81 00               250 	.db	#-127,#0x00
   01A0 81 00               251 	.db	#-127,#0x00
   01A2 81 00               252 	.db	#-127,#0x00
   01A4 81 00               253 	.db	#-127,#0x00
   01A6 81 00               254 	.db	#-127,#0x00
   01A8 81 00               255 	.db	#-127,#0x00
   01AA 81 00               256 	.db	#-127,#0x00
   01AC 81 00               257 	.db	#-127,#0x00
   01AE 81 00               258 	.db	#-127,#0x00
   01B0 81 00               259 	.db	#-127,#0x00
   01B2 81 00               260 	.db	#-127,#0x00
   01B4 81 00               261 	.db	#-127,#0x00
   01B6 81 00               262 	.db	#-127,#0x00
   01B8 81 00               263 	.db	#-127,#0x00
   01BA 81 00               264 	.db	#-127,#0x00
   01BC 81 00               265 	.db	#-127,#0x00
   01BE 81 00               266 	.db	#-127,#0x00
   01C0 81 00               267 	.db	#-127,#0x00
   01C2 81 00               268 	.db	#-127,#0x00
   01C4 81 00               269 	.db	#-127,#0x00
   01C6 81 00               270 	.db	#-127,#0x00
   01C8 81 00               271 	.db	#-127,#0x00
   01CA 81 00               272 	.db	#-127,#0x00
   01CC 81 00               273 	.db	#-127,#0x00
   01CE 81 00               274 	.db	#-127,#0x00
   01D0 81 00               275 	.db	#-127,#0x00
   01D2 81 00               276 	.db	#-127,#0x00
   01D4 81 00               277 	.db	#-127,#0x00
   01D6 81 00               278 	.db	#-127,#0x00
   01D8 81 00               279 	.db	#-127,#0x00
   01DA 81 00               280 	.db	#-127,#0x00
   01DC 81 00               281 	.db	#-127,#0x00
   01DE 81 00               282 	.db	#-127,#0x00
   01E0 81 00               283 	.db	#-127,#0x00
   01E2 81 00               284 	.db	#-127,#0x00
   01E4 81 00               285 	.db	#-127,#0x00
   01E6 81 00               286 	.db	#-127,#0x00
   01E8 81 00               287 	.db	#-127,#0x00
   01EA 81 00               288 	.db	#-127,#0x00
   01EC 81 00               289 	.db	#-127,#0x00
   01EE 81 00               290 	.db	#-127,#0x00
   01F0 81 00               291 	.db	#-127,#0x00
   01F2 81 00               292 	.db	#-127,#0x00
   01F4 81 00               293 	.db	#-127,#0x00
   01F6 81 00               294 	.db	#-127,#0x00
   01F8 81 00               295 	.db	#-127,#0x00
   01FA 81 00               296 	.db	#-127,#0x00
   01FC 81 00               297 	.db	#-127,#0x00
   01FE 81 00               298 	.db	#-127,#0x00
   0200 81 00               299 	.db	#-127,#0x00
   0202 81 00               300 	.db	#-127,#0x00
   0204 81 00               301 	.db	#-127,#0x00
   0206 81 00               302 	.db	#-127,#0x00
   0208 81 00               303 	.db	#-127,#0x00
   020A 81 00               304 	.db	#-127,#0x00
   020C 81 00               305 	.db	#-127,#0x00
   020E 81 00               306 	.db	#-127,#0x00
   0210 83 00               307 	.db	#-125,#0x00
   0212 00                  308 	.db	0
                            309 ;demo.c:42: volatile int vbicount=0;
   0213 FD 21r40s40         310 	ld	iy,#_vbicount
   0217 FD 36 00 00         311 	ld	0 (iy),#0x00
   021B FD 21r40s40         312 	ld	iy,#_vbicount
   021F FD 36 01 00         313 	ld	1 (iy),#0x00
                            314 ;demo.c:43: volatile int tick=0;
   0223 FD 21r42s40         315 	ld	iy,#_tick
   0227 FD 36 00 00         316 	ld	0 (iy),#0x00
   022B FD 21r42s40         317 	ld	iy,#_tick
   022F FD 36 01 00         318 	ld	1 (iy),#0x00
                            319 ;demo.c:213: uint8_t yofff = 0;
   0233 FD 21r4Cs40         320 	ld	iy,#_yofff
   0237 FD 36 00 00         321 	ld	0 (iy),#0x00
                            322 ;demo.c:214: uint8_t cc = 0;
   023B FD 21r4Ds40         323 	ld	iy,#_cc
   023F FD 36 00 00         324 	ld	0 (iy),#0x00
                            325 ;demo.c:215: static int flipper = 0;
   0243 FD 21r4Es40         326 	ld	iy,#_flipper
   0247 FD 36 00 00         327 	ld	0 (iy),#0x00
   024B FD 21r4Es40         328 	ld	iy,#_flipper
   024F FD 36 01 00         329 	ld	1 (iy),#0x00
                            330 ;demo.c:216: static int ymmmf = 0;
   0253 FD 21r50s40         331 	ld	iy,#_ymmmf
   0257 FD 36 00 00         332 	ld	0 (iy),#0x00
   025B FD 21r50s40         333 	ld	iy,#_ymmmf
   025F FD 36 01 00         334 	ld	1 (iy),#0x00
                            335 ;demo.c:248: char block_init = 0;
   0263 FD 21r52s40         336 	ld	iy,#_block_init
   0267 FD 36 00 00         337 	ld	0 (iy),#0x00
                            338 ;demo.c:250: int bsx = 0;
   026B FD 21r53s40         339 	ld	iy,#_bsx
   026F FD 36 00 00         340 	ld	0 (iy),#0x00
   0273 FD 21r53s40         341 	ld	iy,#_bsx
   0277 FD 36 01 00         342 	ld	1 (iy),#0x00
                            343 ;demo.c:251: int bsy = 0;
   027B FD 21r55s40         344 	ld	iy,#_bsy
   027F FD 36 00 00         345 	ld	0 (iy),#0x00
   0283 FD 21r55s40         346 	ld	iy,#_bsy
   0287 FD 36 01 00         347 	ld	1 (iy),#0x00
                            348 ;demo.c:252: int btx = 0;
   028B FD 21r57s40         349 	ld	iy,#_btx
   028F FD 36 00 00         350 	ld	0 (iy),#0x00
   0293 FD 21r57s40         351 	ld	iy,#_btx
   0297 FD 36 01 00         352 	ld	1 (iy),#0x00
                            353 ;demo.c:253: int bty = 0;
   029B FD 21r59s40         354 	ld	iy,#_bty
   029F FD 36 00 00         355 	ld	0 (iy),#0x00
   02A3 FD 21r59s40         356 	ld	iy,#_bty
   02A7 FD 36 01 00         357 	ld	1 (iy),#0x00
                            358 ;demo.c:255: int btab[16] = {0};
   02AB 21r5Bs40            359 	ld	hl,#_btab
   02AE CDr00s00            360 	call	__initrleblock
   02B1 E0 00               361 	.db	#-32,#0x00
   02B3 00                  362 	.db	0
                            363 ;demo.c:257: int flof = 0;
   02B4 FD 21r7Bs40         364 	ld	iy,#_flof
   02B8 FD 36 00 00         365 	ld	0 (iy),#0x00
   02BC FD 21r7Bs40         366 	ld	iy,#_flof
   02C0 FD 36 01 00         367 	ld	1 (iy),#0x00
                            368 ;demo.c:307: int linenum = 0;
   02C4 FD 21r7Ds40         369 	ld	iy,#_linenum
   02C8 FD 36 00 00         370 	ld	0 (iy),#0x00
   02CC FD 21r7Ds40         371 	ld	iy,#_linenum
   02D0 FD 36 01 00         372 	ld	1 (iy),#0x00
                            373 ;demo.c:376: uint8_t lx = 0;
   02D4 FD 21r7Fs40         374 	ld	iy,#_lx
   02D8 FD 36 00 00         375 	ld	0 (iy),#0x00
                            376 ;demo.c:377: uint8_t ly = 0;
   02DC FD 21r80s40         377 	ld	iy,#_ly
   02E0 FD 36 00 00         378 	ld	0 (iy),#0x00
                            379 ;demo.c:420: static int xo = 0;
   02E4 FD 21r81s40         380 	ld	iy,#_xo
   02E8 FD 36 00 00         381 	ld	0 (iy),#0x00
   02EC FD 21r81s40         382 	ld	iy,#_xo
   02F0 FD 36 01 00         383 	ld	1 (iy),#0x00
                            384 ;demo.c:421: static int yo = 0;
   02F4 FD 21r83s40         385 	ld	iy,#_yo
   02F8 FD 36 00 00         386 	ld	0 (iy),#0x00
   02FC FD 21r83s40         387 	ld	iy,#_yo
   0300 FD 36 01 00         388 	ld	1 (iy),#0x00
                            389 ;demo.c:422: static int po = 0;
   0304 FD 21r85s40         390 	ld	iy,#_po
   0308 FD 36 00 00         391 	ld	0 (iy),#0x00
   030C FD 21r85s40         392 	ld	iy,#_po
   0310 FD 36 01 00         393 	ld	1 (iy),#0x00
                            394 ;demo.c:423: static int fffaaa = 0;
   0314 FD 21r87s40         395 	ld	iy,#_fffaaa
   0318 FD 36 00 00         396 	ld	0 (iy),#0x00
   031C FD 21r87s40         397 	ld	iy,#_fffaaa
   0320 FD 36 01 00         398 	ld	1 (iy),#0x00
                            399 ;--------------------------------------------------------
                            400 ; Home
                            401 ;--------------------------------------------------------
                            402 	.area _HOME
                            403 	.area _HOME
                            404 ;--------------------------------------------------------
                            405 ; code
                            406 ;--------------------------------------------------------
                            407 	.area _CODE
                            408 ;demo.c:46: int isNthBitSet (unsigned char c, int n) {
                            409 ;	---------------------------------
                            410 ; Function isNthBitSet
                            411 ; ---------------------------------
   0000                     412 _isNthBitSet_start::
   0000                     413 _isNthBitSet:
   0000 DD E5               414 	push	ix
   0002 DD 21 00 00         415 	ld	ix,#0
   0006 DD 39               416 	add	ix,sp
                            417 ;demo.c:48: return ((c & mask[n]) != 0);
   0008 3Er44               418 	ld	a,#<_isNthBitSet_mask_1_1
   000A DD 86 05            419 	add	a,5 (ix)
   000D 4F                  420 	ld	c,a
   000E 3Es40               421 	ld	a,#>_isNthBitSet_mask_1_1
   0010 DD 8E 06            422 	adc	a,6 (ix)
   0013 47                  423 	ld	b,a
   0014 0A                  424 	ld	a,(bc)
   0015 DD A6 04            425 	and	a,4 (ix)
   0018 20 04               426 	jr	NZ,00103$
   001A 3E 01               427 	ld	a,#0x01
   001C 18 01               428 	jr	00104$
   001E                     429 00103$:
   001E AF                  430 	xor	a,a
   001F                     431 00104$:
   001F B7                  432 	or	a,a
   0020 D6 01               433 	sub	a,#0x01
   0022 3E 00               434 	ld	a,#0x00
   0024 17                  435 	rla
   0025 4F                  436 	ld	c,a
   0026 69                  437 	ld	l,c
   0027 26 00               438 	ld	h,#0x00
   0029 DD E1               439 	pop	ix
   002B C9                  440 	ret
   002C                     441 _isNthBitSet_end::
   002C                     442 _sintabx:
   002C 78 00               443 	.dw #0x0078
   002E 7A 00               444 	.dw #0x007A
   0030 7D 00               445 	.dw #0x007D
   0032 80 00               446 	.dw #0x0080
   0034 83 00               447 	.dw #0x0083
   0036 86 00               448 	.dw #0x0086
   0038 89 00               449 	.dw #0x0089
   003A 8C 00               450 	.dw #0x008C
   003C 8F 00               451 	.dw #0x008F
   003E 92 00               452 	.dw #0x0092
   0040 95 00               453 	.dw #0x0095
   0042 98 00               454 	.dw #0x0098
   0044 9A 00               455 	.dw #0x009A
   0046 9D 00               456 	.dw #0x009D
   0048 A0 00               457 	.dw #0x00A0
   004A A3 00               458 	.dw #0x00A3
   004C A5 00               459 	.dw #0x00A5
   004E A8 00               460 	.dw #0x00A8
   0050 AB 00               461 	.dw #0x00AB
   0052 AD 00               462 	.dw #0x00AD
   0054 B0 00               463 	.dw #0x00B0
   0056 B3 00               464 	.dw #0x00B3
   0058 B5 00               465 	.dw #0x00B5
   005A B8 00               466 	.dw #0x00B8
   005C BA 00               467 	.dw #0x00BA
   005E BD 00               468 	.dw #0x00BD
   0060 BF 00               469 	.dw #0x00BF
   0062 C1 00               470 	.dw #0x00C1
   0064 C4 00               471 	.dw #0x00C4
   0066 C6 00               472 	.dw #0x00C6
   0068 C8 00               473 	.dw #0x00C8
   006A CA 00               474 	.dw #0x00CA
   006C CC 00               475 	.dw #0x00CC
   006E CE 00               476 	.dw #0x00CE
   0070 D0 00               477 	.dw #0x00D0
   0072 D2 00               478 	.dw #0x00D2
   0074 D4 00               479 	.dw #0x00D4
   0076 D6 00               480 	.dw #0x00D6
   0078 D8 00               481 	.dw #0x00D8
   007A DA 00               482 	.dw #0x00DA
   007C DB 00               483 	.dw #0x00DB
   007E DD 00               484 	.dw #0x00DD
   0080 DE 00               485 	.dw #0x00DE
   0082 E0 00               486 	.dw #0x00E0
   0084 E1 00               487 	.dw #0x00E1
   0086 E3 00               488 	.dw #0x00E3
   0088 E4 00               489 	.dw #0x00E4
   008A E5 00               490 	.dw #0x00E5
   008C E6 00               491 	.dw #0x00E6
   008E E7 00               492 	.dw #0x00E7
   0090 E8 00               493 	.dw #0x00E8
   0092 E9 00               494 	.dw #0x00E9
   0094 EA 00               495 	.dw #0x00EA
   0096 EB 00               496 	.dw #0x00EB
   0098 EC 00               497 	.dw #0x00EC
   009A ED 00               498 	.dw #0x00ED
   009C ED 00               499 	.dw #0x00ED
   009E EE 00               500 	.dw #0x00EE
   00A0 EE 00               501 	.dw #0x00EE
   00A2 EF 00               502 	.dw #0x00EF
   00A4 EF 00               503 	.dw #0x00EF
   00A6 EF 00               504 	.dw #0x00EF
   00A8 EF 00               505 	.dw #0x00EF
   00AA EF 00               506 	.dw #0x00EF
   00AC F0 00               507 	.dw #0x00F0
   00AE EF 00               508 	.dw #0x00EF
   00B0 EF 00               509 	.dw #0x00EF
   00B2 EF 00               510 	.dw #0x00EF
   00B4 EF 00               511 	.dw #0x00EF
   00B6 EF 00               512 	.dw #0x00EF
   00B8 EE 00               513 	.dw #0x00EE
   00BA EE 00               514 	.dw #0x00EE
   00BC ED 00               515 	.dw #0x00ED
   00BE ED 00               516 	.dw #0x00ED
   00C0 EC 00               517 	.dw #0x00EC
   00C2 EB 00               518 	.dw #0x00EB
   00C4 EA 00               519 	.dw #0x00EA
   00C6 E9 00               520 	.dw #0x00E9
   00C8 E8 00               521 	.dw #0x00E8
   00CA E7 00               522 	.dw #0x00E7
   00CC E6 00               523 	.dw #0x00E6
   00CE E5 00               524 	.dw #0x00E5
   00D0 E4 00               525 	.dw #0x00E4
   00D2 E3 00               526 	.dw #0x00E3
   00D4 E1 00               527 	.dw #0x00E1
   00D6 E0 00               528 	.dw #0x00E0
   00D8 DE 00               529 	.dw #0x00DE
   00DA DD 00               530 	.dw #0x00DD
   00DC DB 00               531 	.dw #0x00DB
   00DE DA 00               532 	.dw #0x00DA
   00E0 D8 00               533 	.dw #0x00D8
   00E2 D6 00               534 	.dw #0x00D6
   00E4 D4 00               535 	.dw #0x00D4
   00E6 D2 00               536 	.dw #0x00D2
   00E8 D0 00               537 	.dw #0x00D0
   00EA CE 00               538 	.dw #0x00CE
   00EC CC 00               539 	.dw #0x00CC
   00EE CA 00               540 	.dw #0x00CA
   00F0 C8 00               541 	.dw #0x00C8
   00F2 C6 00               542 	.dw #0x00C6
   00F4 C4 00               543 	.dw #0x00C4
   00F6 C1 00               544 	.dw #0x00C1
   00F8 BF 00               545 	.dw #0x00BF
   00FA BD 00               546 	.dw #0x00BD
   00FC BA 00               547 	.dw #0x00BA
   00FE B8 00               548 	.dw #0x00B8
   0100 B5 00               549 	.dw #0x00B5
   0102 B3 00               550 	.dw #0x00B3
   0104 B0 00               551 	.dw #0x00B0
   0106 AD 00               552 	.dw #0x00AD
   0108 AB 00               553 	.dw #0x00AB
   010A A8 00               554 	.dw #0x00A8
   010C A5 00               555 	.dw #0x00A5
   010E A3 00               556 	.dw #0x00A3
   0110 A0 00               557 	.dw #0x00A0
   0112 9D 00               558 	.dw #0x009D
   0114 9A 00               559 	.dw #0x009A
   0116 98 00               560 	.dw #0x0098
   0118 95 00               561 	.dw #0x0095
   011A 92 00               562 	.dw #0x0092
   011C 8F 00               563 	.dw #0x008F
   011E 8C 00               564 	.dw #0x008C
   0120 89 00               565 	.dw #0x0089
   0122 86 00               566 	.dw #0x0086
   0124 83 00               567 	.dw #0x0083
   0126 80 00               568 	.dw #0x0080
   0128 7D 00               569 	.dw #0x007D
   012A 7A 00               570 	.dw #0x007A
   012C 78 00               571 	.dw #0x0078
   012E 75 00               572 	.dw #0x0075
   0130 72 00               573 	.dw #0x0072
   0132 6F 00               574 	.dw #0x006F
   0134 6C 00               575 	.dw #0x006C
   0136 69 00               576 	.dw #0x0069
   0138 66 00               577 	.dw #0x0066
   013A 63 00               578 	.dw #0x0063
   013C 60 00               579 	.dw #0x0060
   013E 5D 00               580 	.dw #0x005D
   0140 5A 00               581 	.dw #0x005A
   0142 57 00               582 	.dw #0x0057
   0144 55 00               583 	.dw #0x0055
   0146 52 00               584 	.dw #0x0052
   0148 4F 00               585 	.dw #0x004F
   014A 4C 00               586 	.dw #0x004C
   014C 4A 00               587 	.dw #0x004A
   014E 47 00               588 	.dw #0x0047
   0150 44 00               589 	.dw #0x0044
   0152 42 00               590 	.dw #0x0042
   0154 3F 00               591 	.dw #0x003F
   0156 3C 00               592 	.dw #0x003C
   0158 3A 00               593 	.dw #0x003A
   015A 37 00               594 	.dw #0x0037
   015C 35 00               595 	.dw #0x0035
   015E 32 00               596 	.dw #0x0032
   0160 30 00               597 	.dw #0x0030
   0162 2E 00               598 	.dw #0x002E
   0164 2B 00               599 	.dw #0x002B
   0166 29 00               600 	.dw #0x0029
   0168 27 00               601 	.dw #0x0027
   016A 25 00               602 	.dw #0x0025
   016C 23 00               603 	.dw #0x0023
   016E 21 00               604 	.dw #0x0021
   0170 1F 00               605 	.dw #0x001F
   0172 1D 00               606 	.dw #0x001D
   0174 1B 00               607 	.dw #0x001B
   0176 19 00               608 	.dw #0x0019
   0178 17 00               609 	.dw #0x0017
   017A 15 00               610 	.dw #0x0015
   017C 14 00               611 	.dw #0x0014
   017E 12 00               612 	.dw #0x0012
   0180 11 00               613 	.dw #0x0011
   0182 0F 00               614 	.dw #0x000F
   0184 0E 00               615 	.dw #0x000E
   0186 0C 00               616 	.dw #0x000C
   0188 0B 00               617 	.dw #0x000B
   018A 0A 00               618 	.dw #0x000A
   018C 09 00               619 	.dw #0x0009
   018E 08 00               620 	.dw #0x0008
   0190 07 00               621 	.dw #0x0007
   0192 06 00               622 	.dw #0x0006
   0194 05 00               623 	.dw #0x0005
   0196 04 00               624 	.dw #0x0004
   0198 03 00               625 	.dw #0x0003
   019A 02 00               626 	.dw #0x0002
   019C 02 00               627 	.dw #0x0002
   019E 01 00               628 	.dw #0x0001
   01A0 01 00               629 	.dw #0x0001
   01A2 00 00               630 	.dw #0x0000
   01A4 00 00               631 	.dw #0x0000
   01A6 00 00               632 	.dw #0x0000
   01A8 00 00               633 	.dw #0x0000
   01AA 00 00               634 	.dw #0x0000
   01AC 00 00               635 	.dw #0x0000
   01AE 00 00               636 	.dw #0x0000
   01B0 00 00               637 	.dw #0x0000
   01B2 00 00               638 	.dw #0x0000
   01B4 00 00               639 	.dw #0x0000
   01B6 00 00               640 	.dw #0x0000
   01B8 01 00               641 	.dw #0x0001
   01BA 01 00               642 	.dw #0x0001
   01BC 02 00               643 	.dw #0x0002
   01BE 02 00               644 	.dw #0x0002
   01C0 03 00               645 	.dw #0x0003
   01C2 04 00               646 	.dw #0x0004
   01C4 05 00               647 	.dw #0x0005
   01C6 06 00               648 	.dw #0x0006
   01C8 07 00               649 	.dw #0x0007
   01CA 08 00               650 	.dw #0x0008
   01CC 09 00               651 	.dw #0x0009
   01CE 0A 00               652 	.dw #0x000A
   01D0 0B 00               653 	.dw #0x000B
   01D2 0C 00               654 	.dw #0x000C
   01D4 0E 00               655 	.dw #0x000E
   01D6 0F 00               656 	.dw #0x000F
   01D8 11 00               657 	.dw #0x0011
   01DA 12 00               658 	.dw #0x0012
   01DC 14 00               659 	.dw #0x0014
   01DE 15 00               660 	.dw #0x0015
   01E0 17 00               661 	.dw #0x0017
   01E2 19 00               662 	.dw #0x0019
   01E4 1B 00               663 	.dw #0x001B
   01E6 1D 00               664 	.dw #0x001D
   01E8 1F 00               665 	.dw #0x001F
   01EA 21 00               666 	.dw #0x0021
   01EC 23 00               667 	.dw #0x0023
   01EE 25 00               668 	.dw #0x0025
   01F0 27 00               669 	.dw #0x0027
   01F2 29 00               670 	.dw #0x0029
   01F4 2B 00               671 	.dw #0x002B
   01F6 2E 00               672 	.dw #0x002E
   01F8 30 00               673 	.dw #0x0030
   01FA 32 00               674 	.dw #0x0032
   01FC 35 00               675 	.dw #0x0035
   01FE 37 00               676 	.dw #0x0037
   0200 3A 00               677 	.dw #0x003A
   0202 3C 00               678 	.dw #0x003C
   0204 3F 00               679 	.dw #0x003F
   0206 42 00               680 	.dw #0x0042
   0208 44 00               681 	.dw #0x0044
   020A 47 00               682 	.dw #0x0047
   020C 4A 00               683 	.dw #0x004A
   020E 4C 00               684 	.dw #0x004C
   0210 4F 00               685 	.dw #0x004F
   0212 52 00               686 	.dw #0x0052
   0214 55 00               687 	.dw #0x0055
   0216 57 00               688 	.dw #0x0057
   0218 5A 00               689 	.dw #0x005A
   021A 5D 00               690 	.dw #0x005D
   021C 60 00               691 	.dw #0x0060
   021E 63 00               692 	.dw #0x0063
   0220 66 00               693 	.dw #0x0066
   0222 69 00               694 	.dw #0x0069
   0224 6C 00               695 	.dw #0x006C
   0226 6F 00               696 	.dw #0x006F
   0228 72 00               697 	.dw #0x0072
   022A 75 00               698 	.dw #0x0075
                            699 ;demo.c:55: void my_isr(void) interrupt
                            700 ;	---------------------------------
                            701 ; Function my_isr
                            702 ; ---------------------------------
   022C                     703 _my_isr_start::
   022C                     704 _my_isr:
   022C F5                  705 	push	af
   022D C5                  706 	push	bc
   022E D5                  707 	push	de
   022F E5                  708 	push	hl
   0230 FD E5               709 	push	iy
                            710 ;demo.c:57: DI;
   0232 F3                  711 		di 
                            712 ;demo.c:59: READ_VDP_STATUS;
   0233 DB 99               713 		in a,(#0x99) 
                            714 ;demo.c:61: PLY_Play();
   0235 CDr00s00            715 	call	_PLY_Play
                            716 ;demo.c:62: PLY_SendRegisters();
   0238 CDr00s00            717 	call	_PLY_SendRegisters
                            718 ;demo.c:64: vbicount+=2;
   023B 21r40s40            719 	ld	hl,#_vbicount
   023E 7E                  720 	ld	a,(hl)
   023F C6 02               721 	add	a,#0x02
   0241 23                  722 	inc	hl
   0242 2B                  723 	dec	hl
   0243 C5                  724 	push	bc
   0244 4F                  725 	ld	c, a
   0245 23                  726 	inc	hl
   0246 7E                  727 	ld	a, (hl)
   0247 47                  728 	ld	b, a
   0248 79                  729 	ld	a, c
   0249 2B                  730 	dec	hl
   024A 77                  731 	ld	(hl), a
   024B 78                  732 	ld	a, b
   024C C1                  733 	pop	bc
   024D CE 00               734 	adc	a,#0x00
   024F 23                  735 	inc	hl
   0250 77                  736 	ld	(hl),a
                            737 ;demo.c:65: tick++;
   0251 FD 21r42s40         738 	ld	iy,#_tick
   0255 FD 34 00            739 	inc	0 (iy)
   0258 20 07               740 	jr	NZ,00103$
   025A FD 21r42s40         741 	ld	iy,#_tick
   025E FD 34 01            742 	inc	1 (iy)
   0261                     743 00103$:
                            744 ;demo.c:67: EI;
   0261 FB                  745 		ei 
   0262 FD E1               746 	pop	iy
   0264 E1                  747 	pop	hl
   0265 D1                  748 	pop	de
   0266 C1                  749 	pop	bc
   0267 F1                  750 	pop	af
   0268 ED 4D               751 	reti
   026A                     752 _my_isr_end::
                            753 ;demo.c:70: void color_isr(void) interrupt
                            754 ;	---------------------------------
                            755 ; Function color_isr
                            756 ; ---------------------------------
   026A                     757 _color_isr_start::
   026A                     758 _color_isr:
   026A F5                  759 	push	af
   026B C5                  760 	push	bc
   026C D5                  761 	push	de
   026D E5                  762 	push	hl
   026E FD E5               763 	push	iy
                            764 ;demo.c:72: DI;
   0270 F3                  765 		di 
                            766 ;demo.c:74: if(isNthBitSet(vdp2_status(1),0)) {
   0271 3E 01               767 	ld	a,#0x01
   0273 F5                  768 	push	af
   0274 33                  769 	inc	sp
   0275 CDr00s00            770 	call	_vdp2_status
   0278 33                  771 	inc	sp
   0279 4D                  772 	ld	c,l
   027A 21 00 00            773 	ld	hl,#0x0000
   027D E5                  774 	push	hl
   027E 79                  775 	ld	a,c
   027F F5                  776 	push	af
   0280 33                  777 	inc	sp
   0281 CDr00s00            778 	call	_isNthBitSet
   0284 F1                  779 	pop	af
   0285 33                  780 	inc	sp
   0286 44                  781 	ld	b,h
   0287 4D                  782 	ld	c,l
   0288 79                  783 	ld	a,c
   0289 B0                  784 	or	a,b
   028A 28 19               785 	jr	Z,00102$
                            786 ;demo.c:75: vdp_register(VDP_VOFFSET,sintab[vbicount & 255]);
   028C 21r40s40            787 	ld	hl,#_vbicount + 0
   028F 4E                  788 	ld	c,(hl)
   0290 06 00               789 	ld	b,#0x00
   0292 21r00s00            790 	ld	hl,#_sintab
   0295 09                  791 	add	hl,bc
   0296 7E                  792 	ld	a,(hl)
   0297 F5                  793 	push	af
   0298 33                  794 	inc	sp
   0299 3E 17               795 	ld	a,#0x17
   029B F5                  796 	push	af
   029C 33                  797 	inc	sp
   029D CDr00s00            798 	call	_vdp_register
   02A0 F1                  799 	pop	af
                            800 ;demo.c:76: READ_VDP_STATUS;
   02A1 DB 99               801 		in a,(#0x99) 
   02A3 18 18               802 	jr	00103$
   02A5                     803 00102$:
                            804 ;demo.c:79: READ_VDP_STATUS;
   02A5 DB 99               805 		in a,(#0x99) 
                            806 ;demo.c:80: vbicount++;
   02A7 FD 21r40s40         807 	ld	iy,#_vbicount
   02AB FD 34 00            808 	inc	0 (iy)
   02AE 20 07               809 	jr	NZ,00107$
   02B0 FD 21r40s40         810 	ld	iy,#_vbicount
   02B4 FD 34 01            811 	inc	1 (iy)
   02B7                     812 00107$:
                            813 ;demo.c:83: PLY_Play();
   02B7 CDr00s00            814 	call	_PLY_Play
                            815 ;demo.c:84: PLY_SendRegisters();
   02BA CDr00s00            816 	call	_PLY_SendRegisters
   02BD                     817 00103$:
                            818 ;demo.c:87: EI;
   02BD FB                  819 		ei 
   02BE FD E1               820 	pop	iy
   02C0 E1                  821 	pop	hl
   02C1 D1                  822 	pop	de
   02C2 C1                  823 	pop	bc
   02C3 F1                  824 	pop	af
   02C4 ED 4D               825 	reti
   02C6                     826 _color_isr_end::
                            827 ;demo.c:94: uint8_t ge5_load(char *file_name, uint8_t vramh, uint16_t vraml) {
                            828 ;	---------------------------------
                            829 ; Function ge5_load
                            830 ; ---------------------------------
   02C6                     831 _ge5_load_start::
   02C6                     832 _ge5_load:
   02C6 DD E5               833 	push	ix
   02C8 DD 21 00 00         834 	ld	ix,#0
   02CC DD 39               835 	add	ix,sp
   02CE 21 D2 FF            836 	ld	hl,#-46
   02D1 39                  837 	add	hl,sp
   02D2 F9                  838 	ld	sp,hl
                            839 ;demo.c:98: memset((uint8_t *) &f, 0, sizeof(fcb));
   02D3 21 00 00            840 	ld	hl,#0x0000
   02D6 39                  841 	add	hl,sp
   02D7 4D                  842 	ld	c,l
   02D8 44                  843 	ld	b,h
   02D9 21 2E 00            844 	ld	hl,#0x002E
   02DC E5                  845 	push	hl
   02DD 3E 00               846 	ld	a,#0x00
   02DF F5                  847 	push	af
   02E0 33                  848 	inc	sp
   02E1 C5                  849 	push	bc
   02E2 CDr00s00            850 	call	_memset
   02E5 F1                  851 	pop	af
   02E6 F1                  852 	pop	af
   02E7 33                  853 	inc	sp
                            854 ;demo.c:100: f.record_size = 128;
   02E8 21 00 00            855 	ld	hl,#0x0000
   02EB 39                  856 	add	hl,sp
   02EC 4D                  857 	ld	c,l
   02ED 44                  858 	ld	b,h
   02EE 21 0F 00            859 	ld	hl,#0x000F
   02F1 09                  860 	add	hl,bc
   02F2 EB                  861 	ex	de,hl
   02F3 3E 80               862 	ld	a,#0x80
   02F5 12                  863 	ld	(de),a
                            864 ;demo.c:101: f.drive = 0;
   02F6 3E 00               865 	ld	a,#0x00
   02F8 02                  866 	ld	(bc),a
                            867 ;demo.c:103: memcpy(f.name, file_name, 11);
   02F9 DD 5E 04            868 	ld	e,4 (ix)
   02FC DD 56 05            869 	ld	d,5 (ix)
   02FF 03                  870 	inc	bc
   0300 21 0B 00            871 	ld	hl,#0x000B
   0303 E5                  872 	push	hl
   0304 D5                  873 	push	de
   0305 C5                  874 	push	bc
   0306 CDr00s00            875 	call	_memcpy
   0309 F1                  876 	pop	af
   030A F1                  877 	pop	af
   030B F1                  878 	pop	af
                            879 ;demo.c:105: if (open(&f) != 0) return 0;
   030C 21 00 00            880 	ld	hl,#0x0000
   030F 39                  881 	add	hl,sp
   0310 E5                  882 	push	hl
   0311 CDr00s00            883 	call	_open
   0314 F1                  884 	pop	af
   0315 AF                  885 	xor	a,a
   0316 B5                  886 	or	a,l
   0317 28 05               887 	jr	Z,00102$
   0319 2E 00               888 	ld	l,#0x00
   031B C3r92s03            889 	jp	00114$
   031E                     890 00102$:
                            891 ;demo.c:106: vdp_set_write_address(vramh, vraml);
   031E DD 6E 07            892 	ld	l,7 (ix)
   0321 DD 66 08            893 	ld	h,8 (ix)
   0324 E5                  894 	push	hl
   0325 DD 7E 06            895 	ld	a,6 (ix)
   0328 F5                  896 	push	af
   0329 33                  897 	inc	sp
   032A CDr00s00            898 	call	_vdp_set_write_address
   032D F1                  899 	pop	af
   032E 33                  900 	inc	sp
                            901 ;demo.c:108: for (i = 0; i < 213; i++) {
   032F 0E 00               902 	ld	c,#0x00
   0331                     903 00110$:
   0331 79                  904 	ld	a,c
   0332 D6 D5               905 	sub	a,#0xD5
   0334 D2r87s03            906 	jp	NC,00113$
                            907 ;demo.c:109: if (block_set_data_ptr(scratch) != 0) return 0;
   0337 C5                  908 	push	bc
   0338 21r80s3F            909 	ld	hl,#_scratch
   033B E5                  910 	push	hl
   033C CDr00s00            911 	call	_block_set_data_ptr
   033F F1                  912 	pop	af
   0340 7D                  913 	ld	a,l
   0341 C1                  914 	pop	bc
   0342 47                  915 	ld	b,a
   0343 B7                  916 	or	a,a
   0344 28 05               917 	jr	Z,00104$
   0346 2E 00               918 	ld	l,#0x00
   0348 C3r92s03            919 	jp	00114$
   034B                     920 00104$:
                            921 ;demo.c:110: if (block_read(&f) != 0) return 0;
   034B 21 00 00            922 	ld	hl,#0x0000
   034E 39                  923 	add	hl,sp
   034F C5                  924 	push	bc
   0350 E5                  925 	push	hl
   0351 CDr00s00            926 	call	_block_read
   0354 F1                  927 	pop	af
   0355 7D                  928 	ld	a,l
   0356 C1                  929 	pop	bc
   0357 47                  930 	ld	b,a
   0358 B7                  931 	or	a,a
   0359 28 04               932 	jr	Z,00106$
   035B 2E 00               933 	ld	l,#0x00
   035D 18 33               934 	jr	00114$
   035F                     935 00106$:
                            936 ;demo.c:112: if (i == 0) vdp_load_screen(scratch + 7, 121);   // to skip GE5 header
   035F AF                  937 	xor	a,a
   0360 B1                  938 	or	a,c
   0361 20 11               939 	jr	NZ,00108$
   0363 11r87s3F            940 	ld	de,#_scratch + 7
   0366 C5                  941 	push	bc
   0367 3E 79               942 	ld	a,#0x79
   0369 F5                  943 	push	af
   036A 33                  944 	inc	sp
   036B D5                  945 	push	de
   036C CDr00s00            946 	call	_vdp_load_screen
   036F F1                  947 	pop	af
   0370 33                  948 	inc	sp
   0371 C1                  949 	pop	bc
   0372 18 0F               950 	jr	00112$
   0374                     951 00108$:
                            952 ;demo.c:113: else vdp_load_screen(scratch, 128);
   0374 C5                  953 	push	bc
   0375 3E 80               954 	ld	a,#0x80
   0377 F5                  955 	push	af
   0378 33                  956 	inc	sp
   0379 21r80s3F            957 	ld	hl,#_scratch
   037C E5                  958 	push	hl
   037D CDr00s00            959 	call	_vdp_load_screen
   0380 F1                  960 	pop	af
   0381 33                  961 	inc	sp
   0382 C1                  962 	pop	bc
   0383                     963 00112$:
                            964 ;demo.c:108: for (i = 0; i < 213; i++) {
   0383 0C                  965 	inc	c
   0384 C3r31s03            966 	jp	00110$
   0387                     967 00113$:
                            968 ;demo.c:116: close(&f);
   0387 21 00 00            969 	ld	hl,#0x0000
   038A 39                  970 	add	hl,sp
   038B E5                  971 	push	hl
   038C CDr00s00            972 	call	_close
   038F F1                  973 	pop	af
                            974 ;demo.c:118: return 1;
   0390 2E 01               975 	ld	l,#0x01
   0392                     976 00114$:
   0392 DD F9               977 	ld	sp,ix
   0394 DD E1               978 	pop	ix
   0396 C9                  979 	ret
   0397                     980 _ge5_load_end::
                            981 ;demo.c:121: void scratch_clear() {
                            982 ;	---------------------------------
                            983 ; Function scratch_clear
                            984 ; ---------------------------------
   0397                     985 _scratch_clear_start::
   0397                     986 _scratch_clear:
                            987 ;demo.c:122: memset((uint8_t *) &scratch, 0, 128);
   0397 21 80 00            988 	ld	hl,#0x0080
   039A E5                  989 	push	hl
   039B 3E 00               990 	ld	a,#0x00
   039D F5                  991 	push	af
   039E 33                  992 	inc	sp
   039F 21r80s3F            993 	ld	hl,#_scratch
   03A2 E5                  994 	push	hl
   03A3 CDr00s00            995 	call	_memset
   03A6 F1                  996 	pop	af
   03A7 F1                  997 	pop	af
   03A8 33                  998 	inc	sp
   03A9 C9                  999 	ret
   03AA                    1000 _scratch_clear_end::
                           1001 ;demo.c:125: uint8_t pal_load(char *file_name, uint8_t ss) {
                           1002 ;	---------------------------------
                           1003 ; Function pal_load
                           1004 ; ---------------------------------
   03AA                    1005 _pal_load_start::
   03AA                    1006 _pal_load:
   03AA DD E5              1007 	push	ix
   03AC DD 21 00 00        1008 	ld	ix,#0
   03B0 DD 39              1009 	add	ix,sp
   03B2 21 D2 FF           1010 	ld	hl,#-46
   03B5 39                 1011 	add	hl,sp
   03B6 F9                 1012 	ld	sp,hl
                           1013 ;demo.c:128: memset((uint8_t *) &f, 0, sizeof(fcb));
   03B7 21 00 00           1014 	ld	hl,#0x0000
   03BA 39                 1015 	add	hl,sp
   03BB 4D                 1016 	ld	c,l
   03BC 44                 1017 	ld	b,h
   03BD 21 2E 00           1018 	ld	hl,#0x002E
   03C0 E5                 1019 	push	hl
   03C1 3E 00              1020 	ld	a,#0x00
   03C3 F5                 1021 	push	af
   03C4 33                 1022 	inc	sp
   03C5 C5                 1023 	push	bc
   03C6 CDr00s00           1024 	call	_memset
   03C9 F1                 1025 	pop	af
   03CA F1                 1026 	pop	af
   03CB 33                 1027 	inc	sp
                           1028 ;demo.c:129: scratch_clear();
   03CC CDr97s03           1029 	call	_scratch_clear
                           1030 ;demo.c:131: f.record_size = ss;
   03CF 21 00 00           1031 	ld	hl,#0x0000
   03D2 39                 1032 	add	hl,sp
   03D3 4D                 1033 	ld	c,l
   03D4 44                 1034 	ld	b,h
   03D5 21 0F 00           1035 	ld	hl,#0x000F
   03D8 09                 1036 	add	hl,bc
   03D9 EB                 1037 	ex	de,hl
   03DA DD 7E 06           1038 	ld	a,6 (ix)
   03DD 12                 1039 	ld	(de),a
                           1040 ;demo.c:132: f.drive = 0;
   03DE 3E 00              1041 	ld	a,#0x00
   03E0 02                 1042 	ld	(bc),a
                           1043 ;demo.c:134: memcpy(f.name, file_name, 11);
   03E1 DD 5E 04           1044 	ld	e,4 (ix)
   03E4 DD 56 05           1045 	ld	d,5 (ix)
   03E7 03                 1046 	inc	bc
   03E8 21 0B 00           1047 	ld	hl,#0x000B
   03EB E5                 1048 	push	hl
   03EC D5                 1049 	push	de
   03ED C5                 1050 	push	bc
   03EE CDr00s00           1051 	call	_memcpy
   03F1 F1                 1052 	pop	af
   03F2 F1                 1053 	pop	af
   03F3 F1                 1054 	pop	af
                           1055 ;demo.c:136: if (open(&f) != 0) return 0;
   03F4 21 00 00           1056 	ld	hl,#0x0000
   03F7 39                 1057 	add	hl,sp
   03F8 E5                 1058 	push	hl
   03F9 CDr00s00           1059 	call	_open
   03FC F1                 1060 	pop	af
   03FD AF                 1061 	xor	a,a
   03FE B5                 1062 	or	a,l
   03FF 28 04              1063 	jr	Z,00102$
   0401 2E 00              1064 	ld	l,#0x00
   0403 18 40              1065 	jr	00107$
   0405                    1066 00102$:
                           1067 ;demo.c:137: if (block_set_data_ptr(scratch) != 0) return 0;
   0405 21r80s3F           1068 	ld	hl,#_scratch
   0408 E5                 1069 	push	hl
   0409 CDr00s00           1070 	call	_block_set_data_ptr
   040C F1                 1071 	pop	af
   040D AF                 1072 	xor	a,a
   040E B5                 1073 	or	a,l
   040F 28 04              1074 	jr	Z,00104$
   0411 2E 00              1075 	ld	l,#0x00
   0413 18 30              1076 	jr	00107$
   0415                    1077 00104$:
                           1078 ;demo.c:138: if (block_read(&f) != 0) return 0;
   0415 21 00 00           1079 	ld	hl,#0x0000
   0418 39                 1080 	add	hl,sp
   0419 E5                 1081 	push	hl
   041A CDr00s00           1082 	call	_block_read
   041D F1                 1083 	pop	af
   041E AF                 1084 	xor	a,a
   041F B5                 1085 	or	a,l
   0420 28 04              1086 	jr	Z,00106$
   0422 2E 00              1087 	ld	l,#0x00
   0424 18 1F              1088 	jr	00107$
   0426                    1089 00106$:
                           1090 ;demo.c:140: memcpy(cur_palette, scratch+7, ss);
   0426 DD 4E 06           1091 	ld	c,6 (ix)
   0429 06 00              1092 	ld	b,#0x00
   042B 11r87s3F           1093 	ld	de,#_scratch + 7
   042E C5                 1094 	push	bc
   042F D5                 1095 	push	de
   0430 21r00s40           1096 	ld	hl,#_cur_palette
   0433 E5                 1097 	push	hl
   0434 CDr00s00           1098 	call	_memcpy
   0437 F1                 1099 	pop	af
   0438 F1                 1100 	pop	af
   0439 F1                 1101 	pop	af
                           1102 ;demo.c:142: close(&f);
   043A 21 00 00           1103 	ld	hl,#0x0000
   043D 39                 1104 	add	hl,sp
   043E E5                 1105 	push	hl
   043F CDr00s00           1106 	call	_close
   0442 F1                 1107 	pop	af
                           1108 ;demo.c:143: return 1;
   0443 2E 01              1109 	ld	l,#0x01
   0445                    1110 00107$:
   0445 DD F9              1111 	ld	sp,ix
   0447 DD E1              1112 	pop	ix
   0449 C9                 1113 	ret
   044A                    1114 _pal_load_end::
                           1115 ;demo.c:147: void pause() {
                           1116 ;	---------------------------------
                           1117 ; Function pause
                           1118 ; ---------------------------------
   044A                    1119 _pause_start::
   044A                    1120 _pause:
                           1121 ;demo.c:148: uint8_t i,j,k = 0;
                           1122 ;demo.c:149: for (i = 0; i < 255; i++) {	
   044A 01 00 00           1123 	ld	bc,#0x0000
   044D                    1124 00104$:
   044D 78                 1125 	ld	a,b
   044E D6 FF              1126 	sub	a,#0xFF
   0450 D0                 1127 	ret	NC
                           1128 ;demo.c:150: for (j = 0; j < 255; j++) {
   0451 59                 1129 	ld	e,c
   0452 16 FF              1130 	ld	d,#0xFF
   0454                    1131 00103$:
                           1132 ;demo.c:151: k++;
   0454 1C                 1133 	inc	e
   0455 15                 1134 	dec	d
                           1135 ;demo.c:150: for (j = 0; j < 255; j++) {
   0456 AF                 1136 	xor	a,a
   0457 B2                 1137 	or	a,d
   0458 20 FA              1138 	jr	NZ,00103$
                           1139 ;demo.c:149: for (i = 0; i < 255; i++) {	
   045A 4B                 1140 	ld	c,e
   045B 04                 1141 	inc	b
   045C 18 EF              1142 	jr	00104$
   045E                    1143 _pause_end::
                           1144 ;demo.c:157: uint8_t raw_load(char *file_name, int size, char* buffer) {
                           1145 ;	---------------------------------
                           1146 ; Function raw_load
                           1147 ; ---------------------------------
   045E                    1148 _raw_load_start::
   045E                    1149 _raw_load:
   045E DD E5              1150 	push	ix
   0460 DD 21 00 00        1151 	ld	ix,#0
   0464 DD 39              1152 	add	ix,sp
   0466 21 D2 FF           1153 	ld	hl,#-46
   0469 39                 1154 	add	hl,sp
   046A F9                 1155 	ld	sp,hl
                           1156 ;demo.c:162: memset((uint8_t *) &f, 0, sizeof(fcb));
   046B 21 00 00           1157 	ld	hl,#0x0000
   046E 39                 1158 	add	hl,sp
   046F 4D                 1159 	ld	c,l
   0470 44                 1160 	ld	b,h
   0471 21 2E 00           1161 	ld	hl,#0x002E
   0474 E5                 1162 	push	hl
   0475 3E 00              1163 	ld	a,#0x00
   0477 F5                 1164 	push	af
   0478 33                 1165 	inc	sp
   0479 C5                 1166 	push	bc
   047A CDr00s00           1167 	call	_memset
   047D F1                 1168 	pop	af
   047E F1                 1169 	pop	af
   047F 33                 1170 	inc	sp
                           1171 ;demo.c:163: scratch_clear();
   0480 CDr97s03           1172 	call	_scratch_clear
                           1173 ;demo.c:165: f.record_size = 128;
   0483 21 00 00           1174 	ld	hl,#0x0000
   0486 39                 1175 	add	hl,sp
   0487 4D                 1176 	ld	c,l
   0488 44                 1177 	ld	b,h
   0489 21 0F 00           1178 	ld	hl,#0x000F
   048C 09                 1179 	add	hl,bc
   048D EB                 1180 	ex	de,hl
   048E 3E 80              1181 	ld	a,#0x80
   0490 12                 1182 	ld	(de),a
                           1183 ;demo.c:166: f.drive = 0;
   0491 3E 00              1184 	ld	a,#0x00
   0493 02                 1185 	ld	(bc),a
                           1186 ;demo.c:168: memcpy(f.name, file_name, 11);
   0494 DD 5E 04           1187 	ld	e,4 (ix)
   0497 DD 56 05           1188 	ld	d,5 (ix)
   049A 03                 1189 	inc	bc
   049B 21 0B 00           1190 	ld	hl,#0x000B
   049E E5                 1191 	push	hl
   049F D5                 1192 	push	de
   04A0 C5                 1193 	push	bc
   04A1 CDr00s00           1194 	call	_memcpy
   04A4 F1                 1195 	pop	af
   04A5 F1                 1196 	pop	af
   04A6 F1                 1197 	pop	af
                           1198 ;demo.c:170: if (open(&f) != 0) return 0;
   04A7 21 00 00           1199 	ld	hl,#0x0000
   04AA 39                 1200 	add	hl,sp
   04AB E5                 1201 	push	hl
   04AC CDr00s00           1202 	call	_open
   04AF F1                 1203 	pop	af
   04B0 AF                 1204 	xor	a,a
   04B1 B5                 1205 	or	a,l
   04B2 28 05              1206 	jr	Z,00116$
   04B4 2E 00              1207 	ld	l,#0x00
   04B6 C3r1Ds05           1208 	jp	00110$
                           1209 ;demo.c:172: while(total < size) {
   04B9                    1210 00116$:
   04B9 01 00 00           1211 	ld	bc,#0x0000
   04BC                    1212 00107$:
   04BC 79                 1213 	ld	a,c
   04BD DD 96 06           1214 	sub	a,6 (ix)
   04C0 78                 1215 	ld	a,b
   04C1 DD 9E 07           1216 	sbc	a,7 (ix)
   04C4 F2r12s05           1217 	jp	P,00109$
                           1218 ;demo.c:173: if (block_set_data_ptr(scratch) != 0) return 0;
   04C7 C5                 1219 	push	bc
   04C8 21r80s3F           1220 	ld	hl,#_scratch
   04CB E5                 1221 	push	hl
   04CC CDr00s00           1222 	call	_block_set_data_ptr
   04CF F1                 1223 	pop	af
   04D0 5D                 1224 	ld	e,l
   04D1 C1                 1225 	pop	bc
   04D2 AF                 1226 	xor	a,a
   04D3 B3                 1227 	or	a,e
   04D4 28 04              1228 	jr	Z,00104$
   04D6 2E 00              1229 	ld	l,#0x00
   04D8 18 43              1230 	jr	00110$
   04DA                    1231 00104$:
                           1232 ;demo.c:174: if (block_read(&f) != 0) return 0;
   04DA 21 00 00           1233 	ld	hl,#0x0000
   04DD 39                 1234 	add	hl,sp
   04DE C5                 1235 	push	bc
   04DF E5                 1236 	push	hl
   04E0 CDr00s00           1237 	call	_block_read
   04E3 F1                 1238 	pop	af
   04E4 5D                 1239 	ld	e,l
   04E5 C1                 1240 	pop	bc
   04E6 AF                 1241 	xor	a,a
   04E7 B3                 1242 	or	a,e
   04E8 28 04              1243 	jr	Z,00106$
   04EA 2E 00              1244 	ld	l,#0x00
   04EC 18 2F              1245 	jr	00110$
   04EE                    1246 00106$:
                           1247 ;demo.c:176: memcpy(buffer+total,scratch,incr);
   04EE DD 7E 08           1248 	ld	a,8 (ix)
   04F1 81                 1249 	add	a,c
   04F2 5F                 1250 	ld	e,a
   04F3 DD 7E 09           1251 	ld	a,9 (ix)
   04F6 88                 1252 	adc	a,b
   04F7 57                 1253 	ld	d,a
   04F8 C5                 1254 	push	bc
   04F9 21 80 00           1255 	ld	hl,#0x0080
   04FC E5                 1256 	push	hl
   04FD 21r80s3F           1257 	ld	hl,#_scratch
   0500 E5                 1258 	push	hl
   0501 D5                 1259 	push	de
   0502 CDr00s00           1260 	call	_memcpy
   0505 F1                 1261 	pop	af
   0506 F1                 1262 	pop	af
   0507 F1                 1263 	pop	af
   0508 C1                 1264 	pop	bc
                           1265 ;demo.c:178: total+=incr;
   0509 21 80 00           1266 	ld	hl,#0x0080
   050C 09                 1267 	add	hl,bc
   050D 4D                 1268 	ld	c,l
   050E 44                 1269 	ld	b,h
   050F C3rBCs04           1270 	jp	00107$
   0512                    1271 00109$:
                           1272 ;demo.c:181: close(&f);
   0512 21 00 00           1273 	ld	hl,#0x0000
   0515 39                 1274 	add	hl,sp
   0516 E5                 1275 	push	hl
   0517 CDr00s00           1276 	call	_close
   051A F1                 1277 	pop	af
                           1278 ;demo.c:183: return 1;
   051B 2E 01              1279 	ld	l,#0x01
   051D                    1280 00110$:
   051D DD F9              1281 	ld	sp,ix
   051F DD E1              1282 	pop	ix
   0521 C9                 1283 	ret
   0522                    1284 _raw_load_end::
                           1285 ;demo.c:186: void fadein() {
                           1286 ;	---------------------------------
                           1287 ; Function fadein
                           1288 ; ---------------------------------
   0522                    1289 _fadein_start::
   0522                    1290 _fadein:
   0522 DD E5              1291 	push	ix
   0524 DD 21 00 00        1292 	ld	ix,#0
   0528 DD 39              1293 	add	ix,sp
   052A F5                 1294 	push	af
                           1295 ;demo.c:189: if (tick < 4) return;
   052B 3Ar42s40           1296 	ld	a,(#_tick+0)
   052E D6 04              1297 	sub	a,#0x04
   0530 3Ar43s40           1298 	ld	a,(#_tick+1)
   0533 DE 00              1299 	sbc	a,#0x00
   0535 F2r3Bs05           1300 	jp	P,00102$
   0538 C3rE9s05           1301 	jp	00113$
   053B                    1302 00102$:
                           1303 ;demo.c:191: tick = 0;
   053B 21r42s40           1304 	ld	hl,#_tick + 0
   053E 36 00              1305 	ld	(hl), #0x00
   0540 21r43s40           1306 	ld	hl,#_tick + 1
   0543 36 00              1307 	ld	(hl), #0x00
                           1308 ;demo.c:193: for(i = 0; i < 32; i+=2) {
   0545 0E 00              1309 	ld	c,#0x00
   0547                    1310 00109$:
   0547 79                 1311 	ld	a,c
   0548 D6 20              1312 	sub	a,#0x20
   054A D2rE1s05           1313 	jp	NC,00112$
                           1314 ;demo.c:194: uint8_t r = scratch[i] >> 4;
   054D 3Er80              1315 	ld	a,#<_scratch
   054F 81                 1316 	add	a,c
   0550 5F                 1317 	ld	e,a
   0551 3Es3F              1318 	ld	a,#>_scratch
   0553 CE 00              1319 	adc	a,#0x00
   0555 57                 1320 	ld	d,a
   0556 1A                 1321 	ld	a,(de)
   0557 47                 1322 	ld	b,a
   0558 58                 1323 	ld	e,b
   0559 CB 3B              1324 	srl	e
   055B CB 3B              1325 	srl	e
   055D CB 3B              1326 	srl	e
   055F CB 3B              1327 	srl	e
                           1328 ;demo.c:195: uint8_t b = scratch[i] & 0xf;
   0561 78                 1329 	ld	a,b
   0562 E6 0F              1330 	and	a,#0x0F
   0564 DD 77 FF           1331 	ld	-1 (ix),a
                           1332 ;demo.c:196: uint8_t g = scratch[i+1];
   0567 51                 1333 	ld	d,c
   0568 14                 1334 	inc	d
   0569 3Er80              1335 	ld	a,#<_scratch
   056B 82                 1336 	add	a,d
   056C 6F                 1337 	ld	l,a
   056D 3Es3F              1338 	ld	a,#>_scratch
   056F CE 00              1339 	adc	a,#0x00
   0571 67                 1340 	ld	h,a
   0572 56                 1341 	ld	d,(hl)
   0573 DD 72 FE           1342 	ld	-2 (ix),d
                           1343 ;demo.c:198: if (r < (cur_palette[i] >> 4)) r++;
   0576 3Er00              1344 	ld	a,#<_cur_palette
   0578 81                 1345 	add	a,c
   0579 6F                 1346 	ld	l,a
   057A 3Es40              1347 	ld	a,#>_cur_palette
   057C CE 00              1348 	adc	a,#0x00
   057E 67                 1349 	ld	h,a
   057F 56                 1350 	ld	d,(hl)
   0580 CB 3A              1351 	srl	d
   0582 CB 3A              1352 	srl	d
   0584 CB 3A              1353 	srl	d
   0586 CB 3A              1354 	srl	d
   0588 7B                 1355 	ld	a,e
   0589 92                 1356 	sub	a,d
   058A 30 01              1357 	jr	NC,00104$
   058C 1C                 1358 	inc	e
   058D                    1359 00104$:
                           1360 ;demo.c:199: if (b < (cur_palette[i] & 0xf)) b++;
   058D 3Er00              1361 	ld	a,#<_cur_palette
   058F 81                 1362 	add	a,c
   0590 6F                 1363 	ld	l,a
   0591 3Es40              1364 	ld	a,#>_cur_palette
   0593 CE 00              1365 	adc	a,#0x00
   0595 67                 1366 	ld	h,a
   0596 7E                 1367 	ld	a,(hl)
   0597 E6 0F              1368 	and	a,#0x0F
   0599 47                 1369 	ld	b,a
   059A DD 7E FF           1370 	ld	a,-1 (ix)
   059D 90                 1371 	sub	a,b
   059E 30 03              1372 	jr	NC,00106$
   05A0 DD 34 FF           1373 	inc	-1 (ix)
   05A3                    1374 00106$:
                           1375 ;demo.c:201: scratch[i] = (r << 4) | b;
   05A3 3Er80              1376 	ld	a,#<_scratch
   05A5 81                 1377 	add	a,c
   05A6 47                 1378 	ld	b,a
   05A7 3Es3F              1379 	ld	a,#>_scratch
   05A9 CE 00              1380 	adc	a,#0x00
   05AB 57                 1381 	ld	d,a
   05AC 7B                 1382 	ld	a,e
   05AD 07                 1383 	rlca
   05AE 07                 1384 	rlca
   05AF 07                 1385 	rlca
   05B0 07                 1386 	rlca
   05B1 E6 F0              1387 	and	a,#0xF0
   05B3 DD B6 FF           1388 	or	a,-1 (ix)
   05B6 68                 1389 	ld	l,b
   05B7 62                 1390 	ld	h,d
   05B8 77                 1391 	ld	(hl),a
                           1392 ;demo.c:202: if (g < cur_palette[i+1]) scratch[i+1]++;
   05B9 41                 1393 	ld	b,c
   05BA 04                 1394 	inc	b
   05BB 3Er00              1395 	ld	a,#<_cur_palette
   05BD 80                 1396 	add	a,b
   05BE 5F                 1397 	ld	e,a
   05BF 3Es40              1398 	ld	a,#>_cur_palette
   05C1 CE 00              1399 	adc	a,#0x00
   05C3 57                 1400 	ld	d,a
   05C4 1A                 1401 	ld	a,(de)
   05C5 5F                 1402 	ld	e,a
   05C6 DD 7E FE           1403 	ld	a,-2 (ix)
   05C9 93                 1404 	sub	a,e
   05CA 30 10              1405 	jr	NC,00111$
   05CC 3Er80              1406 	ld	a,#<_scratch
   05CE 80                 1407 	add	a,b
   05CF 47                 1408 	ld	b,a
   05D0 3Es3F              1409 	ld	a,#>_scratch
   05D2 CE 00              1410 	adc	a,#0x00
   05D4 5F                 1411 	ld	e,a
   05D5 68                 1412 	ld	l,b
   05D6 67                 1413 	ld	h,a
   05D7 7E                 1414 	ld	a,(hl)
   05D8 3C                 1415 	inc	a
   05D9 68                 1416 	ld	l,b
   05DA 63                 1417 	ld	h,e
   05DB 77                 1418 	ld	(hl),a
   05DC                    1419 00111$:
                           1420 ;demo.c:193: for(i = 0; i < 32; i+=2) {
   05DC 0C                 1421 	inc	c
   05DD 0C                 1422 	inc	c
   05DE C3r47s05           1423 	jp	00109$
   05E1                    1424 00112$:
                           1425 ;demo.c:206: vdp_load_palette(scratch);
   05E1 21r80s3F           1426 	ld	hl,#_scratch
   05E4 E5                 1427 	push	hl
   05E5 CDr00s00           1428 	call	_vdp_load_palette
   05E8 F1                 1429 	pop	af
   05E9                    1430 00113$:
   05E9 DD F9              1431 	ld	sp,ix
   05EB DD E1              1432 	pop	ix
   05ED C9                 1433 	ret
   05EE                    1434 _fadein_end::
                           1435 ;demo.c:218: void do_ymmm() {
                           1436 ;	---------------------------------
                           1437 ; Function do_ymmm
                           1438 ; ---------------------------------
   05EE                    1439 _do_ymmm_start::
   05EE                    1440 _do_ymmm:
   05EE DD E5              1441 	push	ix
   05F0 DD 21 00 00        1442 	ld	ix,#0
   05F4 DD 39              1443 	add	ix,sp
   05F6 21 EB FF           1444 	ld	hl,#-21
   05F9 39                 1445 	add	hl,sp
   05FA F9                 1446 	ld	sp,hl
                           1447 ;demo.c:223: if (tick > 32) { tick = 0; flipper++;}
   05FB 3E 20              1448 	ld	a,#0x20
   05FD FD 21r42s40        1449 	ld	iy,#_tick
   0601 FD 96 00           1450 	sub	a,0 (iy)
   0604 3E 00              1451 	ld	a,#0x00
   0606 FD 21r42s40        1452 	ld	iy,#_tick
   060A FD 9E 01           1453 	sbc	a,1 (iy)
   060D F2r2As06           1454 	jp	P,00102$
   0610 21r42s40           1455 	ld	hl,#_tick + 0
   0613 36 00              1456 	ld	(hl), #0x00
   0615 21r43s40           1457 	ld	hl,#_tick + 1
   0618 36 00              1458 	ld	(hl), #0x00
   061A FD 21r4Es40        1459 	ld	iy,#_flipper
   061E FD 34 00           1460 	inc	0 (iy)
   0621 20 07              1461 	jr	NZ,00115$
   0623 FD 21r4Es40        1462 	ld	iy,#_flipper
   0627 FD 34 01           1463 	inc	1 (iy)
   062A                    1464 00115$:
   062A                    1465 00102$:
                           1466 ;demo.c:224: if (flipper > 10) { flipper = 0;}
   062A 3E 0A              1467 	ld	a,#0x0A
   062C FD 21r4Es40        1468 	ld	iy,#_flipper
   0630 FD 96 00           1469 	sub	a,0 (iy)
   0633 3E 00              1470 	ld	a,#0x00
   0635 FD 21r4Es40        1471 	ld	iy,#_flipper
   0639 FD 9E 01           1472 	sbc	a,1 (iy)
   063C F2r49s06           1473 	jp	P,00104$
   063F 21r4Es40           1474 	ld	hl,#_flipper + 0
   0642 36 00              1475 	ld	(hl), #0x00
   0644 21r4Fs40           1476 	ld	hl,#_flipper + 1
   0647 36 00              1477 	ld	(hl), #0x00
   0649                    1478 00104$:
                           1479 ;demo.c:226: ymmmf++;
   0649 FD 21r50s40        1480 	ld	iy,#_ymmmf
   064D FD 34 00           1481 	inc	0 (iy)
   0650 20 07              1482 	jr	NZ,00116$
   0652 FD 21r50s40        1483 	ld	iy,#_ymmmf
   0656 FD 34 01           1484 	inc	1 (iy)
   0659                    1485 00116$:
                           1486 ;demo.c:227: for (yofff = 0; yofff<212-step;yofff+=step) {
   0659 21r4Cs40           1487 	ld	hl,#_yofff + 0
   065C 36 00              1488 	ld	(hl), #0x00
   065E                    1489 00105$:
   065E 3Ar4Cs40           1490 	ld	a,(#_yofff+0)
   0661 DD 77 ED           1491 	ld	-19 (ix),a
   0664 DD 36 EE 00        1492 	ld	-18 (ix),#0x00
   0668 DD 7E ED           1493 	ld	a,-19 (ix)
   066B D6 D2              1494 	sub	a,#0xD2
   066D DD 7E EE           1495 	ld	a,-18 (ix)
   0670 DE 00              1496 	sbc	a,#0x00
   0672 F2r1Es07           1497 	jp	P,00109$
                           1498 ;demo.c:228: xo = (sintabx[(yofff+ymmmf) & 255]);
   0675 21r50s40           1499 	ld	hl,#_ymmmf
   0678 DD 7E ED           1500 	ld	a,-19 (ix)
   067B 86                 1501 	add	a,(hl)
   067C 5F                 1502 	ld	e,a
   067D DD 7E EE           1503 	ld	a,-18 (ix)
   0680 23                 1504 	inc	hl
   0681 8E                 1505 	adc	a,(hl)
   0682 16 00              1506 	ld	d,#0x00
   0684 CB 23              1507 	sla	e
   0686 CB 12              1508 	rl	d
   0688 21r2Cs00           1509 	ld	hl,#_sintabx
   068B 19                 1510 	add	hl,de
   068C 5E                 1511 	ld	e,(hl)
   068D 23                 1512 	inc	hl
   068E 56                 1513 	ld	d,(hl)
   068F DD 73 EF           1514 	ld	-17 (ix),e
   0692 DD 72 F0           1515 	ld	-16 (ix),d
                           1516 ;demo.c:231: cmd.source_x = 0;
   0695 21 06 00           1517 	ld	hl,#0x0006
   0698 39                 1518 	add	hl,sp
   0699 36 00              1519 	ld	(hl),#0x00
   069B 23                 1520 	inc	hl
   069C 36 00              1521 	ld	(hl),#0x00
                           1522 ;demo.c:232: cmd.source_y = 0+yofff;
   069E 21 06 00           1523 	ld	hl,#0x0006
   06A1 39                 1524 	add	hl,sp
   06A2 EB                 1525 	ex	de,hl
   06A3 4B                 1526 	ld	c,e
   06A4 42                 1527 	ld	b,d
   06A5 69                 1528 	ld	l,c
   06A6 60                 1529 	ld	h,b
   06A7 23                 1530 	inc	hl
   06A8 23                 1531 	inc	hl
   06A9 DD 7E ED           1532 	ld	a,-19 (ix)
   06AC 77                 1533 	ld	(hl),a
   06AD 23                 1534 	inc	hl
   06AE DD 7E EE           1535 	ld	a,-18 (ix)
   06B1 77                 1536 	ld	(hl),a
                           1537 ;demo.c:233: cmd.dest_x = xo;
   06B2 21 04 00           1538 	ld	hl,#0x0004
   06B5 19                 1539 	add	hl,de
   06B6 DD 7E EF           1540 	ld	a,-17 (ix)
   06B9 77                 1541 	ld	(hl),a
   06BA 23                 1542 	inc	hl
   06BB DD 7E F0           1543 	ld	a,-16 (ix)
   06BE 77                 1544 	ld	(hl),a
                           1545 ;demo.c:234: cmd.dest_y = 3+yofff;
   06BF 21 06 00           1546 	ld	hl,#0x0006
   06C2 19                 1547 	add	hl,de
   06C3 DD 75 EB           1548 	ld	-21 (ix),l
   06C6 DD 74 EC           1549 	ld	-20 (ix),h
   06C9 DD 7E ED           1550 	ld	a,-19 (ix)
   06CC C6 03              1551 	add	a,#0x03
   06CE 4F                 1552 	ld	c,a
   06CF DD 7E EE           1553 	ld	a,-18 (ix)
   06D2 CE 00              1554 	adc	a,#0x00
   06D4 47                 1555 	ld	b,a
   06D5 DD 6E EB           1556 	ld	l,-21 (ix)
   06D8 DD 66 EC           1557 	ld	h,-20 (ix)
   06DB 71                 1558 	ld	(hl),c
   06DC 23                 1559 	inc	hl
   06DD 70                 1560 	ld	(hl),b
                           1561 ;demo.c:235: cmd.size_x = 256;
   06DE 21 08 00           1562 	ld	hl,#0x0008
   06E1 19                 1563 	add	hl,de
   06E2 36 00              1564 	ld	(hl),#0x00
   06E4 23                 1565 	inc	hl
   06E5 36 01              1566 	ld	(hl),#0x01
                           1567 ;demo.c:236: cmd.size_y = 1;
   06E7 21 0A 00           1568 	ld	hl,#0x000A
   06EA 19                 1569 	add	hl,de
   06EB 36 01              1570 	ld	(hl),#0x01
   06ED 23                 1571 	inc	hl
   06EE 36 00              1572 	ld	(hl),#0x00
                           1573 ;demo.c:237: cmd.data = 0;
   06F0 21 0C 00           1574 	ld	hl,#0x000C
   06F3 19                 1575 	add	hl,de
   06F4 4D                 1576 	ld	c,l
   06F5 44                 1577 	ld	b,h
   06F6 3E 00              1578 	ld	a,#0x00
   06F8 02                 1579 	ld	(bc),a
                           1580 ;demo.c:238: cmd.argument = 0;
   06F9 21 0D 00           1581 	ld	hl,#0x000D
   06FC 19                 1582 	add	hl,de
   06FD 4D                 1583 	ld	c,l
   06FE 44                 1584 	ld	b,h
   06FF 3E 00              1585 	ld	a,#0x00
   0701 02                 1586 	ld	(bc),a
                           1587 ;demo.c:239: cmd.command = 0xD0;
   0702 21 0E 00           1588 	ld	hl,#0x000E
   0705 19                 1589 	add	hl,de
   0706 4D                 1590 	ld	c,l
   0707 44                 1591 	ld	b,h
   0708 3E D0              1592 	ld	a,#0xD0
   070A 02                 1593 	ld	(bc),a
                           1594 ;demo.c:242: vdp_copier(&cmd);
   070B D5                 1595 	push	de
   070C CDr00s00           1596 	call	_vdp_copier
   070F F1                 1597 	pop	af
                           1598 ;demo.c:227: for (yofff = 0; yofff<212-step;yofff+=step) {
   0710 21r4Cs40           1599 	ld	hl,#_yofff + 0
   0713 4E                 1600 	ld	c,(hl)
   0714 21r4Cs40           1601 	ld	hl,#_yofff
   0717 79                 1602 	ld	a,c
   0718 C6 02              1603 	add	a,#0x02
   071A 77                 1604 	ld	(hl),a
   071B C3r5Es06           1605 	jp	00105$
   071E                    1606 00109$:
   071E DD F9              1607 	ld	sp,ix
   0720 DD E1              1608 	pop	ix
   0722 C9                 1609 	ret
   0723                    1610 _do_ymmm_end::
                           1611 ;demo.c:259: void do_blocks() {
                           1612 ;	---------------------------------
                           1613 ; Function do_blocks
                           1614 ; ---------------------------------
   0723                    1615 _do_blocks_start::
   0723                    1616 _do_blocks:
   0723 DD E5              1617 	push	ix
   0725 DD 21 00 00        1618 	ld	ix,#0
   0729 DD 39              1619 	add	ix,sp
   072B 21 E9 FF           1620 	ld	hl,#-23
   072E 39                 1621 	add	hl,sp
   072F F9                 1622 	ld	sp,hl
                           1623 ;demo.c:262: int ys = 0;
   0730 DD 36 ED 00        1624 	ld	-19 (ix),#0x00
   0734 DD 36 EE 00        1625 	ld	-18 (ix),#0x00
                           1626 ;demo.c:263: int ye = 0;
   0738 DD 36 EB 00        1627 	ld	-21 (ix),#0x00
   073C DD 36 EC 00        1628 	ld	-20 (ix),#0x00
                           1629 ;demo.c:265: vdp_register(VDP_VOFFSET,0);
   0740 21 17 00           1630 	ld	hl,#0x0017
   0743 E5                 1631 	push	hl
   0744 CDr00s00           1632 	call	_vdp_register
   0747 F1                 1633 	pop	af
                           1634 ;demo.c:267: if (block_init == 0) {
   0748 AF                 1635 	xor	a,a
   0749 FD 21r52s40        1636 	ld	iy,#_block_init
   074D FD B6 00           1637 	or	a,0 (iy)
   0750 C2rB8s07           1638 	jp	NZ,00108$
                           1639 ;demo.c:269: vdp_set_screen5();
   0753 CDr00s00           1640 	call	_vdp_set_screen5
                           1641 ;demo.c:271: vdp_register(2, 0x5F);
   0756 21 02 5F           1642 	ld	hl,#0x5F02
   0759 E5                 1643 	push	hl
   075A CDr00s00           1644 	call	_vdp_register
   075D F1                 1645 	pop	af
                           1646 ;demo.c:273: for(i=0;i<16;i++) btab[i] = i*16;
   075E DD 36 EF 00        1647 	ld	-17 (ix),#0x00
   0762 DD 36 F0 00        1648 	ld	-16 (ix),#0x00
   0766                    1649 00110$:
   0766 DD 7E EF           1650 	ld	a,-17 (ix)
   0769 D6 10              1651 	sub	a,#0x10
   076B DD 7E F0           1652 	ld	a,-16 (ix)
   076E DE 00              1653 	sbc	a,#0x00
   0770 F2rA8s07           1654 	jp	P,00113$
   0773 DD 4E EF           1655 	ld	c,-17 (ix)
   0776 DD 46 F0           1656 	ld	b,-16 (ix)
   0779 CB 21              1657 	sla	c
   077B CB 10              1658 	rl	b
   077D 21r5Bs40           1659 	ld	hl,#_btab
   0780 09                 1660 	add	hl,bc
   0781 4D                 1661 	ld	c,l
   0782 44                 1662 	ld	b,h
   0783 DD 5E EF           1663 	ld	e,-17 (ix)
   0786 DD 56 F0           1664 	ld	d,-16 (ix)
   0789 CB 23              1665 	sla	e
   078B CB 12              1666 	rl	d
   078D CB 23              1667 	sla	e
   078F CB 12              1668 	rl	d
   0791 CB 23              1669 	sla	e
   0793 CB 12              1670 	rl	d
   0795 CB 23              1671 	sla	e
   0797 CB 12              1672 	rl	d
   0799 69                 1673 	ld	l,c
   079A 60                 1674 	ld	h,b
   079B 73                 1675 	ld	(hl),e
   079C 23                 1676 	inc	hl
   079D 72                 1677 	ld	(hl),d
   079E DD 34 EF           1678 	inc	-17 (ix)
   07A1 20 03              1679 	jr	NZ,00139$
   07A3 DD 34 F0           1680 	inc	-16 (ix)
   07A6                    1681 00139$:
   07A6 18 BE              1682 	jr	00110$
   07A8                    1683 00113$:
                           1684 ;demo.c:274: vdp_load_palette(block_palette);
   07A8 21r20s40           1685 	ld	hl,#_block_palette
   07AB E5                 1686 	push	hl
   07AC CDr00s00           1687 	call	_vdp_load_palette
   07AF F1                 1688 	pop	af
                           1689 ;demo.c:276: block_init = 1;
   07B0 21r52s40           1690 	ld	hl,#_block_init + 0
   07B3 36 01              1691 	ld	(hl), #0x01
   07B5 C3r77s09           1692 	jp	00122$
   07B8                    1693 00108$:
                           1694 ;demo.c:280: if (flof == 0) { ys = 0; ye = 8; }
   07B8 3Ar7Bs40           1695 	ld	a,(#_flof+0)
   07BB FD 21r7Bs40        1696 	ld	iy,#_flof
   07BF FD B6 01           1697 	or	a,1 (iy)
   07C2 20 10              1698 	jr	NZ,00102$
   07C4 DD 36 ED 00        1699 	ld	-19 (ix),#0x00
   07C8 DD 36 EE 00        1700 	ld	-18 (ix),#0x00
   07CC DD 36 EB 08        1701 	ld	-21 (ix),#0x08
   07D0 DD 36 EC 00        1702 	ld	-20 (ix),#0x00
   07D4                    1703 00102$:
                           1704 ;demo.c:281: if (flof == 1) { ys = 8; ye = 16; }
   07D4 3Ar7Bs40           1705 	ld	a,(#_flof+0)
   07D7 D6 01              1706 	sub	a,#0x01
   07D9 20 06              1707 	jr	NZ,00140$
   07DB 3Ar7Cs40           1708 	ld	a,(#_flof+1)
   07DE B7                 1709 	or	a,a
   07DF 28 02              1710 	jr	Z,00141$
   07E1                    1711 00140$:
   07E1 18 10              1712 	jr	00104$
   07E3                    1713 00141$:
   07E3 DD 36 ED 08        1714 	ld	-19 (ix),#0x08
   07E7 DD 36 EE 00        1715 	ld	-18 (ix),#0x00
   07EB DD 36 EB 10        1716 	ld	-21 (ix),#0x10
   07EF DD 36 EC 00        1717 	ld	-20 (ix),#0x00
   07F3                    1718 00104$:
                           1719 ;demo.c:283: for(bty=3;bty<11;bty++) {
   07F3 FD 21r59s40        1720 	ld	iy,#_bty
   07F7 FD 36 00 03        1721 	ld	0 (iy),#0x03
   07FB FD 21r59s40        1722 	ld	iy,#_bty
   07FF FD 36 01 00        1723 	ld	1 (iy),#0x00
   0803                    1724 00118$:
   0803 3Ar59s40           1725 	ld	a,(#_bty+0)
   0806 D6 0B              1726 	sub	a,#0x0B
   0808 3Ar5As40           1727 	ld	a,(#_bty+1)
   080B DE 00              1728 	sbc	a,#0x00
   080D F2r4Es09           1729 	jp	P,00121$
                           1730 ;demo.c:284: for(btx=ys;btx<ye;btx++) {
   0810 DD 7E ED           1731 	ld	a,-19 (ix)
   0813 FD 21r57s40        1732 	ld	iy,#_btx
   0817 FD 77 00           1733 	ld	0 (iy),a
   081A DD 7E EE           1734 	ld	a,-18 (ix)
   081D FD 21r57s40        1735 	ld	iy,#_btx
   0821 FD 77 01           1736 	ld	1 (iy),a
   0824                    1737 00114$:
   0824 3Ar57s40           1738 	ld	a,(#_btx+0)
   0827 DD 96 EB           1739 	sub	a,-21 (ix)
   082A 3Ar58s40           1740 	ld	a,(#_btx+1)
   082D DD 9E EC           1741 	sbc	a,-20 (ix)
   0830 F2r3Bs09           1742 	jp	P,00120$
                           1743 ;demo.c:285: bsx = (PLY_PSGReg8 & PLY_PSGReg9 | PLY_PSGReg10)>>1;
   0833 3Ar00s00           1744 	ld	a,(#_PLY_PSGReg8+0)
   0836 FD 21r00s00        1745 	ld	iy,#_PLY_PSGReg9
   083A FD A6 00           1746 	and	a,0 (iy)
   083D 21r00s00           1747 	ld	hl,#_PLY_PSGReg10 + 0
   0840 B6                 1748 	or	a,(hl)
   0841 4F                 1749 	ld	c,a
   0842 CB 39              1750 	srl	c
   0844 21r53s40           1751 	ld	hl,#_bsx + 0
   0847 71                 1752 	ld	(hl), c
   0848 21r54s40           1753 	ld	hl,#_bsx + 1
   084B 36 00              1754 	ld	(hl), #0x00
                           1755 ;demo.c:286: bsy = PLY_PSGReg10;
   084D 3Ar00s00           1756 	ld	a,(#_PLY_PSGReg10+0)
   0850 21r55s40           1757 	ld	hl,#_bsy + 0
   0853 77                 1758 	ld	(hl), a
   0854 21r56s40           1759 	ld	hl,#_bsy + 1
   0857 36 00              1760 	ld	(hl), #0x00
                           1761 ;demo.c:287: cmd.source_x = btab[bsx];
   0859 21 08 00           1762 	ld	hl,#0x0008
   085C 39                 1763 	add	hl,sp
   085D 4D                 1764 	ld	c,l
   085E 44                 1765 	ld	b,h
   085F 21r53s40           1766 	ld	hl,#_bsx + 0
   0862 5E                 1767 	ld	e,(hl)
   0863 21r54s40           1768 	ld	hl,#_bsx + 1
   0866 56                 1769 	ld	d,(hl)
   0867 CB 23              1770 	sla	e
   0869 CB 12              1771 	rl	d
   086B 21r5Bs40           1772 	ld	hl,#_btab
   086E 19                 1773 	add	hl,de
   086F 5E                 1774 	ld	e,(hl)
   0870 23                 1775 	inc	hl
   0871 56                 1776 	ld	d,(hl)
   0872 69                 1777 	ld	l,c
   0873 60                 1778 	ld	h,b
   0874 73                 1779 	ld	(hl),e
   0875 23                 1780 	inc	hl
   0876 72                 1781 	ld	(hl),d
                           1782 ;demo.c:288: cmd.source_y = 768+btab[bsy];
   0877 21 08 00           1783 	ld	hl,#0x0008
   087A 39                 1784 	add	hl,sp
   087B 4D                 1785 	ld	c,l
   087C 44                 1786 	ld	b,h
   087D 21 02 00           1787 	ld	hl,#0x0002
   0880 09                 1788 	add	hl,bc
   0881 DD 75 E9           1789 	ld	-23 (ix),l
   0884 DD 74 EA           1790 	ld	-22 (ix),h
   0887 21r55s40           1791 	ld	hl,#_bsy + 0
   088A 5E                 1792 	ld	e,(hl)
   088B 21r56s40           1793 	ld	hl,#_bsy + 1
   088E 56                 1794 	ld	d,(hl)
   088F CB 23              1795 	sla	e
   0891 CB 12              1796 	rl	d
   0893 21r5Bs40           1797 	ld	hl,#_btab
   0896 19                 1798 	add	hl,de
   0897 5E                 1799 	ld	e,(hl)
   0898 23                 1800 	inc	hl
   0899 56                 1801 	ld	d,(hl)
   089A 21 00 03           1802 	ld	hl,#0x0300
   089D 19                 1803 	add	hl,de
   089E EB                 1804 	ex	de,hl
   089F DD 6E E9           1805 	ld	l,-23 (ix)
   08A2 DD 66 EA           1806 	ld	h,-22 (ix)
   08A5 73                 1807 	ld	(hl),e
   08A6 23                 1808 	inc	hl
   08A7 72                 1809 	ld	(hl),d
                           1810 ;demo.c:289: cmd.dest_x = btab[btx];
   08A8 21 04 00           1811 	ld	hl,#0x0004
   08AB 09                 1812 	add	hl,bc
   08AC DD 75 E9           1813 	ld	-23 (ix),l
   08AF DD 74 EA           1814 	ld	-22 (ix),h
   08B2 21r57s40           1815 	ld	hl,#_btx + 0
   08B5 5E                 1816 	ld	e,(hl)
   08B6 21r58s40           1817 	ld	hl,#_btx + 1
   08B9 56                 1818 	ld	d,(hl)
   08BA CB 23              1819 	sla	e
   08BC CB 12              1820 	rl	d
   08BE 21r5Bs40           1821 	ld	hl,#_btab
   08C1 19                 1822 	add	hl,de
   08C2 5E                 1823 	ld	e,(hl)
   08C3 23                 1824 	inc	hl
   08C4 56                 1825 	ld	d,(hl)
   08C5 DD 6E E9           1826 	ld	l,-23 (ix)
   08C8 DD 66 EA           1827 	ld	h,-22 (ix)
   08CB 73                 1828 	ld	(hl),e
   08CC 23                 1829 	inc	hl
   08CD 72                 1830 	ld	(hl),d
                           1831 ;demo.c:290: cmd.dest_y = 512+btab[bty];
   08CE 21 06 00           1832 	ld	hl,#0x0006
   08D1 09                 1833 	add	hl,bc
   08D2 DD 75 E9           1834 	ld	-23 (ix),l
   08D5 DD 74 EA           1835 	ld	-22 (ix),h
   08D8 21r59s40           1836 	ld	hl,#_bty + 0
   08DB 5E                 1837 	ld	e,(hl)
   08DC 21r5As40           1838 	ld	hl,#_bty + 1
   08DF 56                 1839 	ld	d,(hl)
   08E0 CB 23              1840 	sla	e
   08E2 CB 12              1841 	rl	d
   08E4 21r5Bs40           1842 	ld	hl,#_btab
   08E7 19                 1843 	add	hl,de
   08E8 5E                 1844 	ld	e,(hl)
   08E9 23                 1845 	inc	hl
   08EA 56                 1846 	ld	d,(hl)
   08EB 21 00 02           1847 	ld	hl,#0x0200
   08EE 19                 1848 	add	hl,de
   08EF EB                 1849 	ex	de,hl
   08F0 DD 6E E9           1850 	ld	l,-23 (ix)
   08F3 DD 66 EA           1851 	ld	h,-22 (ix)
   08F6 73                 1852 	ld	(hl),e
   08F7 23                 1853 	inc	hl
   08F8 72                 1854 	ld	(hl),d
                           1855 ;demo.c:291: cmd.size_x = 16;
   08F9 21 08 00           1856 	ld	hl,#0x0008
   08FC 09                 1857 	add	hl,bc
   08FD 36 10              1858 	ld	(hl),#0x10
   08FF 23                 1859 	inc	hl
   0900 36 00              1860 	ld	(hl),#0x00
                           1861 ;demo.c:292: cmd.size_y = 16;
   0902 21 0A 00           1862 	ld	hl,#0x000A
   0905 09                 1863 	add	hl,bc
   0906 36 10              1864 	ld	(hl),#0x10
   0908 23                 1865 	inc	hl
   0909 36 00              1866 	ld	(hl),#0x00
                           1867 ;demo.c:293: cmd.data = 0;
   090B 21 0C 00           1868 	ld	hl,#0x000C
   090E 09                 1869 	add	hl,bc
   090F EB                 1870 	ex	de,hl
   0910 3E 00              1871 	ld	a,#0x00
   0912 12                 1872 	ld	(de),a
                           1873 ;demo.c:294: cmd.argument = 0x00;
   0913 21 0D 00           1874 	ld	hl,#0x000D
   0916 09                 1875 	add	hl,bc
   0917 EB                 1876 	ex	de,hl
   0918 3E 00              1877 	ld	a,#0x00
   091A 12                 1878 	ld	(de),a
                           1879 ;demo.c:295: cmd.command = 0xD0;
   091B 21 0E 00           1880 	ld	hl,#0x000E
   091E 09                 1881 	add	hl,bc
   091F EB                 1882 	ex	de,hl
   0920 3E D0              1883 	ld	a,#0xD0
   0922 12                 1884 	ld	(de),a
                           1885 ;demo.c:296: vdp_copier(&cmd);
   0923 C5                 1886 	push	bc
   0924 CDr00s00           1887 	call	_vdp_copier
   0927 F1                 1888 	pop	af
                           1889 ;demo.c:284: for(btx=ys;btx<ye;btx++) {
   0928 FD 21r57s40        1890 	ld	iy,#_btx
   092C FD 34 00           1891 	inc	0 (iy)
   092F 20 07              1892 	jr	NZ,00150$
   0931 FD 21r57s40        1893 	ld	iy,#_btx
   0935 FD 34 01           1894 	inc	1 (iy)
   0938                    1895 00150$:
   0938 C3r24s08           1896 	jp	00114$
   093B                    1897 00120$:
                           1898 ;demo.c:283: for(bty=3;bty<11;bty++) {
   093B FD 21r59s40        1899 	ld	iy,#_bty
   093F FD 34 00           1900 	inc	0 (iy)
   0942 20 07              1901 	jr	NZ,00151$
   0944 FD 21r59s40        1902 	ld	iy,#_bty
   0948 FD 34 01           1903 	inc	1 (iy)
   094B                    1904 00151$:
   094B C3r03s08           1905 	jp	00118$
   094E                    1906 00121$:
                           1907 ;demo.c:300: flof++;
   094E FD 21r7Bs40        1908 	ld	iy,#_flof
   0952 FD 34 00           1909 	inc	0 (iy)
   0955 20 07              1910 	jr	NZ,00152$
   0957 FD 21r7Bs40        1911 	ld	iy,#_flof
   095B FD 34 01           1912 	inc	1 (iy)
   095E                    1913 00152$:
                           1914 ;demo.c:301: if (flof == 2) flof = 0;
   095E 3Ar7Bs40           1915 	ld	a,(#_flof+0)
   0961 D6 02              1916 	sub	a,#0x02
   0963 20 06              1917 	jr	NZ,00153$
   0965 3Ar7Cs40           1918 	ld	a,(#_flof+1)
   0968 B7                 1919 	or	a,a
   0969 28 02              1920 	jr	Z,00154$
   096B                    1921 00153$:
   096B 18 0A              1922 	jr	00122$
   096D                    1923 00154$:
   096D 21r7Bs40           1924 	ld	hl,#_flof + 0
   0970 36 00              1925 	ld	(hl), #0x00
   0972 21r7Cs40           1926 	ld	hl,#_flof + 1
   0975 36 00              1927 	ld	(hl), #0x00
   0977                    1928 00122$:
   0977 DD F9              1929 	ld	sp,ix
   0979 DD E1              1930 	pop	ix
   097B C9                 1931 	ret
   097C                    1932 _do_blocks_end::
                           1933 ;demo.c:309: void raster_effu() {
                           1934 ;	---------------------------------
                           1935 ; Function raster_effu
                           1936 ; ---------------------------------
   097C                    1937 _raster_effu_start::
   097C                    1938 _raster_effu:
                           1939 ;demo.c:310: vdp_register(VDP_VOFFSET,0);
   097C 21 17 00           1940 	ld	hl,#0x0017
   097F E5                 1941 	push	hl
   0980 CDr00s00           1942 	call	_vdp_register
   0983 F1                 1943 	pop	af
                           1944 ;demo.c:311: waitVB();
   0984 76                 1945 		halt 
                           1946 ;demo.c:313: vdp_register(1,0x40); // disable vblank
   0985 21 01 40           1947 	ld	hl,#0x4001
   0988 E5                 1948 	push	hl
   0989 CDr00s00           1949 	call	_vdp_register
                           1950 ;demo.c:315: for (linenum = 40; linenum < 212; linenum+=4) {
   098C 3E 28              1951 	ld	a,#0x28
   098E 32r7Ds40           1952 	ld	(#_linenum + 0),a
   0991 F1                 1953 	pop	af
   0992 FD 21r7Ds40        1954 	ld	iy,#_linenum
   0996 FD 36 01 00        1955 	ld	1 (iy),#0x00
   099A                    1956 00101$:
   099A 3Ar7Ds40           1957 	ld	a,(#_linenum+0)
   099D D6 D4              1958 	sub	a,#0xD4
   099F 3Ar7Es40           1959 	ld	a,(#_linenum+1)
   09A2 DE 00              1960 	sbc	a,#0x00
   09A4 F2rD5s09           1961 	jp	P,00104$
                           1962 ;demo.c:316: vdp_register(19,linenum); // interrupt on line
   09A7 3Ar7Ds40           1963 	ld	a,(#_linenum+0)
   09AA F5                 1964 	push	af
   09AB 33                 1965 	inc	sp
   09AC 3E 13              1966 	ld	a,#0x13
   09AE F5                 1967 	push	af
   09AF 33                 1968 	inc	sp
   09B0 CDr00s00           1969 	call	_vdp_register
   09B3 F1                 1970 	pop	af
                           1971 ;demo.c:317: vdp_register(0,0x16); // mode SC5, IE1 interrupts on
   09B4 21 00 16           1972 	ld	hl,#0x1600
   09B7 E5                 1973 	push	hl
   09B8 CDr00s00           1974 	call	_vdp_register
   09BB F1                 1975 	pop	af
                           1976 ;demo.c:319: waitVB();
   09BC 76                 1977 		halt 
                           1978 ;demo.c:315: for (linenum = 40; linenum < 212; linenum+=4) {
   09BD 21r7Ds40           1979 	ld	hl,#_linenum
   09C0 7E                 1980 	ld	a,(hl)
   09C1 C6 04              1981 	add	a,#0x04
   09C3 23                 1982 	inc	hl
   09C4 2B                 1983 	dec	hl
   09C5 C5                 1984 	push	bc
   09C6 4F                 1985 	ld	c, a
   09C7 23                 1986 	inc	hl
   09C8 7E                 1987 	ld	a, (hl)
   09C9 47                 1988 	ld	b, a
   09CA 79                 1989 	ld	a, c
   09CB 2B                 1990 	dec	hl
   09CC 77                 1991 	ld	(hl), a
   09CD 78                 1992 	ld	a, b
   09CE C1                 1993 	pop	bc
   09CF CE 00              1994 	adc	a,#0x00
   09D1 23                 1995 	inc	hl
   09D2 77                 1996 	ld	(hl),a
   09D3 18 C5              1997 	jr	00101$
   09D5                    1998 00104$:
                           1999 ;demo.c:322: vdp_register(VDP_VOFFSET,0);
   09D5 21 17 00           2000 	ld	hl,#0x0017
   09D8 E5                 2001 	push	hl
   09D9 CDr00s00           2002 	call	_vdp_register
   09DC F1                 2003 	pop	af
                           2004 ;demo.c:336: vdp_register(0,0x6); // mode SC5, IE1 interrupts off
   09DD 21 00 06           2005 	ld	hl,#0x0600
   09E0 E5                 2006 	push	hl
   09E1 CDr00s00           2007 	call	_vdp_register
   09E4 F1                 2008 	pop	af
                           2009 ;demo.c:337: vdp_register(1,0x60); // enable vblank
   09E5 21 01 60           2010 	ld	hl,#0x6001
   09E8 E5                 2011 	push	hl
   09E9 CDr00s00           2012 	call	_vdp_register
   09EC F1                 2013 	pop	af
   09ED C9                 2014 	ret
   09EE                    2015 _raster_effu_end::
                           2016 ;demo.c:340: void twister() {
                           2017 ;	---------------------------------
                           2018 ; Function twister
                           2019 ; ---------------------------------
   09EE                    2020 _twister_start::
   09EE                    2021 _twister:
   09EE DD E5              2022 	push	ix
   09F0 DD 21 00 00        2023 	ld	ix,#0
   09F4 DD 39              2024 	add	ix,sp
   09F6 21 ED FF           2025 	ld	hl,#-19
   09F9 39                 2026 	add	hl,sp
   09FA F9                 2027 	ld	sp,hl
                           2028 ;demo.c:343: waitVB();
   09FB 76                 2029 		halt 
                           2030 ;demo.c:344: for (y = 0; y < 212; y+=4) {
   09FC DD 36 EF 00        2031 	ld	-17 (ix),#0x00
   0A00 DD 36 F0 00        2032 	ld	-16 (ix),#0x00
   0A04                    2033 00101$:
   0A04 DD 7E EF           2034 	ld	a,-17 (ix)
   0A07 D6 D4              2035 	sub	a,#0xD4
   0A09 DD 7E F0           2036 	ld	a,-16 (ix)
   0A0C DE 00              2037 	sbc	a,#0x00
   0A0E F2rB3s0A           2038 	jp	P,00105$
                           2039 ;demo.c:345: cmd.source_x = 0;
   0A11 21 04 00           2040 	ld	hl,#0x0004
   0A14 39                 2041 	add	hl,sp
   0A15 36 00              2042 	ld	(hl),#0x00
   0A17 23                 2043 	inc	hl
   0A18 36 00              2044 	ld	(hl),#0x00
                           2045 ;demo.c:346: sy = ((sintab[(vbicount+(y>>1)) & 255])>>1)+(256+64);
   0A1A DD 5E EF           2046 	ld	e,-17 (ix)
   0A1D DD 56 F0           2047 	ld	d,-16 (ix)
   0A20 CB 2A              2048 	sra	d
   0A22 CB 1B              2049 	rr	e
   0A24 3Ar40s40           2050 	ld	a,(#_vbicount+0)
   0A27 83                 2051 	add	a,e
   0A28 5F                 2052 	ld	e,a
   0A29 3Ar41s40           2053 	ld	a,(#_vbicount+1)
   0A2C 8A                 2054 	adc	a,d
   0A2D 16 00              2055 	ld	d,#0x00
   0A2F 21r00s00           2056 	ld	hl,#_sintab
   0A32 19                 2057 	add	hl,de
   0A33 5E                 2058 	ld	e,(hl)
   0A34 CB 2B              2059 	sra	e
   0A36 7B                 2060 	ld	a,e
   0A37 17                 2061 	rla	
   0A38 9F                 2062 	sbc	a,a
   0A39 57                 2063 	ld	d,a
   0A3A 21 40 01           2064 	ld	hl,#0x0140
   0A3D 19                 2065 	add	hl,de
   0A3E DD 75 ED           2066 	ld	-19 (ix),l
   0A41 DD 74 EE           2067 	ld	-18 (ix),h
                           2068 ;demo.c:347: cmd.source_y = sy;
   0A44 21 04 00           2069 	ld	hl,#0x0004
   0A47 39                 2070 	add	hl,sp
   0A48 EB                 2071 	ex	de,hl
   0A49 4B                 2072 	ld	c,e
   0A4A 42                 2073 	ld	b,d
   0A4B 69                 2074 	ld	l,c
   0A4C 60                 2075 	ld	h,b
   0A4D 23                 2076 	inc	hl
   0A4E 23                 2077 	inc	hl
   0A4F DD 7E ED           2078 	ld	a,-19 (ix)
   0A52 77                 2079 	ld	(hl),a
   0A53 23                 2080 	inc	hl
   0A54 DD 7E EE           2081 	ld	a,-18 (ix)
   0A57 77                 2082 	ld	(hl),a
                           2083 ;demo.c:348: cmd.dest_x = 0;
   0A58 21 04 00           2084 	ld	hl,#0x0004
   0A5B 19                 2085 	add	hl,de
   0A5C 36 00              2086 	ld	(hl),#0x00
   0A5E 23                 2087 	inc	hl
   0A5F 36 00              2088 	ld	(hl),#0x00
                           2089 ;demo.c:349: cmd.dest_y = y;
   0A61 21 06 00           2090 	ld	hl,#0x0006
   0A64 19                 2091 	add	hl,de
   0A65 DD 7E EF           2092 	ld	a,-17 (ix)
   0A68 77                 2093 	ld	(hl),a
   0A69 23                 2094 	inc	hl
   0A6A DD 7E F0           2095 	ld	a,-16 (ix)
   0A6D 77                 2096 	ld	(hl),a
                           2097 ;demo.c:350: cmd.size_x = 70;
   0A6E 21 08 00           2098 	ld	hl,#0x0008
   0A71 19                 2099 	add	hl,de
   0A72 36 46              2100 	ld	(hl),#0x46
   0A74 23                 2101 	inc	hl
   0A75 36 00              2102 	ld	(hl),#0x00
                           2103 ;demo.c:351: cmd.size_y = 4;
   0A77 21 0A 00           2104 	ld	hl,#0x000A
   0A7A 19                 2105 	add	hl,de
   0A7B 36 04              2106 	ld	(hl),#0x04
   0A7D 23                 2107 	inc	hl
   0A7E 36 00              2108 	ld	(hl),#0x00
                           2109 ;demo.c:352: cmd.data = 0;
   0A80 21 0C 00           2110 	ld	hl,#0x000C
   0A83 19                 2111 	add	hl,de
   0A84 4D                 2112 	ld	c,l
   0A85 44                 2113 	ld	b,h
   0A86 3E 00              2114 	ld	a,#0x00
   0A88 02                 2115 	ld	(bc),a
                           2116 ;demo.c:353: cmd.argument = 0x00;
   0A89 21 0D 00           2117 	ld	hl,#0x000D
   0A8C 19                 2118 	add	hl,de
   0A8D 4D                 2119 	ld	c,l
   0A8E 44                 2120 	ld	b,h
   0A8F 3E 00              2121 	ld	a,#0x00
   0A91 02                 2122 	ld	(bc),a
                           2123 ;demo.c:354: cmd.command = 0xd0; // logical vram to vram
   0A92 21 0E 00           2124 	ld	hl,#0x000E
   0A95 19                 2125 	add	hl,de
   0A96 4D                 2126 	ld	c,l
   0A97 44                 2127 	ld	b,h
   0A98 3E D0              2128 	ld	a,#0xD0
   0A9A 02                 2129 	ld	(bc),a
                           2130 ;demo.c:355: vdp_copier(&cmd);
   0A9B D5                 2131 	push	de
   0A9C CDr00s00           2132 	call	_vdp_copier
   0A9F F1                 2133 	pop	af
                           2134 ;demo.c:344: for (y = 0; y < 212; y+=4) {
   0AA0 DD 7E EF           2135 	ld	a,-17 (ix)
   0AA3 C6 04              2136 	add	a,#0x04
   0AA5 DD 77 EF           2137 	ld	-17 (ix),a
   0AA8 DD 7E F0           2138 	ld	a,-16 (ix)
   0AAB CE 00              2139 	adc	a,#0x00
   0AAD DD 77 F0           2140 	ld	-16 (ix),a
   0AB0 C3r04s0A           2141 	jp	00101$
   0AB3                    2142 00105$:
   0AB3 DD F9              2143 	ld	sp,ix
   0AB5 DD E1              2144 	pop	ix
   0AB7 C9                 2145 	ret
   0AB8                    2146 _twister_end::
                           2147 ;demo.c:379: void do_letter(char cc) {
                           2148 ;	---------------------------------
                           2149 ; Function do_letter
                           2150 ; ---------------------------------
   0AB8                    2151 _do_letter_start::
   0AB8                    2152 _do_letter:
   0AB8 DD E5              2153 	push	ix
   0ABA DD 21 00 00        2154 	ld	ix,#0
   0ABE DD 39              2155 	add	ix,sp
   0AC0 21 ED FF           2156 	ld	hl,#-19
   0AC3 39                 2157 	add	hl,sp
   0AC4 F9                 2158 	ld	sp,hl
                           2159 ;demo.c:381: int cidx = cc - 65;
   0AC5 DD 4E 04           2160 	ld	c,4 (ix)
   0AC8 DD 7E 04           2161 	ld	a,4 (ix)
   0ACB 17                 2162 	rla	
   0ACC 9F                 2163 	sbc	a,a
   0ACD 47                 2164 	ld	b,a
   0ACE 79                 2165 	ld	a,c
   0ACF C6 BF              2166 	add	a,#0xBF
   0AD1 DD 77 EF           2167 	ld	-17 (ix),a
   0AD4 78                 2168 	ld	a,b
   0AD5 CE FF              2169 	adc	a,#0xFF
   0AD7 DD 77 F0           2170 	ld	-16 (ix),a
                           2171 ;demo.c:382: cmd.source_x = 127+font_x[cidx];
   0ADA 21 04 00           2172 	ld	hl,#0x0004
   0ADD 39                 2173 	add	hl,sp
   0ADE EB                 2174 	ex	de,hl
   0ADF 3ErCF              2175 	ld	a,#<_font_x
   0AE1 DD 86 EF           2176 	add	a,-17 (ix)
   0AE4 4F                 2177 	ld	c,a
   0AE5 3Es0B              2178 	ld	a,#>_font_x
   0AE7 DD 8E F0           2179 	adc	a,-16 (ix)
   0AEA 47                 2180 	ld	b,a
   0AEB 0A                 2181 	ld	a,(bc)
   0AEC 4F                 2182 	ld	c,a
   0AED 06 00              2183 	ld	b,#0x00
   0AEF 21 7F 00           2184 	ld	hl,#0x007F
   0AF2 09                 2185 	add	hl,bc
   0AF3 4D                 2186 	ld	c,l
   0AF4 44                 2187 	ld	b,h
   0AF5 EB                 2188 	ex	de,hl
   0AF6 71                 2189 	ld	(hl),c
   0AF7 23                 2190 	inc	hl
   0AF8 70                 2191 	ld	(hl),b
                           2192 ;demo.c:383: cmd.source_y = 256+font_y[cidx];
   0AF9 21 04 00           2193 	ld	hl,#0x0004
   0AFC 39                 2194 	add	hl,sp
   0AFD 4D                 2195 	ld	c,l
   0AFE 44                 2196 	ld	b,h
   0AFF 21 02 00           2197 	ld	hl,#0x0002
   0B02 09                 2198 	add	hl,bc
   0B03 DD 75 ED           2199 	ld	-19 (ix),l
   0B06 DD 74 EE           2200 	ld	-18 (ix),h
   0B09 3ErEF              2201 	ld	a,#<_font_y
   0B0B DD 86 EF           2202 	add	a,-17 (ix)
   0B0E 5F                 2203 	ld	e,a
   0B0F 3Es0B              2204 	ld	a,#>_font_y
   0B11 DD 8E F0           2205 	adc	a,-16 (ix)
   0B14 57                 2206 	ld	d,a
   0B15 1A                 2207 	ld	a,(de)
   0B16 5F                 2208 	ld	e,a
   0B17 16 00              2209 	ld	d,#0x00
   0B19 21 00 01           2210 	ld	hl,#0x0100
   0B1C 19                 2211 	add	hl,de
   0B1D EB                 2212 	ex	de,hl
   0B1E DD 6E ED           2213 	ld	l,-19 (ix)
   0B21 DD 66 EE           2214 	ld	h,-18 (ix)
   0B24 73                 2215 	ld	(hl),e
   0B25 23                 2216 	inc	hl
   0B26 72                 2217 	ld	(hl),d
                           2218 ;demo.c:384: cmd.dest_x = lx;
   0B27 21 04 00           2219 	ld	hl,#0x0004
   0B2A 09                 2220 	add	hl,bc
   0B2B DD 75 ED           2221 	ld	-19 (ix),l
   0B2E DD 74 EE           2222 	ld	-18 (ix),h
   0B31 21r7Fs40           2223 	ld	hl,#_lx + 0
   0B34 5E                 2224 	ld	e,(hl)
   0B35 16 00              2225 	ld	d,#0x00
   0B37 DD 6E ED           2226 	ld	l,-19 (ix)
   0B3A DD 66 EE           2227 	ld	h,-18 (ix)
   0B3D 73                 2228 	ld	(hl),e
   0B3E 23                 2229 	inc	hl
   0B3F 72                 2230 	ld	(hl),d
                           2231 ;demo.c:385: cmd.dest_y = ly;
   0B40 21 06 00           2232 	ld	hl,#0x0006
   0B43 09                 2233 	add	hl,bc
   0B44 DD 75 ED           2234 	ld	-19 (ix),l
   0B47 DD 74 EE           2235 	ld	-18 (ix),h
   0B4A 21r80s40           2236 	ld	hl,#_ly + 0
   0B4D 5E                 2237 	ld	e,(hl)
   0B4E 16 00              2238 	ld	d,#0x00
   0B50 DD 6E ED           2239 	ld	l,-19 (ix)
   0B53 DD 66 EE           2240 	ld	h,-18 (ix)
   0B56 73                 2241 	ld	(hl),e
   0B57 23                 2242 	inc	hl
   0B58 72                 2243 	ld	(hl),d
                           2244 ;demo.c:386: cmd.size_x = font_w[cidx]+1;
   0B59 21 08 00           2245 	ld	hl,#0x0008
   0B5C 09                 2246 	add	hl,bc
   0B5D DD 75 ED           2247 	ld	-19 (ix),l
   0B60 DD 74 EE           2248 	ld	-18 (ix),h
   0B63 3Er0F              2249 	ld	a,#<_font_w
   0B65 DD 86 EF           2250 	add	a,-17 (ix)
   0B68 5F                 2251 	ld	e,a
   0B69 3Es0C              2252 	ld	a,#>_font_w
   0B6B DD 8E F0           2253 	adc	a,-16 (ix)
   0B6E 57                 2254 	ld	d,a
   0B6F 1A                 2255 	ld	a,(de)
   0B70 5F                 2256 	ld	e,a
   0B71 16 00              2257 	ld	d,#0x00
   0B73 13                 2258 	inc	de
   0B74 DD 6E ED           2259 	ld	l,-19 (ix)
   0B77 DD 66 EE           2260 	ld	h,-18 (ix)
   0B7A 73                 2261 	ld	(hl),e
   0B7B 23                 2262 	inc	hl
   0B7C 72                 2263 	ld	(hl),d
                           2264 ;demo.c:387: cmd.size_y = font_h[cidx];
   0B7D 21 0A 00           2265 	ld	hl,#0x000A
   0B80 09                 2266 	add	hl,bc
   0B81 DD 75 ED           2267 	ld	-19 (ix),l
   0B84 DD 74 EE           2268 	ld	-18 (ix),h
   0B87 3Er2F              2269 	ld	a,#<_font_h
   0B89 DD 86 EF           2270 	add	a,-17 (ix)
   0B8C 5F                 2271 	ld	e,a
   0B8D 3Es0C              2272 	ld	a,#>_font_h
   0B8F DD 8E F0           2273 	adc	a,-16 (ix)
   0B92 57                 2274 	ld	d,a
   0B93 1A                 2275 	ld	a,(de)
   0B94 5F                 2276 	ld	e,a
   0B95 16 00              2277 	ld	d,#0x00
   0B97 DD 6E ED           2278 	ld	l,-19 (ix)
   0B9A DD 66 EE           2279 	ld	h,-18 (ix)
   0B9D 73                 2280 	ld	(hl),e
   0B9E 23                 2281 	inc	hl
   0B9F 72                 2282 	ld	(hl),d
                           2283 ;demo.c:388: cmd.argument = 0x00;
   0BA0 21 0D 00           2284 	ld	hl,#0x000D
   0BA3 09                 2285 	add	hl,bc
   0BA4 EB                 2286 	ex	de,hl
   0BA5 3E 00              2287 	ld	a,#0x00
   0BA7 12                 2288 	ld	(de),a
                           2289 ;demo.c:389: cmd.command = 0x90; // logical vram to vram
   0BA8 21 0E 00           2290 	ld	hl,#0x000E
   0BAB 09                 2291 	add	hl,bc
   0BAC EB                 2292 	ex	de,hl
   0BAD 3E 90              2293 	ld	a,#0x90
   0BAF 12                 2294 	ld	(de),a
                           2295 ;demo.c:390: vdp_copier(&cmd);
   0BB0 C5                 2296 	push	bc
   0BB1 CDr00s00           2297 	call	_vdp_copier
   0BB4 F1                 2298 	pop	af
                           2299 ;demo.c:391: lx+=font_w[cidx]+1;
   0BB5 3Er0F              2300 	ld	a,#<_font_w
   0BB7 DD 86 EF           2301 	add	a,-17 (ix)
   0BBA 4F                 2302 	ld	c,a
   0BBB 3Es0C              2303 	ld	a,#>_font_w
   0BBD DD 8E F0           2304 	adc	a,-16 (ix)
   0BC0 47                 2305 	ld	b,a
   0BC1 0A                 2306 	ld	a,(bc)
   0BC2 4F                 2307 	ld	c,a
   0BC3 0C                 2308 	inc	c
   0BC4 21r7Fs40           2309 	ld	hl,#_lx
   0BC7 7E                 2310 	ld	a,(hl)
   0BC8 81                 2311 	add	a,c
   0BC9 77                 2312 	ld	(hl),a
   0BCA DD F9              2313 	ld	sp,ix
   0BCC DD E1              2314 	pop	ix
   0BCE C9                 2315 	ret
   0BCF                    2316 _do_letter_end::
   0BCF                    2317 _font_x:
   0BCF 01                 2318 	.db #0x01
   0BD0 09                 2319 	.db #0x09
   0BD1 11                 2320 	.db #0x11
   0BD2 19                 2321 	.db #0x19
   0BD3 21                 2322 	.db #0x21
   0BD4 29                 2323 	.db #0x29
   0BD5 31                 2324 	.db #0x31
   0BD6 39                 2325 	.db #0x39
   0BD7 41                 2326 	.db #0x41
   0BD8 46                 2327 	.db #0x46
   0BD9 4E                 2328 	.db #0x4E
   0BDA 56                 2329 	.db #0x56
   0BDB 5E                 2330 	.db #0x5E
   0BDC 01                 2331 	.db #0x01
   0BDD 0A                 2332 	.db #0x0A
   0BDE 12                 2333 	.db #0x12
   0BDF 1A                 2334 	.db #0x1A
   0BE0 23                 2335 	.db #0x23
   0BE1 2B                 2336 	.db #0x2B
   0BE2 33                 2337 	.db #0x33
   0BE3 3C                 2338 	.db #0x3C
   0BE4 44                 2339 	.db #0x44
   0BE5 4C                 2340 	.db #0x4C
   0BE6 56                 2341 	.db #0x56
   0BE7 5E                 2342 	.db #0x5E
   0BE8 67                 2343 	.db #0x67
   0BE9 00                 2344 	.db 0x00
   0BEA 00                 2345 	.db 0x00
   0BEB 00                 2346 	.db 0x00
   0BEC 00                 2347 	.db 0x00
   0BED 00                 2348 	.db 0x00
   0BEE 00                 2349 	.db 0x00
   0BEF                    2350 _font_y:
   0BEF 1C                 2351 	.db #0x1C
   0BF0 1C                 2352 	.db #0x1C
   0BF1 1C                 2353 	.db #0x1C
   0BF2 1C                 2354 	.db #0x1C
   0BF3 1C                 2355 	.db #0x1C
   0BF4 1C                 2356 	.db #0x1C
   0BF5 1C                 2357 	.db #0x1C
   0BF6 1C                 2358 	.db #0x1C
   0BF7 1C                 2359 	.db #0x1C
   0BF8 1C                 2360 	.db #0x1C
   0BF9 1C                 2361 	.db #0x1C
   0BFA 1C                 2362 	.db #0x1C
   0BFB 1C                 2363 	.db #0x1C
   0BFC 25                 2364 	.db #0x25
   0BFD 25                 2365 	.db #0x25
   0BFE 25                 2366 	.db #0x25
   0BFF 25                 2367 	.db #0x25
   0C00 25                 2368 	.db #0x25
   0C01 25                 2369 	.db #0x25
   0C02 25                 2370 	.db #0x25
   0C03 25                 2371 	.db #0x25
   0C04 25                 2372 	.db #0x25
   0C05 25                 2373 	.db #0x25
   0C06 25                 2374 	.db #0x25
   0C07 25                 2375 	.db #0x25
   0C08 25                 2376 	.db #0x25
   0C09 00                 2377 	.db 0x00
   0C0A 00                 2378 	.db 0x00
   0C0B 00                 2379 	.db 0x00
   0C0C 00                 2380 	.db 0x00
   0C0D 00                 2381 	.db 0x00
   0C0E 00                 2382 	.db 0x00
   0C0F                    2383 _font_w:
   0C0F 07                 2384 	.db #0x07
   0C10 07                 2385 	.db #0x07
   0C11 07                 2386 	.db #0x07
   0C12 07                 2387 	.db #0x07
   0C13 07                 2388 	.db #0x07
   0C14 07                 2389 	.db #0x07
   0C15 07                 2390 	.db #0x07
   0C16 07                 2391 	.db #0x07
   0C17 04                 2392 	.db #0x04
   0C18 07                 2393 	.db #0x07
   0C19 07                 2394 	.db #0x07
   0C1A 07                 2395 	.db #0x07
   0C1B 09                 2396 	.db #0x09
   0C1C 08                 2397 	.db #0x08
   0C1D 07                 2398 	.db #0x07
   0C1E 07                 2399 	.db #0x07
   0C1F 08                 2400 	.db #0x08
   0C20 07                 2401 	.db #0x07
   0C21 07                 2402 	.db #0x07
   0C22 08                 2403 	.db #0x08
   0C23 07                 2404 	.db #0x07
   0C24 07                 2405 	.db #0x07
   0C25 09                 2406 	.db #0x09
   0C26 07                 2407 	.db #0x07
   0C27 08                 2408 	.db #0x08
   0C28 07                 2409 	.db #0x07
   0C29 00                 2410 	.db 0x00
   0C2A 00                 2411 	.db 0x00
   0C2B 00                 2412 	.db 0x00
   0C2C 00                 2413 	.db 0x00
   0C2D 00                 2414 	.db 0x00
   0C2E 00                 2415 	.db 0x00
   0C2F                    2416 _font_h:
   0C2F 08                 2417 	.db #0x08
   0C30 08                 2418 	.db #0x08
   0C31 08                 2419 	.db #0x08
   0C32 08                 2420 	.db #0x08
   0C33 08                 2421 	.db #0x08
   0C34 08                 2422 	.db #0x08
   0C35 08                 2423 	.db #0x08
   0C36 08                 2424 	.db #0x08
   0C37 08                 2425 	.db #0x08
   0C38 08                 2426 	.db #0x08
   0C39 08                 2427 	.db #0x08
   0C3A 08                 2428 	.db #0x08
   0C3B 08                 2429 	.db #0x08
   0C3C 08                 2430 	.db #0x08
   0C3D 08                 2431 	.db #0x08
   0C3E 08                 2432 	.db #0x08
   0C3F 08                 2433 	.db #0x08
   0C40 08                 2434 	.db #0x08
   0C41 08                 2435 	.db #0x08
   0C42 08                 2436 	.db #0x08
   0C43 08                 2437 	.db #0x08
   0C44 08                 2438 	.db #0x08
   0C45 08                 2439 	.db #0x08
   0C46 08                 2440 	.db #0x08
   0C47 08                 2441 	.db #0x08
   0C48 08                 2442 	.db #0x08
   0C49 00                 2443 	.db 0x00
   0C4A 00                 2444 	.db 0x00
   0C4B 00                 2445 	.db 0x00
   0C4C 00                 2446 	.db 0x00
   0C4D 00                 2447 	.db 0x00
   0C4E 00                 2448 	.db 0x00
                           2449 ;demo.c:394: void drawstr(char* str, uint8_t x, uint8_t y) {
                           2450 ;	---------------------------------
                           2451 ; Function drawstr
                           2452 ; ---------------------------------
   0C4F                    2453 _drawstr_start::
   0C4F                    2454 _drawstr:
   0C4F DD E5              2455 	push	ix
   0C51 DD 21 00 00        2456 	ld	ix,#0
   0C55 DD 39              2457 	add	ix,sp
                           2458 ;demo.c:395: char* c = str;
   0C57 DD 4E 04           2459 	ld	c,4 (ix)
   0C5A DD 46 05           2460 	ld	b,5 (ix)
                           2461 ;demo.c:396: lx = x;
   0C5D DD 7E 06           2462 	ld	a,6 (ix)
   0C60 21r7Fs40           2463 	ld	hl,#_lx + 0
   0C63 77                 2464 	ld	(hl), a
                           2465 ;demo.c:397: ly = y;
   0C64 DD 7E 07           2466 	ld	a,7 (ix)
   0C67 21r80s40           2467 	ld	hl,#_ly + 0
   0C6A 77                 2468 	ld	(hl), a
                           2469 ;demo.c:398: while (*c) {
   0C6B                    2470 00104$:
   0C6B 0A                 2471 	ld	a,(bc)
   0C6C 5F                 2472 	ld	e,a
   0C6D B7                 2473 	or	a,a
   0C6E 28 2F              2474 	jr	Z,00107$
                           2475 ;demo.c:399: char ltr = *c++; 
   0C70 03                 2476 	inc	bc
                           2477 ;demo.c:400: if (ltr != ' ') do_letter(ltr);
   0C71 7B                 2478 	ld	a,e
   0C72 D6 20              2479 	sub	a,#0x20
   0C74 28 0B              2480 	jr	Z,00102$
   0C76 C5                 2481 	push	bc
   0C77 7B                 2482 	ld	a,e
   0C78 F5                 2483 	push	af
   0C79 33                 2484 	inc	sp
   0C7A CDrB8s0A           2485 	call	_do_letter
   0C7D 33                 2486 	inc	sp
   0C7E C1                 2487 	pop	bc
   0C7F 18 EA              2488 	jr	00104$
   0C81                    2489 00102$:
                           2490 ;demo.c:401: else lx+=4;
   0C81 FD 21r7Fs40        2491 	ld	iy,#_lx
   0C85 FD 34 00           2492 	inc	0 (iy)
   0C88 FD 21r7Fs40        2493 	ld	iy,#_lx
   0C8C FD 34 00           2494 	inc	0 (iy)
   0C8F FD 21r7Fs40        2495 	ld	iy,#_lx
   0C93 FD 34 00           2496 	inc	0 (iy)
   0C96 FD 21r7Fs40        2497 	ld	iy,#_lx
   0C9A FD 34 00           2498 	inc	0 (iy)
   0C9D 18 CC              2499 	jr	00104$
   0C9F                    2500 00107$:
   0C9F DD E1              2501 	pop	ix
   0CA1 C9                 2502 	ret
   0CA2                    2503 _drawstr_end::
                           2504 ;demo.c:405: void font() {
                           2505 ;	---------------------------------
                           2506 ; Function font
                           2507 ; ---------------------------------
   0CA2                    2508 _font_start::
   0CA2                    2509 _font:
                           2510 ;demo.c:406: drawstr("THE QUICK BROWN FOX",70,40);
   0CA2 21 46 28           2511 	ld	hl,#0x2846
   0CA5 E5                 2512 	push	hl
   0CA6 21r0Bs0D           2513 	ld	hl,#__str_0
   0CA9 E5                 2514 	push	hl
   0CAA CDr4Fs0C           2515 	call	_drawstr
   0CAD F1                 2516 	pop	af
   0CAE F1                 2517 	pop	af
                           2518 ;demo.c:407: drawstr("JUMPS OVER THE LAZY DOG",70,49);
   0CAF 21 46 31           2519 	ld	hl,#0x3146
   0CB2 E5                 2520 	push	hl
   0CB3 21r1Fs0D           2521 	ld	hl,#__str_1
   0CB6 E5                 2522 	push	hl
   0CB7 CDr4Fs0C           2523 	call	_drawstr
   0CBA F1                 2524 	pop	af
   0CBB F1                 2525 	pop	af
                           2526 ;demo.c:409: drawstr("WHAT A MYSTERY THE",74,60);
   0CBC 21 4A 3C           2527 	ld	hl,#0x3C4A
   0CBF E5                 2528 	push	hl
   0CC0 21r37s0D           2529 	ld	hl,#__str_2
   0CC3 E5                 2530 	push	hl
   0CC4 CDr4Fs0C           2531 	call	_drawstr
   0CC7 F1                 2532 	pop	af
   0CC8 F1                 2533 	pop	af
                           2534 ;demo.c:410: drawstr("WORLD HOLDS FOR US",74,69);
   0CC9 21 4A 45           2535 	ld	hl,#0x454A
   0CCC E5                 2536 	push	hl
   0CCD 21r4As0D           2537 	ld	hl,#__str_3
   0CD0 E5                 2538 	push	hl
   0CD1 CDr4Fs0C           2539 	call	_drawstr
   0CD4 F1                 2540 	pop	af
   0CD5 F1                 2541 	pop	af
                           2542 ;demo.c:412: drawstr("LOSE YOURSELF IN THE",70,80);
   0CD6 21 46 50           2543 	ld	hl,#0x5046
   0CD9 E5                 2544 	push	hl
   0CDA 21r5Ds0D           2545 	ld	hl,#__str_4
   0CDD E5                 2546 	push	hl
   0CDE CDr4Fs0C           2547 	call	_drawstr
   0CE1 F1                 2548 	pop	af
   0CE2 F1                 2549 	pop	af
                           2550 ;demo.c:413: drawstr("MUSIC AND NEVER LET IT GO",70,89);
   0CE3 21 46 59           2551 	ld	hl,#0x5946
   0CE6 E5                 2552 	push	hl
   0CE7 21r72s0D           2553 	ld	hl,#__str_5
   0CEA E5                 2554 	push	hl
   0CEB CDr4Fs0C           2555 	call	_drawstr
   0CEE F1                 2556 	pop	af
   0CEF F1                 2557 	pop	af
                           2558 ;demo.c:415: drawstr("CODE  BY VISY",90,212-18);
   0CF0 21 5A C2           2559 	ld	hl,#0xC25A
   0CF3 E5                 2560 	push	hl
   0CF4 21r8Cs0D           2561 	ld	hl,#__str_6
   0CF7 E5                 2562 	push	hl
   0CF8 CDr4Fs0C           2563 	call	_drawstr
   0CFB F1                 2564 	pop	af
   0CFC F1                 2565 	pop	af
                           2566 ;demo.c:416: drawstr("MUSIC BY LYNN",91,212-9);
   0CFD 21 5B CB           2567 	ld	hl,#0xCB5B
   0D00 E5                 2568 	push	hl
   0D01 21r9As0D           2569 	ld	hl,#__str_7
   0D04 E5                 2570 	push	hl
   0D05 CDr4Fs0C           2571 	call	_drawstr
   0D08 F1                 2572 	pop	af
   0D09 F1                 2573 	pop	af
   0D0A C9                 2574 	ret
   0D0B                    2575 _font_end::
   0D0B                    2576 __str_0:
   0D0B 54 48 45 20 51 55  2577 	.ascii "THE QUICK BROWN FOX"
        49 43 4B 20 42 52
        4F 57 4E 20 46 4F
        58
   0D1E 00                 2578 	.db 0x00
   0D1F                    2579 __str_1:
   0D1F 4A 55 4D 50 53 20  2580 	.ascii "JUMPS OVER THE LAZY DOG"
        4F 56 45 52 20 54
        48 45 20 4C 41 5A
        59 20 44 4F 47
   0D36 00                 2581 	.db 0x00
   0D37                    2582 __str_2:
   0D37 57 48 41 54 20 41  2583 	.ascii "WHAT A MYSTERY THE"
        20 4D 59 53 54 45
        52 59 20 54 48 45
   0D49 00                 2584 	.db 0x00
   0D4A                    2585 __str_3:
   0D4A 57 4F 52 4C 44 20  2586 	.ascii "WORLD HOLDS FOR US"
        48 4F 4C 44 53 20
        46 4F 52 20 55 53
   0D5C 00                 2587 	.db 0x00
   0D5D                    2588 __str_4:
   0D5D 4C 4F 53 45 20 59  2589 	.ascii "LOSE YOURSELF IN THE"
        4F 55 52 53 45 4C
        46 20 49 4E 20 54
        48 45
   0D71 00                 2590 	.db 0x00
   0D72                    2591 __str_5:
   0D72 4D 55 53 49 43 20  2592 	.ascii "MUSIC AND NEVER LET IT GO"
        41 4E 44 20 4E 45
        56 45 52 20 4C 45
        54 20 49 54 20 47
        4F
   0D8B 00                 2593 	.db 0x00
   0D8C                    2594 __str_6:
   0D8C 43 4F 44 45 20 20  2595 	.ascii "CODE  BY VISY"
        42 59 20 56 49 53
        59
   0D99 00                 2596 	.db 0x00
   0D9A                    2597 __str_7:
   0D9A 4D 55 53 49 43 20  2598 	.ascii "MUSIC BY LYNN"
        42 59 20 4C 59 4E
        4E
   0DA7 00                 2599 	.db 0x00
                           2600 ;demo.c:424: void do_animplay() {
                           2601 ;	---------------------------------
                           2602 ; Function do_animplay
                           2603 ; ---------------------------------
   0DA8                    2604 _do_animplay_start::
   0DA8                    2605 _do_animplay:
   0DA8 DD E5              2606 	push	ix
   0DAA DD 21 00 00        2607 	ld	ix,#0
   0DAE DD 39              2608 	add	ix,sp
   0DB0 21 EC FF           2609 	ld	hl,#-20
   0DB3 39                 2610 	add	hl,sp
   0DB4 F9                 2611 	ld	sp,hl
                           2612 ;demo.c:430: for (y = 0; y < 106; y+=1) {
   0DB5 DD 36 FF 00        2613 	ld	-1 (ix),#0x00
   0DB9                    2614 00107$:
   0DB9 DD 7E FF           2615 	ld	a,-1 (ix)
   0DBC D6 6A              2616 	sub	a,#0x6A
   0DBE D2r6As0E           2617 	jp	NC,00110$
                           2618 ;demo.c:431: cmd.source_x = xo;
   0DC1 21 04 00           2619 	ld	hl,#0x0004
   0DC4 39                 2620 	add	hl,sp
   0DC5 EB                 2621 	ex	de,hl
   0DC6 ED 4Br81s40        2622 	ld	bc,(_xo)
   0DCA EB                 2623 	ex	de,hl
   0DCB 71                 2624 	ld	(hl),c
   0DCC 23                 2625 	inc	hl
   0DCD 70                 2626 	ld	(hl),b
                           2627 ;demo.c:432: cmd.source_y = 256+po+yo+(y>>1);
   0DCE 21 04 00           2628 	ld	hl,#0x0004
   0DD1 39                 2629 	add	hl,sp
   0DD2 4D                 2630 	ld	c,l
   0DD3 44                 2631 	ld	b,h
   0DD4 21 02 00           2632 	ld	hl,#0x0002
   0DD7 09                 2633 	add	hl,bc
   0DD8 DD 75 EE           2634 	ld	-18 (ix),l
   0DDB DD 74 EF           2635 	ld	-17 (ix),h
   0DDE 3Ar85s40           2636 	ld	a,(#_po+0)
   0DE1 5F                 2637 	ld	e,a
   0DE2 3Ar86s40           2638 	ld	a,(#_po+1)
   0DE5 C6 01              2639 	add	a,#0x01
   0DE7 57                 2640 	ld	d,a
   0DE8 21r83s40           2641 	ld	hl,#_yo
   0DEB 7B                 2642 	ld	a,e
   0DEC 86                 2643 	add	a,(hl)
   0DED DD 77 EC           2644 	ld	-20 (ix),a
   0DF0 7A                 2645 	ld	a,d
   0DF1 23                 2646 	inc	hl
   0DF2 8E                 2647 	adc	a,(hl)
   0DF3 DD 77 ED           2648 	ld	-19 (ix),a
   0DF6 DD 5E FF           2649 	ld	e,-1 (ix)
   0DF9 CB 3B              2650 	srl	e
   0DFB 16 00              2651 	ld	d,#0x00
   0DFD DD 7E EC           2652 	ld	a,-20 (ix)
   0E00 83                 2653 	add	a,e
   0E01 5F                 2654 	ld	e,a
   0E02 DD 7E ED           2655 	ld	a,-19 (ix)
   0E05 8A                 2656 	adc	a,d
   0E06 57                 2657 	ld	d,a
   0E07 DD 6E EE           2658 	ld	l,-18 (ix)
   0E0A DD 66 EF           2659 	ld	h,-17 (ix)
   0E0D 73                 2660 	ld	(hl),e
   0E0E 23                 2661 	inc	hl
   0E0F 72                 2662 	ld	(hl),d
                           2663 ;demo.c:433: cmd.dest_x = 0;
   0E10 21 04 00           2664 	ld	hl,#0x0004
   0E13 09                 2665 	add	hl,bc
   0E14 36 00              2666 	ld	(hl),#0x00
   0E16 23                 2667 	inc	hl
   0E17 36 00              2668 	ld	(hl),#0x00
                           2669 ;demo.c:434: cmd.dest_y = (y<<1);
   0E19 21 06 00           2670 	ld	hl,#0x0006
   0E1C 09                 2671 	add	hl,bc
   0E1D DD 75 EC           2672 	ld	-20 (ix),l
   0E20 DD 74 ED           2673 	ld	-19 (ix),h
   0E23 DD 5E FF           2674 	ld	e,-1 (ix)
   0E26 16 00              2675 	ld	d,#0x00
   0E28 CB 23              2676 	sla	e
   0E2A CB 12              2677 	rl	d
   0E2C DD 6E EC           2678 	ld	l,-20 (ix)
   0E2F DD 66 ED           2679 	ld	h,-19 (ix)
   0E32 73                 2680 	ld	(hl),e
   0E33 23                 2681 	inc	hl
   0E34 72                 2682 	ld	(hl),d
                           2683 ;demo.c:435: cmd.size_x = 128;
   0E35 21 08 00           2684 	ld	hl,#0x0008
   0E38 09                 2685 	add	hl,bc
   0E39 36 80              2686 	ld	(hl),#0x80
   0E3B 23                 2687 	inc	hl
   0E3C 36 00              2688 	ld	(hl),#0x00
                           2689 ;demo.c:436: cmd.size_y = 1;
   0E3E 21 0A 00           2690 	ld	hl,#0x000A
   0E41 09                 2691 	add	hl,bc
   0E42 36 01              2692 	ld	(hl),#0x01
   0E44 23                 2693 	inc	hl
   0E45 36 00              2694 	ld	(hl),#0x00
                           2695 ;demo.c:437: cmd.data = 0;
   0E47 21 0C 00           2696 	ld	hl,#0x000C
   0E4A 09                 2697 	add	hl,bc
   0E4B EB                 2698 	ex	de,hl
   0E4C 3E 00              2699 	ld	a,#0x00
   0E4E 12                 2700 	ld	(de),a
                           2701 ;demo.c:438: cmd.argument = 0x00;
   0E4F 21 0D 00           2702 	ld	hl,#0x000D
   0E52 09                 2703 	add	hl,bc
   0E53 EB                 2704 	ex	de,hl
   0E54 3E 00              2705 	ld	a,#0x00
   0E56 12                 2706 	ld	(de),a
                           2707 ;demo.c:439: cmd.command = 0xD0;
   0E57 21 0E 00           2708 	ld	hl,#0x000E
   0E5A 09                 2709 	add	hl,bc
   0E5B EB                 2710 	ex	de,hl
   0E5C 3E D0              2711 	ld	a,#0xD0
   0E5E 12                 2712 	ld	(de),a
                           2713 ;demo.c:440: vdp_copier(&cmd);
   0E5F C5                 2714 	push	bc
   0E60 CDr00s00           2715 	call	_vdp_copier
   0E63 F1                 2716 	pop	af
                           2717 ;demo.c:430: for (y = 0; y < 106; y+=1) {
   0E64 DD 34 FF           2718 	inc	-1 (ix)
   0E67 C3rB9s0D           2719 	jp	00107$
   0E6A                    2720 00110$:
                           2721 ;demo.c:443: for (y = 0; y < 106; y+=1) {
   0E6A DD 36 FF 00        2722 	ld	-1 (ix),#0x00
   0E6E                    2723 00111$:
   0E6E DD 7E FF           2724 	ld	a,-1 (ix)
   0E71 D6 6A              2725 	sub	a,#0x6A
   0E73 D2r1Fs0F           2726 	jp	NC,00114$
                           2727 ;demo.c:444: cmd.source_x = xo;
   0E76 21 04 00           2728 	ld	hl,#0x0004
   0E79 39                 2729 	add	hl,sp
   0E7A EB                 2730 	ex	de,hl
   0E7B ED 4Br81s40        2731 	ld	bc,(_xo)
   0E7F EB                 2732 	ex	de,hl
   0E80 71                 2733 	ld	(hl),c
   0E81 23                 2734 	inc	hl
   0E82 70                 2735 	ld	(hl),b
                           2736 ;demo.c:445: cmd.source_y = 256+po+yo+(y>>1);
   0E83 21 04 00           2737 	ld	hl,#0x0004
   0E86 39                 2738 	add	hl,sp
   0E87 4D                 2739 	ld	c,l
   0E88 44                 2740 	ld	b,h
   0E89 21 02 00           2741 	ld	hl,#0x0002
   0E8C 09                 2742 	add	hl,bc
   0E8D DD 75 EC           2743 	ld	-20 (ix),l
   0E90 DD 74 ED           2744 	ld	-19 (ix),h
   0E93 3Ar85s40           2745 	ld	a,(#_po+0)
   0E96 5F                 2746 	ld	e,a
   0E97 3Ar86s40           2747 	ld	a,(#_po+1)
   0E9A C6 01              2748 	add	a,#0x01
   0E9C 57                 2749 	ld	d,a
   0E9D 21r83s40           2750 	ld	hl,#_yo
   0EA0 7B                 2751 	ld	a,e
   0EA1 86                 2752 	add	a,(hl)
   0EA2 DD 77 EE           2753 	ld	-18 (ix),a
   0EA5 7A                 2754 	ld	a,d
   0EA6 23                 2755 	inc	hl
   0EA7 8E                 2756 	adc	a,(hl)
   0EA8 DD 77 EF           2757 	ld	-17 (ix),a
   0EAB DD 5E FF           2758 	ld	e,-1 (ix)
   0EAE CB 3B              2759 	srl	e
   0EB0 16 00              2760 	ld	d,#0x00
   0EB2 DD 7E EE           2761 	ld	a,-18 (ix)
   0EB5 83                 2762 	add	a,e
   0EB6 5F                 2763 	ld	e,a
   0EB7 DD 7E EF           2764 	ld	a,-17 (ix)
   0EBA 8A                 2765 	adc	a,d
   0EBB 57                 2766 	ld	d,a
   0EBC DD 6E EC           2767 	ld	l,-20 (ix)
   0EBF DD 66 ED           2768 	ld	h,-19 (ix)
   0EC2 73                 2769 	ld	(hl),e
   0EC3 23                 2770 	inc	hl
   0EC4 72                 2771 	ld	(hl),d
                           2772 ;demo.c:446: cmd.dest_x = 128;
   0EC5 21 04 00           2773 	ld	hl,#0x0004
   0EC8 09                 2774 	add	hl,bc
   0EC9 36 80              2775 	ld	(hl),#0x80
   0ECB 23                 2776 	inc	hl
   0ECC 36 00              2777 	ld	(hl),#0x00
                           2778 ;demo.c:447: cmd.dest_y = (y<<1);
   0ECE 21 06 00           2779 	ld	hl,#0x0006
   0ED1 09                 2780 	add	hl,bc
   0ED2 DD 75 EC           2781 	ld	-20 (ix),l
   0ED5 DD 74 ED           2782 	ld	-19 (ix),h
   0ED8 DD 5E FF           2783 	ld	e,-1 (ix)
   0EDB 16 00              2784 	ld	d,#0x00
   0EDD CB 23              2785 	sla	e
   0EDF CB 12              2786 	rl	d
   0EE1 DD 6E EC           2787 	ld	l,-20 (ix)
   0EE4 DD 66 ED           2788 	ld	h,-19 (ix)
   0EE7 73                 2789 	ld	(hl),e
   0EE8 23                 2790 	inc	hl
   0EE9 72                 2791 	ld	(hl),d
                           2792 ;demo.c:448: cmd.size_x = 128;
   0EEA 21 08 00           2793 	ld	hl,#0x0008
   0EED 09                 2794 	add	hl,bc
   0EEE 36 80              2795 	ld	(hl),#0x80
   0EF0 23                 2796 	inc	hl
   0EF1 36 00              2797 	ld	(hl),#0x00
                           2798 ;demo.c:449: cmd.size_y = 1;
   0EF3 21 0A 00           2799 	ld	hl,#0x000A
   0EF6 09                 2800 	add	hl,bc
   0EF7 36 01              2801 	ld	(hl),#0x01
   0EF9 23                 2802 	inc	hl
   0EFA 36 00              2803 	ld	(hl),#0x00
                           2804 ;demo.c:450: cmd.data = 0;
   0EFC 21 0C 00           2805 	ld	hl,#0x000C
   0EFF 09                 2806 	add	hl,bc
   0F00 EB                 2807 	ex	de,hl
   0F01 3E 00              2808 	ld	a,#0x00
   0F03 12                 2809 	ld	(de),a
                           2810 ;demo.c:451: cmd.argument = 0x00;
   0F04 21 0D 00           2811 	ld	hl,#0x000D
   0F07 09                 2812 	add	hl,bc
   0F08 EB                 2813 	ex	de,hl
   0F09 3E 00              2814 	ld	a,#0x00
   0F0B 12                 2815 	ld	(de),a
                           2816 ;demo.c:452: cmd.command = 0xd2; // logical vram to vram, xor
   0F0C 21 0E 00           2817 	ld	hl,#0x000E
   0F0F 09                 2818 	add	hl,bc
   0F10 EB                 2819 	ex	de,hl
   0F11 3E D2              2820 	ld	a,#0xD2
   0F13 12                 2821 	ld	(de),a
                           2822 ;demo.c:453: vdp_copier(&cmd);
   0F14 C5                 2823 	push	bc
   0F15 CDr00s00           2824 	call	_vdp_copier
   0F18 F1                 2825 	pop	af
                           2826 ;demo.c:443: for (y = 0; y < 106; y+=1) {
   0F19 DD 34 FF           2827 	inc	-1 (ix)
   0F1C C3r6Es0E           2828 	jp	00111$
   0F1F                    2829 00114$:
                           2830 ;demo.c:457: xo+=128;
   0F1F 21r81s40           2831 	ld	hl,#_xo
   0F22 7E                 2832 	ld	a,(hl)
   0F23 C6 80              2833 	add	a,#0x80
   0F25 23                 2834 	inc	hl
   0F26 2B                 2835 	dec	hl
   0F27 C5                 2836 	push	bc
   0F28 4F                 2837 	ld	c, a
   0F29 23                 2838 	inc	hl
   0F2A 7E                 2839 	ld	a, (hl)
   0F2B 47                 2840 	ld	b, a
   0F2C 79                 2841 	ld	a, c
   0F2D 2B                 2842 	dec	hl
   0F2E 77                 2843 	ld	(hl), a
   0F2F 78                 2844 	ld	a, b
   0F30 C1                 2845 	pop	bc
   0F31 CE 00              2846 	adc	a,#0x00
   0F33 23                 2847 	inc	hl
   0F34 77                 2848 	ld	(hl),a
                           2849 ;demo.c:458: if (xo >= 256) {
   0F35 3Ar81s40           2850 	ld	a,(#_xo+0)
   0F38 D6 00              2851 	sub	a,#0x00
   0F3A 3Ar82s40           2852 	ld	a,(#_xo+1)
   0F3D DE 01              2853 	sbc	a,#0x01
   0F3F FArA6s0F           2854 	jp	M,00106$
                           2855 ;demo.c:459: xo = 0;
   0F42 21r81s40           2856 	ld	hl,#_xo + 0
   0F45 36 00              2857 	ld	(hl), #0x00
   0F47 21r82s40           2858 	ld	hl,#_xo + 1
   0F4A 36 00              2859 	ld	(hl), #0x00
                           2860 ;demo.c:460: yo+=53;
   0F4C 21r83s40           2861 	ld	hl,#_yo
   0F4F 7E                 2862 	ld	a,(hl)
   0F50 C6 35              2863 	add	a,#0x35
   0F52 23                 2864 	inc	hl
   0F53 2B                 2865 	dec	hl
   0F54 C5                 2866 	push	bc
   0F55 4F                 2867 	ld	c, a
   0F56 23                 2868 	inc	hl
   0F57 7E                 2869 	ld	a, (hl)
   0F58 47                 2870 	ld	b, a
   0F59 79                 2871 	ld	a, c
   0F5A 2B                 2872 	dec	hl
   0F5B 77                 2873 	ld	(hl), a
   0F5C 78                 2874 	ld	a, b
   0F5D C1                 2875 	pop	bc
   0F5E CE 00              2876 	adc	a,#0x00
   0F60 23                 2877 	inc	hl
   0F61 77                 2878 	ld	(hl),a
                           2879 ;demo.c:461: if (yo >= 212) { yo = 0; po+=256; }
   0F62 3Ar83s40           2880 	ld	a,(#_yo+0)
   0F65 D6 D4              2881 	sub	a,#0xD4
   0F67 3Ar84s40           2882 	ld	a,(#_yo+1)
   0F6A DE 00              2883 	sbc	a,#0x00
   0F6C FAr8Fs0F           2884 	jp	M,00102$
   0F6F 21r83s40           2885 	ld	hl,#_yo + 0
   0F72 36 00              2886 	ld	(hl), #0x00
   0F74 21r84s40           2887 	ld	hl,#_yo + 1
   0F77 36 00              2888 	ld	(hl), #0x00
   0F79 21r85s40           2889 	ld	hl,#_po
   0F7C 7E                 2890 	ld	a,(hl)
   0F7D C6 00              2891 	add	a,#0x00
   0F7F 23                 2892 	inc	hl
   0F80 2B                 2893 	dec	hl
   0F81 C5                 2894 	push	bc
   0F82 4F                 2895 	ld	c, a
   0F83 23                 2896 	inc	hl
   0F84 7E                 2897 	ld	a, (hl)
   0F85 47                 2898 	ld	b, a
   0F86 79                 2899 	ld	a, c
   0F87 2B                 2900 	dec	hl
   0F88 77                 2901 	ld	(hl), a
   0F89 78                 2902 	ld	a, b
   0F8A C1                 2903 	pop	bc
   0F8B CE 01              2904 	adc	a,#0x01
   0F8D 23                 2905 	inc	hl
   0F8E 77                 2906 	ld	(hl),a
   0F8F                    2907 00102$:
                           2908 ;demo.c:462: if (po >= 768) {
   0F8F 3Ar85s40           2909 	ld	a,(#_po+0)
   0F92 D6 00              2910 	sub	a,#0x00
   0F94 3Ar86s40           2911 	ld	a,(#_po+1)
   0F97 DE 03              2912 	sbc	a,#0x03
   0F99 FArA6s0F           2913 	jp	M,00106$
                           2914 ;demo.c:463: po = 0;
   0F9C 21r85s40           2915 	ld	hl,#_po + 0
   0F9F 36 00              2916 	ld	(hl), #0x00
   0FA1 21r86s40           2917 	ld	hl,#_po + 1
   0FA4 36 00              2918 	ld	(hl), #0x00
   0FA6                    2919 00106$:
                           2920 ;demo.c:468: msx2_palette(15,3+sintab[fffaaa & 255]>>5,3,4);
   0FA6 21r87s40           2921 	ld	hl,#_fffaaa + 0
   0FA9 4E                 2922 	ld	c,(hl)
   0FAA 06 00              2923 	ld	b,#0x00
   0FAC 21r00s00           2924 	ld	hl,#_sintab
   0FAF 09                 2925 	add	hl,bc
   0FB0 7E                 2926 	ld	a,(hl)
   0FB1 4F                 2927 	ld	c,a
   0FB2 17                 2928 	rla	
   0FB3 9F                 2929 	sbc	a,a
   0FB4 47                 2930 	ld	b,a
   0FB5 03                 2931 	inc	bc
   0FB6 03                 2932 	inc	bc
   0FB7 03                 2933 	inc	bc
   0FB8 CB 28              2934 	sra	b
   0FBA CB 19              2935 	rr	c
   0FBC CB 28              2936 	sra	b
   0FBE CB 19              2937 	rr	c
   0FC0 CB 28              2938 	sra	b
   0FC2 CB 19              2939 	rr	c
   0FC4 CB 28              2940 	sra	b
   0FC6 CB 19              2941 	rr	c
   0FC8 CB 28              2942 	sra	b
   0FCA CB 19              2943 	rr	c
   0FCC 21 03 04           2944 	ld	hl,#0x0403
   0FCF E5                 2945 	push	hl
   0FD0 41                 2946 	ld	b,c
   0FD1 0E 0F              2947 	ld	c,#0x0F
   0FD3 C5                 2948 	push	bc
   0FD4 CDr00s00           2949 	call	_msx2_palette
   0FD7 F1                 2950 	pop	af
   0FD8 F1                 2951 	pop	af
                           2952 ;demo.c:469: msx2_palette(3,2+sintab[fffaaa & 255]>>5,0,0);
   0FD9 21r87s40           2953 	ld	hl,#_fffaaa + 0
   0FDC 4E                 2954 	ld	c,(hl)
   0FDD 06 00              2955 	ld	b,#0x00
   0FDF 21r00s00           2956 	ld	hl,#_sintab
   0FE2 09                 2957 	add	hl,bc
   0FE3 7E                 2958 	ld	a,(hl)
   0FE4 4F                 2959 	ld	c,a
   0FE5 17                 2960 	rla	
   0FE6 9F                 2961 	sbc	a,a
   0FE7 47                 2962 	ld	b,a
   0FE8 03                 2963 	inc	bc
   0FE9 03                 2964 	inc	bc
   0FEA CB 28              2965 	sra	b
   0FEC CB 19              2966 	rr	c
   0FEE CB 28              2967 	sra	b
   0FF0 CB 19              2968 	rr	c
   0FF2 CB 28              2969 	sra	b
   0FF4 CB 19              2970 	rr	c
   0FF6 CB 28              2971 	sra	b
   0FF8 CB 19              2972 	rr	c
   0FFA CB 28              2973 	sra	b
   0FFC CB 19              2974 	rr	c
   0FFE 21 00 00           2975 	ld	hl,#0x0000
   1001 E5                 2976 	push	hl
   1002 41                 2977 	ld	b,c
   1003 0E 03              2978 	ld	c,#0x03
   1005 C5                 2979 	push	bc
   1006 CDr00s00           2980 	call	_msx2_palette
   1009 F1                 2981 	pop	af
   100A F1                 2982 	pop	af
                           2983 ;demo.c:470: fffaaa++;
   100B FD 21r87s40        2984 	ld	iy,#_fffaaa
   100F FD 34 00           2985 	inc	0 (iy)
   1012 20 07              2986 	jr	NZ,00132$
   1014 FD 21r87s40        2987 	ld	iy,#_fffaaa
   1018 FD 34 01           2988 	inc	1 (iy)
   101B                    2989 00132$:
   101B DD F9              2990 	ld	sp,ix
   101D DD E1              2991 	pop	ix
   101F C9                 2992 	ret
   1020                    2993 _do_animplay_end::
                           2994 ;demo.c:479: void main() {
                           2995 ;	---------------------------------
                           2996 ; Function main
                           2997 ; ---------------------------------
   1020                    2998 _main_start::
   1020                    2999 _main:
                           3000 ;demo.c:480: unsigned char quit=0;
   1020 0E 00              3001 	ld	c,#0x00
                           3002 ;demo.c:481: int modes = 128; // interlace bit on
   1022 11 80 00           3003 	ld	de,#0x0080
                           3004 ;demo.c:485: spindown();
   1025 C5                 3005 	push	bc
   1026 D5                 3006 	push	de
   1027 CDr00s00           3007 	call	_spindown
   102A D1                 3008 	pop	de
   102B C1                 3009 	pop	bc
                           3010 ;demo.c:487: puts("demo init\r\n\r\n");
   102C C5                 3011 	push	bc
   102D D5                 3012 	push	de
   102E 21r8Cs11           3013 	ld	hl,#__str_8
   1031 E5                 3014 	push	hl
   1032 CDr00s00           3015 	call	_puts
   1035 F1                 3016 	pop	af
   1036 D1                 3017 	pop	de
   1037 C1                 3018 	pop	bc
                           3019 ;demo.c:500: puts("music init...");
   1038 C5                 3020 	push	bc
   1039 D5                 3021 	push	de
   103A 21r9As11           3022 	ld	hl,#__str_9
   103D E5                 3023 	push	hl
   103E CDr00s00           3024 	call	_puts
   1041 F1                 3025 	pop	af
   1042 D1                 3026 	pop	de
   1043 C1                 3027 	pop	bc
                           3028 ;demo.c:502: PLY_SongPtr = (char *)0x0103;
   1044 21r00s00           3029 	ld	hl,#_PLY_SongPtr + 0
   1047 36 03              3030 	ld	(hl), #0x03
   1049 21r01s00           3031 	ld	hl,#_PLY_SongPtr + 1
   104C 36 01              3032 	ld	(hl), #0x01
                           3033 ;demo.c:503: PLY_Init();
   104E C5                 3034 	push	bc
   104F D5                 3035 	push	de
   1050 CDr00s00           3036 	call	_PLY_Init
   1053 D1                 3037 	pop	de
   1054 C1                 3038 	pop	bc
                           3039 ;demo.c:504: puts("done.\n\n");
   1055 C5                 3040 	push	bc
   1056 D5                 3041 	push	de
   1057 21rA8s11           3042 	ld	hl,#__str_10
   105A E5                 3043 	push	hl
   105B CDr00s00           3044 	call	_puts
   105E F1                 3045 	pop	af
   105F D1                 3046 	pop	de
   1060 C1                 3047 	pop	bc
                           3048 ;demo.c:506: if(isvdp2())
   1061 C5                 3049 	push	bc
   1062 D5                 3050 	push	de
   1063 CDr00s00           3051 	call	_isvdp2
   1066 45                 3052 	ld	b,l
   1067 D1                 3053 	pop	de
   1068 78                 3054 	ld	a,b
   1069 C1                 3055 	pop	bc
   106A 47                 3056 	ld	b,a
   106B B7                 3057 	or	a,a
   106C 28 03              3058 	jr	Z,00102$
                           3059 ;demo.c:508: modes+=2; // pal
   106E 11 82 00           3060 	ld	de,#0x0082
   1071                    3061 00102$:
                           3062 ;demo.c:512: vdp_set_screen5();
   1071 C5                 3063 	push	bc
   1072 D5                 3064 	push	de
   1073 CDr00s00           3065 	call	_vdp_set_screen5
   1076 D1                 3066 	pop	de
   1077 C1                 3067 	pop	bc
                           3068 ;demo.c:514: vdp_register(VDP_MODE3,modes); // interlace on, screen mode pal or ntsc
   1078 43                 3069 	ld	b,e
   1079 C5                 3070 	push	bc
   107A C5                 3071 	push	bc
   107B 33                 3072 	inc	sp
   107C 3E 09              3073 	ld	a,#0x09
   107E F5                 3074 	push	af
   107F 33                 3075 	inc	sp
   1080 CDr00s00           3076 	call	_vdp_register
   1083 F1                 3077 	pop	af
   1084 C1                 3078 	pop	bc
                           3079 ;demo.c:516: puts("demo start\r\n");
   1085 C5                 3080 	push	bc
   1086 21rB0s11           3081 	ld	hl,#__str_11
   1089 E5                 3082 	push	hl
   108A CDr00s00           3083 	call	_puts
   108D F1                 3084 	pop	af
   108E C1                 3085 	pop	bc
                           3086 ;demo.c:518: scratch_clear();
   108F C5                 3087 	push	bc
   1090 CDr97s03           3088 	call	_scratch_clear
   1093 C1                 3089 	pop	bc
                           3090 ;demo.c:519: vdp_load_palette(scratch);
   1094 C5                 3091 	push	bc
   1095 21r80s3F           3092 	ld	hl,#_scratch
   1098 E5                 3093 	push	hl
   1099 CDr00s00           3094 	call	_vdp_load_palette
   109C F1                 3095 	pop	af
   109D C1                 3096 	pop	bc
                           3097 ;demo.c:521: vdp_register(VDP_VOFFSET,0);
   109E C5                 3098 	push	bc
   109F 21 17 00           3099 	ld	hl,#0x0017
   10A2 E5                 3100 	push	hl
   10A3 CDr00s00           3101 	call	_vdp_register
   10A6 F1                 3102 	pop	af
   10A7 C1                 3103 	pop	bc
                           3104 ;demo.c:522: pal_load("TWISTER PL5",32);
   10A8 C5                 3105 	push	bc
   10A9 3E 20              3106 	ld	a,#0x20
   10AB F5                 3107 	push	af
   10AC 33                 3108 	inc	sp
   10AD 21rBDs11           3109 	ld	hl,#__str_12
   10B0 E5                 3110 	push	hl
   10B1 CDrAAs03           3111 	call	_pal_load
   10B4 F1                 3112 	pop	af
   10B5 33                 3113 	inc	sp
   10B6 C1                 3114 	pop	bc
                           3115 ;demo.c:523: vdp_load_palette(cur_palette);
   10B7 C5                 3116 	push	bc
   10B8 21r00s40           3117 	ld	hl,#_cur_palette
   10BB E5                 3118 	push	hl
   10BC CDr00s00           3119 	call	_vdp_load_palette
   10BF F1                 3120 	pop	af
   10C0 C1                 3121 	pop	bc
                           3122 ;demo.c:525: memset((uint8_t *) &packbuffer, 0, 3963);
   10C1 C5                 3123 	push	bc
   10C2 21 7B 0F           3124 	ld	hl,#0x0F7B
   10C5 E5                 3125 	push	hl
   10C6 3E 00              3126 	ld	a,#0x00
   10C8 F5                 3127 	push	af
   10C9 33                 3128 	inc	sp
   10CA 21r00s01           3129 	ld	hl,#_packbuffer
   10CD E5                 3130 	push	hl
   10CE CDr00s00           3131 	call	_memset
   10D1 F1                 3132 	pop	af
   10D2 F1                 3133 	pop	af
   10D3 33                 3134 	inc	sp
   10D4 C1                 3135 	pop	bc
                           3136 ;demo.c:526: raw_load("TWISTER PCK", 3963, packbuffer);
   10D5 C5                 3137 	push	bc
   10D6 21r00s01           3138 	ld	hl,#_packbuffer
   10D9 E5                 3139 	push	hl
   10DA 21 7B 0F           3140 	ld	hl,#0x0F7B
   10DD E5                 3141 	push	hl
   10DE 21rC9s11           3142 	ld	hl,#__str_13
   10E1 E5                 3143 	push	hl
   10E2 CDr5Es04           3144 	call	_raw_load
   10E5 F1                 3145 	pop	af
   10E6 F1                 3146 	pop	af
   10E7 F1                 3147 	pop	af
   10E8 C1                 3148 	pop	bc
                           3149 ;demo.c:527: bitbuster(packbuffer,0x8000,VRAM_0); // to page 1
   10E9 C5                 3150 	push	bc
   10EA 3E 01              3151 	ld	a,#0x01
   10EC F5                 3152 	push	af
   10ED 33                 3153 	inc	sp
   10EE 21 00 80           3154 	ld	hl,#0x8000
   10F1 E5                 3155 	push	hl
   10F2 21r00s01           3156 	ld	hl,#_packbuffer
   10F5 E5                 3157 	push	hl
   10F6 CDr00s00           3158 	call	_bitbuster
   10F9 F1                 3159 	pop	af
   10FA F1                 3160 	pop	af
   10FB 33                 3161 	inc	sp
   10FC C1                 3162 	pop	bc
                           3163 ;demo.c:530: vdp_set_write_address(0, 0);
   10FD C5                 3164 	push	bc
   10FE 21 00 00           3165 	ld	hl,#0x0000
   1101 E5                 3166 	push	hl
   1102 3E 00              3167 	ld	a,#0x00
   1104 F5                 3168 	push	af
   1105 33                 3169 	inc	sp
   1106 CDr00s00           3170 	call	_vdp_set_write_address
   1109 F1                 3171 	pop	af
   110A 33                 3172 	inc	sp
   110B C1                 3173 	pop	bc
                           3174 ;demo.c:531: memset((uint8_t *) &scratch, 0, 256);
   110C C5                 3175 	push	bc
   110D 21 00 01           3176 	ld	hl,#0x0100
   1110 E5                 3177 	push	hl
   1111 3E 00              3178 	ld	a,#0x00
   1113 F5                 3179 	push	af
   1114 33                 3180 	inc	sp
   1115 21r80s3F           3181 	ld	hl,#_scratch
   1118 E5                 3182 	push	hl
   1119 CDr00s00           3183 	call	_memset
   111C F1                 3184 	pop	af
   111D F1                 3185 	pop	af
   111E 33                 3186 	inc	sp
   111F C1                 3187 	pop	bc
                           3188 ;demo.c:533: for (i = 0; i < 213; i++) {		
   1120 11 D5 00           3189 	ld	de,#0x00D5
   1123                    3190 00110$:
                           3191 ;demo.c:534: vdp_load_screen(scratch, 128);
   1123 C5                 3192 	push	bc
   1124 D5                 3193 	push	de
   1125 3E 80              3194 	ld	a,#0x80
   1127 F5                 3195 	push	af
   1128 33                 3196 	inc	sp
   1129 21r80s3F           3197 	ld	hl,#_scratch
   112C E5                 3198 	push	hl
   112D CDr00s00           3199 	call	_vdp_load_screen
   1130 F1                 3200 	pop	af
   1131 33                 3201 	inc	sp
   1132 D1                 3202 	pop	de
   1133 C1                 3203 	pop	bc
   1134 1B                 3204 	dec	de
                           3205 ;demo.c:533: for (i = 0; i < 213; i++) {		
   1135 7B                 3206 	ld	a,e
   1136 B2                 3207 	or	a,d
   1137 20 EA              3208 	jr	NZ,00110$
                           3209 ;demo.c:565: install_isr(my_isr);
   1139 C5                 3210 	push	bc
   113A 21r2Cs02           3211 	ld	hl,#_my_isr
   113D E5                 3212 	push	hl
   113E CDr00s00           3213 	call	_install_isr
   1141 F1                 3214 	pop	af
   1142 C1                 3215 	pop	bc
                           3216 ;demo.c:587: twister();
   1143 C5                 3217 	push	bc
   1144 CDrEEs09           3218 	call	_twister
   1147 C1                 3219 	pop	bc
                           3220 ;demo.c:588: font();
   1148 C5                 3221 	push	bc
   1149 CDrA2s0C           3222 	call	_font
   114C C1                 3223 	pop	bc
                           3224 ;demo.c:590: while (!quit) {
   114D                    3225 00105$:
   114D AF                 3226 	xor	a,a
   114E B1                 3227 	or	a,c
   114F 20 18              3228 	jr	NZ,00107$
                           3229 ;demo.c:594: twister();
   1151 C5                 3230 	push	bc
   1152 CDrEEs09           3231 	call	_twister
   1155 C1                 3232 	pop	bc
                           3233 ;demo.c:605: if(space())
   1156 C5                 3234 	push	bc
   1157 21 08 01           3235 	ld	hl,#0x0108
   115A E5                 3236 	push	hl
   115B CDr00s00           3237 	call	_ispressed
   115E F1                 3238 	pop	af
   115F 7D                 3239 	ld	a,l
   1160 C1                 3240 	pop	bc
   1161 47                 3241 	ld	b,a
   1162 B7                 3242 	or	a,a
   1163 28 E8              3243 	jr	Z,00105$
                           3244 ;demo.c:606: quit=1;
   1165 0E 01              3245 	ld	c,#0x01
   1167 18 E4              3246 	jr	00105$
   1169                    3247 00107$:
                           3248 ;demo.c:609: waitVB();
   1169 76                 3249 		halt 
                           3250 ;demo.c:610: uninstall_isr();
   116A CDr00s00           3251 	call	_uninstall_isr
                           3252 ;demo.c:611: PLY_Stop();
   116D CDr00s00           3253 	call	_PLY_Stop
                           3254 ;demo.c:612: PLY_SendRegisters();
   1170 CDr00s00           3255 	call	_PLY_SendRegisters
                           3256 ;demo.c:614: screen(0);
   1173 3E 00              3257 	ld	a,#0x00
   1175 F5                 3258 	push	af
   1176 33                 3259 	inc	sp
   1177 CDr00s00           3260 	call	_screen
   117A 33                 3261 	inc	sp
                           3262 ;demo.c:616: puts("demo exit\r\n\r\n");
   117B 21rD5s11           3263 	ld	hl,#__str_14
   117E E5                 3264 	push	hl
   117F CDr00s00           3265 	call	_puts
   1182 F1                 3266 	pop	af
                           3267 ;demo.c:618: exit(0);
   1183 3E 00              3268 	ld	a,#0x00
   1185 F5                 3269 	push	af
   1186 33                 3270 	inc	sp
   1187 CDr00s00           3271 	call	_exit
   118A 33                 3272 	inc	sp
   118B C9                 3273 	ret
   118C                    3274 _main_end::
   118C                    3275 __str_8:
   118C 64 65 6D 6F 20 69  3276 	.ascii "demo init"
        6E 69 74
   1195 0D                 3277 	.db 0x0D
   1196 0A                 3278 	.db 0x0A
   1197 0D                 3279 	.db 0x0D
   1198 0A                 3280 	.db 0x0A
   1199 00                 3281 	.db 0x00
   119A                    3282 __str_9:
   119A 6D 75 73 69 63 20  3283 	.ascii "music init..."
        69 6E 69 74 2E 2E
        2E
   11A7 00                 3284 	.db 0x00
   11A8                    3285 __str_10:
   11A8 64 6F 6E 65 2E     3286 	.ascii "done."
   11AD 0A                 3287 	.db 0x0A
   11AE 0A                 3288 	.db 0x0A
   11AF 00                 3289 	.db 0x00
   11B0                    3290 __str_11:
   11B0 64 65 6D 6F 20 73  3291 	.ascii "demo start"
        74 61 72 74
   11BA 0D                 3292 	.db 0x0D
   11BB 0A                 3293 	.db 0x0A
   11BC 00                 3294 	.db 0x00
   11BD                    3295 __str_12:
   11BD 54 57 49 53 54 45  3296 	.ascii "TWISTER PL5"
        52 20 50 4C 35
   11C8 00                 3297 	.db 0x00
   11C9                    3298 __str_13:
   11C9 54 57 49 53 54 45  3299 	.ascii "TWISTER PCK"
        52 20 50 43 4B
   11D4 00                 3300 	.db 0x00
   11D5                    3301 __str_14:
   11D5 64 65 6D 6F 20 65  3302 	.ascii "demo exit"
        78 69 74
   11DE 0D                 3303 	.db 0x0D
   11DF 0A                 3304 	.db 0x0A
   11E0 0D                 3305 	.db 0x0D
   11E1 0A                 3306 	.db 0x0A
   11E2 00                 3307 	.db 0x00
                           3308 	.area _CODE
                           3309 	.area _CABS
