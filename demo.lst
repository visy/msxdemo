                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Mar 22 2009) (Mac OS X i386)
                              4 ; This file was generated Tue Feb 13 15:01:04 2018
                              5 ;--------------------------------------------------------
                              6 	.module demo
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _raster_effu
                             14 	.globl _do_blocks
                             15 	.globl _do_ymmm
                             16 	.globl _fadein
                             17 	.globl _raw_load
                             18 	.globl _pause
                             19 	.globl _pal_load
                             20 	.globl _scratch_clear
                             21 	.globl _ge5_load
                             22 	.globl _color_isr
                             23 	.globl _my_isr
                             24 	.globl _isNthBitSet
                             25 	.globl _linenum
                             26 	.globl _flof
                             27 	.globl _btab
                             28 	.globl _bty
                             29 	.globl _btx
                             30 	.globl _bsy
                             31 	.globl _bsx
                             32 	.globl _block_init
                             33 	.globl _cc
                             34 	.globl _yo
                             35 	.globl _tick
                             36 	.globl _vbicount
                             37 	.globl _block_palette
                             38 	.globl _cur_palette
                             39 	.globl _scratch
                             40 	.globl _packbuffer
                             41 	.globl _sintab
                             42 	.globl _sintabx
                             43 ;--------------------------------------------------------
                             44 ; special function registers
                             45 ;--------------------------------------------------------
                             46 ;--------------------------------------------------------
                             47 ;  ram data
                             48 ;--------------------------------------------------------
                             49 	.area _DATA
   0000                      50 _sintab::
   0000                      51 	.ds 256
   0100                      52 _packbuffer::
   0100                      53 	.ds 16000
   3F80                      54 _scratch::
   3F80                      55 	.ds 128
   4000                      56 _cur_palette::
   4000                      57 	.ds 32
   4020                      58 _block_palette::
   4020                      59 	.ds 32
   4040                      60 _vbicount::
   4040                      61 	.ds 2
   4042                      62 _tick::
   4042                      63 	.ds 2
   4044                      64 _isNthBitSet_mask_1_1:
   4044                      65 	.ds 8
   404C                      66 _yo::
   404C                      67 	.ds 1
   404D                      68 _cc::
   404D                      69 	.ds 1
   404E                      70 _flipper:
   404E                      71 	.ds 2
   4050                      72 _ymmmf:
   4050                      73 	.ds 2
   4052                      74 _block_init::
   4052                      75 	.ds 1
   4053                      76 _bsx::
   4053                      77 	.ds 2
   4055                      78 _bsy::
   4055                      79 	.ds 2
   4057                      80 _btx::
   4057                      81 	.ds 2
   4059                      82 _bty::
   4059                      83 	.ds 2
   405B                      84 _btab::
   405B                      85 	.ds 32
   407B                      86 _flof::
   407B                      87 	.ds 2
   407D                      88 _linenum::
   407D                      89 	.ds 2
                             90 ;--------------------------------------------------------
                             91 ; overlayable items in  ram 
                             92 ;--------------------------------------------------------
                             93 	.area _OVERLAY
                             94 ;--------------------------------------------------------
                             95 ; external initialized ram data
                             96 ;--------------------------------------------------------
                             97 ;--------------------------------------------------------
                             98 ; global & static initialisations
                             99 ;--------------------------------------------------------
                            100 	.area _HOME
                            101 	.area _GSINIT
                            102 	.area _GSFINAL
                            103 	.area _GSINIT
                            104 ;demo.c:47: static unsigned char mask[] = {1, 2, 4, 8, 16, 32, 64, 128};
   0000 21r44s40            105 	ld	hl,#_isNthBitSet_mask_1_1
   0003 CDr00s00            106 	call	__initrleblock
   0006 08                  107 	.db	8
   0007 01 02 04 08 10 20   108 	.db	0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80
        40 80
   000F 00                  109 	.db	0
                            110 ;types.h:27: signed char sintab[256]={
   0010 21r00s00            111 	ld	hl,#_sintab
   0013 CDr00s00            112 	call	__initrleblock
   0016 3B                  113 	.db	59
   0017 00 03 06 09 0C 0F   114 	.db	0x00, 0x03, 0x06, 0x09, 0x0C, 0x0F, 0x12, 0x15
        12 15
   001F 18 1B 1E 21 24 27   115 	.db	0x18, 0x1B, 0x1E, 0x21, 0x24, 0x27, 0x2A, 0x2D
        2A 2D
   0027 30 33 36 39 3B 3E   116 	.db	0x30, 0x33, 0x36, 0x39, 0x3B, 0x3E, 0x41, 0x43
        41 43
   002F 46 49 4B 4E 50 52   117 	.db	0x46, 0x49, 0x4B, 0x4E, 0x50, 0x52, 0x55, 0x57
        55 57
   0037 59 5B 5E 60 62 64   118 	.db	0x59, 0x5B, 0x5E, 0x60, 0x62, 0x64, 0x66, 0x67
        66 67
   003F 69 6B 6C 6E 70 71   119 	.db	0x69, 0x6B, 0x6C, 0x6E, 0x70, 0x71, 0x72, 0x74
        72 74
   0047 75 76 77 78 79 7A   120 	.db	0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7B
        7B 7B
   004F 7C 7D 7D            121 	.db	0x7C, 0x7D, 0x7D
   0052 FB 7E               122 	.db	#-5,#0x7E
   0054 01                  123 	.db	1
   0055 7F                  124 	.db	0x7F
   0056 FB 7E               125 	.db	#-5,#0x7E
   0058 75                  126 	.db	117
   0059 7D 7D 7C 7B 7B 7A   127 	.db	0x7D, 0x7D, 0x7C, 0x7B, 0x7B, 0x7A, 0x79, 0x78
        79 78
   0061 77 76 75 74 72 71   128 	.db	0x77, 0x76, 0x75, 0x74, 0x72, 0x71, 0x70, 0x6E
        70 6E
   0069 6C 6B 69 67 66 64   129 	.db	0x6C, 0x6B, 0x69, 0x67, 0x66, 0x64, 0x62, 0x60
        62 60
   0071 5E 5B 59 57 55 52   130 	.db	0x5E, 0x5B, 0x59, 0x57, 0x55, 0x52, 0x50, 0x4E
        50 4E
   0079 4B 49 46 43 41 3E   131 	.db	0x4B, 0x49, 0x46, 0x43, 0x41, 0x3E, 0x3B, 0x39
        3B 39
   0081 36 33 30 2D 2A 27   132 	.db	0x36, 0x33, 0x30, 0x2D, 0x2A, 0x27, 0x24, 0x21
        24 21
   0089 1E 1B 18 15 12 0F   133 	.db	0x1E, 0x1B, 0x18, 0x15, 0x12, 0x0F, 0x0C, 0x09
        0C 09
   0091 06 03 00 FD FA F7   134 	.db	0x06, 0x03, 0x00, 0xFD, 0xFA, 0xF7, 0xF4, 0xF1
        F4 F1
   0099 EE EB E8 E5 E2 DF   135 	.db	0xEE, 0xEB, 0xE8, 0xE5, 0xE2, 0xDF, 0xDC, 0xD9
        DC D9
   00A1 D6 D3 D0 CD CA C7   136 	.db	0xD6, 0xD3, 0xD0, 0xCD, 0xCA, 0xC7, 0xC5, 0xC2
        C5 C2
   00A9 BF BD BA B7 B5 B2   137 	.db	0xBF, 0xBD, 0xBA, 0xB7, 0xB5, 0xB2, 0xB0, 0xAE
        B0 AE
   00B1 AB A9 A7 A5 A2 A0   138 	.db	0xAB, 0xA9, 0xA7, 0xA5, 0xA2, 0xA0, 0x9E, 0x9C
        9E 9C
   00B9 9A 99 97 95 94 92   139 	.db	0x9A, 0x99, 0x97, 0x95, 0x94, 0x92, 0x90, 0x8F
        90 8F
   00C1 8E 8C 8B 8A 89 88   140 	.db	0x8E, 0x8C, 0x8B, 0x8A, 0x89, 0x88, 0x87, 0x86
        87 86
   00C9 85 85 84 83 83      141 	.db	0x85, 0x85, 0x84, 0x83, 0x83
   00CE FB 82               142 	.db	#-5,#0x82
   00D0 01                  143 	.db	1
   00D1 81                  144 	.db	0x81
   00D2 FB 82               145 	.db	#-5,#0x82
   00D4 3A                  146 	.db	58
   00D5 83 83 84 85 85 86   147 	.db	0x83, 0x83, 0x84, 0x85, 0x85, 0x86, 0x87, 0x88
        87 88
   00DD 89 8A 8B 8C 8E 8F   148 	.db	0x89, 0x8A, 0x8B, 0x8C, 0x8E, 0x8F, 0x90, 0x92
        90 92
   00E5 94 95 97 99 9A 9C   149 	.db	0x94, 0x95, 0x97, 0x99, 0x9A, 0x9C, 0x9E, 0xA0
        9E A0
   00ED A2 A5 A7 A9 AB AE   150 	.db	0xA2, 0xA5, 0xA7, 0xA9, 0xAB, 0xAE, 0xB0, 0xB2
        B0 B2
   00F5 B5 B7 BA BD BF C2   151 	.db	0xB5, 0xB7, 0xBA, 0xBD, 0xBF, 0xC2, 0xC5, 0xC7
        C5 C7
   00FD CA CD D0 D3 D6 D9   152 	.db	0xCA, 0xCD, 0xD0, 0xD3, 0xD6, 0xD9, 0xDC, 0xDF
        DC DF
   0105 E2 E5 E8 EB EE F1   153 	.db	0xE2, 0xE5, 0xE8, 0xEB, 0xEE, 0xF1, 0xF4, 0xF7
        F4 F7
   010D FA FD               154 	.db	0xFA, 0xFD
   010F 00                  155 	.db	0
                            156 ;demo.c:36: uint8_t packbuffer[16000] = {0};
   0110 21r00s01            157 	ld	hl,#_packbuffer
   0113 CDr00s00            158 	call	__initrleblock
   0116 81 00               159 	.db	#-127,#0x00
   0118 81 00               160 	.db	#-127,#0x00
   011A 81 00               161 	.db	#-127,#0x00
   011C 81 00               162 	.db	#-127,#0x00
   011E 81 00               163 	.db	#-127,#0x00
   0120 81 00               164 	.db	#-127,#0x00
   0122 81 00               165 	.db	#-127,#0x00
   0124 81 00               166 	.db	#-127,#0x00
   0126 81 00               167 	.db	#-127,#0x00
   0128 81 00               168 	.db	#-127,#0x00
   012A 81 00               169 	.db	#-127,#0x00
   012C 81 00               170 	.db	#-127,#0x00
   012E 81 00               171 	.db	#-127,#0x00
   0130 81 00               172 	.db	#-127,#0x00
   0132 81 00               173 	.db	#-127,#0x00
   0134 81 00               174 	.db	#-127,#0x00
   0136 81 00               175 	.db	#-127,#0x00
   0138 81 00               176 	.db	#-127,#0x00
   013A 81 00               177 	.db	#-127,#0x00
   013C 81 00               178 	.db	#-127,#0x00
   013E 81 00               179 	.db	#-127,#0x00
   0140 81 00               180 	.db	#-127,#0x00
   0142 81 00               181 	.db	#-127,#0x00
   0144 81 00               182 	.db	#-127,#0x00
   0146 81 00               183 	.db	#-127,#0x00
   0148 81 00               184 	.db	#-127,#0x00
   014A 81 00               185 	.db	#-127,#0x00
   014C 81 00               186 	.db	#-127,#0x00
   014E 81 00               187 	.db	#-127,#0x00
   0150 81 00               188 	.db	#-127,#0x00
   0152 81 00               189 	.db	#-127,#0x00
   0154 81 00               190 	.db	#-127,#0x00
   0156 81 00               191 	.db	#-127,#0x00
   0158 81 00               192 	.db	#-127,#0x00
   015A 81 00               193 	.db	#-127,#0x00
   015C 81 00               194 	.db	#-127,#0x00
   015E 81 00               195 	.db	#-127,#0x00
   0160 81 00               196 	.db	#-127,#0x00
   0162 81 00               197 	.db	#-127,#0x00
   0164 81 00               198 	.db	#-127,#0x00
   0166 81 00               199 	.db	#-127,#0x00
   0168 81 00               200 	.db	#-127,#0x00
   016A 81 00               201 	.db	#-127,#0x00
   016C 81 00               202 	.db	#-127,#0x00
   016E 81 00               203 	.db	#-127,#0x00
   0170 81 00               204 	.db	#-127,#0x00
   0172 81 00               205 	.db	#-127,#0x00
   0174 81 00               206 	.db	#-127,#0x00
   0176 81 00               207 	.db	#-127,#0x00
   0178 81 00               208 	.db	#-127,#0x00
   017A 81 00               209 	.db	#-127,#0x00
   017C 81 00               210 	.db	#-127,#0x00
   017E 81 00               211 	.db	#-127,#0x00
   0180 81 00               212 	.db	#-127,#0x00
   0182 81 00               213 	.db	#-127,#0x00
   0184 81 00               214 	.db	#-127,#0x00
   0186 81 00               215 	.db	#-127,#0x00
   0188 81 00               216 	.db	#-127,#0x00
   018A 81 00               217 	.db	#-127,#0x00
   018C 81 00               218 	.db	#-127,#0x00
   018E 81 00               219 	.db	#-127,#0x00
   0190 81 00               220 	.db	#-127,#0x00
   0192 81 00               221 	.db	#-127,#0x00
   0194 81 00               222 	.db	#-127,#0x00
   0196 81 00               223 	.db	#-127,#0x00
   0198 81 00               224 	.db	#-127,#0x00
   019A 81 00               225 	.db	#-127,#0x00
   019C 81 00               226 	.db	#-127,#0x00
   019E 81 00               227 	.db	#-127,#0x00
   01A0 81 00               228 	.db	#-127,#0x00
   01A2 81 00               229 	.db	#-127,#0x00
   01A4 81 00               230 	.db	#-127,#0x00
   01A6 81 00               231 	.db	#-127,#0x00
   01A8 81 00               232 	.db	#-127,#0x00
   01AA 81 00               233 	.db	#-127,#0x00
   01AC 81 00               234 	.db	#-127,#0x00
   01AE 81 00               235 	.db	#-127,#0x00
   01B0 81 00               236 	.db	#-127,#0x00
   01B2 81 00               237 	.db	#-127,#0x00
   01B4 81 00               238 	.db	#-127,#0x00
   01B6 81 00               239 	.db	#-127,#0x00
   01B8 81 00               240 	.db	#-127,#0x00
   01BA 81 00               241 	.db	#-127,#0x00
   01BC 81 00               242 	.db	#-127,#0x00
   01BE 81 00               243 	.db	#-127,#0x00
   01C0 81 00               244 	.db	#-127,#0x00
   01C2 81 00               245 	.db	#-127,#0x00
   01C4 81 00               246 	.db	#-127,#0x00
   01C6 81 00               247 	.db	#-127,#0x00
   01C8 81 00               248 	.db	#-127,#0x00
   01CA 81 00               249 	.db	#-127,#0x00
   01CC 81 00               250 	.db	#-127,#0x00
   01CE 81 00               251 	.db	#-127,#0x00
   01D0 81 00               252 	.db	#-127,#0x00
   01D2 81 00               253 	.db	#-127,#0x00
   01D4 81 00               254 	.db	#-127,#0x00
   01D6 81 00               255 	.db	#-127,#0x00
   01D8 81 00               256 	.db	#-127,#0x00
   01DA 81 00               257 	.db	#-127,#0x00
   01DC 81 00               258 	.db	#-127,#0x00
   01DE 81 00               259 	.db	#-127,#0x00
   01E0 81 00               260 	.db	#-127,#0x00
   01E2 81 00               261 	.db	#-127,#0x00
   01E4 81 00               262 	.db	#-127,#0x00
   01E6 81 00               263 	.db	#-127,#0x00
   01E8 81 00               264 	.db	#-127,#0x00
   01EA 81 00               265 	.db	#-127,#0x00
   01EC 81 00               266 	.db	#-127,#0x00
   01EE 81 00               267 	.db	#-127,#0x00
   01F0 81 00               268 	.db	#-127,#0x00
   01F2 81 00               269 	.db	#-127,#0x00
   01F4 81 00               270 	.db	#-127,#0x00
   01F6 81 00               271 	.db	#-127,#0x00
   01F8 81 00               272 	.db	#-127,#0x00
   01FA 81 00               273 	.db	#-127,#0x00
   01FC 81 00               274 	.db	#-127,#0x00
   01FE 81 00               275 	.db	#-127,#0x00
   0200 81 00               276 	.db	#-127,#0x00
   0202 81 00               277 	.db	#-127,#0x00
   0204 81 00               278 	.db	#-127,#0x00
   0206 81 00               279 	.db	#-127,#0x00
   0208 81 00               280 	.db	#-127,#0x00
   020A 81 00               281 	.db	#-127,#0x00
   020C 81 00               282 	.db	#-127,#0x00
   020E 81 00               283 	.db	#-127,#0x00
   0210 83 00               284 	.db	#-125,#0x00
   0212 00                  285 	.db	0
                            286 ;demo.c:42: volatile int vbicount=0;
   0213 FD 21r40s40         287 	ld	iy,#_vbicount
   0217 FD 36 00 00         288 	ld	0 (iy),#0x00
   021B FD 21r40s40         289 	ld	iy,#_vbicount
   021F FD 36 01 00         290 	ld	1 (iy),#0x00
                            291 ;demo.c:43: volatile int tick=0;
   0223 FD 21r42s40         292 	ld	iy,#_tick
   0227 FD 36 00 00         293 	ld	0 (iy),#0x00
   022B FD 21r42s40         294 	ld	iy,#_tick
   022F FD 36 01 00         295 	ld	1 (iy),#0x00
                            296 ;demo.c:212: uint8_t yo = 0;
   0233 FD 21r4Cs40         297 	ld	iy,#_yo
   0237 FD 36 00 00         298 	ld	0 (iy),#0x00
                            299 ;demo.c:213: uint8_t cc = 0;
   023B FD 21r4Ds40         300 	ld	iy,#_cc
   023F FD 36 00 00         301 	ld	0 (iy),#0x00
                            302 ;demo.c:214: static int flipper = 0;
   0243 FD 21r4Es40         303 	ld	iy,#_flipper
   0247 FD 36 00 00         304 	ld	0 (iy),#0x00
   024B FD 21r4Es40         305 	ld	iy,#_flipper
   024F FD 36 01 00         306 	ld	1 (iy),#0x00
                            307 ;demo.c:215: static int ymmmf = 0;
   0253 FD 21r50s40         308 	ld	iy,#_ymmmf
   0257 FD 36 00 00         309 	ld	0 (iy),#0x00
   025B FD 21r50s40         310 	ld	iy,#_ymmmf
   025F FD 36 01 00         311 	ld	1 (iy),#0x00
                            312 ;demo.c:247: char block_init = 0;
   0263 FD 21r52s40         313 	ld	iy,#_block_init
   0267 FD 36 00 00         314 	ld	0 (iy),#0x00
                            315 ;demo.c:249: int bsx = 0;
   026B FD 21r53s40         316 	ld	iy,#_bsx
   026F FD 36 00 00         317 	ld	0 (iy),#0x00
   0273 FD 21r53s40         318 	ld	iy,#_bsx
   0277 FD 36 01 00         319 	ld	1 (iy),#0x00
                            320 ;demo.c:250: int bsy = 0;
   027B FD 21r55s40         321 	ld	iy,#_bsy
   027F FD 36 00 00         322 	ld	0 (iy),#0x00
   0283 FD 21r55s40         323 	ld	iy,#_bsy
   0287 FD 36 01 00         324 	ld	1 (iy),#0x00
                            325 ;demo.c:251: int btx = 0;
   028B FD 21r57s40         326 	ld	iy,#_btx
   028F FD 36 00 00         327 	ld	0 (iy),#0x00
   0293 FD 21r57s40         328 	ld	iy,#_btx
   0297 FD 36 01 00         329 	ld	1 (iy),#0x00
                            330 ;demo.c:252: int bty = 0;
   029B FD 21r59s40         331 	ld	iy,#_bty
   029F FD 36 00 00         332 	ld	0 (iy),#0x00
   02A3 FD 21r59s40         333 	ld	iy,#_bty
   02A7 FD 36 01 00         334 	ld	1 (iy),#0x00
                            335 ;demo.c:254: int btab[16] = {0};
   02AB 21r5Bs40            336 	ld	hl,#_btab
   02AE CDr00s00            337 	call	__initrleblock
   02B1 E0 00               338 	.db	#-32,#0x00
   02B3 00                  339 	.db	0
                            340 ;demo.c:256: int flof = 0;
   02B4 FD 21r7Bs40         341 	ld	iy,#_flof
   02B8 FD 36 00 00         342 	ld	0 (iy),#0x00
   02BC FD 21r7Bs40         343 	ld	iy,#_flof
   02C0 FD 36 01 00         344 	ld	1 (iy),#0x00
                            345 ;demo.c:306: volatile int linenum = 10;
   02C4 FD 21r7Ds40         346 	ld	iy,#_linenum
   02C8 FD 36 00 0A         347 	ld	0 (iy),#0x0A
   02CC FD 21r7Ds40         348 	ld	iy,#_linenum
   02D0 FD 36 01 00         349 	ld	1 (iy),#0x00
                            350 ;--------------------------------------------------------
                            351 ; Home
                            352 ;--------------------------------------------------------
                            353 	.area _HOME
                            354 	.area _HOME
                            355 ;--------------------------------------------------------
                            356 ; code
                            357 ;--------------------------------------------------------
                            358 	.area _CODE
                            359 ;demo.c:46: int isNthBitSet (unsigned char c, int n) {
                            360 ;	---------------------------------
                            361 ; Function isNthBitSet
                            362 ; ---------------------------------
   0000                     363 _isNthBitSet_start::
   0000                     364 _isNthBitSet:
   0000 DD E5               365 	push	ix
   0002 DD 21 00 00         366 	ld	ix,#0
   0006 DD 39               367 	add	ix,sp
                            368 ;demo.c:48: return ((c & mask[n]) != 0);
   0008 3Er44               369 	ld	a,#<_isNthBitSet_mask_1_1
   000A DD 86 05            370 	add	a,5 (ix)
   000D 4F                  371 	ld	c,a
   000E 3Es40               372 	ld	a,#>_isNthBitSet_mask_1_1
   0010 DD 8E 06            373 	adc	a,6 (ix)
   0013 47                  374 	ld	b,a
   0014 0A                  375 	ld	a,(bc)
   0015 DD A6 04            376 	and	a,4 (ix)
   0018 20 04               377 	jr	NZ,00103$
   001A 3E 01               378 	ld	a,#0x01
   001C 18 01               379 	jr	00104$
   001E                     380 00103$:
   001E AF                  381 	xor	a,a
   001F                     382 00104$:
   001F B7                  383 	or	a,a
   0020 D6 01               384 	sub	a,#0x01
   0022 3E 00               385 	ld	a,#0x00
   0024 17                  386 	rla
   0025 4F                  387 	ld	c,a
   0026 69                  388 	ld	l,c
   0027 26 00               389 	ld	h,#0x00
   0029 DD E1               390 	pop	ix
   002B C9                  391 	ret
   002C                     392 _isNthBitSet_end::
   002C                     393 _sintabx:
   002C 78 00               394 	.dw #0x0078
   002E 7A 00               395 	.dw #0x007A
   0030 7D 00               396 	.dw #0x007D
   0032 80 00               397 	.dw #0x0080
   0034 83 00               398 	.dw #0x0083
   0036 86 00               399 	.dw #0x0086
   0038 89 00               400 	.dw #0x0089
   003A 8C 00               401 	.dw #0x008C
   003C 8F 00               402 	.dw #0x008F
   003E 92 00               403 	.dw #0x0092
   0040 95 00               404 	.dw #0x0095
   0042 98 00               405 	.dw #0x0098
   0044 9A 00               406 	.dw #0x009A
   0046 9D 00               407 	.dw #0x009D
   0048 A0 00               408 	.dw #0x00A0
   004A A3 00               409 	.dw #0x00A3
   004C A5 00               410 	.dw #0x00A5
   004E A8 00               411 	.dw #0x00A8
   0050 AB 00               412 	.dw #0x00AB
   0052 AD 00               413 	.dw #0x00AD
   0054 B0 00               414 	.dw #0x00B0
   0056 B3 00               415 	.dw #0x00B3
   0058 B5 00               416 	.dw #0x00B5
   005A B8 00               417 	.dw #0x00B8
   005C BA 00               418 	.dw #0x00BA
   005E BD 00               419 	.dw #0x00BD
   0060 BF 00               420 	.dw #0x00BF
   0062 C1 00               421 	.dw #0x00C1
   0064 C4 00               422 	.dw #0x00C4
   0066 C6 00               423 	.dw #0x00C6
   0068 C8 00               424 	.dw #0x00C8
   006A CA 00               425 	.dw #0x00CA
   006C CC 00               426 	.dw #0x00CC
   006E CE 00               427 	.dw #0x00CE
   0070 D0 00               428 	.dw #0x00D0
   0072 D2 00               429 	.dw #0x00D2
   0074 D4 00               430 	.dw #0x00D4
   0076 D6 00               431 	.dw #0x00D6
   0078 D8 00               432 	.dw #0x00D8
   007A DA 00               433 	.dw #0x00DA
   007C DB 00               434 	.dw #0x00DB
   007E DD 00               435 	.dw #0x00DD
   0080 DE 00               436 	.dw #0x00DE
   0082 E0 00               437 	.dw #0x00E0
   0084 E1 00               438 	.dw #0x00E1
   0086 E3 00               439 	.dw #0x00E3
   0088 E4 00               440 	.dw #0x00E4
   008A E5 00               441 	.dw #0x00E5
   008C E6 00               442 	.dw #0x00E6
   008E E7 00               443 	.dw #0x00E7
   0090 E8 00               444 	.dw #0x00E8
   0092 E9 00               445 	.dw #0x00E9
   0094 EA 00               446 	.dw #0x00EA
   0096 EB 00               447 	.dw #0x00EB
   0098 EC 00               448 	.dw #0x00EC
   009A ED 00               449 	.dw #0x00ED
   009C ED 00               450 	.dw #0x00ED
   009E EE 00               451 	.dw #0x00EE
   00A0 EE 00               452 	.dw #0x00EE
   00A2 EF 00               453 	.dw #0x00EF
   00A4 EF 00               454 	.dw #0x00EF
   00A6 EF 00               455 	.dw #0x00EF
   00A8 EF 00               456 	.dw #0x00EF
   00AA EF 00               457 	.dw #0x00EF
   00AC F0 00               458 	.dw #0x00F0
   00AE EF 00               459 	.dw #0x00EF
   00B0 EF 00               460 	.dw #0x00EF
   00B2 EF 00               461 	.dw #0x00EF
   00B4 EF 00               462 	.dw #0x00EF
   00B6 EF 00               463 	.dw #0x00EF
   00B8 EE 00               464 	.dw #0x00EE
   00BA EE 00               465 	.dw #0x00EE
   00BC ED 00               466 	.dw #0x00ED
   00BE ED 00               467 	.dw #0x00ED
   00C0 EC 00               468 	.dw #0x00EC
   00C2 EB 00               469 	.dw #0x00EB
   00C4 EA 00               470 	.dw #0x00EA
   00C6 E9 00               471 	.dw #0x00E9
   00C8 E8 00               472 	.dw #0x00E8
   00CA E7 00               473 	.dw #0x00E7
   00CC E6 00               474 	.dw #0x00E6
   00CE E5 00               475 	.dw #0x00E5
   00D0 E4 00               476 	.dw #0x00E4
   00D2 E3 00               477 	.dw #0x00E3
   00D4 E1 00               478 	.dw #0x00E1
   00D6 E0 00               479 	.dw #0x00E0
   00D8 DE 00               480 	.dw #0x00DE
   00DA DD 00               481 	.dw #0x00DD
   00DC DB 00               482 	.dw #0x00DB
   00DE DA 00               483 	.dw #0x00DA
   00E0 D8 00               484 	.dw #0x00D8
   00E2 D6 00               485 	.dw #0x00D6
   00E4 D4 00               486 	.dw #0x00D4
   00E6 D2 00               487 	.dw #0x00D2
   00E8 D0 00               488 	.dw #0x00D0
   00EA CE 00               489 	.dw #0x00CE
   00EC CC 00               490 	.dw #0x00CC
   00EE CA 00               491 	.dw #0x00CA
   00F0 C8 00               492 	.dw #0x00C8
   00F2 C6 00               493 	.dw #0x00C6
   00F4 C4 00               494 	.dw #0x00C4
   00F6 C1 00               495 	.dw #0x00C1
   00F8 BF 00               496 	.dw #0x00BF
   00FA BD 00               497 	.dw #0x00BD
   00FC BA 00               498 	.dw #0x00BA
   00FE B8 00               499 	.dw #0x00B8
   0100 B5 00               500 	.dw #0x00B5
   0102 B3 00               501 	.dw #0x00B3
   0104 B0 00               502 	.dw #0x00B0
   0106 AD 00               503 	.dw #0x00AD
   0108 AB 00               504 	.dw #0x00AB
   010A A8 00               505 	.dw #0x00A8
   010C A5 00               506 	.dw #0x00A5
   010E A3 00               507 	.dw #0x00A3
   0110 A0 00               508 	.dw #0x00A0
   0112 9D 00               509 	.dw #0x009D
   0114 9A 00               510 	.dw #0x009A
   0116 98 00               511 	.dw #0x0098
   0118 95 00               512 	.dw #0x0095
   011A 92 00               513 	.dw #0x0092
   011C 8F 00               514 	.dw #0x008F
   011E 8C 00               515 	.dw #0x008C
   0120 89 00               516 	.dw #0x0089
   0122 86 00               517 	.dw #0x0086
   0124 83 00               518 	.dw #0x0083
   0126 80 00               519 	.dw #0x0080
   0128 7D 00               520 	.dw #0x007D
   012A 7A 00               521 	.dw #0x007A
   012C 78 00               522 	.dw #0x0078
   012E 75 00               523 	.dw #0x0075
   0130 72 00               524 	.dw #0x0072
   0132 6F 00               525 	.dw #0x006F
   0134 6C 00               526 	.dw #0x006C
   0136 69 00               527 	.dw #0x0069
   0138 66 00               528 	.dw #0x0066
   013A 63 00               529 	.dw #0x0063
   013C 60 00               530 	.dw #0x0060
   013E 5D 00               531 	.dw #0x005D
   0140 5A 00               532 	.dw #0x005A
   0142 57 00               533 	.dw #0x0057
   0144 55 00               534 	.dw #0x0055
   0146 52 00               535 	.dw #0x0052
   0148 4F 00               536 	.dw #0x004F
   014A 4C 00               537 	.dw #0x004C
   014C 4A 00               538 	.dw #0x004A
   014E 47 00               539 	.dw #0x0047
   0150 44 00               540 	.dw #0x0044
   0152 42 00               541 	.dw #0x0042
   0154 3F 00               542 	.dw #0x003F
   0156 3C 00               543 	.dw #0x003C
   0158 3A 00               544 	.dw #0x003A
   015A 37 00               545 	.dw #0x0037
   015C 35 00               546 	.dw #0x0035
   015E 32 00               547 	.dw #0x0032
   0160 30 00               548 	.dw #0x0030
   0162 2E 00               549 	.dw #0x002E
   0164 2B 00               550 	.dw #0x002B
   0166 29 00               551 	.dw #0x0029
   0168 27 00               552 	.dw #0x0027
   016A 25 00               553 	.dw #0x0025
   016C 23 00               554 	.dw #0x0023
   016E 21 00               555 	.dw #0x0021
   0170 1F 00               556 	.dw #0x001F
   0172 1D 00               557 	.dw #0x001D
   0174 1B 00               558 	.dw #0x001B
   0176 19 00               559 	.dw #0x0019
   0178 17 00               560 	.dw #0x0017
   017A 15 00               561 	.dw #0x0015
   017C 14 00               562 	.dw #0x0014
   017E 12 00               563 	.dw #0x0012
   0180 11 00               564 	.dw #0x0011
   0182 0F 00               565 	.dw #0x000F
   0184 0E 00               566 	.dw #0x000E
   0186 0C 00               567 	.dw #0x000C
   0188 0B 00               568 	.dw #0x000B
   018A 0A 00               569 	.dw #0x000A
   018C 09 00               570 	.dw #0x0009
   018E 08 00               571 	.dw #0x0008
   0190 07 00               572 	.dw #0x0007
   0192 06 00               573 	.dw #0x0006
   0194 05 00               574 	.dw #0x0005
   0196 04 00               575 	.dw #0x0004
   0198 03 00               576 	.dw #0x0003
   019A 02 00               577 	.dw #0x0002
   019C 02 00               578 	.dw #0x0002
   019E 01 00               579 	.dw #0x0001
   01A0 01 00               580 	.dw #0x0001
   01A2 00 00               581 	.dw #0x0000
   01A4 00 00               582 	.dw #0x0000
   01A6 00 00               583 	.dw #0x0000
   01A8 00 00               584 	.dw #0x0000
   01AA 00 00               585 	.dw #0x0000
   01AC 00 00               586 	.dw #0x0000
   01AE 00 00               587 	.dw #0x0000
   01B0 00 00               588 	.dw #0x0000
   01B2 00 00               589 	.dw #0x0000
   01B4 00 00               590 	.dw #0x0000
   01B6 00 00               591 	.dw #0x0000
   01B8 01 00               592 	.dw #0x0001
   01BA 01 00               593 	.dw #0x0001
   01BC 02 00               594 	.dw #0x0002
   01BE 02 00               595 	.dw #0x0002
   01C0 03 00               596 	.dw #0x0003
   01C2 04 00               597 	.dw #0x0004
   01C4 05 00               598 	.dw #0x0005
   01C6 06 00               599 	.dw #0x0006
   01C8 07 00               600 	.dw #0x0007
   01CA 08 00               601 	.dw #0x0008
   01CC 09 00               602 	.dw #0x0009
   01CE 0A 00               603 	.dw #0x000A
   01D0 0B 00               604 	.dw #0x000B
   01D2 0C 00               605 	.dw #0x000C
   01D4 0E 00               606 	.dw #0x000E
   01D6 0F 00               607 	.dw #0x000F
   01D8 11 00               608 	.dw #0x0011
   01DA 12 00               609 	.dw #0x0012
   01DC 14 00               610 	.dw #0x0014
   01DE 15 00               611 	.dw #0x0015
   01E0 17 00               612 	.dw #0x0017
   01E2 19 00               613 	.dw #0x0019
   01E4 1B 00               614 	.dw #0x001B
   01E6 1D 00               615 	.dw #0x001D
   01E8 1F 00               616 	.dw #0x001F
   01EA 21 00               617 	.dw #0x0021
   01EC 23 00               618 	.dw #0x0023
   01EE 25 00               619 	.dw #0x0025
   01F0 27 00               620 	.dw #0x0027
   01F2 29 00               621 	.dw #0x0029
   01F4 2B 00               622 	.dw #0x002B
   01F6 2E 00               623 	.dw #0x002E
   01F8 30 00               624 	.dw #0x0030
   01FA 32 00               625 	.dw #0x0032
   01FC 35 00               626 	.dw #0x0035
   01FE 37 00               627 	.dw #0x0037
   0200 3A 00               628 	.dw #0x003A
   0202 3C 00               629 	.dw #0x003C
   0204 3F 00               630 	.dw #0x003F
   0206 42 00               631 	.dw #0x0042
   0208 44 00               632 	.dw #0x0044
   020A 47 00               633 	.dw #0x0047
   020C 4A 00               634 	.dw #0x004A
   020E 4C 00               635 	.dw #0x004C
   0210 4F 00               636 	.dw #0x004F
   0212 52 00               637 	.dw #0x0052
   0214 55 00               638 	.dw #0x0055
   0216 57 00               639 	.dw #0x0057
   0218 5A 00               640 	.dw #0x005A
   021A 5D 00               641 	.dw #0x005D
   021C 60 00               642 	.dw #0x0060
   021E 63 00               643 	.dw #0x0063
   0220 66 00               644 	.dw #0x0066
   0222 69 00               645 	.dw #0x0069
   0224 6C 00               646 	.dw #0x006C
   0226 6F 00               647 	.dw #0x006F
   0228 72 00               648 	.dw #0x0072
   022A 75 00               649 	.dw #0x0075
                            650 ;demo.c:55: void my_isr(void) interrupt
                            651 ;	---------------------------------
                            652 ; Function my_isr
                            653 ; ---------------------------------
   022C                     654 _my_isr_start::
   022C                     655 _my_isr:
   022C F5                  656 	push	af
   022D C5                  657 	push	bc
   022E D5                  658 	push	de
   022F E5                  659 	push	hl
   0230 FD E5               660 	push	iy
                            661 ;demo.c:57: DI;
   0232 F3                  662 		di 
                            663 ;demo.c:59: READ_VDP_STATUS;
   0233 DB 99               664 		in a,(#0x99) 
                            665 ;demo.c:61: PLY_Play();
   0235 CDr00s00            666 	call	_PLY_Play
                            667 ;demo.c:62: PLY_SendRegisters();
   0238 CDr00s00            668 	call	_PLY_SendRegisters
                            669 ;demo.c:64: vbicount++;
   023B FD 21r40s40         670 	ld	iy,#_vbicount
   023F FD 34 00            671 	inc	0 (iy)
   0242 20 07               672 	jr	NZ,00103$
   0244 FD 21r40s40         673 	ld	iy,#_vbicount
   0248 FD 34 01            674 	inc	1 (iy)
   024B                     675 00103$:
                            676 ;demo.c:65: tick++;
   024B FD 21r42s40         677 	ld	iy,#_tick
   024F FD 34 00            678 	inc	0 (iy)
   0252 20 07               679 	jr	NZ,00104$
   0254 FD 21r42s40         680 	ld	iy,#_tick
   0258 FD 34 01            681 	inc	1 (iy)
   025B                     682 00104$:
                            683 ;demo.c:67: EI;
   025B FB                  684 		ei 
   025C FD E1               685 	pop	iy
   025E E1                  686 	pop	hl
   025F D1                  687 	pop	de
   0260 C1                  688 	pop	bc
   0261 F1                  689 	pop	af
   0262 ED 4D               690 	reti
   0264                     691 _my_isr_end::
                            692 ;demo.c:70: void color_isr(void) interrupt
                            693 ;	---------------------------------
                            694 ; Function color_isr
                            695 ; ---------------------------------
   0264                     696 _color_isr_start::
   0264                     697 _color_isr:
   0264 F5                  698 	push	af
   0265 C5                  699 	push	bc
   0266 D5                  700 	push	de
   0267 E5                  701 	push	hl
   0268 FD E5               702 	push	iy
                            703 ;demo.c:72: DI;
   026A F3                  704 		di 
                            705 ;demo.c:74: if(isNthBitSet(vdp2_status(1),0)) {
   026B 3E 01               706 	ld	a,#0x01
   026D F5                  707 	push	af
   026E 33                  708 	inc	sp
   026F CDr00s00            709 	call	_vdp2_status
   0272 33                  710 	inc	sp
   0273 4D                  711 	ld	c,l
   0274 21 00 00            712 	ld	hl,#0x0000
   0277 E5                  713 	push	hl
   0278 79                  714 	ld	a,c
   0279 F5                  715 	push	af
   027A 33                  716 	inc	sp
   027B CDr00s00            717 	call	_isNthBitSet
   027E F1                  718 	pop	af
   027F 33                  719 	inc	sp
   0280 44                  720 	ld	b,h
   0281 4D                  721 	ld	c,l
   0282 79                  722 	ld	a,c
   0283 B0                  723 	or	a,b
   0284 28 11               724 	jr	Z,00102$
                            725 ;demo.c:75: READ_VDP_STATUS;
   0286 DB 99               726 		in a,(#0x99) 
                            727 ;demo.c:76: msx2_palette(0,4,5,6);
   0288 21 05 06            728 	ld	hl,#0x0605
   028B E5                  729 	push	hl
   028C 21 00 04            730 	ld	hl,#0x0400
   028F E5                  731 	push	hl
   0290 CDr00s00            732 	call	_msx2_palette
   0293 F1                  733 	pop	af
   0294 F1                  734 	pop	af
   0295 18 24               735 	jr	00103$
   0297                     736 00102$:
                            737 ;demo.c:78: READ_VDP_STATUS;
   0297 DB 99               738 		in a,(#0x99) 
                            739 ;demo.c:79: msx2_palette(0,0,0,0);
   0299 21 00 00            740 	ld	hl,#0x0000
   029C E5                  741 	push	hl
   029D 2E 00               742 	ld	l, #0x00
   029F E5                  743 	push	hl
   02A0 CDr00s00            744 	call	_msx2_palette
   02A3 F1                  745 	pop	af
   02A4 F1                  746 	pop	af
                            747 ;demo.c:81: PLY_Play();
   02A5 CDr00s00            748 	call	_PLY_Play
                            749 ;demo.c:82: PLY_SendRegisters();
   02A8 CDr00s00            750 	call	_PLY_SendRegisters
                            751 ;demo.c:83: vbicount++;
   02AB FD 21r40s40         752 	ld	iy,#_vbicount
   02AF FD 34 00            753 	inc	0 (iy)
   02B2 20 07               754 	jr	NZ,00107$
   02B4 FD 21r40s40         755 	ld	iy,#_vbicount
   02B8 FD 34 01            756 	inc	1 (iy)
   02BB                     757 00107$:
   02BB                     758 00103$:
                            759 ;demo.c:86: EI;
   02BB FB                  760 		ei 
   02BC FD E1               761 	pop	iy
   02BE E1                  762 	pop	hl
   02BF D1                  763 	pop	de
   02C0 C1                  764 	pop	bc
   02C1 F1                  765 	pop	af
   02C2 ED 4D               766 	reti
   02C4                     767 _color_isr_end::
                            768 ;demo.c:93: uint8_t ge5_load(char *file_name, uint8_t vramh, uint16_t vraml) {
                            769 ;	---------------------------------
                            770 ; Function ge5_load
                            771 ; ---------------------------------
   02C4                     772 _ge5_load_start::
   02C4                     773 _ge5_load:
   02C4 DD E5               774 	push	ix
   02C6 DD 21 00 00         775 	ld	ix,#0
   02CA DD 39               776 	add	ix,sp
   02CC 21 D2 FF            777 	ld	hl,#-46
   02CF 39                  778 	add	hl,sp
   02D0 F9                  779 	ld	sp,hl
                            780 ;demo.c:97: memset((uint8_t *) &f, 0, sizeof(fcb));
   02D1 21 00 00            781 	ld	hl,#0x0000
   02D4 39                  782 	add	hl,sp
   02D5 4D                  783 	ld	c,l
   02D6 44                  784 	ld	b,h
   02D7 21 2E 00            785 	ld	hl,#0x002E
   02DA E5                  786 	push	hl
   02DB 3E 00               787 	ld	a,#0x00
   02DD F5                  788 	push	af
   02DE 33                  789 	inc	sp
   02DF C5                  790 	push	bc
   02E0 CDr00s00            791 	call	_memset
   02E3 F1                  792 	pop	af
   02E4 F1                  793 	pop	af
   02E5 33                  794 	inc	sp
                            795 ;demo.c:99: f.record_size = 128;
   02E6 21 00 00            796 	ld	hl,#0x0000
   02E9 39                  797 	add	hl,sp
   02EA 4D                  798 	ld	c,l
   02EB 44                  799 	ld	b,h
   02EC 21 0F 00            800 	ld	hl,#0x000F
   02EF 09                  801 	add	hl,bc
   02F0 EB                  802 	ex	de,hl
   02F1 3E 80               803 	ld	a,#0x80
   02F3 12                  804 	ld	(de),a
                            805 ;demo.c:100: f.drive = 0;
   02F4 3E 00               806 	ld	a,#0x00
   02F6 02                  807 	ld	(bc),a
                            808 ;demo.c:102: memcpy(f.name, file_name, 11);
   02F7 DD 5E 04            809 	ld	e,4 (ix)
   02FA DD 56 05            810 	ld	d,5 (ix)
   02FD 03                  811 	inc	bc
   02FE 21 0B 00            812 	ld	hl,#0x000B
   0301 E5                  813 	push	hl
   0302 D5                  814 	push	de
   0303 C5                  815 	push	bc
   0304 CDr00s00            816 	call	_memcpy
   0307 F1                  817 	pop	af
   0308 F1                  818 	pop	af
   0309 F1                  819 	pop	af
                            820 ;demo.c:104: if (open(&f) != 0) return 0;
   030A 21 00 00            821 	ld	hl,#0x0000
   030D 39                  822 	add	hl,sp
   030E E5                  823 	push	hl
   030F CDr00s00            824 	call	_open
   0312 F1                  825 	pop	af
   0313 AF                  826 	xor	a,a
   0314 B5                  827 	or	a,l
   0315 28 05               828 	jr	Z,00102$
   0317 2E 00               829 	ld	l,#0x00
   0319 C3r90s03            830 	jp	00114$
   031C                     831 00102$:
                            832 ;demo.c:105: vdp_set_write_address(vramh, vraml);
   031C DD 6E 07            833 	ld	l,7 (ix)
   031F DD 66 08            834 	ld	h,8 (ix)
   0322 E5                  835 	push	hl
   0323 DD 7E 06            836 	ld	a,6 (ix)
   0326 F5                  837 	push	af
   0327 33                  838 	inc	sp
   0328 CDr00s00            839 	call	_vdp_set_write_address
   032B F1                  840 	pop	af
   032C 33                  841 	inc	sp
                            842 ;demo.c:107: for (i = 0; i < 213; i++) {
   032D 0E 00               843 	ld	c,#0x00
   032F                     844 00110$:
   032F 79                  845 	ld	a,c
   0330 D6 D5               846 	sub	a,#0xD5
   0332 D2r85s03            847 	jp	NC,00113$
                            848 ;demo.c:108: if (block_set_data_ptr(scratch) != 0) return 0;
   0335 C5                  849 	push	bc
   0336 21r80s3F            850 	ld	hl,#_scratch
   0339 E5                  851 	push	hl
   033A CDr00s00            852 	call	_block_set_data_ptr
   033D F1                  853 	pop	af
   033E 7D                  854 	ld	a,l
   033F C1                  855 	pop	bc
   0340 47                  856 	ld	b,a
   0341 B7                  857 	or	a,a
   0342 28 05               858 	jr	Z,00104$
   0344 2E 00               859 	ld	l,#0x00
   0346 C3r90s03            860 	jp	00114$
   0349                     861 00104$:
                            862 ;demo.c:109: if (block_read(&f) != 0) return 0;
   0349 21 00 00            863 	ld	hl,#0x0000
   034C 39                  864 	add	hl,sp
   034D C5                  865 	push	bc
   034E E5                  866 	push	hl
   034F CDr00s00            867 	call	_block_read
   0352 F1                  868 	pop	af
   0353 7D                  869 	ld	a,l
   0354 C1                  870 	pop	bc
   0355 47                  871 	ld	b,a
   0356 B7                  872 	or	a,a
   0357 28 04               873 	jr	Z,00106$
   0359 2E 00               874 	ld	l,#0x00
   035B 18 33               875 	jr	00114$
   035D                     876 00106$:
                            877 ;demo.c:111: if (i == 0) vdp_load_screen(scratch + 7, 121);   // to skip GE5 header
   035D AF                  878 	xor	a,a
   035E B1                  879 	or	a,c
   035F 20 11               880 	jr	NZ,00108$
   0361 11r87s3F            881 	ld	de,#_scratch + 7
   0364 C5                  882 	push	bc
   0365 3E 79               883 	ld	a,#0x79
   0367 F5                  884 	push	af
   0368 33                  885 	inc	sp
   0369 D5                  886 	push	de
   036A CDr00s00            887 	call	_vdp_load_screen
   036D F1                  888 	pop	af
   036E 33                  889 	inc	sp
   036F C1                  890 	pop	bc
   0370 18 0F               891 	jr	00112$
   0372                     892 00108$:
                            893 ;demo.c:112: else vdp_load_screen(scratch, 128);
   0372 C5                  894 	push	bc
   0373 3E 80               895 	ld	a,#0x80
   0375 F5                  896 	push	af
   0376 33                  897 	inc	sp
   0377 21r80s3F            898 	ld	hl,#_scratch
   037A E5                  899 	push	hl
   037B CDr00s00            900 	call	_vdp_load_screen
   037E F1                  901 	pop	af
   037F 33                  902 	inc	sp
   0380 C1                  903 	pop	bc
   0381                     904 00112$:
                            905 ;demo.c:107: for (i = 0; i < 213; i++) {
   0381 0C                  906 	inc	c
   0382 C3r2Fs03            907 	jp	00110$
   0385                     908 00113$:
                            909 ;demo.c:115: close(&f);
   0385 21 00 00            910 	ld	hl,#0x0000
   0388 39                  911 	add	hl,sp
   0389 E5                  912 	push	hl
   038A CDr00s00            913 	call	_close
   038D F1                  914 	pop	af
                            915 ;demo.c:117: return 1;
   038E 2E 01               916 	ld	l,#0x01
   0390                     917 00114$:
   0390 DD F9               918 	ld	sp,ix
   0392 DD E1               919 	pop	ix
   0394 C9                  920 	ret
   0395                     921 _ge5_load_end::
                            922 ;demo.c:120: void scratch_clear() {
                            923 ;	---------------------------------
                            924 ; Function scratch_clear
                            925 ; ---------------------------------
   0395                     926 _scratch_clear_start::
   0395                     927 _scratch_clear:
                            928 ;demo.c:121: memset((uint8_t *) &scratch, 0, 128);
   0395 21 80 00            929 	ld	hl,#0x0080
   0398 E5                  930 	push	hl
   0399 3E 00               931 	ld	a,#0x00
   039B F5                  932 	push	af
   039C 33                  933 	inc	sp
   039D 21r80s3F            934 	ld	hl,#_scratch
   03A0 E5                  935 	push	hl
   03A1 CDr00s00            936 	call	_memset
   03A4 F1                  937 	pop	af
   03A5 F1                  938 	pop	af
   03A6 33                  939 	inc	sp
   03A7 C9                  940 	ret
   03A8                     941 _scratch_clear_end::
                            942 ;demo.c:124: uint8_t pal_load(char *file_name, uint8_t ss) {
                            943 ;	---------------------------------
                            944 ; Function pal_load
                            945 ; ---------------------------------
   03A8                     946 _pal_load_start::
   03A8                     947 _pal_load:
   03A8 DD E5               948 	push	ix
   03AA DD 21 00 00         949 	ld	ix,#0
   03AE DD 39               950 	add	ix,sp
   03B0 21 D2 FF            951 	ld	hl,#-46
   03B3 39                  952 	add	hl,sp
   03B4 F9                  953 	ld	sp,hl
                            954 ;demo.c:127: memset((uint8_t *) &f, 0, sizeof(fcb));
   03B5 21 00 00            955 	ld	hl,#0x0000
   03B8 39                  956 	add	hl,sp
   03B9 4D                  957 	ld	c,l
   03BA 44                  958 	ld	b,h
   03BB 21 2E 00            959 	ld	hl,#0x002E
   03BE E5                  960 	push	hl
   03BF 3E 00               961 	ld	a,#0x00
   03C1 F5                  962 	push	af
   03C2 33                  963 	inc	sp
   03C3 C5                  964 	push	bc
   03C4 CDr00s00            965 	call	_memset
   03C7 F1                  966 	pop	af
   03C8 F1                  967 	pop	af
   03C9 33                  968 	inc	sp
                            969 ;demo.c:128: scratch_clear();
   03CA CDr95s03            970 	call	_scratch_clear
                            971 ;demo.c:130: f.record_size = ss;
   03CD 21 00 00            972 	ld	hl,#0x0000
   03D0 39                  973 	add	hl,sp
   03D1 4D                  974 	ld	c,l
   03D2 44                  975 	ld	b,h
   03D3 21 0F 00            976 	ld	hl,#0x000F
   03D6 09                  977 	add	hl,bc
   03D7 EB                  978 	ex	de,hl
   03D8 DD 7E 06            979 	ld	a,6 (ix)
   03DB 12                  980 	ld	(de),a
                            981 ;demo.c:131: f.drive = 0;
   03DC 3E 00               982 	ld	a,#0x00
   03DE 02                  983 	ld	(bc),a
                            984 ;demo.c:133: memcpy(f.name, file_name, 11);
   03DF DD 5E 04            985 	ld	e,4 (ix)
   03E2 DD 56 05            986 	ld	d,5 (ix)
   03E5 03                  987 	inc	bc
   03E6 21 0B 00            988 	ld	hl,#0x000B
   03E9 E5                  989 	push	hl
   03EA D5                  990 	push	de
   03EB C5                  991 	push	bc
   03EC CDr00s00            992 	call	_memcpy
   03EF F1                  993 	pop	af
   03F0 F1                  994 	pop	af
   03F1 F1                  995 	pop	af
                            996 ;demo.c:135: if (open(&f) != 0) return 0;
   03F2 21 00 00            997 	ld	hl,#0x0000
   03F5 39                  998 	add	hl,sp
   03F6 E5                  999 	push	hl
   03F7 CDr00s00           1000 	call	_open
   03FA F1                 1001 	pop	af
   03FB AF                 1002 	xor	a,a
   03FC B5                 1003 	or	a,l
   03FD 28 04              1004 	jr	Z,00102$
   03FF 2E 00              1005 	ld	l,#0x00
   0401 18 40              1006 	jr	00107$
   0403                    1007 00102$:
                           1008 ;demo.c:136: if (block_set_data_ptr(scratch) != 0) return 0;
   0403 21r80s3F           1009 	ld	hl,#_scratch
   0406 E5                 1010 	push	hl
   0407 CDr00s00           1011 	call	_block_set_data_ptr
   040A F1                 1012 	pop	af
   040B AF                 1013 	xor	a,a
   040C B5                 1014 	or	a,l
   040D 28 04              1015 	jr	Z,00104$
   040F 2E 00              1016 	ld	l,#0x00
   0411 18 30              1017 	jr	00107$
   0413                    1018 00104$:
                           1019 ;demo.c:137: if (block_read(&f) != 0) return 0;
   0413 21 00 00           1020 	ld	hl,#0x0000
   0416 39                 1021 	add	hl,sp
   0417 E5                 1022 	push	hl
   0418 CDr00s00           1023 	call	_block_read
   041B F1                 1024 	pop	af
   041C AF                 1025 	xor	a,a
   041D B5                 1026 	or	a,l
   041E 28 04              1027 	jr	Z,00106$
   0420 2E 00              1028 	ld	l,#0x00
   0422 18 1F              1029 	jr	00107$
   0424                    1030 00106$:
                           1031 ;demo.c:139: memcpy(cur_palette, scratch+7, ss);
   0424 DD 4E 06           1032 	ld	c,6 (ix)
   0427 06 00              1033 	ld	b,#0x00
   0429 11r87s3F           1034 	ld	de,#_scratch + 7
   042C C5                 1035 	push	bc
   042D D5                 1036 	push	de
   042E 21r00s40           1037 	ld	hl,#_cur_palette
   0431 E5                 1038 	push	hl
   0432 CDr00s00           1039 	call	_memcpy
   0435 F1                 1040 	pop	af
   0436 F1                 1041 	pop	af
   0437 F1                 1042 	pop	af
                           1043 ;demo.c:141: close(&f);
   0438 21 00 00           1044 	ld	hl,#0x0000
   043B 39                 1045 	add	hl,sp
   043C E5                 1046 	push	hl
   043D CDr00s00           1047 	call	_close
   0440 F1                 1048 	pop	af
                           1049 ;demo.c:142: return 1;
   0441 2E 01              1050 	ld	l,#0x01
   0443                    1051 00107$:
   0443 DD F9              1052 	ld	sp,ix
   0445 DD E1              1053 	pop	ix
   0447 C9                 1054 	ret
   0448                    1055 _pal_load_end::
                           1056 ;demo.c:146: void pause() {
                           1057 ;	---------------------------------
                           1058 ; Function pause
                           1059 ; ---------------------------------
   0448                    1060 _pause_start::
   0448                    1061 _pause:
                           1062 ;demo.c:147: uint8_t i,j,k = 0;
                           1063 ;demo.c:148: for (i = 0; i < 255; i++) {	
   0448 01 00 00           1064 	ld	bc,#0x0000
   044B                    1065 00104$:
   044B 78                 1066 	ld	a,b
   044C D6 FF              1067 	sub	a,#0xFF
   044E D0                 1068 	ret	NC
                           1069 ;demo.c:149: for (j = 0; j < 255; j++) {
   044F 59                 1070 	ld	e,c
   0450 16 FF              1071 	ld	d,#0xFF
   0452                    1072 00103$:
                           1073 ;demo.c:150: k++;
   0452 1C                 1074 	inc	e
   0453 15                 1075 	dec	d
                           1076 ;demo.c:149: for (j = 0; j < 255; j++) {
   0454 AF                 1077 	xor	a,a
   0455 B2                 1078 	or	a,d
   0456 20 FA              1079 	jr	NZ,00103$
                           1080 ;demo.c:148: for (i = 0; i < 255; i++) {	
   0458 4B                 1081 	ld	c,e
   0459 04                 1082 	inc	b
   045A 18 EF              1083 	jr	00104$
   045C                    1084 _pause_end::
                           1085 ;demo.c:156: uint8_t raw_load(char *file_name, int size, char* buffer) {
                           1086 ;	---------------------------------
                           1087 ; Function raw_load
                           1088 ; ---------------------------------
   045C                    1089 _raw_load_start::
   045C                    1090 _raw_load:
   045C DD E5              1091 	push	ix
   045E DD 21 00 00        1092 	ld	ix,#0
   0462 DD 39              1093 	add	ix,sp
   0464 21 D2 FF           1094 	ld	hl,#-46
   0467 39                 1095 	add	hl,sp
   0468 F9                 1096 	ld	sp,hl
                           1097 ;demo.c:161: memset((uint8_t *) &f, 0, sizeof(fcb));
   0469 21 00 00           1098 	ld	hl,#0x0000
   046C 39                 1099 	add	hl,sp
   046D 4D                 1100 	ld	c,l
   046E 44                 1101 	ld	b,h
   046F 21 2E 00           1102 	ld	hl,#0x002E
   0472 E5                 1103 	push	hl
   0473 3E 00              1104 	ld	a,#0x00
   0475 F5                 1105 	push	af
   0476 33                 1106 	inc	sp
   0477 C5                 1107 	push	bc
   0478 CDr00s00           1108 	call	_memset
   047B F1                 1109 	pop	af
   047C F1                 1110 	pop	af
   047D 33                 1111 	inc	sp
                           1112 ;demo.c:162: scratch_clear();
   047E CDr95s03           1113 	call	_scratch_clear
                           1114 ;demo.c:164: f.record_size = 128;
   0481 21 00 00           1115 	ld	hl,#0x0000
   0484 39                 1116 	add	hl,sp
   0485 4D                 1117 	ld	c,l
   0486 44                 1118 	ld	b,h
   0487 21 0F 00           1119 	ld	hl,#0x000F
   048A 09                 1120 	add	hl,bc
   048B EB                 1121 	ex	de,hl
   048C 3E 80              1122 	ld	a,#0x80
   048E 12                 1123 	ld	(de),a
                           1124 ;demo.c:165: f.drive = 0;
   048F 3E 00              1125 	ld	a,#0x00
   0491 02                 1126 	ld	(bc),a
                           1127 ;demo.c:167: memcpy(f.name, file_name, 11);
   0492 DD 5E 04           1128 	ld	e,4 (ix)
   0495 DD 56 05           1129 	ld	d,5 (ix)
   0498 03                 1130 	inc	bc
   0499 21 0B 00           1131 	ld	hl,#0x000B
   049C E5                 1132 	push	hl
   049D D5                 1133 	push	de
   049E C5                 1134 	push	bc
   049F CDr00s00           1135 	call	_memcpy
   04A2 F1                 1136 	pop	af
   04A3 F1                 1137 	pop	af
   04A4 F1                 1138 	pop	af
                           1139 ;demo.c:169: if (open(&f) != 0) return 0;
   04A5 21 00 00           1140 	ld	hl,#0x0000
   04A8 39                 1141 	add	hl,sp
   04A9 E5                 1142 	push	hl
   04AA CDr00s00           1143 	call	_open
   04AD F1                 1144 	pop	af
   04AE AF                 1145 	xor	a,a
   04AF B5                 1146 	or	a,l
   04B0 28 05              1147 	jr	Z,00116$
   04B2 2E 00              1148 	ld	l,#0x00
   04B4 C3r1Bs05           1149 	jp	00110$
                           1150 ;demo.c:171: while(total < size) {
   04B7                    1151 00116$:
   04B7 01 00 00           1152 	ld	bc,#0x0000
   04BA                    1153 00107$:
   04BA 79                 1154 	ld	a,c
   04BB DD 96 06           1155 	sub	a,6 (ix)
   04BE 78                 1156 	ld	a,b
   04BF DD 9E 07           1157 	sbc	a,7 (ix)
   04C2 F2r10s05           1158 	jp	P,00109$
                           1159 ;demo.c:172: if (block_set_data_ptr(scratch) != 0) return 0;
   04C5 C5                 1160 	push	bc
   04C6 21r80s3F           1161 	ld	hl,#_scratch
   04C9 E5                 1162 	push	hl
   04CA CDr00s00           1163 	call	_block_set_data_ptr
   04CD F1                 1164 	pop	af
   04CE 5D                 1165 	ld	e,l
   04CF C1                 1166 	pop	bc
   04D0 AF                 1167 	xor	a,a
   04D1 B3                 1168 	or	a,e
   04D2 28 04              1169 	jr	Z,00104$
   04D4 2E 00              1170 	ld	l,#0x00
   04D6 18 43              1171 	jr	00110$
   04D8                    1172 00104$:
                           1173 ;demo.c:173: if (block_read(&f) != 0) return 0;
   04D8 21 00 00           1174 	ld	hl,#0x0000
   04DB 39                 1175 	add	hl,sp
   04DC C5                 1176 	push	bc
   04DD E5                 1177 	push	hl
   04DE CDr00s00           1178 	call	_block_read
   04E1 F1                 1179 	pop	af
   04E2 5D                 1180 	ld	e,l
   04E3 C1                 1181 	pop	bc
   04E4 AF                 1182 	xor	a,a
   04E5 B3                 1183 	or	a,e
   04E6 28 04              1184 	jr	Z,00106$
   04E8 2E 00              1185 	ld	l,#0x00
   04EA 18 2F              1186 	jr	00110$
   04EC                    1187 00106$:
                           1188 ;demo.c:175: memcpy(buffer+total,scratch,incr);
   04EC DD 7E 08           1189 	ld	a,8 (ix)
   04EF 81                 1190 	add	a,c
   04F0 5F                 1191 	ld	e,a
   04F1 DD 7E 09           1192 	ld	a,9 (ix)
   04F4 88                 1193 	adc	a,b
   04F5 57                 1194 	ld	d,a
   04F6 C5                 1195 	push	bc
   04F7 21 80 00           1196 	ld	hl,#0x0080
   04FA E5                 1197 	push	hl
   04FB 21r80s3F           1198 	ld	hl,#_scratch
   04FE E5                 1199 	push	hl
   04FF D5                 1200 	push	de
   0500 CDr00s00           1201 	call	_memcpy
   0503 F1                 1202 	pop	af
   0504 F1                 1203 	pop	af
   0505 F1                 1204 	pop	af
   0506 C1                 1205 	pop	bc
                           1206 ;demo.c:177: total+=incr;
   0507 21 80 00           1207 	ld	hl,#0x0080
   050A 09                 1208 	add	hl,bc
   050B 4D                 1209 	ld	c,l
   050C 44                 1210 	ld	b,h
   050D C3rBAs04           1211 	jp	00107$
   0510                    1212 00109$:
                           1213 ;demo.c:180: close(&f);
   0510 21 00 00           1214 	ld	hl,#0x0000
   0513 39                 1215 	add	hl,sp
   0514 E5                 1216 	push	hl
   0515 CDr00s00           1217 	call	_close
   0518 F1                 1218 	pop	af
                           1219 ;demo.c:182: return 1;
   0519 2E 01              1220 	ld	l,#0x01
   051B                    1221 00110$:
   051B DD F9              1222 	ld	sp,ix
   051D DD E1              1223 	pop	ix
   051F C9                 1224 	ret
   0520                    1225 _raw_load_end::
                           1226 ;demo.c:185: void fadein() {
                           1227 ;	---------------------------------
                           1228 ; Function fadein
                           1229 ; ---------------------------------
   0520                    1230 _fadein_start::
   0520                    1231 _fadein:
   0520 DD E5              1232 	push	ix
   0522 DD 21 00 00        1233 	ld	ix,#0
   0526 DD 39              1234 	add	ix,sp
   0528 F5                 1235 	push	af
                           1236 ;demo.c:188: if (tick < 4) return;
   0529 3Ar42s40           1237 	ld	a,(#_tick+0)
   052C D6 04              1238 	sub	a,#0x04
   052E 3Ar43s40           1239 	ld	a,(#_tick+1)
   0531 DE 00              1240 	sbc	a,#0x00
   0533 F2r39s05           1241 	jp	P,00102$
   0536 C3rE7s05           1242 	jp	00113$
   0539                    1243 00102$:
                           1244 ;demo.c:190: tick = 0;
   0539 21r42s40           1245 	ld	hl,#_tick + 0
   053C 36 00              1246 	ld	(hl), #0x00
   053E 21r43s40           1247 	ld	hl,#_tick + 1
   0541 36 00              1248 	ld	(hl), #0x00
                           1249 ;demo.c:192: for(i = 0; i < 32; i+=2) {
   0543 0E 00              1250 	ld	c,#0x00
   0545                    1251 00109$:
   0545 79                 1252 	ld	a,c
   0546 D6 20              1253 	sub	a,#0x20
   0548 D2rDFs05           1254 	jp	NC,00112$
                           1255 ;demo.c:193: uint8_t r = scratch[i] >> 4;
   054B 3Er80              1256 	ld	a,#<_scratch
   054D 81                 1257 	add	a,c
   054E 5F                 1258 	ld	e,a
   054F 3Es3F              1259 	ld	a,#>_scratch
   0551 CE 00              1260 	adc	a,#0x00
   0553 57                 1261 	ld	d,a
   0554 1A                 1262 	ld	a,(de)
   0555 47                 1263 	ld	b,a
   0556 58                 1264 	ld	e,b
   0557 CB 3B              1265 	srl	e
   0559 CB 3B              1266 	srl	e
   055B CB 3B              1267 	srl	e
   055D CB 3B              1268 	srl	e
                           1269 ;demo.c:194: uint8_t b = scratch[i] & 0xf;
   055F 78                 1270 	ld	a,b
   0560 E6 0F              1271 	and	a,#0x0F
   0562 DD 77 FF           1272 	ld	-1 (ix),a
                           1273 ;demo.c:195: uint8_t g = scratch[i+1];
   0565 51                 1274 	ld	d,c
   0566 14                 1275 	inc	d
   0567 3Er80              1276 	ld	a,#<_scratch
   0569 82                 1277 	add	a,d
   056A 6F                 1278 	ld	l,a
   056B 3Es3F              1279 	ld	a,#>_scratch
   056D CE 00              1280 	adc	a,#0x00
   056F 67                 1281 	ld	h,a
   0570 56                 1282 	ld	d,(hl)
   0571 DD 72 FE           1283 	ld	-2 (ix),d
                           1284 ;demo.c:197: if (r < (cur_palette[i] >> 4)) r++;
   0574 3Er00              1285 	ld	a,#<_cur_palette
   0576 81                 1286 	add	a,c
   0577 6F                 1287 	ld	l,a
   0578 3Es40              1288 	ld	a,#>_cur_palette
   057A CE 00              1289 	adc	a,#0x00
   057C 67                 1290 	ld	h,a
   057D 56                 1291 	ld	d,(hl)
   057E CB 3A              1292 	srl	d
   0580 CB 3A              1293 	srl	d
   0582 CB 3A              1294 	srl	d
   0584 CB 3A              1295 	srl	d
   0586 7B                 1296 	ld	a,e
   0587 92                 1297 	sub	a,d
   0588 30 01              1298 	jr	NC,00104$
   058A 1C                 1299 	inc	e
   058B                    1300 00104$:
                           1301 ;demo.c:198: if (b < (cur_palette[i] & 0xf)) b++;
   058B 3Er00              1302 	ld	a,#<_cur_palette
   058D 81                 1303 	add	a,c
   058E 6F                 1304 	ld	l,a
   058F 3Es40              1305 	ld	a,#>_cur_palette
   0591 CE 00              1306 	adc	a,#0x00
   0593 67                 1307 	ld	h,a
   0594 7E                 1308 	ld	a,(hl)
   0595 E6 0F              1309 	and	a,#0x0F
   0597 47                 1310 	ld	b,a
   0598 DD 7E FF           1311 	ld	a,-1 (ix)
   059B 90                 1312 	sub	a,b
   059C 30 03              1313 	jr	NC,00106$
   059E DD 34 FF           1314 	inc	-1 (ix)
   05A1                    1315 00106$:
                           1316 ;demo.c:200: scratch[i] = (r << 4) | b;
   05A1 3Er80              1317 	ld	a,#<_scratch
   05A3 81                 1318 	add	a,c
   05A4 47                 1319 	ld	b,a
   05A5 3Es3F              1320 	ld	a,#>_scratch
   05A7 CE 00              1321 	adc	a,#0x00
   05A9 57                 1322 	ld	d,a
   05AA 7B                 1323 	ld	a,e
   05AB 07                 1324 	rlca
   05AC 07                 1325 	rlca
   05AD 07                 1326 	rlca
   05AE 07                 1327 	rlca
   05AF E6 F0              1328 	and	a,#0xF0
   05B1 DD B6 FF           1329 	or	a,-1 (ix)
   05B4 68                 1330 	ld	l,b
   05B5 62                 1331 	ld	h,d
   05B6 77                 1332 	ld	(hl),a
                           1333 ;demo.c:201: if (g < cur_palette[i+1]) scratch[i+1]++;
   05B7 41                 1334 	ld	b,c
   05B8 04                 1335 	inc	b
   05B9 3Er00              1336 	ld	a,#<_cur_palette
   05BB 80                 1337 	add	a,b
   05BC 5F                 1338 	ld	e,a
   05BD 3Es40              1339 	ld	a,#>_cur_palette
   05BF CE 00              1340 	adc	a,#0x00
   05C1 57                 1341 	ld	d,a
   05C2 1A                 1342 	ld	a,(de)
   05C3 5F                 1343 	ld	e,a
   05C4 DD 7E FE           1344 	ld	a,-2 (ix)
   05C7 93                 1345 	sub	a,e
   05C8 30 10              1346 	jr	NC,00111$
   05CA 3Er80              1347 	ld	a,#<_scratch
   05CC 80                 1348 	add	a,b
   05CD 47                 1349 	ld	b,a
   05CE 3Es3F              1350 	ld	a,#>_scratch
   05D0 CE 00              1351 	adc	a,#0x00
   05D2 5F                 1352 	ld	e,a
   05D3 68                 1353 	ld	l,b
   05D4 67                 1354 	ld	h,a
   05D5 7E                 1355 	ld	a,(hl)
   05D6 3C                 1356 	inc	a
   05D7 68                 1357 	ld	l,b
   05D8 63                 1358 	ld	h,e
   05D9 77                 1359 	ld	(hl),a
   05DA                    1360 00111$:
                           1361 ;demo.c:192: for(i = 0; i < 32; i+=2) {
   05DA 0C                 1362 	inc	c
   05DB 0C                 1363 	inc	c
   05DC C3r45s05           1364 	jp	00109$
   05DF                    1365 00112$:
                           1366 ;demo.c:205: vdp_load_palette(scratch);
   05DF 21r80s3F           1367 	ld	hl,#_scratch
   05E2 E5                 1368 	push	hl
   05E3 CDr00s00           1369 	call	_vdp_load_palette
   05E6 F1                 1370 	pop	af
   05E7                    1371 00113$:
   05E7 DD F9              1372 	ld	sp,ix
   05E9 DD E1              1373 	pop	ix
   05EB C9                 1374 	ret
   05EC                    1375 _fadein_end::
                           1376 ;demo.c:217: void do_ymmm() {
                           1377 ;	---------------------------------
                           1378 ; Function do_ymmm
                           1379 ; ---------------------------------
   05EC                    1380 _do_ymmm_start::
   05EC                    1381 _do_ymmm:
   05EC DD E5              1382 	push	ix
   05EE DD 21 00 00        1383 	ld	ix,#0
   05F2 DD 39              1384 	add	ix,sp
   05F4 21 EB FF           1385 	ld	hl,#-21
   05F7 39                 1386 	add	hl,sp
   05F8 F9                 1387 	ld	sp,hl
                           1388 ;demo.c:222: if (tick > 32) { tick = 0; flipper++;}
   05F9 3E 20              1389 	ld	a,#0x20
   05FB FD 21r42s40        1390 	ld	iy,#_tick
   05FF FD 96 00           1391 	sub	a,0 (iy)
   0602 3E 00              1392 	ld	a,#0x00
   0604 FD 21r42s40        1393 	ld	iy,#_tick
   0608 FD 9E 01           1394 	sbc	a,1 (iy)
   060B F2r28s06           1395 	jp	P,00102$
   060E 21r42s40           1396 	ld	hl,#_tick + 0
   0611 36 00              1397 	ld	(hl), #0x00
   0613 21r43s40           1398 	ld	hl,#_tick + 1
   0616 36 00              1399 	ld	(hl), #0x00
   0618 FD 21r4Es40        1400 	ld	iy,#_flipper
   061C FD 34 00           1401 	inc	0 (iy)
   061F 20 07              1402 	jr	NZ,00115$
   0621 FD 21r4Es40        1403 	ld	iy,#_flipper
   0625 FD 34 01           1404 	inc	1 (iy)
   0628                    1405 00115$:
   0628                    1406 00102$:
                           1407 ;demo.c:223: if (flipper > 10) { flipper = 0;}
   0628 3E 0A              1408 	ld	a,#0x0A
   062A FD 21r4Es40        1409 	ld	iy,#_flipper
   062E FD 96 00           1410 	sub	a,0 (iy)
   0631 3E 00              1411 	ld	a,#0x00
   0633 FD 21r4Es40        1412 	ld	iy,#_flipper
   0637 FD 9E 01           1413 	sbc	a,1 (iy)
   063A F2r47s06           1414 	jp	P,00104$
   063D 21r4Es40           1415 	ld	hl,#_flipper + 0
   0640 36 00              1416 	ld	(hl), #0x00
   0642 21r4Fs40           1417 	ld	hl,#_flipper + 1
   0645 36 00              1418 	ld	(hl), #0x00
   0647                    1419 00104$:
                           1420 ;demo.c:225: ymmmf++;
   0647 FD 21r50s40        1421 	ld	iy,#_ymmmf
   064B FD 34 00           1422 	inc	0 (iy)
   064E 20 07              1423 	jr	NZ,00116$
   0650 FD 21r50s40        1424 	ld	iy,#_ymmmf
   0654 FD 34 01           1425 	inc	1 (iy)
   0657                    1426 00116$:
                           1427 ;demo.c:226: for (yo = 0; yo<212-step;yo+=step) {
   0657 21r4Cs40           1428 	ld	hl,#_yo + 0
   065A 36 00              1429 	ld	(hl), #0x00
   065C                    1430 00105$:
   065C 3Ar4Cs40           1431 	ld	a,(#_yo+0)
   065F DD 77 ED           1432 	ld	-19 (ix),a
   0662 DD 36 EE 00        1433 	ld	-18 (ix),#0x00
   0666 DD 7E ED           1434 	ld	a,-19 (ix)
   0669 D6 D2              1435 	sub	a,#0xD2
   066B DD 7E EE           1436 	ld	a,-18 (ix)
   066E DE 00              1437 	sbc	a,#0x00
   0670 F2r1Cs07           1438 	jp	P,00109$
                           1439 ;demo.c:227: xo = (sintabx[(yo+ymmmf) & 255]);
   0673 21r50s40           1440 	ld	hl,#_ymmmf
   0676 DD 7E ED           1441 	ld	a,-19 (ix)
   0679 86                 1442 	add	a,(hl)
   067A 5F                 1443 	ld	e,a
   067B DD 7E EE           1444 	ld	a,-18 (ix)
   067E 23                 1445 	inc	hl
   067F 8E                 1446 	adc	a,(hl)
   0680 16 00              1447 	ld	d,#0x00
   0682 CB 23              1448 	sla	e
   0684 CB 12              1449 	rl	d
   0686 21r2Cs00           1450 	ld	hl,#_sintabx
   0689 19                 1451 	add	hl,de
   068A 5E                 1452 	ld	e,(hl)
   068B 23                 1453 	inc	hl
   068C 56                 1454 	ld	d,(hl)
   068D DD 73 EF           1455 	ld	-17 (ix),e
   0690 DD 72 F0           1456 	ld	-16 (ix),d
                           1457 ;demo.c:230: cmd.source_x = 0;
   0693 21 06 00           1458 	ld	hl,#0x0006
   0696 39                 1459 	add	hl,sp
   0697 36 00              1460 	ld	(hl),#0x00
   0699 23                 1461 	inc	hl
   069A 36 00              1462 	ld	(hl),#0x00
                           1463 ;demo.c:231: cmd.source_y = 0+yo;
   069C 21 06 00           1464 	ld	hl,#0x0006
   069F 39                 1465 	add	hl,sp
   06A0 EB                 1466 	ex	de,hl
   06A1 4B                 1467 	ld	c,e
   06A2 42                 1468 	ld	b,d
   06A3 69                 1469 	ld	l,c
   06A4 60                 1470 	ld	h,b
   06A5 23                 1471 	inc	hl
   06A6 23                 1472 	inc	hl
   06A7 DD 7E ED           1473 	ld	a,-19 (ix)
   06AA 77                 1474 	ld	(hl),a
   06AB 23                 1475 	inc	hl
   06AC DD 7E EE           1476 	ld	a,-18 (ix)
   06AF 77                 1477 	ld	(hl),a
                           1478 ;demo.c:232: cmd.dest_x = xo;
   06B0 21 04 00           1479 	ld	hl,#0x0004
   06B3 19                 1480 	add	hl,de
   06B4 DD 7E EF           1481 	ld	a,-17 (ix)
   06B7 77                 1482 	ld	(hl),a
   06B8 23                 1483 	inc	hl
   06B9 DD 7E F0           1484 	ld	a,-16 (ix)
   06BC 77                 1485 	ld	(hl),a
                           1486 ;demo.c:233: cmd.dest_y = 3+yo;
   06BD 21 06 00           1487 	ld	hl,#0x0006
   06C0 19                 1488 	add	hl,de
   06C1 DD 75 EB           1489 	ld	-21 (ix),l
   06C4 DD 74 EC           1490 	ld	-20 (ix),h
   06C7 DD 7E ED           1491 	ld	a,-19 (ix)
   06CA C6 03              1492 	add	a,#0x03
   06CC 4F                 1493 	ld	c,a
   06CD DD 7E EE           1494 	ld	a,-18 (ix)
   06D0 CE 00              1495 	adc	a,#0x00
   06D2 47                 1496 	ld	b,a
   06D3 DD 6E EB           1497 	ld	l,-21 (ix)
   06D6 DD 66 EC           1498 	ld	h,-20 (ix)
   06D9 71                 1499 	ld	(hl),c
   06DA 23                 1500 	inc	hl
   06DB 70                 1501 	ld	(hl),b
                           1502 ;demo.c:234: cmd.size_x = 256;
   06DC 21 08 00           1503 	ld	hl,#0x0008
   06DF 19                 1504 	add	hl,de
   06E0 36 00              1505 	ld	(hl),#0x00
   06E2 23                 1506 	inc	hl
   06E3 36 01              1507 	ld	(hl),#0x01
                           1508 ;demo.c:235: cmd.size_y = 1;
   06E5 21 0A 00           1509 	ld	hl,#0x000A
   06E8 19                 1510 	add	hl,de
   06E9 36 01              1511 	ld	(hl),#0x01
   06EB 23                 1512 	inc	hl
   06EC 36 00              1513 	ld	(hl),#0x00
                           1514 ;demo.c:236: cmd.data = 0;
   06EE 21 0C 00           1515 	ld	hl,#0x000C
   06F1 19                 1516 	add	hl,de
   06F2 4D                 1517 	ld	c,l
   06F3 44                 1518 	ld	b,h
   06F4 3E 00              1519 	ld	a,#0x00
   06F6 02                 1520 	ld	(bc),a
                           1521 ;demo.c:237: cmd.argument = 0;
   06F7 21 0D 00           1522 	ld	hl,#0x000D
   06FA 19                 1523 	add	hl,de
   06FB 4D                 1524 	ld	c,l
   06FC 44                 1525 	ld	b,h
   06FD 3E 00              1526 	ld	a,#0x00
   06FF 02                 1527 	ld	(bc),a
                           1528 ;demo.c:238: cmd.command = 0xD0;
   0700 21 0E 00           1529 	ld	hl,#0x000E
   0703 19                 1530 	add	hl,de
   0704 4D                 1531 	ld	c,l
   0705 44                 1532 	ld	b,h
   0706 3E D0              1533 	ld	a,#0xD0
   0708 02                 1534 	ld	(bc),a
                           1535 ;demo.c:241: vdp_copier(&cmd);
   0709 D5                 1536 	push	de
   070A CDr00s00           1537 	call	_vdp_copier
   070D F1                 1538 	pop	af
                           1539 ;demo.c:226: for (yo = 0; yo<212-step;yo+=step) {
   070E 21r4Cs40           1540 	ld	hl,#_yo + 0
   0711 4E                 1541 	ld	c,(hl)
   0712 21r4Cs40           1542 	ld	hl,#_yo
   0715 79                 1543 	ld	a,c
   0716 C6 02              1544 	add	a,#0x02
   0718 77                 1545 	ld	(hl),a
   0719 C3r5Cs06           1546 	jp	00105$
   071C                    1547 00109$:
   071C DD F9              1548 	ld	sp,ix
   071E DD E1              1549 	pop	ix
   0720 C9                 1550 	ret
   0721                    1551 _do_ymmm_end::
                           1552 ;demo.c:258: void do_blocks() {
                           1553 ;	---------------------------------
                           1554 ; Function do_blocks
                           1555 ; ---------------------------------
   0721                    1556 _do_blocks_start::
   0721                    1557 _do_blocks:
   0721 DD E5              1558 	push	ix
   0723 DD 21 00 00        1559 	ld	ix,#0
   0727 DD 39              1560 	add	ix,sp
   0729 21 E9 FF           1561 	ld	hl,#-23
   072C 39                 1562 	add	hl,sp
   072D F9                 1563 	ld	sp,hl
                           1564 ;demo.c:261: int ys = 0;
   072E DD 36 ED 00        1565 	ld	-19 (ix),#0x00
   0732 DD 36 EE 00        1566 	ld	-18 (ix),#0x00
                           1567 ;demo.c:262: int ye = 0;
   0736 DD 36 EB 00        1568 	ld	-21 (ix),#0x00
   073A DD 36 EC 00        1569 	ld	-20 (ix),#0x00
                           1570 ;demo.c:264: vdp_register(VDP_VOFFSET,0);
   073E 21 17 00           1571 	ld	hl,#0x0017
   0741 E5                 1572 	push	hl
   0742 CDr00s00           1573 	call	_vdp_register
   0745 F1                 1574 	pop	af
                           1575 ;demo.c:266: if (block_init == 0) {
   0746 AF                 1576 	xor	a,a
   0747 FD 21r52s40        1577 	ld	iy,#_block_init
   074B FD B6 00           1578 	or	a,0 (iy)
   074E C2rB6s07           1579 	jp	NZ,00108$
                           1580 ;demo.c:268: vdp_set_screen5();
   0751 CDr00s00           1581 	call	_vdp_set_screen5
                           1582 ;demo.c:270: vdp_register(2, 0x5F);
   0754 21 02 5F           1583 	ld	hl,#0x5F02
   0757 E5                 1584 	push	hl
   0758 CDr00s00           1585 	call	_vdp_register
   075B F1                 1586 	pop	af
                           1587 ;demo.c:272: for(i=0;i<16;i++) btab[i] = i*16;
   075C DD 36 EF 00        1588 	ld	-17 (ix),#0x00
   0760 DD 36 F0 00        1589 	ld	-16 (ix),#0x00
   0764                    1590 00110$:
   0764 DD 7E EF           1591 	ld	a,-17 (ix)
   0767 D6 10              1592 	sub	a,#0x10
   0769 DD 7E F0           1593 	ld	a,-16 (ix)
   076C DE 00              1594 	sbc	a,#0x00
   076E F2rA6s07           1595 	jp	P,00113$
   0771 DD 4E EF           1596 	ld	c,-17 (ix)
   0774 DD 46 F0           1597 	ld	b,-16 (ix)
   0777 CB 21              1598 	sla	c
   0779 CB 10              1599 	rl	b
   077B 21r5Bs40           1600 	ld	hl,#_btab
   077E 09                 1601 	add	hl,bc
   077F 4D                 1602 	ld	c,l
   0780 44                 1603 	ld	b,h
   0781 DD 5E EF           1604 	ld	e,-17 (ix)
   0784 DD 56 F0           1605 	ld	d,-16 (ix)
   0787 CB 23              1606 	sla	e
   0789 CB 12              1607 	rl	d
   078B CB 23              1608 	sla	e
   078D CB 12              1609 	rl	d
   078F CB 23              1610 	sla	e
   0791 CB 12              1611 	rl	d
   0793 CB 23              1612 	sla	e
   0795 CB 12              1613 	rl	d
   0797 69                 1614 	ld	l,c
   0798 60                 1615 	ld	h,b
   0799 73                 1616 	ld	(hl),e
   079A 23                 1617 	inc	hl
   079B 72                 1618 	ld	(hl),d
   079C DD 34 EF           1619 	inc	-17 (ix)
   079F 20 03              1620 	jr	NZ,00139$
   07A1 DD 34 F0           1621 	inc	-16 (ix)
   07A4                    1622 00139$:
   07A4 18 BE              1623 	jr	00110$
   07A6                    1624 00113$:
                           1625 ;demo.c:273: vdp_load_palette(block_palette);
   07A6 21r20s40           1626 	ld	hl,#_block_palette
   07A9 E5                 1627 	push	hl
   07AA CDr00s00           1628 	call	_vdp_load_palette
   07AD F1                 1629 	pop	af
                           1630 ;demo.c:275: block_init = 1;
   07AE 21r52s40           1631 	ld	hl,#_block_init + 0
   07B1 36 01              1632 	ld	(hl), #0x01
   07B3 C3r75s09           1633 	jp	00122$
   07B6                    1634 00108$:
                           1635 ;demo.c:279: if (flof == 0) { ys = 0; ye = 8; }
   07B6 3Ar7Bs40           1636 	ld	a,(#_flof+0)
   07B9 FD 21r7Bs40        1637 	ld	iy,#_flof
   07BD FD B6 01           1638 	or	a,1 (iy)
   07C0 20 10              1639 	jr	NZ,00102$
   07C2 DD 36 ED 00        1640 	ld	-19 (ix),#0x00
   07C6 DD 36 EE 00        1641 	ld	-18 (ix),#0x00
   07CA DD 36 EB 08        1642 	ld	-21 (ix),#0x08
   07CE DD 36 EC 00        1643 	ld	-20 (ix),#0x00
   07D2                    1644 00102$:
                           1645 ;demo.c:280: if (flof == 1) { ys = 8; ye = 16; }
   07D2 3Ar7Bs40           1646 	ld	a,(#_flof+0)
   07D5 D6 01              1647 	sub	a,#0x01
   07D7 20 06              1648 	jr	NZ,00140$
   07D9 3Ar7Cs40           1649 	ld	a,(#_flof+1)
   07DC B7                 1650 	or	a,a
   07DD 28 02              1651 	jr	Z,00141$
   07DF                    1652 00140$:
   07DF 18 10              1653 	jr	00104$
   07E1                    1654 00141$:
   07E1 DD 36 ED 08        1655 	ld	-19 (ix),#0x08
   07E5 DD 36 EE 00        1656 	ld	-18 (ix),#0x00
   07E9 DD 36 EB 10        1657 	ld	-21 (ix),#0x10
   07ED DD 36 EC 00        1658 	ld	-20 (ix),#0x00
   07F1                    1659 00104$:
                           1660 ;demo.c:282: for(bty=3;bty<11;bty++) {
   07F1 FD 21r59s40        1661 	ld	iy,#_bty
   07F5 FD 36 00 03        1662 	ld	0 (iy),#0x03
   07F9 FD 21r59s40        1663 	ld	iy,#_bty
   07FD FD 36 01 00        1664 	ld	1 (iy),#0x00
   0801                    1665 00118$:
   0801 3Ar59s40           1666 	ld	a,(#_bty+0)
   0804 D6 0B              1667 	sub	a,#0x0B
   0806 3Ar5As40           1668 	ld	a,(#_bty+1)
   0809 DE 00              1669 	sbc	a,#0x00
   080B F2r4Cs09           1670 	jp	P,00121$
                           1671 ;demo.c:283: for(btx=ys;btx<ye;btx++) {
   080E DD 7E ED           1672 	ld	a,-19 (ix)
   0811 FD 21r57s40        1673 	ld	iy,#_btx
   0815 FD 77 00           1674 	ld	0 (iy),a
   0818 DD 7E EE           1675 	ld	a,-18 (ix)
   081B FD 21r57s40        1676 	ld	iy,#_btx
   081F FD 77 01           1677 	ld	1 (iy),a
   0822                    1678 00114$:
   0822 3Ar57s40           1679 	ld	a,(#_btx+0)
   0825 DD 96 EB           1680 	sub	a,-21 (ix)
   0828 3Ar58s40           1681 	ld	a,(#_btx+1)
   082B DD 9E EC           1682 	sbc	a,-20 (ix)
   082E F2r39s09           1683 	jp	P,00120$
                           1684 ;demo.c:284: bsx = (PLY_PSGReg8 & PLY_PSGReg9 | PLY_PSGReg10)>>1;
   0831 3Ar00s00           1685 	ld	a,(#_PLY_PSGReg8+0)
   0834 FD 21r00s00        1686 	ld	iy,#_PLY_PSGReg9
   0838 FD A6 00           1687 	and	a,0 (iy)
   083B 21r00s00           1688 	ld	hl,#_PLY_PSGReg10 + 0
   083E B6                 1689 	or	a,(hl)
   083F 4F                 1690 	ld	c,a
   0840 CB 39              1691 	srl	c
   0842 21r53s40           1692 	ld	hl,#_bsx + 0
   0845 71                 1693 	ld	(hl), c
   0846 21r54s40           1694 	ld	hl,#_bsx + 1
   0849 36 00              1695 	ld	(hl), #0x00
                           1696 ;demo.c:285: bsy = PLY_PSGReg10;
   084B 3Ar00s00           1697 	ld	a,(#_PLY_PSGReg10+0)
   084E 21r55s40           1698 	ld	hl,#_bsy + 0
   0851 77                 1699 	ld	(hl), a
   0852 21r56s40           1700 	ld	hl,#_bsy + 1
   0855 36 00              1701 	ld	(hl), #0x00
                           1702 ;demo.c:286: cmd.source_x = btab[bsx];
   0857 21 08 00           1703 	ld	hl,#0x0008
   085A 39                 1704 	add	hl,sp
   085B 4D                 1705 	ld	c,l
   085C 44                 1706 	ld	b,h
   085D 21r53s40           1707 	ld	hl,#_bsx + 0
   0860 5E                 1708 	ld	e,(hl)
   0861 21r54s40           1709 	ld	hl,#_bsx + 1
   0864 56                 1710 	ld	d,(hl)
   0865 CB 23              1711 	sla	e
   0867 CB 12              1712 	rl	d
   0869 21r5Bs40           1713 	ld	hl,#_btab
   086C 19                 1714 	add	hl,de
   086D 5E                 1715 	ld	e,(hl)
   086E 23                 1716 	inc	hl
   086F 56                 1717 	ld	d,(hl)
   0870 69                 1718 	ld	l,c
   0871 60                 1719 	ld	h,b
   0872 73                 1720 	ld	(hl),e
   0873 23                 1721 	inc	hl
   0874 72                 1722 	ld	(hl),d
                           1723 ;demo.c:287: cmd.source_y = 768+btab[bsy];
   0875 21 08 00           1724 	ld	hl,#0x0008
   0878 39                 1725 	add	hl,sp
   0879 4D                 1726 	ld	c,l
   087A 44                 1727 	ld	b,h
   087B 21 02 00           1728 	ld	hl,#0x0002
   087E 09                 1729 	add	hl,bc
   087F DD 75 E9           1730 	ld	-23 (ix),l
   0882 DD 74 EA           1731 	ld	-22 (ix),h
   0885 21r55s40           1732 	ld	hl,#_bsy + 0
   0888 5E                 1733 	ld	e,(hl)
   0889 21r56s40           1734 	ld	hl,#_bsy + 1
   088C 56                 1735 	ld	d,(hl)
   088D CB 23              1736 	sla	e
   088F CB 12              1737 	rl	d
   0891 21r5Bs40           1738 	ld	hl,#_btab
   0894 19                 1739 	add	hl,de
   0895 5E                 1740 	ld	e,(hl)
   0896 23                 1741 	inc	hl
   0897 56                 1742 	ld	d,(hl)
   0898 21 00 03           1743 	ld	hl,#0x0300
   089B 19                 1744 	add	hl,de
   089C EB                 1745 	ex	de,hl
   089D DD 6E E9           1746 	ld	l,-23 (ix)
   08A0 DD 66 EA           1747 	ld	h,-22 (ix)
   08A3 73                 1748 	ld	(hl),e
   08A4 23                 1749 	inc	hl
   08A5 72                 1750 	ld	(hl),d
                           1751 ;demo.c:288: cmd.dest_x = btab[btx];
   08A6 21 04 00           1752 	ld	hl,#0x0004
   08A9 09                 1753 	add	hl,bc
   08AA DD 75 E9           1754 	ld	-23 (ix),l
   08AD DD 74 EA           1755 	ld	-22 (ix),h
   08B0 21r57s40           1756 	ld	hl,#_btx + 0
   08B3 5E                 1757 	ld	e,(hl)
   08B4 21r58s40           1758 	ld	hl,#_btx + 1
   08B7 56                 1759 	ld	d,(hl)
   08B8 CB 23              1760 	sla	e
   08BA CB 12              1761 	rl	d
   08BC 21r5Bs40           1762 	ld	hl,#_btab
   08BF 19                 1763 	add	hl,de
   08C0 5E                 1764 	ld	e,(hl)
   08C1 23                 1765 	inc	hl
   08C2 56                 1766 	ld	d,(hl)
   08C3 DD 6E E9           1767 	ld	l,-23 (ix)
   08C6 DD 66 EA           1768 	ld	h,-22 (ix)
   08C9 73                 1769 	ld	(hl),e
   08CA 23                 1770 	inc	hl
   08CB 72                 1771 	ld	(hl),d
                           1772 ;demo.c:289: cmd.dest_y = 512+btab[bty];
   08CC 21 06 00           1773 	ld	hl,#0x0006
   08CF 09                 1774 	add	hl,bc
   08D0 DD 75 E9           1775 	ld	-23 (ix),l
   08D3 DD 74 EA           1776 	ld	-22 (ix),h
   08D6 21r59s40           1777 	ld	hl,#_bty + 0
   08D9 5E                 1778 	ld	e,(hl)
   08DA 21r5As40           1779 	ld	hl,#_bty + 1
   08DD 56                 1780 	ld	d,(hl)
   08DE CB 23              1781 	sla	e
   08E0 CB 12              1782 	rl	d
   08E2 21r5Bs40           1783 	ld	hl,#_btab
   08E5 19                 1784 	add	hl,de
   08E6 5E                 1785 	ld	e,(hl)
   08E7 23                 1786 	inc	hl
   08E8 56                 1787 	ld	d,(hl)
   08E9 21 00 02           1788 	ld	hl,#0x0200
   08EC 19                 1789 	add	hl,de
   08ED EB                 1790 	ex	de,hl
   08EE DD 6E E9           1791 	ld	l,-23 (ix)
   08F1 DD 66 EA           1792 	ld	h,-22 (ix)
   08F4 73                 1793 	ld	(hl),e
   08F5 23                 1794 	inc	hl
   08F6 72                 1795 	ld	(hl),d
                           1796 ;demo.c:290: cmd.size_x = 16;
   08F7 21 08 00           1797 	ld	hl,#0x0008
   08FA 09                 1798 	add	hl,bc
   08FB 36 10              1799 	ld	(hl),#0x10
   08FD 23                 1800 	inc	hl
   08FE 36 00              1801 	ld	(hl),#0x00
                           1802 ;demo.c:291: cmd.size_y = 16;
   0900 21 0A 00           1803 	ld	hl,#0x000A
   0903 09                 1804 	add	hl,bc
   0904 36 10              1805 	ld	(hl),#0x10
   0906 23                 1806 	inc	hl
   0907 36 00              1807 	ld	(hl),#0x00
                           1808 ;demo.c:292: cmd.data = 0;
   0909 21 0C 00           1809 	ld	hl,#0x000C
   090C 09                 1810 	add	hl,bc
   090D EB                 1811 	ex	de,hl
   090E 3E 00              1812 	ld	a,#0x00
   0910 12                 1813 	ld	(de),a
                           1814 ;demo.c:293: cmd.argument = 0x00;
   0911 21 0D 00           1815 	ld	hl,#0x000D
   0914 09                 1816 	add	hl,bc
   0915 EB                 1817 	ex	de,hl
   0916 3E 00              1818 	ld	a,#0x00
   0918 12                 1819 	ld	(de),a
                           1820 ;demo.c:294: cmd.command = 0xD0;
   0919 21 0E 00           1821 	ld	hl,#0x000E
   091C 09                 1822 	add	hl,bc
   091D EB                 1823 	ex	de,hl
   091E 3E D0              1824 	ld	a,#0xD0
   0920 12                 1825 	ld	(de),a
                           1826 ;demo.c:295: vdp_copier(&cmd);
   0921 C5                 1827 	push	bc
   0922 CDr00s00           1828 	call	_vdp_copier
   0925 F1                 1829 	pop	af
                           1830 ;demo.c:283: for(btx=ys;btx<ye;btx++) {
   0926 FD 21r57s40        1831 	ld	iy,#_btx
   092A FD 34 00           1832 	inc	0 (iy)
   092D 20 07              1833 	jr	NZ,00150$
   092F FD 21r57s40        1834 	ld	iy,#_btx
   0933 FD 34 01           1835 	inc	1 (iy)
   0936                    1836 00150$:
   0936 C3r22s08           1837 	jp	00114$
   0939                    1838 00120$:
                           1839 ;demo.c:282: for(bty=3;bty<11;bty++) {
   0939 FD 21r59s40        1840 	ld	iy,#_bty
   093D FD 34 00           1841 	inc	0 (iy)
   0940 20 07              1842 	jr	NZ,00151$
   0942 FD 21r59s40        1843 	ld	iy,#_bty
   0946 FD 34 01           1844 	inc	1 (iy)
   0949                    1845 00151$:
   0949 C3r01s08           1846 	jp	00118$
   094C                    1847 00121$:
                           1848 ;demo.c:299: flof++;
   094C FD 21r7Bs40        1849 	ld	iy,#_flof
   0950 FD 34 00           1850 	inc	0 (iy)
   0953 20 07              1851 	jr	NZ,00152$
   0955 FD 21r7Bs40        1852 	ld	iy,#_flof
   0959 FD 34 01           1853 	inc	1 (iy)
   095C                    1854 00152$:
                           1855 ;demo.c:300: if (flof == 2) flof = 0;
   095C 3Ar7Bs40           1856 	ld	a,(#_flof+0)
   095F D6 02              1857 	sub	a,#0x02
   0961 20 06              1858 	jr	NZ,00153$
   0963 3Ar7Cs40           1859 	ld	a,(#_flof+1)
   0966 B7                 1860 	or	a,a
   0967 28 02              1861 	jr	Z,00154$
   0969                    1862 00153$:
   0969 18 0A              1863 	jr	00122$
   096B                    1864 00154$:
   096B 21r7Bs40           1865 	ld	hl,#_flof + 0
   096E 36 00              1866 	ld	(hl), #0x00
   0970 21r7Cs40           1867 	ld	hl,#_flof + 1
   0973 36 00              1868 	ld	(hl), #0x00
   0975                    1869 00122$:
   0975 DD F9              1870 	ld	sp,ix
   0977 DD E1              1871 	pop	ix
   0979 C9                 1872 	ret
   097A                    1873 _do_blocks_end::
                           1874 ;demo.c:308: void raster_effu() {
                           1875 ;	---------------------------------
                           1876 ; Function raster_effu
                           1877 ; ---------------------------------
   097A                    1878 _raster_effu_start::
   097A                    1879 _raster_effu:
                           1880 ;demo.c:309: vbicount = 0;
   097A FD 21r40s40        1881 	ld	iy,#_vbicount
   097E FD 36 00 00        1882 	ld	0 (iy),#0x00
   0982 FD 21r40s40        1883 	ld	iy,#_vbicount
   0986 FD 36 01 00        1884 	ld	1 (iy),#0x00
                           1885 ;demo.c:311: waitVB();
   098A 76                 1886 		halt 
                           1887 ;demo.c:313: vdp_register(1,0x40); // disable vblank
   098B 21 01 40           1888 	ld	hl,#0x4001
   098E E5                 1889 	push	hl
   098F CDr00s00           1890 	call	_vdp_register
   0992 F1                 1891 	pop	af
                           1892 ;demo.c:315: vdp_register(19,linenum); // interrupt on line
   0993 3Ar7Ds40           1893 	ld	a,(#_linenum+0)
   0996 F5                 1894 	push	af
   0997 33                 1895 	inc	sp
   0998 3E 13              1896 	ld	a,#0x13
   099A F5                 1897 	push	af
   099B 33                 1898 	inc	sp
   099C CDr00s00           1899 	call	_vdp_register
   099F F1                 1900 	pop	af
                           1901 ;demo.c:316: vdp_register(0,0x16); // mode SC5, IE1 interrupts on
   09A0 21 00 16           1902 	ld	hl,#0x1600
   09A3 E5                 1903 	push	hl
   09A4 CDr00s00           1904 	call	_vdp_register
   09A7 F1                 1905 	pop	af
                           1906 ;demo.c:318: waitVB();
   09A8 76                 1907 		halt 
                           1908 ;demo.c:332: linenum++;
   09A9 FD 21r7Ds40        1909 	ld	iy,#_linenum
   09AD FD 34 00           1910 	inc	0 (iy)
   09B0 20 07              1911 	jr	NZ,00106$
   09B2 FD 21r7Ds40        1912 	ld	iy,#_linenum
   09B6 FD 34 01           1913 	inc	1 (iy)
   09B9                    1914 00106$:
                           1915 ;demo.c:333: if (linenum >= 212-60) linenum = 10;
   09B9 3Ar7Ds40           1916 	ld	a,(#_linenum+0)
   09BC D6 98              1917 	sub	a,#0x98
   09BE 3Ar7Es40           1918 	ld	a,(#_linenum+1)
   09C1 DE 00              1919 	sbc	a,#0x00
   09C3 FArD0s09           1920 	jp	M,00102$
   09C6 21r7Ds40           1921 	ld	hl,#_linenum + 0
   09C9 36 0A              1922 	ld	(hl), #0x0A
   09CB 21r7Es40           1923 	ld	hl,#_linenum + 1
   09CE 36 00              1924 	ld	(hl), #0x00
   09D0                    1925 00102$:
                           1926 ;demo.c:335: vdp_register(0,0x6); // mode SC5, IE1 interrupts off
   09D0 21 00 06           1927 	ld	hl,#0x0600
   09D3 E5                 1928 	push	hl
   09D4 CDr00s00           1929 	call	_vdp_register
   09D7 F1                 1930 	pop	af
                           1931 ;demo.c:336: vdp_register(1,0x60); // enable vblank
   09D8 21 01 60           1932 	ld	hl,#0x6001
   09DB E5                 1933 	push	hl
   09DC CDr00s00           1934 	call	_vdp_register
   09DF F1                 1935 	pop	af
   09E0 C9                 1936 	ret
   09E1                    1937 _raster_effu_end::
                           1938 ;demo.c:346: void main() {
                           1939 ;	---------------------------------
                           1940 ; Function main
                           1941 ; ---------------------------------
   09E1                    1942 _main_start::
   09E1                    1943 _main:
   09E1 DD E5              1944 	push	ix
   09E3 DD 21 00 00        1945 	ld	ix,#0
   09E7 DD 39              1946 	add	ix,sp
   09E9 21 F1 FF           1947 	ld	hl,#-15
   09EC 39                 1948 	add	hl,sp
   09ED F9                 1949 	ld	sp,hl
                           1950 ;demo.c:347: unsigned char quit=0;
   09EE 0E 00              1951 	ld	c,#0x00
                           1952 ;demo.c:348: int modes = 128; // interlace bit on
   09F0 11 80 00           1953 	ld	de,#0x0080
                           1954 ;demo.c:355: spindown();
   09F3 C5                 1955 	push	bc
   09F4 D5                 1956 	push	de
   09F5 CDr00s00           1957 	call	_spindown
   09F8 D1                 1958 	pop	de
   09F9 C1                 1959 	pop	bc
                           1960 ;demo.c:357: puts("demo init\r\n\r\n");
   09FA C5                 1961 	push	bc
   09FB D5                 1962 	push	de
   09FC 21r18s0B           1963 	ld	hl,#__str_0
   09FF E5                 1964 	push	hl
   0A00 CDr00s00           1965 	call	_puts
   0A03 F1                 1966 	pop	af
   0A04 D1                 1967 	pop	de
   0A05 C1                 1968 	pop	bc
                           1969 ;demo.c:370: puts("music init...");
   0A06 C5                 1970 	push	bc
   0A07 D5                 1971 	push	de
   0A08 21r26s0B           1972 	ld	hl,#__str_1
   0A0B E5                 1973 	push	hl
   0A0C CDr00s00           1974 	call	_puts
   0A0F F1                 1975 	pop	af
   0A10 D1                 1976 	pop	de
   0A11 C1                 1977 	pop	bc
                           1978 ;demo.c:372: PLY_SongPtr = (char *)0x0103;
   0A12 21r00s00           1979 	ld	hl,#_PLY_SongPtr + 0
   0A15 36 03              1980 	ld	(hl), #0x03
   0A17 21r01s00           1981 	ld	hl,#_PLY_SongPtr + 1
   0A1A 36 01              1982 	ld	(hl), #0x01
                           1983 ;demo.c:373: PLY_Init();
   0A1C C5                 1984 	push	bc
   0A1D D5                 1985 	push	de
   0A1E CDr00s00           1986 	call	_PLY_Init
   0A21 D1                 1987 	pop	de
   0A22 C1                 1988 	pop	bc
                           1989 ;demo.c:374: puts("done.\n\n");
   0A23 C5                 1990 	push	bc
   0A24 D5                 1991 	push	de
   0A25 21r34s0B           1992 	ld	hl,#__str_2
   0A28 E5                 1993 	push	hl
   0A29 CDr00s00           1994 	call	_puts
   0A2C F1                 1995 	pop	af
   0A2D D1                 1996 	pop	de
   0A2E C1                 1997 	pop	bc
                           1998 ;demo.c:376: if(isvdp2())
   0A2F C5                 1999 	push	bc
   0A30 D5                 2000 	push	de
   0A31 CDr00s00           2001 	call	_isvdp2
   0A34 45                 2002 	ld	b,l
   0A35 D1                 2003 	pop	de
   0A36 78                 2004 	ld	a,b
   0A37 C1                 2005 	pop	bc
   0A38 47                 2006 	ld	b,a
   0A39 B7                 2007 	or	a,a
   0A3A 28 03              2008 	jr	Z,00102$
                           2009 ;demo.c:378: modes+=2; // pal
   0A3C 11 82 00           2010 	ld	de,#0x0082
   0A3F                    2011 00102$:
                           2012 ;demo.c:382: vdp_set_screen5();
   0A3F C5                 2013 	push	bc
   0A40 D5                 2014 	push	de
   0A41 CDr00s00           2015 	call	_vdp_set_screen5
   0A44 D1                 2016 	pop	de
   0A45 C1                 2017 	pop	bc
                           2018 ;demo.c:384: vdp_register(VDP_MODE3,modes); // interlace on, screen mode pal or ntsc
   0A46 43                 2019 	ld	b,e
   0A47 C5                 2020 	push	bc
   0A48 C5                 2021 	push	bc
   0A49 33                 2022 	inc	sp
   0A4A 3E 09              2023 	ld	a,#0x09
   0A4C F5                 2024 	push	af
   0A4D 33                 2025 	inc	sp
   0A4E CDr00s00           2026 	call	_vdp_register
   0A51 F1                 2027 	pop	af
   0A52 C1                 2028 	pop	bc
                           2029 ;demo.c:386: puts("demo start\r\n");
   0A53 C5                 2030 	push	bc
   0A54 21r3Cs0B           2031 	ld	hl,#__str_3
   0A57 E5                 2032 	push	hl
   0A58 CDr00s00           2033 	call	_puts
   0A5B F1                 2034 	pop	af
   0A5C C1                 2035 	pop	bc
                           2036 ;demo.c:388: scratch_clear();
   0A5D C5                 2037 	push	bc
   0A5E CDr95s03           2038 	call	_scratch_clear
   0A61 C1                 2039 	pop	bc
                           2040 ;demo.c:389: vdp_load_palette(scratch);
   0A62 C5                 2041 	push	bc
   0A63 21r80s3F           2042 	ld	hl,#_scratch
   0A66 E5                 2043 	push	hl
   0A67 CDr00s00           2044 	call	_vdp_load_palette
   0A6A F1                 2045 	pop	af
   0A6B C1                 2046 	pop	bc
                           2047 ;demo.c:391: vdp_register(VDP_VOFFSET,0);
   0A6C C5                 2048 	push	bc
   0A6D 21 17 00           2049 	ld	hl,#0x0017
   0A70 E5                 2050 	push	hl
   0A71 CDr00s00           2051 	call	_vdp_register
   0A74 F1                 2052 	pop	af
   0A75 C1                 2053 	pop	bc
                           2054 ;demo.c:411: pal_load("KETTU16 PL5",32);
   0A76 C5                 2055 	push	bc
   0A77 3E 20              2056 	ld	a,#0x20
   0A79 F5                 2057 	push	af
   0A7A 33                 2058 	inc	sp
   0A7B 21r49s0B           2059 	ld	hl,#__str_4
   0A7E E5                 2060 	push	hl
   0A7F CDrA8s03           2061 	call	_pal_load
   0A82 F1                 2062 	pop	af
   0A83 33                 2063 	inc	sp
   0A84 C1                 2064 	pop	bc
                           2065 ;demo.c:412: vdp_load_palette(cur_palette);
   0A85 C5                 2066 	push	bc
   0A86 21r00s40           2067 	ld	hl,#_cur_palette
   0A89 E5                 2068 	push	hl
   0A8A CDr00s00           2069 	call	_vdp_load_palette
   0A8D F1                 2070 	pop	af
   0A8E C1                 2071 	pop	bc
                           2072 ;demo.c:414: memset((uint8_t *) &packbuffer, 0, 4501);
   0A8F C5                 2073 	push	bc
   0A90 21 95 11           2074 	ld	hl,#0x1195
   0A93 E5                 2075 	push	hl
   0A94 3E 00              2076 	ld	a,#0x00
   0A96 F5                 2077 	push	af
   0A97 33                 2078 	inc	sp
   0A98 21r00s01           2079 	ld	hl,#_packbuffer
   0A9B E5                 2080 	push	hl
   0A9C CDr00s00           2081 	call	_memset
   0A9F F1                 2082 	pop	af
   0AA0 F1                 2083 	pop	af
   0AA1 33                 2084 	inc	sp
   0AA2 C1                 2085 	pop	bc
                           2086 ;demo.c:415: raw_load("KETTU16 PCK", 4501, packbuffer);
   0AA3 C5                 2087 	push	bc
   0AA4 21r00s01           2088 	ld	hl,#_packbuffer
   0AA7 E5                 2089 	push	hl
   0AA8 21 95 11           2090 	ld	hl,#0x1195
   0AAB E5                 2091 	push	hl
   0AAC 21r55s0B           2092 	ld	hl,#__str_5
   0AAF E5                 2093 	push	hl
   0AB0 CDr5Cs04           2094 	call	_raw_load
   0AB3 F1                 2095 	pop	af
   0AB4 F1                 2096 	pop	af
   0AB5 F1                 2097 	pop	af
   0AB6 C1                 2098 	pop	bc
                           2099 ;demo.c:416: bitbuster(packbuffer,0x0000,VRAM_0); // to page 1
   0AB7 C5                 2100 	push	bc
   0AB8 3E 01              2101 	ld	a,#0x01
   0ABA F5                 2102 	push	af
   0ABB 33                 2103 	inc	sp
   0ABC 21 00 00           2104 	ld	hl,#0x0000
   0ABF E5                 2105 	push	hl
   0AC0 21r00s01           2106 	ld	hl,#_packbuffer
   0AC3 E5                 2107 	push	hl
   0AC4 CDr00s00           2108 	call	_bitbuster
   0AC7 F1                 2109 	pop	af
   0AC8 F1                 2110 	pop	af
   0AC9 33                 2111 	inc	sp
   0ACA C1                 2112 	pop	bc
                           2113 ;demo.c:421: install_isr(color_isr);
   0ACB C5                 2114 	push	bc
   0ACC 21r64s02           2115 	ld	hl,#_color_isr
   0ACF E5                 2116 	push	hl
   0AD0 CDr00s00           2117 	call	_install_isr
   0AD3 F1                 2118 	pop	af
   0AD4 C1                 2119 	pop	bc
                           2120 ;demo.c:424: while(!quit) {
   0AD5                    2121 00105$:
   0AD5 AF                 2122 	xor	a,a
   0AD6 B1                 2123 	or	a,c
   0AD7 20 18              2124 	jr	NZ,00107$
                           2125 ;demo.c:425: raster_effu();
   0AD9 C5                 2126 	push	bc
   0ADA CDr7As09           2127 	call	_raster_effu
   0ADD C1                 2128 	pop	bc
                           2129 ;demo.c:426: if (space()) quit=1;
   0ADE C5                 2130 	push	bc
   0ADF 21 08 01           2131 	ld	hl,#0x0108
   0AE2 E5                 2132 	push	hl
   0AE3 CDr00s00           2133 	call	_ispressed
   0AE6 F1                 2134 	pop	af
   0AE7 7D                 2135 	ld	a,l
   0AE8 C1                 2136 	pop	bc
   0AE9 47                 2137 	ld	b,a
   0AEA B7                 2138 	or	a,a
   0AEB 28 E8              2139 	jr	Z,00105$
   0AED 0E 01              2140 	ld	c,#0x01
   0AEF 18 E4              2141 	jr	00105$
   0AF1                    2142 00107$:
                           2143 ;demo.c:492: waitVB();
   0AF1 76                 2144 		halt 
                           2145 ;demo.c:493: uninstall_isr();
   0AF2 CDr00s00           2146 	call	_uninstall_isr
                           2147 ;demo.c:494: PLY_Stop();
   0AF5 CDr00s00           2148 	call	_PLY_Stop
                           2149 ;demo.c:495: PLY_SendRegisters();
   0AF8 CDr00s00           2150 	call	_PLY_SendRegisters
                           2151 ;demo.c:497: screen(0);
   0AFB 3E 00              2152 	ld	a,#0x00
   0AFD F5                 2153 	push	af
   0AFE 33                 2154 	inc	sp
   0AFF CDr00s00           2155 	call	_screen
   0B02 33                 2156 	inc	sp
                           2157 ;demo.c:499: puts("demo exit\r\n\r\n");
   0B03 21r61s0B           2158 	ld	hl,#__str_6
   0B06 E5                 2159 	push	hl
   0B07 CDr00s00           2160 	call	_puts
   0B0A F1                 2161 	pop	af
                           2162 ;demo.c:501: exit(0);
   0B0B 3E 00              2163 	ld	a,#0x00
   0B0D F5                 2164 	push	af
   0B0E 33                 2165 	inc	sp
   0B0F CDr00s00           2166 	call	_exit
   0B12 33                 2167 	inc	sp
   0B13 DD F9              2168 	ld	sp,ix
   0B15 DD E1              2169 	pop	ix
   0B17 C9                 2170 	ret
   0B18                    2171 _main_end::
   0B18                    2172 __str_0:
   0B18 64 65 6D 6F 20 69  2173 	.ascii "demo init"
        6E 69 74
   0B21 0D                 2174 	.db 0x0D
   0B22 0A                 2175 	.db 0x0A
   0B23 0D                 2176 	.db 0x0D
   0B24 0A                 2177 	.db 0x0A
   0B25 00                 2178 	.db 0x00
   0B26                    2179 __str_1:
   0B26 6D 75 73 69 63 20  2180 	.ascii "music init..."
        69 6E 69 74 2E 2E
        2E
   0B33 00                 2181 	.db 0x00
   0B34                    2182 __str_2:
   0B34 64 6F 6E 65 2E     2183 	.ascii "done."
   0B39 0A                 2184 	.db 0x0A
   0B3A 0A                 2185 	.db 0x0A
   0B3B 00                 2186 	.db 0x00
   0B3C                    2187 __str_3:
   0B3C 64 65 6D 6F 20 73  2188 	.ascii "demo start"
        74 61 72 74
   0B46 0D                 2189 	.db 0x0D
   0B47 0A                 2190 	.db 0x0A
   0B48 00                 2191 	.db 0x00
   0B49                    2192 __str_4:
   0B49 4B 45 54 54 55 31  2193 	.ascii "KETTU16 PL5"
        36 20 50 4C 35
   0B54 00                 2194 	.db 0x00
   0B55                    2195 __str_5:
   0B55 4B 45 54 54 55 31  2196 	.ascii "KETTU16 PCK"
        36 20 50 43 4B
   0B60 00                 2197 	.db 0x00
   0B61                    2198 __str_6:
   0B61 64 65 6D 6F 20 65  2199 	.ascii "demo exit"
        78 69 74
   0B6A 0D                 2200 	.db 0x0D
   0B6B 0A                 2201 	.db 0x0A
   0B6C 0D                 2202 	.db 0x0D
   0B6D 0A                 2203 	.db 0x0A
   0B6E 00                 2204 	.db 0x00
                           2205 	.area _CODE
                           2206 	.area _CABS
