                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Mar 22 2009) (Mac OS X i386)
                              4 ; This file was generated Fri Feb  9 19:05:35 2018
                              5 ;--------------------------------------------------------
                              6 	.module demo
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _do_blocks
                             14 	.globl _do_ymmm
                             15 	.globl _fadein
                             16 	.globl _pack_load
                             17 	.globl _pause
                             18 	.globl _pal_load
                             19 	.globl _scratch_clear
                             20 	.globl _ge5_load
                             21 	.globl _my_isr
                             22 	.globl _flof
                             23 	.globl _btab
                             24 	.globl _bty
                             25 	.globl _btx
                             26 	.globl _bsy
                             27 	.globl _bsx
                             28 	.globl _block_init
                             29 	.globl _cc
                             30 	.globl _yo
                             31 	.globl _tick
                             32 	.globl _vbicount
                             33 	.globl _block_palette
                             34 	.globl _cur_palette
                             35 	.globl _scratch
                             36 	.globl _packbuffer2
                             37 	.globl _packbuffer
                             38 	.globl _sintab
                             39 ;--------------------------------------------------------
                             40 ; special function registers
                             41 ;--------------------------------------------------------
                             42 ;--------------------------------------------------------
                             43 ;  ram data
                             44 ;--------------------------------------------------------
                             45 	.area _DATA
   0000                      46 _sintab::
   0000                      47 	.ds 256
   0100                      48 _packbuffer::
   0100                      49 	.ds 5000
   1488                      50 _packbuffer2::
   1488                      51 	.ds 5000
   2810                      52 _scratch::
   2810                      53 	.ds 128
   2890                      54 _cur_palette::
   2890                      55 	.ds 32
   28B0                      56 _block_palette::
   28B0                      57 	.ds 32
   28D0                      58 _vbicount::
   28D0                      59 	.ds 2
   28D2                      60 _tick::
   28D2                      61 	.ds 2
   28D4                      62 _yo::
   28D4                      63 	.ds 1
   28D5                      64 _cc::
   28D5                      65 	.ds 1
   28D6                      66 _flipper:
   28D6                      67 	.ds 2
   28D8                      68 _ymmmf:
   28D8                      69 	.ds 2
   28DA                      70 _block_init::
   28DA                      71 	.ds 1
   28DB                      72 _bsx::
   28DB                      73 	.ds 2
   28DD                      74 _bsy::
   28DD                      75 	.ds 2
   28DF                      76 _btx::
   28DF                      77 	.ds 2
   28E1                      78 _bty::
   28E1                      79 	.ds 2
   28E3                      80 _btab::
   28E3                      81 	.ds 32
   2903                      82 _flof::
   2903                      83 	.ds 2
                             84 ;--------------------------------------------------------
                             85 ; overlayable items in  ram 
                             86 ;--------------------------------------------------------
                             87 	.area _OVERLAY
                             88 ;--------------------------------------------------------
                             89 ; external initialized ram data
                             90 ;--------------------------------------------------------
                             91 ;--------------------------------------------------------
                             92 ; global & static initialisations
                             93 ;--------------------------------------------------------
                             94 	.area _HOME
                             95 	.area _GSINIT
                             96 	.area _GSFINAL
                             97 	.area _GSINIT
                             98 ;types.h:27: signed char sintab[256]={
   0000 21r00s00             99 	ld	hl,#_sintab
   0003 CDr00s00            100 	call	__initrleblock
   0006 3B                  101 	.db	59
   0007 00 03 06 09 0C 0F   102 	.db	0x00, 0x03, 0x06, 0x09, 0x0C, 0x0F, 0x12, 0x15
        12 15
   000F 18 1B 1E 21 24 27   103 	.db	0x18, 0x1B, 0x1E, 0x21, 0x24, 0x27, 0x2A, 0x2D
        2A 2D
   0017 30 33 36 39 3B 3E   104 	.db	0x30, 0x33, 0x36, 0x39, 0x3B, 0x3E, 0x41, 0x43
        41 43
   001F 46 49 4B 4E 50 52   105 	.db	0x46, 0x49, 0x4B, 0x4E, 0x50, 0x52, 0x55, 0x57
        55 57
   0027 59 5B 5E 60 62 64   106 	.db	0x59, 0x5B, 0x5E, 0x60, 0x62, 0x64, 0x66, 0x67
        66 67
   002F 69 6B 6C 6E 70 71   107 	.db	0x69, 0x6B, 0x6C, 0x6E, 0x70, 0x71, 0x72, 0x74
        72 74
   0037 75 76 77 78 79 7A   108 	.db	0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7B
        7B 7B
   003F 7C 7D 7D            109 	.db	0x7C, 0x7D, 0x7D
   0042 FB 7E               110 	.db	#-5,#0x7E
   0044 01                  111 	.db	1
   0045 7F                  112 	.db	0x7F
   0046 FB 7E               113 	.db	#-5,#0x7E
   0048 75                  114 	.db	117
   0049 7D 7D 7C 7B 7B 7A   115 	.db	0x7D, 0x7D, 0x7C, 0x7B, 0x7B, 0x7A, 0x79, 0x78
        79 78
   0051 77 76 75 74 72 71   116 	.db	0x77, 0x76, 0x75, 0x74, 0x72, 0x71, 0x70, 0x6E
        70 6E
   0059 6C 6B 69 67 66 64   117 	.db	0x6C, 0x6B, 0x69, 0x67, 0x66, 0x64, 0x62, 0x60
        62 60
   0061 5E 5B 59 57 55 52   118 	.db	0x5E, 0x5B, 0x59, 0x57, 0x55, 0x52, 0x50, 0x4E
        50 4E
   0069 4B 49 46 43 41 3E   119 	.db	0x4B, 0x49, 0x46, 0x43, 0x41, 0x3E, 0x3B, 0x39
        3B 39
   0071 36 33 30 2D 2A 27   120 	.db	0x36, 0x33, 0x30, 0x2D, 0x2A, 0x27, 0x24, 0x21
        24 21
   0079 1E 1B 18 15 12 0F   121 	.db	0x1E, 0x1B, 0x18, 0x15, 0x12, 0x0F, 0x0C, 0x09
        0C 09
   0081 06 03 00 FD FA F7   122 	.db	0x06, 0x03, 0x00, 0xFD, 0xFA, 0xF7, 0xF4, 0xF1
        F4 F1
   0089 EE EB E8 E5 E2 DF   123 	.db	0xEE, 0xEB, 0xE8, 0xE5, 0xE2, 0xDF, 0xDC, 0xD9
        DC D9
   0091 D6 D3 D0 CD CA C7   124 	.db	0xD6, 0xD3, 0xD0, 0xCD, 0xCA, 0xC7, 0xC5, 0xC2
        C5 C2
   0099 BF BD BA B7 B5 B2   125 	.db	0xBF, 0xBD, 0xBA, 0xB7, 0xB5, 0xB2, 0xB0, 0xAE
        B0 AE
   00A1 AB A9 A7 A5 A2 A0   126 	.db	0xAB, 0xA9, 0xA7, 0xA5, 0xA2, 0xA0, 0x9E, 0x9C
        9E 9C
   00A9 9A 99 97 95 94 92   127 	.db	0x9A, 0x99, 0x97, 0x95, 0x94, 0x92, 0x90, 0x8F
        90 8F
   00B1 8E 8C 8B 8A 89 88   128 	.db	0x8E, 0x8C, 0x8B, 0x8A, 0x89, 0x88, 0x87, 0x86
        87 86
   00B9 85 85 84 83 83      129 	.db	0x85, 0x85, 0x84, 0x83, 0x83
   00BE FB 82               130 	.db	#-5,#0x82
   00C0 01                  131 	.db	1
   00C1 81                  132 	.db	0x81
   00C2 FB 82               133 	.db	#-5,#0x82
   00C4 3A                  134 	.db	58
   00C5 83 83 84 85 85 86   135 	.db	0x83, 0x83, 0x84, 0x85, 0x85, 0x86, 0x87, 0x88
        87 88
   00CD 89 8A 8B 8C 8E 8F   136 	.db	0x89, 0x8A, 0x8B, 0x8C, 0x8E, 0x8F, 0x90, 0x92
        90 92
   00D5 94 95 97 99 9A 9C   137 	.db	0x94, 0x95, 0x97, 0x99, 0x9A, 0x9C, 0x9E, 0xA0
        9E A0
   00DD A2 A5 A7 A9 AB AE   138 	.db	0xA2, 0xA5, 0xA7, 0xA9, 0xAB, 0xAE, 0xB0, 0xB2
        B0 B2
   00E5 B5 B7 BA BD BF C2   139 	.db	0xB5, 0xB7, 0xBA, 0xBD, 0xBF, 0xC2, 0xC5, 0xC7
        C5 C7
   00ED CA CD D0 D3 D6 D9   140 	.db	0xCA, 0xCD, 0xD0, 0xD3, 0xD6, 0xD9, 0xDC, 0xDF
        DC DF
   00F5 E2 E5 E8 EB EE F1   141 	.db	0xE2, 0xE5, 0xE8, 0xEB, 0xEE, 0xF1, 0xF4, 0xF7
        F4 F7
   00FD FA FD               142 	.db	0xFA, 0xFD
   00FF 00                  143 	.db	0
                            144 ;demo.c:13: uint8_t packbuffer[5000] = {0};
   0100 21r00s01            145 	ld	hl,#_packbuffer
   0103 CDr00s00            146 	call	__initrleblock
   0106 81 00               147 	.db	#-127,#0x00
   0108 81 00               148 	.db	#-127,#0x00
   010A 81 00               149 	.db	#-127,#0x00
   010C 81 00               150 	.db	#-127,#0x00
   010E 81 00               151 	.db	#-127,#0x00
   0110 81 00               152 	.db	#-127,#0x00
   0112 81 00               153 	.db	#-127,#0x00
   0114 81 00               154 	.db	#-127,#0x00
   0116 81 00               155 	.db	#-127,#0x00
   0118 81 00               156 	.db	#-127,#0x00
   011A 81 00               157 	.db	#-127,#0x00
   011C 81 00               158 	.db	#-127,#0x00
   011E 81 00               159 	.db	#-127,#0x00
   0120 81 00               160 	.db	#-127,#0x00
   0122 81 00               161 	.db	#-127,#0x00
   0124 81 00               162 	.db	#-127,#0x00
   0126 81 00               163 	.db	#-127,#0x00
   0128 81 00               164 	.db	#-127,#0x00
   012A 81 00               165 	.db	#-127,#0x00
   012C 81 00               166 	.db	#-127,#0x00
   012E 81 00               167 	.db	#-127,#0x00
   0130 81 00               168 	.db	#-127,#0x00
   0132 81 00               169 	.db	#-127,#0x00
   0134 81 00               170 	.db	#-127,#0x00
   0136 81 00               171 	.db	#-127,#0x00
   0138 81 00               172 	.db	#-127,#0x00
   013A 81 00               173 	.db	#-127,#0x00
   013C 81 00               174 	.db	#-127,#0x00
   013E 81 00               175 	.db	#-127,#0x00
   0140 81 00               176 	.db	#-127,#0x00
   0142 81 00               177 	.db	#-127,#0x00
   0144 81 00               178 	.db	#-127,#0x00
   0146 81 00               179 	.db	#-127,#0x00
   0148 81 00               180 	.db	#-127,#0x00
   014A 81 00               181 	.db	#-127,#0x00
   014C 81 00               182 	.db	#-127,#0x00
   014E 81 00               183 	.db	#-127,#0x00
   0150 81 00               184 	.db	#-127,#0x00
   0152 81 00               185 	.db	#-127,#0x00
   0154 D1 00               186 	.db	#-47,#0x00
   0156 00                  187 	.db	0
                            188 ;demo.c:14: uint8_t packbuffer2[5000] = {0};
   0157 21r88s14            189 	ld	hl,#_packbuffer2
   015A CDr00s00            190 	call	__initrleblock
   015D 81 00               191 	.db	#-127,#0x00
   015F 81 00               192 	.db	#-127,#0x00
   0161 81 00               193 	.db	#-127,#0x00
   0163 81 00               194 	.db	#-127,#0x00
   0165 81 00               195 	.db	#-127,#0x00
   0167 81 00               196 	.db	#-127,#0x00
   0169 81 00               197 	.db	#-127,#0x00
   016B 81 00               198 	.db	#-127,#0x00
   016D 81 00               199 	.db	#-127,#0x00
   016F 81 00               200 	.db	#-127,#0x00
   0171 81 00               201 	.db	#-127,#0x00
   0173 81 00               202 	.db	#-127,#0x00
   0175 81 00               203 	.db	#-127,#0x00
   0177 81 00               204 	.db	#-127,#0x00
   0179 81 00               205 	.db	#-127,#0x00
   017B 81 00               206 	.db	#-127,#0x00
   017D 81 00               207 	.db	#-127,#0x00
   017F 81 00               208 	.db	#-127,#0x00
   0181 81 00               209 	.db	#-127,#0x00
   0183 81 00               210 	.db	#-127,#0x00
   0185 81 00               211 	.db	#-127,#0x00
   0187 81 00               212 	.db	#-127,#0x00
   0189 81 00               213 	.db	#-127,#0x00
   018B 81 00               214 	.db	#-127,#0x00
   018D 81 00               215 	.db	#-127,#0x00
   018F 81 00               216 	.db	#-127,#0x00
   0191 81 00               217 	.db	#-127,#0x00
   0193 81 00               218 	.db	#-127,#0x00
   0195 81 00               219 	.db	#-127,#0x00
   0197 81 00               220 	.db	#-127,#0x00
   0199 81 00               221 	.db	#-127,#0x00
   019B 81 00               222 	.db	#-127,#0x00
   019D 81 00               223 	.db	#-127,#0x00
   019F 81 00               224 	.db	#-127,#0x00
   01A1 81 00               225 	.db	#-127,#0x00
   01A3 81 00               226 	.db	#-127,#0x00
   01A5 81 00               227 	.db	#-127,#0x00
   01A7 81 00               228 	.db	#-127,#0x00
   01A9 81 00               229 	.db	#-127,#0x00
   01AB D1 00               230 	.db	#-47,#0x00
   01AD 00                  231 	.db	0
                            232 ;demo.c:20: volatile int vbicount=0;
   01AE FD 21rD0s28         233 	ld	iy,#_vbicount
   01B2 FD 36 00 00         234 	ld	0 (iy),#0x00
   01B6 FD 21rD0s28         235 	ld	iy,#_vbicount
   01BA FD 36 01 00         236 	ld	1 (iy),#0x00
                            237 ;demo.c:21: volatile int tick=0;
   01BE FD 21rD2s28         238 	ld	iy,#_tick
   01C2 FD 36 00 00         239 	ld	0 (iy),#0x00
   01C6 FD 21rD2s28         240 	ld	iy,#_tick
   01CA FD 36 01 00         241 	ld	1 (iy),#0x00
                            242 ;demo.c:164: uint8_t yo = 0;
   01CE FD 21rD4s28         243 	ld	iy,#_yo
   01D2 FD 36 00 00         244 	ld	0 (iy),#0x00
                            245 ;demo.c:165: uint8_t cc = 0;
   01D6 FD 21rD5s28         246 	ld	iy,#_cc
   01DA FD 36 00 00         247 	ld	0 (iy),#0x00
                            248 ;demo.c:166: static int flipper = 0;
   01DE FD 21rD6s28         249 	ld	iy,#_flipper
   01E2 FD 36 00 00         250 	ld	0 (iy),#0x00
   01E6 FD 21rD6s28         251 	ld	iy,#_flipper
   01EA FD 36 01 00         252 	ld	1 (iy),#0x00
                            253 ;demo.c:167: static int ymmmf = 0;
   01EE FD 21rD8s28         254 	ld	iy,#_ymmmf
   01F2 FD 36 00 00         255 	ld	0 (iy),#0x00
   01F6 FD 21rD8s28         256 	ld	iy,#_ymmmf
   01FA FD 36 01 00         257 	ld	1 (iy),#0x00
                            258 ;demo.c:205: char block_init = 0;
   01FE FD 21rDAs28         259 	ld	iy,#_block_init
   0202 FD 36 00 00         260 	ld	0 (iy),#0x00
                            261 ;demo.c:207: int bsx = 0;
   0206 FD 21rDBs28         262 	ld	iy,#_bsx
   020A FD 36 00 00         263 	ld	0 (iy),#0x00
   020E FD 21rDBs28         264 	ld	iy,#_bsx
   0212 FD 36 01 00         265 	ld	1 (iy),#0x00
                            266 ;demo.c:208: int bsy = 0;
   0216 FD 21rDDs28         267 	ld	iy,#_bsy
   021A FD 36 00 00         268 	ld	0 (iy),#0x00
   021E FD 21rDDs28         269 	ld	iy,#_bsy
   0222 FD 36 01 00         270 	ld	1 (iy),#0x00
                            271 ;demo.c:209: int btx = 0;
   0226 FD 21rDFs28         272 	ld	iy,#_btx
   022A FD 36 00 00         273 	ld	0 (iy),#0x00
   022E FD 21rDFs28         274 	ld	iy,#_btx
   0232 FD 36 01 00         275 	ld	1 (iy),#0x00
                            276 ;demo.c:210: int bty = 0;
   0236 FD 21rE1s28         277 	ld	iy,#_bty
   023A FD 36 00 00         278 	ld	0 (iy),#0x00
   023E FD 21rE1s28         279 	ld	iy,#_bty
   0242 FD 36 01 00         280 	ld	1 (iy),#0x00
                            281 ;demo.c:212: int btab[16] = {0};
   0246 21rE3s28            282 	ld	hl,#_btab
   0249 CDr00s00            283 	call	__initrleblock
   024C E0 00               284 	.db	#-32,#0x00
   024E 00                  285 	.db	0
                            286 ;demo.c:214: int flof = 0;
   024F FD 21r03s29         287 	ld	iy,#_flof
   0253 FD 36 00 00         288 	ld	0 (iy),#0x00
   0257 FD 21r03s29         289 	ld	iy,#_flof
   025B FD 36 01 00         290 	ld	1 (iy),#0x00
                            291 ;--------------------------------------------------------
                            292 ; Home
                            293 ;--------------------------------------------------------
                            294 	.area _HOME
                            295 	.area _HOME
                            296 ;--------------------------------------------------------
                            297 ; code
                            298 ;--------------------------------------------------------
                            299 	.area _CODE
                            300 ;demo.c:27: void my_isr(void) interrupt
                            301 ;	---------------------------------
                            302 ; Function my_isr
                            303 ; ---------------------------------
   0000                     304 _my_isr_start::
   0000                     305 _my_isr:
   0000 F5                  306 	push	af
   0001 C5                  307 	push	bc
   0002 D5                  308 	push	de
   0003 E5                  309 	push	hl
   0004 FD E5               310 	push	iy
                            311 ;demo.c:29: DI;
   0006 F3                  312 		di 
                            313 ;demo.c:30: READ_VDP_STATUS;
   0007 DB 99               314 		in a,(#0x99) 
                            315 ;demo.c:32: PLY_Play();
   0009 CDr00s00            316 	call	_PLY_Play
                            317 ;demo.c:33: PLY_SendRegisters();
   000C CDr00s00            318 	call	_PLY_SendRegisters
                            319 ;demo.c:35: vbicount++;
   000F FD 21rD0s28         320 	ld	iy,#_vbicount
   0013 FD 34 00            321 	inc	0 (iy)
   0016 20 07               322 	jr	NZ,00103$
   0018 FD 21rD0s28         323 	ld	iy,#_vbicount
   001C FD 34 01            324 	inc	1 (iy)
   001F                     325 00103$:
                            326 ;demo.c:36: tick++;
   001F FD 21rD2s28         327 	ld	iy,#_tick
   0023 FD 34 00            328 	inc	0 (iy)
   0026 20 07               329 	jr	NZ,00104$
   0028 FD 21rD2s28         330 	ld	iy,#_tick
   002C FD 34 01            331 	inc	1 (iy)
   002F                     332 00104$:
                            333 ;demo.c:38: EI;
   002F FB                  334 		ei 
   0030 FD E1               335 	pop	iy
   0032 E1                  336 	pop	hl
   0033 D1                  337 	pop	de
   0034 C1                  338 	pop	bc
   0035 F1                  339 	pop	af
   0036 ED 4D               340 	reti
   0038                     341 _my_isr_end::
                            342 ;demo.c:45: uint8_t ge5_load(char *file_name, uint8_t vramh, uint16_t vraml) {
                            343 ;	---------------------------------
                            344 ; Function ge5_load
                            345 ; ---------------------------------
   0038                     346 _ge5_load_start::
   0038                     347 _ge5_load:
   0038 DD E5               348 	push	ix
   003A DD 21 00 00         349 	ld	ix,#0
   003E DD 39               350 	add	ix,sp
   0040 21 D2 FF            351 	ld	hl,#-46
   0043 39                  352 	add	hl,sp
   0044 F9                  353 	ld	sp,hl
                            354 ;demo.c:49: memset((uint8_t *) &f, 0, sizeof(fcb));
   0045 21 00 00            355 	ld	hl,#0x0000
   0048 39                  356 	add	hl,sp
   0049 4D                  357 	ld	c,l
   004A 44                  358 	ld	b,h
   004B 21 2E 00            359 	ld	hl,#0x002E
   004E E5                  360 	push	hl
   004F 3E 00               361 	ld	a,#0x00
   0051 F5                  362 	push	af
   0052 33                  363 	inc	sp
   0053 C5                  364 	push	bc
   0054 CDr00s00            365 	call	_memset
   0057 F1                  366 	pop	af
   0058 F1                  367 	pop	af
   0059 33                  368 	inc	sp
                            369 ;demo.c:51: f.record_size = 128;
   005A 21 00 00            370 	ld	hl,#0x0000
   005D 39                  371 	add	hl,sp
   005E 4D                  372 	ld	c,l
   005F 44                  373 	ld	b,h
   0060 21 0F 00            374 	ld	hl,#0x000F
   0063 09                  375 	add	hl,bc
   0064 EB                  376 	ex	de,hl
   0065 3E 80               377 	ld	a,#0x80
   0067 12                  378 	ld	(de),a
                            379 ;demo.c:52: f.drive = 0;
   0068 3E 00               380 	ld	a,#0x00
   006A 02                  381 	ld	(bc),a
                            382 ;demo.c:54: memcpy(f.name, file_name, 11);
   006B DD 5E 04            383 	ld	e,4 (ix)
   006E DD 56 05            384 	ld	d,5 (ix)
   0071 03                  385 	inc	bc
   0072 21 0B 00            386 	ld	hl,#0x000B
   0075 E5                  387 	push	hl
   0076 D5                  388 	push	de
   0077 C5                  389 	push	bc
   0078 CDr00s00            390 	call	_memcpy
   007B F1                  391 	pop	af
   007C F1                  392 	pop	af
   007D F1                  393 	pop	af
                            394 ;demo.c:56: if (open(&f) != 0) return 0;
   007E 21 00 00            395 	ld	hl,#0x0000
   0081 39                  396 	add	hl,sp
   0082 E5                  397 	push	hl
   0083 CDr00s00            398 	call	_open
   0086 F1                  399 	pop	af
   0087 AF                  400 	xor	a,a
   0088 B5                  401 	or	a,l
   0089 28 05               402 	jr	Z,00102$
   008B 2E 00               403 	ld	l,#0x00
   008D C3r04s01            404 	jp	00114$
   0090                     405 00102$:
                            406 ;demo.c:57: vdp_set_write_address(vramh, vraml);
   0090 DD 6E 07            407 	ld	l,7 (ix)
   0093 DD 66 08            408 	ld	h,8 (ix)
   0096 E5                  409 	push	hl
   0097 DD 7E 06            410 	ld	a,6 (ix)
   009A F5                  411 	push	af
   009B 33                  412 	inc	sp
   009C CDr00s00            413 	call	_vdp_set_write_address
   009F F1                  414 	pop	af
   00A0 33                  415 	inc	sp
                            416 ;demo.c:59: for (i = 0; i < 213; i++) {
   00A1 0E 00               417 	ld	c,#0x00
   00A3                     418 00110$:
   00A3 79                  419 	ld	a,c
   00A4 D6 D5               420 	sub	a,#0xD5
   00A6 D2rF9s00            421 	jp	NC,00113$
                            422 ;demo.c:60: if (block_set_data_ptr(scratch) != 0) return 0;
   00A9 C5                  423 	push	bc
   00AA 21r10s28            424 	ld	hl,#_scratch
   00AD E5                  425 	push	hl
   00AE CDr00s00            426 	call	_block_set_data_ptr
   00B1 F1                  427 	pop	af
   00B2 7D                  428 	ld	a,l
   00B3 C1                  429 	pop	bc
   00B4 47                  430 	ld	b,a
   00B5 B7                  431 	or	a,a
   00B6 28 05               432 	jr	Z,00104$
   00B8 2E 00               433 	ld	l,#0x00
   00BA C3r04s01            434 	jp	00114$
   00BD                     435 00104$:
                            436 ;demo.c:61: if (block_read(&f) != 0) return 0;
   00BD 21 00 00            437 	ld	hl,#0x0000
   00C0 39                  438 	add	hl,sp
   00C1 C5                  439 	push	bc
   00C2 E5                  440 	push	hl
   00C3 CDr00s00            441 	call	_block_read
   00C6 F1                  442 	pop	af
   00C7 7D                  443 	ld	a,l
   00C8 C1                  444 	pop	bc
   00C9 47                  445 	ld	b,a
   00CA B7                  446 	or	a,a
   00CB 28 04               447 	jr	Z,00106$
   00CD 2E 00               448 	ld	l,#0x00
   00CF 18 33               449 	jr	00114$
   00D1                     450 00106$:
                            451 ;demo.c:63: if (i == 0) vdp_load_screen(scratch + 7, 121);   // to skip GE5 header
   00D1 AF                  452 	xor	a,a
   00D2 B1                  453 	or	a,c
   00D3 20 11               454 	jr	NZ,00108$
   00D5 11r17s28            455 	ld	de,#_scratch + 7
   00D8 C5                  456 	push	bc
   00D9 3E 79               457 	ld	a,#0x79
   00DB F5                  458 	push	af
   00DC 33                  459 	inc	sp
   00DD D5                  460 	push	de
   00DE CDr00s00            461 	call	_vdp_load_screen
   00E1 F1                  462 	pop	af
   00E2 33                  463 	inc	sp
   00E3 C1                  464 	pop	bc
   00E4 18 0F               465 	jr	00112$
   00E6                     466 00108$:
                            467 ;demo.c:64: else vdp_load_screen(scratch, 128);
   00E6 C5                  468 	push	bc
   00E7 3E 80               469 	ld	a,#0x80
   00E9 F5                  470 	push	af
   00EA 33                  471 	inc	sp
   00EB 21r10s28            472 	ld	hl,#_scratch
   00EE E5                  473 	push	hl
   00EF CDr00s00            474 	call	_vdp_load_screen
   00F2 F1                  475 	pop	af
   00F3 33                  476 	inc	sp
   00F4 C1                  477 	pop	bc
   00F5                     478 00112$:
                            479 ;demo.c:59: for (i = 0; i < 213; i++) {
   00F5 0C                  480 	inc	c
   00F6 C3rA3s00            481 	jp	00110$
   00F9                     482 00113$:
                            483 ;demo.c:67: close(&f);
   00F9 21 00 00            484 	ld	hl,#0x0000
   00FC 39                  485 	add	hl,sp
   00FD E5                  486 	push	hl
   00FE CDr00s00            487 	call	_close
   0101 F1                  488 	pop	af
                            489 ;demo.c:69: return 1;
   0102 2E 01               490 	ld	l,#0x01
   0104                     491 00114$:
   0104 DD F9               492 	ld	sp,ix
   0106 DD E1               493 	pop	ix
   0108 C9                  494 	ret
   0109                     495 _ge5_load_end::
                            496 ;demo.c:72: void scratch_clear() {
                            497 ;	---------------------------------
                            498 ; Function scratch_clear
                            499 ; ---------------------------------
   0109                     500 _scratch_clear_start::
   0109                     501 _scratch_clear:
                            502 ;demo.c:73: memset((uint8_t *) &scratch, 0, 128);
   0109 21 80 00            503 	ld	hl,#0x0080
   010C E5                  504 	push	hl
   010D 3E 00               505 	ld	a,#0x00
   010F F5                  506 	push	af
   0110 33                  507 	inc	sp
   0111 21r10s28            508 	ld	hl,#_scratch
   0114 E5                  509 	push	hl
   0115 CDr00s00            510 	call	_memset
   0118 F1                  511 	pop	af
   0119 F1                  512 	pop	af
   011A 33                  513 	inc	sp
   011B C9                  514 	ret
   011C                     515 _scratch_clear_end::
                            516 ;demo.c:76: uint8_t pal_load(char *file_name, uint8_t ss) {
                            517 ;	---------------------------------
                            518 ; Function pal_load
                            519 ; ---------------------------------
   011C                     520 _pal_load_start::
   011C                     521 _pal_load:
   011C DD E5               522 	push	ix
   011E DD 21 00 00         523 	ld	ix,#0
   0122 DD 39               524 	add	ix,sp
   0124 21 D2 FF            525 	ld	hl,#-46
   0127 39                  526 	add	hl,sp
   0128 F9                  527 	ld	sp,hl
                            528 ;demo.c:79: memset((uint8_t *) &f, 0, sizeof(fcb));
   0129 21 00 00            529 	ld	hl,#0x0000
   012C 39                  530 	add	hl,sp
   012D 4D                  531 	ld	c,l
   012E 44                  532 	ld	b,h
   012F 21 2E 00            533 	ld	hl,#0x002E
   0132 E5                  534 	push	hl
   0133 3E 00               535 	ld	a,#0x00
   0135 F5                  536 	push	af
   0136 33                  537 	inc	sp
   0137 C5                  538 	push	bc
   0138 CDr00s00            539 	call	_memset
   013B F1                  540 	pop	af
   013C F1                  541 	pop	af
   013D 33                  542 	inc	sp
                            543 ;demo.c:80: scratch_clear();
   013E CDr09s01            544 	call	_scratch_clear
                            545 ;demo.c:82: f.record_size = ss;
   0141 21 00 00            546 	ld	hl,#0x0000
   0144 39                  547 	add	hl,sp
   0145 4D                  548 	ld	c,l
   0146 44                  549 	ld	b,h
   0147 21 0F 00            550 	ld	hl,#0x000F
   014A 09                  551 	add	hl,bc
   014B EB                  552 	ex	de,hl
   014C DD 7E 06            553 	ld	a,6 (ix)
   014F 12                  554 	ld	(de),a
                            555 ;demo.c:83: f.drive = 0;
   0150 3E 00               556 	ld	a,#0x00
   0152 02                  557 	ld	(bc),a
                            558 ;demo.c:85: memcpy(f.name, file_name, 11);
   0153 DD 5E 04            559 	ld	e,4 (ix)
   0156 DD 56 05            560 	ld	d,5 (ix)
   0159 03                  561 	inc	bc
   015A 21 0B 00            562 	ld	hl,#0x000B
   015D E5                  563 	push	hl
   015E D5                  564 	push	de
   015F C5                  565 	push	bc
   0160 CDr00s00            566 	call	_memcpy
   0163 F1                  567 	pop	af
   0164 F1                  568 	pop	af
   0165 F1                  569 	pop	af
                            570 ;demo.c:87: if (open(&f) != 0) return 0;
   0166 21 00 00            571 	ld	hl,#0x0000
   0169 39                  572 	add	hl,sp
   016A E5                  573 	push	hl
   016B CDr00s00            574 	call	_open
   016E F1                  575 	pop	af
   016F AF                  576 	xor	a,a
   0170 B5                  577 	or	a,l
   0171 28 04               578 	jr	Z,00102$
   0173 2E 00               579 	ld	l,#0x00
   0175 18 40               580 	jr	00107$
   0177                     581 00102$:
                            582 ;demo.c:88: if (block_set_data_ptr(scratch) != 0) return 0;
   0177 21r10s28            583 	ld	hl,#_scratch
   017A E5                  584 	push	hl
   017B CDr00s00            585 	call	_block_set_data_ptr
   017E F1                  586 	pop	af
   017F AF                  587 	xor	a,a
   0180 B5                  588 	or	a,l
   0181 28 04               589 	jr	Z,00104$
   0183 2E 00               590 	ld	l,#0x00
   0185 18 30               591 	jr	00107$
   0187                     592 00104$:
                            593 ;demo.c:89: if (block_read(&f) != 0) return 0;
   0187 21 00 00            594 	ld	hl,#0x0000
   018A 39                  595 	add	hl,sp
   018B E5                  596 	push	hl
   018C CDr00s00            597 	call	_block_read
   018F F1                  598 	pop	af
   0190 AF                  599 	xor	a,a
   0191 B5                  600 	or	a,l
   0192 28 04               601 	jr	Z,00106$
   0194 2E 00               602 	ld	l,#0x00
   0196 18 1F               603 	jr	00107$
   0198                     604 00106$:
                            605 ;demo.c:91: memcpy(cur_palette, scratch+7, ss);
   0198 DD 4E 06            606 	ld	c,6 (ix)
   019B 06 00               607 	ld	b,#0x00
   019D 11r17s28            608 	ld	de,#_scratch + 7
   01A0 C5                  609 	push	bc
   01A1 D5                  610 	push	de
   01A2 21r90s28            611 	ld	hl,#_cur_palette
   01A5 E5                  612 	push	hl
   01A6 CDr00s00            613 	call	_memcpy
   01A9 F1                  614 	pop	af
   01AA F1                  615 	pop	af
   01AB F1                  616 	pop	af
                            617 ;demo.c:93: close(&f);
   01AC 21 00 00            618 	ld	hl,#0x0000
   01AF 39                  619 	add	hl,sp
   01B0 E5                  620 	push	hl
   01B1 CDr00s00            621 	call	_close
   01B4 F1                  622 	pop	af
                            623 ;demo.c:94: return 1;
   01B5 2E 01               624 	ld	l,#0x01
   01B7                     625 00107$:
   01B7 DD F9               626 	ld	sp,ix
   01B9 DD E1               627 	pop	ix
   01BB C9                  628 	ret
   01BC                     629 _pal_load_end::
                            630 ;demo.c:98: void pause() {
                            631 ;	---------------------------------
                            632 ; Function pause
                            633 ; ---------------------------------
   01BC                     634 _pause_start::
   01BC                     635 _pause:
                            636 ;demo.c:99: uint8_t i,j,k = 0;
                            637 ;demo.c:100: for (i = 0; i < 255; i++) {	
   01BC 01 00 00            638 	ld	bc,#0x0000
   01BF                     639 00104$:
   01BF 78                  640 	ld	a,b
   01C0 D6 FF               641 	sub	a,#0xFF
   01C2 D0                  642 	ret	NC
                            643 ;demo.c:101: for (j = 0; j < 255; j++) {
   01C3 59                  644 	ld	e,c
   01C4 16 FF               645 	ld	d,#0xFF
   01C6                     646 00103$:
                            647 ;demo.c:102: k++;
   01C6 1C                  648 	inc	e
   01C7 15                  649 	dec	d
                            650 ;demo.c:101: for (j = 0; j < 255; j++) {
   01C8 AF                  651 	xor	a,a
   01C9 B2                  652 	or	a,d
   01CA 20 FA               653 	jr	NZ,00103$
                            654 ;demo.c:100: for (i = 0; i < 255; i++) {	
   01CC 4B                  655 	ld	c,e
   01CD 04                  656 	inc	b
   01CE 18 EF               657 	jr	00104$
   01D0                     658 _pause_end::
                            659 ;demo.c:108: uint8_t pack_load(char *file_name, int size, char* buffer) {
                            660 ;	---------------------------------
                            661 ; Function pack_load
                            662 ; ---------------------------------
   01D0                     663 _pack_load_start::
   01D0                     664 _pack_load:
   01D0 DD E5               665 	push	ix
   01D2 DD 21 00 00         666 	ld	ix,#0
   01D6 DD 39               667 	add	ix,sp
   01D8 21 D2 FF            668 	ld	hl,#-46
   01DB 39                  669 	add	hl,sp
   01DC F9                  670 	ld	sp,hl
                            671 ;demo.c:113: memset((uint8_t *) &f, 0, sizeof(fcb));
   01DD 21 00 00            672 	ld	hl,#0x0000
   01E0 39                  673 	add	hl,sp
   01E1 4D                  674 	ld	c,l
   01E2 44                  675 	ld	b,h
   01E3 21 2E 00            676 	ld	hl,#0x002E
   01E6 E5                  677 	push	hl
   01E7 3E 00               678 	ld	a,#0x00
   01E9 F5                  679 	push	af
   01EA 33                  680 	inc	sp
   01EB C5                  681 	push	bc
   01EC CDr00s00            682 	call	_memset
   01EF F1                  683 	pop	af
   01F0 F1                  684 	pop	af
   01F1 33                  685 	inc	sp
                            686 ;demo.c:114: scratch_clear();
   01F2 CDr09s01            687 	call	_scratch_clear
                            688 ;demo.c:116: f.record_size = 128;
   01F5 21 00 00            689 	ld	hl,#0x0000
   01F8 39                  690 	add	hl,sp
   01F9 4D                  691 	ld	c,l
   01FA 44                  692 	ld	b,h
   01FB 21 0F 00            693 	ld	hl,#0x000F
   01FE 09                  694 	add	hl,bc
   01FF EB                  695 	ex	de,hl
   0200 3E 80               696 	ld	a,#0x80
   0202 12                  697 	ld	(de),a
                            698 ;demo.c:117: f.drive = 0;
   0203 3E 00               699 	ld	a,#0x00
   0205 02                  700 	ld	(bc),a
                            701 ;demo.c:119: memcpy(f.name, file_name, 11);
   0206 DD 5E 04            702 	ld	e,4 (ix)
   0209 DD 56 05            703 	ld	d,5 (ix)
   020C 03                  704 	inc	bc
   020D 21 0B 00            705 	ld	hl,#0x000B
   0210 E5                  706 	push	hl
   0211 D5                  707 	push	de
   0212 C5                  708 	push	bc
   0213 CDr00s00            709 	call	_memcpy
   0216 F1                  710 	pop	af
   0217 F1                  711 	pop	af
   0218 F1                  712 	pop	af
                            713 ;demo.c:121: if (open(&f) != 0) return 0;
   0219 21 00 00            714 	ld	hl,#0x0000
   021C 39                  715 	add	hl,sp
   021D E5                  716 	push	hl
   021E CDr00s00            717 	call	_open
   0221 F1                  718 	pop	af
   0222 AF                  719 	xor	a,a
   0223 B5                  720 	or	a,l
   0224 28 05               721 	jr	Z,00116$
   0226 2E 00               722 	ld	l,#0x00
   0228 C3r8Fs02            723 	jp	00110$
                            724 ;demo.c:123: while(total < size) {
   022B                     725 00116$:
   022B 01 00 00            726 	ld	bc,#0x0000
   022E                     727 00107$:
   022E 79                  728 	ld	a,c
   022F DD 96 06            729 	sub	a,6 (ix)
   0232 78                  730 	ld	a,b
   0233 DD 9E 07            731 	sbc	a,7 (ix)
   0236 F2r84s02            732 	jp	P,00109$
                            733 ;demo.c:124: if (block_set_data_ptr(scratch) != 0) return 0;
   0239 C5                  734 	push	bc
   023A 21r10s28            735 	ld	hl,#_scratch
   023D E5                  736 	push	hl
   023E CDr00s00            737 	call	_block_set_data_ptr
   0241 F1                  738 	pop	af
   0242 5D                  739 	ld	e,l
   0243 C1                  740 	pop	bc
   0244 AF                  741 	xor	a,a
   0245 B3                  742 	or	a,e
   0246 28 04               743 	jr	Z,00104$
   0248 2E 00               744 	ld	l,#0x00
   024A 18 43               745 	jr	00110$
   024C                     746 00104$:
                            747 ;demo.c:125: if (block_read(&f) != 0) return 0;
   024C 21 00 00            748 	ld	hl,#0x0000
   024F 39                  749 	add	hl,sp
   0250 C5                  750 	push	bc
   0251 E5                  751 	push	hl
   0252 CDr00s00            752 	call	_block_read
   0255 F1                  753 	pop	af
   0256 5D                  754 	ld	e,l
   0257 C1                  755 	pop	bc
   0258 AF                  756 	xor	a,a
   0259 B3                  757 	or	a,e
   025A 28 04               758 	jr	Z,00106$
   025C 2E 00               759 	ld	l,#0x00
   025E 18 2F               760 	jr	00110$
   0260                     761 00106$:
                            762 ;demo.c:127: memcpy(buffer+total,scratch,incr);
   0260 DD 7E 08            763 	ld	a,8 (ix)
   0263 81                  764 	add	a,c
   0264 5F                  765 	ld	e,a
   0265 DD 7E 09            766 	ld	a,9 (ix)
   0268 88                  767 	adc	a,b
   0269 57                  768 	ld	d,a
   026A C5                  769 	push	bc
   026B 21 80 00            770 	ld	hl,#0x0080
   026E E5                  771 	push	hl
   026F 21r10s28            772 	ld	hl,#_scratch
   0272 E5                  773 	push	hl
   0273 D5                  774 	push	de
   0274 CDr00s00            775 	call	_memcpy
   0277 F1                  776 	pop	af
   0278 F1                  777 	pop	af
   0279 F1                  778 	pop	af
   027A C1                  779 	pop	bc
                            780 ;demo.c:129: total+=incr;
   027B 21 80 00            781 	ld	hl,#0x0080
   027E 09                  782 	add	hl,bc
   027F 4D                  783 	ld	c,l
   0280 44                  784 	ld	b,h
   0281 C3r2Es02            785 	jp	00107$
   0284                     786 00109$:
                            787 ;demo.c:132: close(&f);
   0284 21 00 00            788 	ld	hl,#0x0000
   0287 39                  789 	add	hl,sp
   0288 E5                  790 	push	hl
   0289 CDr00s00            791 	call	_close
   028C F1                  792 	pop	af
                            793 ;demo.c:134: return 1;
   028D 2E 01               794 	ld	l,#0x01
   028F                     795 00110$:
   028F DD F9               796 	ld	sp,ix
   0291 DD E1               797 	pop	ix
   0293 C9                  798 	ret
   0294                     799 _pack_load_end::
                            800 ;demo.c:137: void fadein() {
                            801 ;	---------------------------------
                            802 ; Function fadein
                            803 ; ---------------------------------
   0294                     804 _fadein_start::
   0294                     805 _fadein:
   0294 DD E5               806 	push	ix
   0296 DD 21 00 00         807 	ld	ix,#0
   029A DD 39               808 	add	ix,sp
   029C F5                  809 	push	af
                            810 ;demo.c:140: if (tick < 4) return;
   029D 3ArD2s28            811 	ld	a,(#_tick+0)
   02A0 D6 04               812 	sub	a,#0x04
   02A2 3ArD3s28            813 	ld	a,(#_tick+1)
   02A5 DE 00               814 	sbc	a,#0x00
   02A7 F2rADs02            815 	jp	P,00102$
   02AA C3r5Bs03            816 	jp	00113$
   02AD                     817 00102$:
                            818 ;demo.c:142: tick = 0;
   02AD 21rD2s28            819 	ld	hl,#_tick + 0
   02B0 36 00               820 	ld	(hl), #0x00
   02B2 21rD3s28            821 	ld	hl,#_tick + 1
   02B5 36 00               822 	ld	(hl), #0x00
                            823 ;demo.c:144: for(i = 0; i < 32; i+=2) {
   02B7 0E 00               824 	ld	c,#0x00
   02B9                     825 00109$:
   02B9 79                  826 	ld	a,c
   02BA D6 20               827 	sub	a,#0x20
   02BC D2r53s03            828 	jp	NC,00112$
                            829 ;demo.c:145: uint8_t r = scratch[i] >> 4;
   02BF 3Er10               830 	ld	a,#<_scratch
   02C1 81                  831 	add	a,c
   02C2 5F                  832 	ld	e,a
   02C3 3Es28               833 	ld	a,#>_scratch
   02C5 CE 00               834 	adc	a,#0x00
   02C7 57                  835 	ld	d,a
   02C8 1A                  836 	ld	a,(de)
   02C9 47                  837 	ld	b,a
   02CA 58                  838 	ld	e,b
   02CB CB 3B               839 	srl	e
   02CD CB 3B               840 	srl	e
   02CF CB 3B               841 	srl	e
   02D1 CB 3B               842 	srl	e
                            843 ;demo.c:146: uint8_t b = scratch[i] & 0xf;
   02D3 78                  844 	ld	a,b
   02D4 E6 0F               845 	and	a,#0x0F
   02D6 DD 77 FF            846 	ld	-1 (ix),a
                            847 ;demo.c:147: uint8_t g = scratch[i+1];
   02D9 51                  848 	ld	d,c
   02DA 14                  849 	inc	d
   02DB 3Er10               850 	ld	a,#<_scratch
   02DD 82                  851 	add	a,d
   02DE 6F                  852 	ld	l,a
   02DF 3Es28               853 	ld	a,#>_scratch
   02E1 CE 00               854 	adc	a,#0x00
   02E3 67                  855 	ld	h,a
   02E4 56                  856 	ld	d,(hl)
   02E5 DD 72 FE            857 	ld	-2 (ix),d
                            858 ;demo.c:149: if (r < (cur_palette[i] >> 4)) r++;
   02E8 3Er90               859 	ld	a,#<_cur_palette
   02EA 81                  860 	add	a,c
   02EB 6F                  861 	ld	l,a
   02EC 3Es28               862 	ld	a,#>_cur_palette
   02EE CE 00               863 	adc	a,#0x00
   02F0 67                  864 	ld	h,a
   02F1 56                  865 	ld	d,(hl)
   02F2 CB 3A               866 	srl	d
   02F4 CB 3A               867 	srl	d
   02F6 CB 3A               868 	srl	d
   02F8 CB 3A               869 	srl	d
   02FA 7B                  870 	ld	a,e
   02FB 92                  871 	sub	a,d
   02FC 30 01               872 	jr	NC,00104$
   02FE 1C                  873 	inc	e
   02FF                     874 00104$:
                            875 ;demo.c:150: if (b < (cur_palette[i] & 0xf)) b++;
   02FF 3Er90               876 	ld	a,#<_cur_palette
   0301 81                  877 	add	a,c
   0302 6F                  878 	ld	l,a
   0303 3Es28               879 	ld	a,#>_cur_palette
   0305 CE 00               880 	adc	a,#0x00
   0307 67                  881 	ld	h,a
   0308 7E                  882 	ld	a,(hl)
   0309 E6 0F               883 	and	a,#0x0F
   030B 47                  884 	ld	b,a
   030C DD 7E FF            885 	ld	a,-1 (ix)
   030F 90                  886 	sub	a,b
   0310 30 03               887 	jr	NC,00106$
   0312 DD 34 FF            888 	inc	-1 (ix)
   0315                     889 00106$:
                            890 ;demo.c:152: scratch[i] = (r << 4) | b;
   0315 3Er10               891 	ld	a,#<_scratch
   0317 81                  892 	add	a,c
   0318 47                  893 	ld	b,a
   0319 3Es28               894 	ld	a,#>_scratch
   031B CE 00               895 	adc	a,#0x00
   031D 57                  896 	ld	d,a
   031E 7B                  897 	ld	a,e
   031F 07                  898 	rlca
   0320 07                  899 	rlca
   0321 07                  900 	rlca
   0322 07                  901 	rlca
   0323 E6 F0               902 	and	a,#0xF0
   0325 DD B6 FF            903 	or	a,-1 (ix)
   0328 68                  904 	ld	l,b
   0329 62                  905 	ld	h,d
   032A 77                  906 	ld	(hl),a
                            907 ;demo.c:153: if (g < cur_palette[i+1]) scratch[i+1]++;
   032B 41                  908 	ld	b,c
   032C 04                  909 	inc	b
   032D 3Er90               910 	ld	a,#<_cur_palette
   032F 80                  911 	add	a,b
   0330 5F                  912 	ld	e,a
   0331 3Es28               913 	ld	a,#>_cur_palette
   0333 CE 00               914 	adc	a,#0x00
   0335 57                  915 	ld	d,a
   0336 1A                  916 	ld	a,(de)
   0337 5F                  917 	ld	e,a
   0338 DD 7E FE            918 	ld	a,-2 (ix)
   033B 93                  919 	sub	a,e
   033C 30 10               920 	jr	NC,00111$
   033E 3Er10               921 	ld	a,#<_scratch
   0340 80                  922 	add	a,b
   0341 47                  923 	ld	b,a
   0342 3Es28               924 	ld	a,#>_scratch
   0344 CE 00               925 	adc	a,#0x00
   0346 5F                  926 	ld	e,a
   0347 68                  927 	ld	l,b
   0348 67                  928 	ld	h,a
   0349 7E                  929 	ld	a,(hl)
   034A 3C                  930 	inc	a
   034B 68                  931 	ld	l,b
   034C 63                  932 	ld	h,e
   034D 77                  933 	ld	(hl),a
   034E                     934 00111$:
                            935 ;demo.c:144: for(i = 0; i < 32; i+=2) {
   034E 0C                  936 	inc	c
   034F 0C                  937 	inc	c
   0350 C3rB9s02            938 	jp	00109$
   0353                     939 00112$:
                            940 ;demo.c:157: vdp_load_palette(scratch);
   0353 21r10s28            941 	ld	hl,#_scratch
   0356 E5                  942 	push	hl
   0357 CDr00s00            943 	call	_vdp_load_palette
   035A F1                  944 	pop	af
   035B                     945 00113$:
   035B DD F9               946 	ld	sp,ix
   035D DD E1               947 	pop	ix
   035F C9                  948 	ret
   0360                     949 _fadein_end::
                            950 ;demo.c:169: void do_ymmm() {
                            951 ;	---------------------------------
                            952 ; Function do_ymmm
                            953 ; ---------------------------------
   0360                     954 _do_ymmm_start::
   0360                     955 _do_ymmm:
   0360 DD E5               956 	push	ix
   0362 DD 21 00 00         957 	ld	ix,#0
   0366 DD 39               958 	add	ix,sp
   0368 21 EE FF            959 	ld	hl,#-18
   036B 39                  960 	add	hl,sp
   036C F9                  961 	ld	sp,hl
                            962 ;demo.c:174: if (tick > 16) { tick = 0; flipper++;}
   036D 3E 10               963 	ld	a,#0x10
   036F FD 21rD2s28         964 	ld	iy,#_tick
   0373 FD 96 00            965 	sub	a,0 (iy)
   0376 3E 00               966 	ld	a,#0x00
   0378 FD 21rD2s28         967 	ld	iy,#_tick
   037C FD 9E 01            968 	sbc	a,1 (iy)
   037F F2r9Cs03            969 	jp	P,00102$
   0382 21rD2s28            970 	ld	hl,#_tick + 0
   0385 36 00               971 	ld	(hl), #0x00
   0387 21rD3s28            972 	ld	hl,#_tick + 1
   038A 36 00               973 	ld	(hl), #0x00
   038C FD 21rD6s28         974 	ld	iy,#_flipper
   0390 FD 34 00            975 	inc	0 (iy)
   0393 20 07               976 	jr	NZ,00129$
   0395 FD 21rD6s28         977 	ld	iy,#_flipper
   0399 FD 34 01            978 	inc	1 (iy)
   039C                     979 00129$:
   039C                     980 00102$:
                            981 ;demo.c:175: if (flipper > 4) { flipper = 0;}
   039C 3E 04               982 	ld	a,#0x04
   039E FD 21rD6s28         983 	ld	iy,#_flipper
   03A2 FD 96 00            984 	sub	a,0 (iy)
   03A5 3E 00               985 	ld	a,#0x00
   03A7 FD 21rD6s28         986 	ld	iy,#_flipper
   03AB FD 9E 01            987 	sbc	a,1 (iy)
   03AE F2rBBs03            988 	jp	P,00104$
   03B1 21rD6s28            989 	ld	hl,#_flipper + 0
   03B4 36 00               990 	ld	(hl), #0x00
   03B6 21rD7s28            991 	ld	hl,#_flipper + 1
   03B9 36 00               992 	ld	(hl), #0x00
   03BB                     993 00104$:
                            994 ;demo.c:178: for (yo = 0; yo<212-step;yo+=step) {
   03BB 21rD4s28            995 	ld	hl,#_yo + 0
   03BE 36 00               996 	ld	(hl), #0x00
   03C0                     997 00115$:
   03C0 21rD4s28            998 	ld	hl,#_yo + 0
   03C3 4E                  999 	ld	c,(hl)
   03C4 06 00              1000 	ld	b,#0x00
   03C6 79                 1001 	ld	a,c
   03C7 D6 D1              1002 	sub	a,#0xD1
   03C9 78                 1003 	ld	a,b
   03CA DE 00              1004 	sbc	a,#0x00
   03CC F2r74s05           1005 	jp	P,00118$
                           1006 ;demo.c:179: xo = ((sintab[(vbicount+yo) & 255]+64)>>3);
   03CF 3ArD0s28           1007 	ld	a,(#_vbicount+0)
   03D2 81                 1008 	add	a,c
   03D3 5F                 1009 	ld	e,a
   03D4 3ArD1s28           1010 	ld	a,(#_vbicount+1)
   03D7 88                 1011 	adc	a,b
   03D8 16 00              1012 	ld	d,#0x00
   03DA 21r00s00           1013 	ld	hl,#_sintab
   03DD 19                 1014 	add	hl,de
   03DE 7E                 1015 	ld	a,(hl)
   03DF 5F                 1016 	ld	e,a
   03E0 17                 1017 	rla	
   03E1 9F                 1018 	sbc	a,a
   03E2 57                 1019 	ld	d,a
   03E3 21 40 00           1020 	ld	hl,#0x0040
   03E6 19                 1021 	add	hl,de
   03E7 5D                 1022 	ld	e,l
   03E8 54                 1023 	ld	d,h
   03E9 CB 2A              1024 	sra	d
   03EB CB 1B              1025 	rr	e
   03ED CB 2A              1026 	sra	d
   03EF CB 1B              1027 	rr	e
   03F1 CB 2A              1028 	sra	d
   03F3 CB 1B              1029 	rr	e
   03F5 DD 73 F0           1030 	ld	-16 (ix),e
                           1031 ;demo.c:181: if (yo < 164) {
   03F8 3ArD4s28           1032 	ld	a,(#_yo+0)
   03FB D6 A4              1033 	sub	a,#0xA4
   03FD D2rB8s04           1034 	jp	NC,00114$
                           1035 ;demo.c:182: if (flipper == 3)  vdp_register(VDP_VOFFSET,((sintab[vbicount+yo]&255)*xo)/128);
   0400 3ArD6s28           1036 	ld	a,(#_flipper+0)
   0403 D6 03              1037 	sub	a,#0x03
   0405 20 06              1038 	jr	NZ,00131$
   0407 3ArD7s28           1039 	ld	a,(#_flipper+1)
   040A B7                 1040 	or	a,a
   040B 28 02              1041 	jr	Z,00132$
   040D                    1042 00131$:
   040D 18 36              1043 	jr	00111$
   040F                    1044 00132$:
   040F 3ArD0s28           1045 	ld	a,(#_vbicount+0)
   0412 81                 1046 	add	a,c
   0413 5F                 1047 	ld	e,a
   0414 3ArD1s28           1048 	ld	a,(#_vbicount+1)
   0417 88                 1049 	adc	a,b
   0418 57                 1050 	ld	d,a
   0419 21r00s00           1051 	ld	hl,#_sintab
   041C 19                 1052 	add	hl,de
   041D DD 5E F0           1053 	ld	e,-16 (ix)
   0420 63                 1054 	ld	h,e
   0421 2E 00              1055 	ld	l,#0x00
   0423 55                 1056 	ld	d,l
   0424 06 08              1057 	ld	b,#0x08
   0426                    1058 00133$:
   0426 29                 1059 	add	hl,hl
   0427 30 01              1060 	jr	NC,00134$
   0429 19                 1061 	add	hl,de
   042A                    1062 00134$:
   042A 10 FA              1063 	djnz	00133$
   042C EB                 1064 	ex	de,hl
   042D 21 80 00           1065 	ld	hl,#0x0080
   0430 E5                 1066 	push	hl
   0431 D5                 1067 	push	de
   0432 CDr00s00           1068 	call	__divsint_rrx_s
   0435 F1                 1069 	pop	af
   0436 F1                 1070 	pop	af
   0437 7D                 1071 	ld	a,l
   0438 F5                 1072 	push	af
   0439 33                 1073 	inc	sp
   043A 3E 17              1074 	ld	a,#0x17
   043C F5                 1075 	push	af
   043D 33                 1076 	inc	sp
   043E CDr00s00           1077 	call	_vdp_register
   0441 F1                 1078 	pop	af
   0442 C3rB8s04           1079 	jp	00114$
   0445                    1080 00111$:
                           1081 ;demo.c:183: else if (flipper == 1) vdp_register(VDP_VOFFSET,((sintab[((vbicount>>1)+yo>>1)&255])/4));
   0445 3ArD6s28           1082 	ld	a,(#_flipper+0)
   0448 D6 01              1083 	sub	a,#0x01
   044A 20 06              1084 	jr	NZ,00135$
   044C 3ArD7s28           1085 	ld	a,(#_flipper+1)
   044F B7                 1086 	or	a,a
   0450 28 02              1087 	jr	Z,00136$
   0452                    1088 00135$:
   0452 18 31              1089 	jr	00108$
   0454                    1090 00136$:
   0454 21rD0s28           1091 	ld	hl,#_vbicount + 0
   0457 5E                 1092 	ld	e,(hl)
   0458 21rD1s28           1093 	ld	hl,#_vbicount + 1
   045B 56                 1094 	ld	d,(hl)
   045C CB 2A              1095 	sra	d
   045E CB 1B              1096 	rr	e
   0460 7B                 1097 	ld	a,e
   0461 81                 1098 	add	a,c
   0462 5F                 1099 	ld	e,a
   0463 7A                 1100 	ld	a,d
   0464 88                 1101 	adc	a,b
   0465 57                 1102 	ld	d,a
   0466 CB 2A              1103 	sra	d
   0468 CB 1B              1104 	rr	e
   046A 16 00              1105 	ld	d,#0x00
   046C 21r00s00           1106 	ld	hl,#_sintab
   046F 19                 1107 	add	hl,de
   0470 5E                 1108 	ld	e,(hl)
   0471 16 04              1109 	ld	d,#0x04
   0473 D5                 1110 	push	de
   0474 CDr00s00           1111 	call	__divuschar_rrx_s
   0477 F1                 1112 	pop	af
   0478 7D                 1113 	ld	a,l
   0479 F5                 1114 	push	af
   047A 33                 1115 	inc	sp
   047B 3E 17              1116 	ld	a,#0x17
   047D F5                 1117 	push	af
   047E 33                 1118 	inc	sp
   047F CDr00s00           1119 	call	_vdp_register
   0482 F1                 1120 	pop	af
   0483 18 33              1121 	jr	00114$
   0485                    1122 00108$:
                           1123 ;demo.c:184: else if (flipper == 2) vdp_register(VDP_VOFFSET,((sintab[((vbicount)+yo)&255])/3));
   0485 3ArD6s28           1124 	ld	a,(#_flipper+0)
   0488 D6 02              1125 	sub	a,#0x02
   048A 20 06              1126 	jr	NZ,00139$
   048C 3ArD7s28           1127 	ld	a,(#_flipper+1)
   048F B7                 1128 	or	a,a
   0490 28 02              1129 	jr	Z,00140$
   0492                    1130 00139$:
   0492 18 24              1131 	jr	00114$
   0494                    1132 00140$:
   0494 3ArD0s28           1133 	ld	a,(#_vbicount+0)
   0497 81                 1134 	add	a,c
   0498 4F                 1135 	ld	c,a
   0499 3ArD1s28           1136 	ld	a,(#_vbicount+1)
   049C 88                 1137 	adc	a,b
   049D 06 00              1138 	ld	b,#0x00
   049F 21r00s00           1139 	ld	hl,#_sintab
   04A2 09                 1140 	add	hl,bc
   04A3 7E                 1141 	ld	a,(hl)
   04A4 4F                 1142 	ld	c,a
   04A5 3E 03              1143 	ld	a,#0x03
   04A7 47                 1144 	ld	b,a
   04A8 C5                 1145 	push	bc
   04A9 CDr00s00           1146 	call	__divuschar_rrx_s
   04AC F1                 1147 	pop	af
   04AD 7D                 1148 	ld	a,l
   04AE F5                 1149 	push	af
   04AF 33                 1150 	inc	sp
   04B0 3E 17              1151 	ld	a,#0x17
   04B2 F5                 1152 	push	af
   04B3 33                 1153 	inc	sp
   04B4 CDr00s00           1154 	call	_vdp_register
   04B7 F1                 1155 	pop	af
   04B8                    1156 00114$:
                           1157 ;demo.c:186: msx2_palette(1,xo>>1,xo>>1,xo>>2);
   04B8 DD 4E F0           1158 	ld	c,-16 (ix)
   04BB CB 39              1159 	srl	c
   04BD CB 39              1160 	srl	c
   04BF DD 46 F0           1161 	ld	b,-16 (ix)
   04C2 CB 38              1162 	srl	b
   04C4 79                 1163 	ld	a,c
   04C5 F5                 1164 	push	af
   04C6 33                 1165 	inc	sp
   04C7 C5                 1166 	push	bc
   04C8 33                 1167 	inc	sp
   04C9 C5                 1168 	push	bc
   04CA 33                 1169 	inc	sp
   04CB 3E 01              1170 	ld	a,#0x01
   04CD F5                 1171 	push	af
   04CE 33                 1172 	inc	sp
   04CF CDr00s00           1173 	call	_msx2_palette
   04D2 F1                 1174 	pop	af
   04D3 F1                 1175 	pop	af
                           1176 ;demo.c:187: cmd.source_x = 80;
   04D4 21 03 00           1177 	ld	hl,#0x0003
   04D7 39                 1178 	add	hl,sp
   04D8 36 50              1179 	ld	(hl),#0x50
   04DA 23                 1180 	inc	hl
   04DB 36 00              1181 	ld	(hl),#0x00
                           1182 ;demo.c:188: cmd.source_y = 256+yo;
   04DD 21 03 00           1183 	ld	hl,#0x0003
   04E0 39                 1184 	add	hl,sp
   04E1 4D                 1185 	ld	c,l
   04E2 44                 1186 	ld	b,h
   04E3 21 02 00           1187 	ld	hl,#0x0002
   04E6 09                 1188 	add	hl,bc
   04E7 DD 75 EE           1189 	ld	-18 (ix),l
   04EA DD 74 EF           1190 	ld	-17 (ix),h
   04ED 21rD4s28           1191 	ld	hl,#_yo + 0
   04F0 5E                 1192 	ld	e,(hl)
   04F1 16 00              1193 	ld	d,#0x00
   04F3 21 00 01           1194 	ld	hl,#0x0100
   04F6 19                 1195 	add	hl,de
   04F7 EB                 1196 	ex	de,hl
   04F8 DD 6E EE           1197 	ld	l,-18 (ix)
   04FB DD 66 EF           1198 	ld	h,-17 (ix)
   04FE 73                 1199 	ld	(hl),e
   04FF 23                 1200 	inc	hl
   0500 72                 1201 	ld	(hl),d
                           1202 ;demo.c:189: cmd.dest_x = 80+xo;
   0501 21 04 00           1203 	ld	hl,#0x0004
   0504 09                 1204 	add	hl,bc
   0505 DD 75 EE           1205 	ld	-18 (ix),l
   0508 DD 74 EF           1206 	ld	-17 (ix),h
   050B DD 5E F0           1207 	ld	e,-16 (ix)
   050E 16 00              1208 	ld	d,#0x00
   0510 21 50 00           1209 	ld	hl,#0x0050
   0513 19                 1210 	add	hl,de
   0514 EB                 1211 	ex	de,hl
   0515 DD 6E EE           1212 	ld	l,-18 (ix)
   0518 DD 66 EF           1213 	ld	h,-17 (ix)
   051B 73                 1214 	ld	(hl),e
   051C 23                 1215 	inc	hl
   051D 72                 1216 	ld	(hl),d
                           1217 ;demo.c:190: cmd.dest_y = yo;
   051E 21 06 00           1218 	ld	hl,#0x0006
   0521 09                 1219 	add	hl,bc
   0522 DD 75 EE           1220 	ld	-18 (ix),l
   0525 DD 74 EF           1221 	ld	-17 (ix),h
   0528 21rD4s28           1222 	ld	hl,#_yo + 0
   052B 5E                 1223 	ld	e,(hl)
   052C 16 00              1224 	ld	d,#0x00
   052E DD 6E EE           1225 	ld	l,-18 (ix)
   0531 DD 66 EF           1226 	ld	h,-17 (ix)
   0534 73                 1227 	ld	(hl),e
   0535 23                 1228 	inc	hl
   0536 72                 1229 	ld	(hl),d
                           1230 ;demo.c:191: cmd.size_x = 64+32;
   0537 21 08 00           1231 	ld	hl,#0x0008
   053A 09                 1232 	add	hl,bc
   053B 36 60              1233 	ld	(hl),#0x60
   053D 23                 1234 	inc	hl
   053E 36 00              1235 	ld	(hl),#0x00
                           1236 ;demo.c:192: cmd.size_y = 2;
   0540 21 0A 00           1237 	ld	hl,#0x000A
   0543 09                 1238 	add	hl,bc
   0544 36 02              1239 	ld	(hl),#0x02
   0546 23                 1240 	inc	hl
   0547 36 00              1241 	ld	(hl),#0x00
                           1242 ;demo.c:193: cmd.data = 0;
   0549 21 0C 00           1243 	ld	hl,#0x000C
   054C 09                 1244 	add	hl,bc
   054D EB                 1245 	ex	de,hl
   054E 3E 00              1246 	ld	a,#0x00
   0550 12                 1247 	ld	(de),a
                           1248 ;demo.c:194: cmd.argument = 0;
   0551 21 0D 00           1249 	ld	hl,#0x000D
   0554 09                 1250 	add	hl,bc
   0555 EB                 1251 	ex	de,hl
   0556 3E 00              1252 	ld	a,#0x00
   0558 12                 1253 	ld	(de),a
                           1254 ;demo.c:195: cmd.command = 0xD0;
   0559 21 0E 00           1255 	ld	hl,#0x000E
   055C 09                 1256 	add	hl,bc
   055D EB                 1257 	ex	de,hl
   055E 3E D0              1258 	ld	a,#0xD0
   0560 12                 1259 	ld	(de),a
                           1260 ;demo.c:198: vdp_copier(&cmd);
   0561 C5                 1261 	push	bc
   0562 CDr00s00           1262 	call	_vdp_copier
   0565 F1                 1263 	pop	af
                           1264 ;demo.c:178: for (yo = 0; yo<212-step;yo+=step) {
   0566 21rD4s28           1265 	ld	hl,#_yo + 0
   0569 4E                 1266 	ld	c,(hl)
   056A 21rD4s28           1267 	ld	hl,#_yo
   056D 79                 1268 	ld	a,c
   056E C6 03              1269 	add	a,#0x03
   0570 77                 1270 	ld	(hl),a
   0571 C3rC0s03           1271 	jp	00115$
   0574                    1272 00118$:
                           1273 ;demo.c:201: vdp_register(VDP_VOFFSET,0);
   0574 21 17 00           1274 	ld	hl,#0x0017
   0577 E5                 1275 	push	hl
   0578 CDr00s00           1276 	call	_vdp_register
   057B F1                 1277 	pop	af
   057C DD F9              1278 	ld	sp,ix
   057E DD E1              1279 	pop	ix
   0580 C9                 1280 	ret
   0581                    1281 _do_ymmm_end::
                           1282 ;demo.c:216: void do_blocks() {
                           1283 ;	---------------------------------
                           1284 ; Function do_blocks
                           1285 ; ---------------------------------
   0581                    1286 _do_blocks_start::
   0581                    1287 _do_blocks:
   0581 DD E5              1288 	push	ix
   0583 DD 21 00 00        1289 	ld	ix,#0
   0587 DD 39              1290 	add	ix,sp
   0589 21 E9 FF           1291 	ld	hl,#-23
   058C 39                 1292 	add	hl,sp
   058D F9                 1293 	ld	sp,hl
                           1294 ;demo.c:219: int ys = 0;
   058E DD 36 ED 00        1295 	ld	-19 (ix),#0x00
   0592 DD 36 EE 00        1296 	ld	-18 (ix),#0x00
                           1297 ;demo.c:220: int ye = 0;
   0596 DD 36 EB 00        1298 	ld	-21 (ix),#0x00
   059A DD 36 EC 00        1299 	ld	-20 (ix),#0x00
                           1300 ;demo.c:222: vdp_register(VDP_VOFFSET,0);
   059E 21 17 00           1301 	ld	hl,#0x0017
   05A1 E5                 1302 	push	hl
   05A2 CDr00s00           1303 	call	_vdp_register
   05A5 F1                 1304 	pop	af
                           1305 ;demo.c:224: if (block_init == 0) {
   05A6 AF                 1306 	xor	a,a
   05A7 FD 21rDAs28        1307 	ld	iy,#_block_init
   05AB FD B6 00           1308 	or	a,0 (iy)
   05AE C2r35s06           1309 	jp	NZ,00108$
                           1310 ;demo.c:226: uninstall_isr();
   05B1 CDr00s00           1311 	call	_uninstall_isr
                           1312 ;demo.c:227: PLY_Stop();
   05B4 CDr00s00           1313 	call	_PLY_Stop
                           1314 ;demo.c:228: PLY_PSGReg8 = 0;
   05B7 21r00s00           1315 	ld	hl,#_PLY_PSGReg8 + 0
   05BA 36 00              1316 	ld	(hl), #0x00
                           1317 ;demo.c:229: PLY_PSGReg9 = 0;
   05BC 21r00s00           1318 	ld	hl,#_PLY_PSGReg9 + 0
   05BF 36 00              1319 	ld	(hl), #0x00
                           1320 ;demo.c:230: PLY_PSGReg10 = 0;
   05C1 21r00s00           1321 	ld	hl,#_PLY_PSGReg10 + 0
   05C4 36 00              1322 	ld	(hl), #0x00
                           1323 ;demo.c:231: for(i=0;i<16;i++) btab[i] = i*16;
   05C6 DD 36 EF 00        1324 	ld	-17 (ix),#0x00
   05CA DD 36 F0 00        1325 	ld	-16 (ix),#0x00
   05CE                    1326 00110$:
   05CE DD 7E EF           1327 	ld	a,-17 (ix)
   05D1 D6 10              1328 	sub	a,#0x10
   05D3 DD 7E F0           1329 	ld	a,-16 (ix)
   05D6 DE 00              1330 	sbc	a,#0x00
   05D8 F2r10s06           1331 	jp	P,00113$
   05DB DD 4E EF           1332 	ld	c,-17 (ix)
   05DE DD 46 F0           1333 	ld	b,-16 (ix)
   05E1 CB 21              1334 	sla	c
   05E3 CB 10              1335 	rl	b
   05E5 21rE3s28           1336 	ld	hl,#_btab
   05E8 09                 1337 	add	hl,bc
   05E9 4D                 1338 	ld	c,l
   05EA 44                 1339 	ld	b,h
   05EB DD 5E EF           1340 	ld	e,-17 (ix)
   05EE DD 56 F0           1341 	ld	d,-16 (ix)
   05F1 CB 23              1342 	sla	e
   05F3 CB 12              1343 	rl	d
   05F5 CB 23              1344 	sla	e
   05F7 CB 12              1345 	rl	d
   05F9 CB 23              1346 	sla	e
   05FB CB 12              1347 	rl	d
   05FD CB 23              1348 	sla	e
   05FF CB 12              1349 	rl	d
   0601 69                 1350 	ld	l,c
   0602 60                 1351 	ld	h,b
   0603 73                 1352 	ld	(hl),e
   0604 23                 1353 	inc	hl
   0605 72                 1354 	ld	(hl),d
   0606 DD 34 EF           1355 	inc	-17 (ix)
   0609 20 03              1356 	jr	NZ,00139$
   060B DD 34 F0           1357 	inc	-16 (ix)
   060E                    1358 00139$:
   060E 18 BE              1359 	jr	00110$
   0610                    1360 00113$:
                           1361 ;demo.c:232: bitbuster(packbuffer2,0x8000); // to page 2
   0610 21 00 80           1362 	ld	hl,#0x8000
   0613 E5                 1363 	push	hl
   0614 21r88s14           1364 	ld	hl,#_packbuffer2
   0617 E5                 1365 	push	hl
   0618 CDr00s00           1366 	call	_bitbuster
   061B F1                 1367 	pop	af
   061C F1                 1368 	pop	af
                           1369 ;demo.c:233: vdp_load_palette(block_palette);
   061D 21rB0s28           1370 	ld	hl,#_block_palette
   0620 E5                 1371 	push	hl
   0621 CDr00s00           1372 	call	_vdp_load_palette
   0624 F1                 1373 	pop	af
                           1374 ;demo.c:235: block_init = 1;
   0625 21rDAs28           1375 	ld	hl,#_block_init + 0
   0628 36 01              1376 	ld	(hl), #0x01
                           1377 ;demo.c:237: install_isr(my_isr);
   062A 21r00s00           1378 	ld	hl,#_my_isr
   062D E5                 1379 	push	hl
   062E CDr00s00           1380 	call	_install_isr
   0631 F1                 1381 	pop	af
   0632 C3rEFs07           1382 	jp	00122$
   0635                    1383 00108$:
                           1384 ;demo.c:239: if (flof == 0) { ys = 0; ye = 8; }
   0635 3Ar03s29           1385 	ld	a,(#_flof+0)
   0638 FD 21r03s29        1386 	ld	iy,#_flof
   063C FD B6 01           1387 	or	a,1 (iy)
   063F 20 10              1388 	jr	NZ,00102$
   0641 DD 36 ED 00        1389 	ld	-19 (ix),#0x00
   0645 DD 36 EE 00        1390 	ld	-18 (ix),#0x00
   0649 DD 36 EB 08        1391 	ld	-21 (ix),#0x08
   064D DD 36 EC 00        1392 	ld	-20 (ix),#0x00
   0651                    1393 00102$:
                           1394 ;demo.c:240: if (flof == 1) { ys = 8; ye = 16; }
   0651 3Ar03s29           1395 	ld	a,(#_flof+0)
   0654 D6 01              1396 	sub	a,#0x01
   0656 20 06              1397 	jr	NZ,00140$
   0658 3Ar04s29           1398 	ld	a,(#_flof+1)
   065B B7                 1399 	or	a,a
   065C 28 02              1400 	jr	Z,00141$
   065E                    1401 00140$:
   065E 18 10              1402 	jr	00104$
   0660                    1403 00141$:
   0660 DD 36 ED 08        1404 	ld	-19 (ix),#0x08
   0664 DD 36 EE 00        1405 	ld	-18 (ix),#0x00
   0668 DD 36 EB 10        1406 	ld	-21 (ix),#0x10
   066C DD 36 EC 00        1407 	ld	-20 (ix),#0x00
   0670                    1408 00104$:
                           1409 ;demo.c:242: for(bty=3;bty<11;bty++) {
   0670 FD 21rE1s28        1410 	ld	iy,#_bty
   0674 FD 36 00 03        1411 	ld	0 (iy),#0x03
   0678 FD 21rE1s28        1412 	ld	iy,#_bty
   067C FD 36 01 00        1413 	ld	1 (iy),#0x00
   0680                    1414 00118$:
   0680 3ArE1s28           1415 	ld	a,(#_bty+0)
   0683 D6 0B              1416 	sub	a,#0x0B
   0685 3ArE2s28           1417 	ld	a,(#_bty+1)
   0688 DE 00              1418 	sbc	a,#0x00
   068A F2rC6s07           1419 	jp	P,00121$
                           1420 ;demo.c:243: for(btx=ys;btx<ye;btx++) {
   068D DD 7E ED           1421 	ld	a,-19 (ix)
   0690 FD 21rDFs28        1422 	ld	iy,#_btx
   0694 FD 77 00           1423 	ld	0 (iy),a
   0697 DD 7E EE           1424 	ld	a,-18 (ix)
   069A FD 21rDFs28        1425 	ld	iy,#_btx
   069E FD 77 01           1426 	ld	1 (iy),a
   06A1                    1427 00114$:
   06A1 3ArDFs28           1428 	ld	a,(#_btx+0)
   06A4 DD 96 EB           1429 	sub	a,-21 (ix)
   06A7 3ArE0s28           1430 	ld	a,(#_btx+1)
   06AA DD 9E EC           1431 	sbc	a,-20 (ix)
   06AD F2rB3s07           1432 	jp	P,00120$
                           1433 ;demo.c:244: bsx = (PLY_PSGReg8 & PLY_PSGReg9 | PLY_PSGReg10)>>1;
   06B0 3Ar00s00           1434 	ld	a,(#_PLY_PSGReg8+0)
   06B3 FD 21r00s00        1435 	ld	iy,#_PLY_PSGReg9
   06B7 FD A6 00           1436 	and	a,0 (iy)
   06BA 21r00s00           1437 	ld	hl,#_PLY_PSGReg10 + 0
   06BD B6                 1438 	or	a,(hl)
   06BE 4F                 1439 	ld	c,a
   06BF CB 39              1440 	srl	c
   06C1 21rDBs28           1441 	ld	hl,#_bsx + 0
   06C4 71                 1442 	ld	(hl), c
   06C5 21rDCs28           1443 	ld	hl,#_bsx + 1
   06C8 36 00              1444 	ld	(hl), #0x00
                           1445 ;demo.c:245: bsy = PLY_PSGReg10;
   06CA 3Ar00s00           1446 	ld	a,(#_PLY_PSGReg10+0)
   06CD 21rDDs28           1447 	ld	hl,#_bsy + 0
   06D0 77                 1448 	ld	(hl), a
   06D1 21rDEs28           1449 	ld	hl,#_bsy + 1
   06D4 36 00              1450 	ld	(hl), #0x00
                           1451 ;demo.c:246: cmd.source_x = btab[bsx];
   06D6 21 08 00           1452 	ld	hl,#0x0008
   06D9 39                 1453 	add	hl,sp
   06DA 4D                 1454 	ld	c,l
   06DB 44                 1455 	ld	b,h
   06DC 21rDBs28           1456 	ld	hl,#_bsx + 0
   06DF 5E                 1457 	ld	e,(hl)
   06E0 21rDCs28           1458 	ld	hl,#_bsx + 1
   06E3 56                 1459 	ld	d,(hl)
   06E4 CB 23              1460 	sla	e
   06E6 CB 12              1461 	rl	d
   06E8 21rE3s28           1462 	ld	hl,#_btab
   06EB 19                 1463 	add	hl,de
   06EC 5E                 1464 	ld	e,(hl)
   06ED 23                 1465 	inc	hl
   06EE 56                 1466 	ld	d,(hl)
   06EF 69                 1467 	ld	l,c
   06F0 60                 1468 	ld	h,b
   06F1 73                 1469 	ld	(hl),e
   06F2 23                 1470 	inc	hl
   06F3 72                 1471 	ld	(hl),d
                           1472 ;demo.c:247: cmd.source_y = 256+btab[bsy];
   06F4 21 08 00           1473 	ld	hl,#0x0008
   06F7 39                 1474 	add	hl,sp
   06F8 4D                 1475 	ld	c,l
   06F9 44                 1476 	ld	b,h
   06FA 21 02 00           1477 	ld	hl,#0x0002
   06FD 09                 1478 	add	hl,bc
   06FE DD 75 E9           1479 	ld	-23 (ix),l
   0701 DD 74 EA           1480 	ld	-22 (ix),h
   0704 21rDDs28           1481 	ld	hl,#_bsy + 0
   0707 5E                 1482 	ld	e,(hl)
   0708 21rDEs28           1483 	ld	hl,#_bsy + 1
   070B 56                 1484 	ld	d,(hl)
   070C CB 23              1485 	sla	e
   070E CB 12              1486 	rl	d
   0710 21rE3s28           1487 	ld	hl,#_btab
   0713 19                 1488 	add	hl,de
   0714 5E                 1489 	ld	e,(hl)
   0715 23                 1490 	inc	hl
   0716 56                 1491 	ld	d,(hl)
   0717 21 00 01           1492 	ld	hl,#0x0100
   071A 19                 1493 	add	hl,de
   071B EB                 1494 	ex	de,hl
   071C DD 6E E9           1495 	ld	l,-23 (ix)
   071F DD 66 EA           1496 	ld	h,-22 (ix)
   0722 73                 1497 	ld	(hl),e
   0723 23                 1498 	inc	hl
   0724 72                 1499 	ld	(hl),d
                           1500 ;demo.c:248: cmd.dest_x = btab[btx];
   0725 21 04 00           1501 	ld	hl,#0x0004
   0728 09                 1502 	add	hl,bc
   0729 DD 75 E9           1503 	ld	-23 (ix),l
   072C DD 74 EA           1504 	ld	-22 (ix),h
   072F 21rDFs28           1505 	ld	hl,#_btx + 0
   0732 5E                 1506 	ld	e,(hl)
   0733 21rE0s28           1507 	ld	hl,#_btx + 1
   0736 56                 1508 	ld	d,(hl)
   0737 CB 23              1509 	sla	e
   0739 CB 12              1510 	rl	d
   073B 21rE3s28           1511 	ld	hl,#_btab
   073E 19                 1512 	add	hl,de
   073F 5E                 1513 	ld	e,(hl)
   0740 23                 1514 	inc	hl
   0741 56                 1515 	ld	d,(hl)
   0742 DD 6E E9           1516 	ld	l,-23 (ix)
   0745 DD 66 EA           1517 	ld	h,-22 (ix)
   0748 73                 1518 	ld	(hl),e
   0749 23                 1519 	inc	hl
   074A 72                 1520 	ld	(hl),d
                           1521 ;demo.c:249: cmd.dest_y = btab[bty];
   074B 21 06 00           1522 	ld	hl,#0x0006
   074E 09                 1523 	add	hl,bc
   074F DD 75 E9           1524 	ld	-23 (ix),l
   0752 DD 74 EA           1525 	ld	-22 (ix),h
   0755 21rE1s28           1526 	ld	hl,#_bty + 0
   0758 5E                 1527 	ld	e,(hl)
   0759 21rE2s28           1528 	ld	hl,#_bty + 1
   075C 56                 1529 	ld	d,(hl)
   075D CB 23              1530 	sla	e
   075F CB 12              1531 	rl	d
   0761 21rE3s28           1532 	ld	hl,#_btab
   0764 19                 1533 	add	hl,de
   0765 5E                 1534 	ld	e,(hl)
   0766 23                 1535 	inc	hl
   0767 56                 1536 	ld	d,(hl)
   0768 DD 6E E9           1537 	ld	l,-23 (ix)
   076B DD 66 EA           1538 	ld	h,-22 (ix)
   076E 73                 1539 	ld	(hl),e
   076F 23                 1540 	inc	hl
   0770 72                 1541 	ld	(hl),d
                           1542 ;demo.c:250: cmd.size_x = 16;
   0771 21 08 00           1543 	ld	hl,#0x0008
   0774 09                 1544 	add	hl,bc
   0775 36 10              1545 	ld	(hl),#0x10
   0777 23                 1546 	inc	hl
   0778 36 00              1547 	ld	(hl),#0x00
                           1548 ;demo.c:251: cmd.size_y = 16;
   077A 21 0A 00           1549 	ld	hl,#0x000A
   077D 09                 1550 	add	hl,bc
   077E 36 10              1551 	ld	(hl),#0x10
   0780 23                 1552 	inc	hl
   0781 36 00              1553 	ld	(hl),#0x00
                           1554 ;demo.c:252: cmd.data = 0;
   0783 21 0C 00           1555 	ld	hl,#0x000C
   0786 09                 1556 	add	hl,bc
   0787 EB                 1557 	ex	de,hl
   0788 3E 00              1558 	ld	a,#0x00
   078A 12                 1559 	ld	(de),a
                           1560 ;demo.c:253: cmd.argument = 0;
   078B 21 0D 00           1561 	ld	hl,#0x000D
   078E 09                 1562 	add	hl,bc
   078F EB                 1563 	ex	de,hl
   0790 3E 00              1564 	ld	a,#0x00
   0792 12                 1565 	ld	(de),a
                           1566 ;demo.c:254: cmd.command = 0xD0;
   0793 21 0E 00           1567 	ld	hl,#0x000E
   0796 09                 1568 	add	hl,bc
   0797 EB                 1569 	ex	de,hl
   0798 3E D0              1570 	ld	a,#0xD0
   079A 12                 1571 	ld	(de),a
                           1572 ;demo.c:255: vdp_copier(&cmd);
   079B C5                 1573 	push	bc
   079C CDr00s00           1574 	call	_vdp_copier
   079F F1                 1575 	pop	af
                           1576 ;demo.c:243: for(btx=ys;btx<ye;btx++) {
   07A0 FD 21rDFs28        1577 	ld	iy,#_btx
   07A4 FD 34 00           1578 	inc	0 (iy)
   07A7 20 07              1579 	jr	NZ,00150$
   07A9 FD 21rDFs28        1580 	ld	iy,#_btx
   07AD FD 34 01           1581 	inc	1 (iy)
   07B0                    1582 00150$:
   07B0 C3rA1s06           1583 	jp	00114$
   07B3                    1584 00120$:
                           1585 ;demo.c:242: for(bty=3;bty<11;bty++) {
   07B3 FD 21rE1s28        1586 	ld	iy,#_bty
   07B7 FD 34 00           1587 	inc	0 (iy)
   07BA 20 07              1588 	jr	NZ,00151$
   07BC FD 21rE1s28        1589 	ld	iy,#_bty
   07C0 FD 34 01           1590 	inc	1 (iy)
   07C3                    1591 00151$:
   07C3 C3r80s06           1592 	jp	00118$
   07C6                    1593 00121$:
                           1594 ;demo.c:259: flof++;
   07C6 FD 21r03s29        1595 	ld	iy,#_flof
   07CA FD 34 00           1596 	inc	0 (iy)
   07CD 20 07              1597 	jr	NZ,00152$
   07CF FD 21r03s29        1598 	ld	iy,#_flof
   07D3 FD 34 01           1599 	inc	1 (iy)
   07D6                    1600 00152$:
                           1601 ;demo.c:260: if (flof == 2) flof = 0;
   07D6 3Ar03s29           1602 	ld	a,(#_flof+0)
   07D9 D6 02              1603 	sub	a,#0x02
   07DB 20 06              1604 	jr	NZ,00153$
   07DD 3Ar04s29           1605 	ld	a,(#_flof+1)
   07E0 B7                 1606 	or	a,a
   07E1 28 02              1607 	jr	Z,00154$
   07E3                    1608 00153$:
   07E3 18 0A              1609 	jr	00122$
   07E5                    1610 00154$:
   07E5 21r03s29           1611 	ld	hl,#_flof + 0
   07E8 36 00              1612 	ld	(hl), #0x00
   07EA 21r04s29           1613 	ld	hl,#_flof + 1
   07ED 36 00              1614 	ld	(hl), #0x00
   07EF                    1615 00122$:
   07EF DD F9              1616 	ld	sp,ix
   07F1 DD E1              1617 	pop	ix
   07F3 C9                 1618 	ret
   07F4                    1619 _do_blocks_end::
                           1620 ;demo.c:270: void main() {
                           1621 ;	---------------------------------
                           1622 ; Function main
                           1623 ; ---------------------------------
   07F4                    1624 _main_start::
   07F4                    1625 _main:
   07F4 DD E5              1626 	push	ix
   07F6 DD 21 00 00        1627 	ld	ix,#0
   07FA DD 39              1628 	add	ix,sp
   07FC 21 F0 FF           1629 	ld	hl,#-16
   07FF 39                 1630 	add	hl,sp
   0800 F9                 1631 	ld	sp,hl
                           1632 ;demo.c:271: unsigned char quit=0;
   0801 DD 36 FF 00        1633 	ld	-1 (ix),#0x00
                           1634 ;demo.c:274: spindown();
   0805 CDr00s00           1635 	call	_spindown
                           1636 ;demo.c:276: puts("demo init\r\n\r\n");
   0808 21rB8s09           1637 	ld	hl,#__str_0
   080B E5                 1638 	push	hl
   080C CDr00s00           1639 	call	_puts
   080F F1                 1640 	pop	af
                           1641 ;demo.c:278: puts("music init...");
   0810 21rC6s09           1642 	ld	hl,#__str_1
   0813 E5                 1643 	push	hl
   0814 CDr00s00           1644 	call	_puts
   0817 F1                 1645 	pop	af
                           1646 ;demo.c:280: PLY_SongPtr = (char *)0x0103;
   0818 21r00s00           1647 	ld	hl,#_PLY_SongPtr + 0
   081B 36 03              1648 	ld	(hl), #0x03
   081D 21r01s00           1649 	ld	hl,#_PLY_SongPtr + 1
   0820 36 01              1650 	ld	(hl), #0x01
                           1651 ;demo.c:281: PLY_Init();
   0822 CDr00s00           1652 	call	_PLY_Init
                           1653 ;demo.c:282: puts("done.\n\n");
   0825 21rD4s09           1654 	ld	hl,#__str_2
   0828 E5                 1655 	push	hl
   0829 CDr00s00           1656 	call	_puts
   082C F1                 1657 	pop	af
                           1658 ;demo.c:284: if(isvdp2())
   082D CDr00s00           1659 	call	_isvdp2
   0830 AF                 1660 	xor	a,a
   0831 B5                 1661 	or	a,l
   0832 28 08              1662 	jr	Z,00102$
                           1663 ;demo.c:286: msx2_sethz(50);
   0834 3E 32              1664 	ld	a,#0x32
   0836 F5                 1665 	push	af
   0837 33                 1666 	inc	sp
   0838 CDr00s00           1667 	call	_msx2_sethz
   083B 33                 1668 	inc	sp
   083C                    1669 00102$:
                           1670 ;demo.c:290: puts("demo start\r\n");
   083C 21rDCs09           1671 	ld	hl,#__str_3
   083F E5                 1672 	push	hl
   0840 CDr00s00           1673 	call	_puts
   0843 F1                 1674 	pop	af
                           1675 ;demo.c:292: scratch_clear();
   0844 CDr09s01           1676 	call	_scratch_clear
                           1677 ;demo.c:293: vdp_load_palette(scratch);
   0847 21r10s28           1678 	ld	hl,#_scratch
   084A E5                 1679 	push	hl
   084B CDr00s00           1680 	call	_vdp_load_palette
   084E F1                 1681 	pop	af
                           1682 ;demo.c:295: vdp_set_screen5();
   084F CDr00s00           1683 	call	_vdp_set_screen5
                           1684 ;demo.c:297: vdp_register(VDP_VOFFSET,0);
   0852 21 17 00           1685 	ld	hl,#0x0017
   0855 E5                 1686 	push	hl
   0856 CDr00s00           1687 	call	_vdp_register
   0859 F1                 1688 	pop	af
                           1689 ;demo.c:299: pal_load("STDBLCK PL5", 32);
   085A 3E 20              1690 	ld	a,#0x20
   085C F5                 1691 	push	af
   085D 33                 1692 	inc	sp
   085E 21rE9s09           1693 	ld	hl,#__str_4
   0861 E5                 1694 	push	hl
   0862 CDr1Cs01           1695 	call	_pal_load
   0865 F1                 1696 	pop	af
   0866 33                 1697 	inc	sp
                           1698 ;demo.c:300: memcpy(block_palette,cur_palette,32);
   0867 21 20 00           1699 	ld	hl,#0x0020
   086A E5                 1700 	push	hl
   086B 21r90s28           1701 	ld	hl,#_cur_palette
   086E E5                 1702 	push	hl
   086F 21rB0s28           1703 	ld	hl,#_block_palette
   0872 E5                 1704 	push	hl
   0873 CDr00s00           1705 	call	_memcpy
   0876 F1                 1706 	pop	af
   0877 F1                 1707 	pop	af
   0878 F1                 1708 	pop	af
                           1709 ;demo.c:302: pal_load("KETTU16 PL5", 32);
   0879 3E 20              1710 	ld	a,#0x20
   087B F5                 1711 	push	af
   087C 33                 1712 	inc	sp
   087D 21rF5s09           1713 	ld	hl,#__str_5
   0880 E5                 1714 	push	hl
   0881 CDr1Cs01           1715 	call	_pal_load
   0884 F1                 1716 	pop	af
   0885 33                 1717 	inc	sp
                           1718 ;demo.c:304: memset((uint8_t *) &packbuffer, 0, 5000);
   0886 21 88 13           1719 	ld	hl,#0x1388
   0889 E5                 1720 	push	hl
   088A 3E 00              1721 	ld	a,#0x00
   088C F5                 1722 	push	af
   088D 33                 1723 	inc	sp
   088E 21r00s01           1724 	ld	hl,#_packbuffer
   0891 E5                 1725 	push	hl
   0892 CDr00s00           1726 	call	_memset
   0895 F1                 1727 	pop	af
   0896 F1                 1728 	pop	af
   0897 33                 1729 	inc	sp
                           1730 ;demo.c:305: pack_load("KETTU16 PCK", 4502, packbuffer);
   0898 21r00s01           1731 	ld	hl,#_packbuffer
   089B E5                 1732 	push	hl
   089C 21 96 11           1733 	ld	hl,#0x1196
   089F E5                 1734 	push	hl
   08A0 21r01s0A           1735 	ld	hl,#__str_6
   08A3 E5                 1736 	push	hl
   08A4 CDrD0s01           1737 	call	_pack_load
   08A7 F1                 1738 	pop	af
   08A8 F1                 1739 	pop	af
   08A9 F1                 1740 	pop	af
                           1741 ;demo.c:306: bitbuster(packbuffer,0x8000); // to page 1
   08AA 21 00 80           1742 	ld	hl,#0x8000
   08AD E5                 1743 	push	hl
   08AE 21r00s01           1744 	ld	hl,#_packbuffer
   08B1 E5                 1745 	push	hl
   08B2 CDr00s00           1746 	call	_bitbuster
   08B5 F1                 1747 	pop	af
   08B6 F1                 1748 	pop	af
                           1749 ;demo.c:308: memset((uint8_t *) &packbuffer2, 0, 5000);
   08B7 21 88 13           1750 	ld	hl,#0x1388
   08BA E5                 1751 	push	hl
   08BB 3E 00              1752 	ld	a,#0x00
   08BD F5                 1753 	push	af
   08BE 33                 1754 	inc	sp
   08BF 21r88s14           1755 	ld	hl,#_packbuffer2
   08C2 E5                 1756 	push	hl
   08C3 CDr00s00           1757 	call	_memset
   08C6 F1                 1758 	pop	af
   08C7 F1                 1759 	pop	af
   08C8 33                 1760 	inc	sp
                           1761 ;demo.c:309: pack_load("STDBLCK PCK", 4884, packbuffer2);
   08C9 21r88s14           1762 	ld	hl,#_packbuffer2
   08CC E5                 1763 	push	hl
   08CD 21 14 13           1764 	ld	hl,#0x1314
   08D0 E5                 1765 	push	hl
   08D1 21r0Ds0A           1766 	ld	hl,#__str_7
   08D4 E5                 1767 	push	hl
   08D5 CDrD0s01           1768 	call	_pack_load
   08D8 F1                 1769 	pop	af
   08D9 F1                 1770 	pop	af
   08DA F1                 1771 	pop	af
                           1772 ;demo.c:311: scratch_clear();
   08DB CDr09s01           1773 	call	_scratch_clear
                           1774 ;demo.c:313: cmd.source_x = 0;
   08DE 21 00 00           1775 	ld	hl,#0x0000
   08E1 39                 1776 	add	hl,sp
   08E2 36 00              1777 	ld	(hl),#0x00
   08E4 23                 1778 	inc	hl
   08E5 36 00              1779 	ld	(hl),#0x00
                           1780 ;demo.c:314: cmd.source_y = 256;
   08E7 21 00 00           1781 	ld	hl,#0x0000
   08EA 39                 1782 	add	hl,sp
   08EB EB                 1783 	ex	de,hl
   08EC 4B                 1784 	ld	c,e
   08ED 42                 1785 	ld	b,d
   08EE 69                 1786 	ld	l,c
   08EF 60                 1787 	ld	h,b
   08F0 23                 1788 	inc	hl
   08F1 23                 1789 	inc	hl
   08F2 36 00              1790 	ld	(hl),#0x00
   08F4 23                 1791 	inc	hl
   08F5 36 01              1792 	ld	(hl),#0x01
                           1793 ;demo.c:315: cmd.dest_x = 0;
   08F7 21 04 00           1794 	ld	hl,#0x0004
   08FA 19                 1795 	add	hl,de
   08FB 36 00              1796 	ld	(hl),#0x00
   08FD 23                 1797 	inc	hl
   08FE 36 00              1798 	ld	(hl),#0x00
                           1799 ;demo.c:316: cmd.dest_y = 0;
   0900 21 06 00           1800 	ld	hl,#0x0006
   0903 19                 1801 	add	hl,de
   0904 36 00              1802 	ld	(hl),#0x00
   0906 23                 1803 	inc	hl
   0907 36 00              1804 	ld	(hl),#0x00
                           1805 ;demo.c:317: cmd.size_x = 256;
   0909 21 08 00           1806 	ld	hl,#0x0008
   090C 19                 1807 	add	hl,de
   090D 36 00              1808 	ld	(hl),#0x00
   090F 23                 1809 	inc	hl
   0910 36 01              1810 	ld	(hl),#0x01
                           1811 ;demo.c:318: cmd.size_y = 212;
   0912 21 0A 00           1812 	ld	hl,#0x000A
   0915 19                 1813 	add	hl,de
   0916 36 D4              1814 	ld	(hl),#0xD4
   0918 23                 1815 	inc	hl
   0919 36 00              1816 	ld	(hl),#0x00
                           1817 ;demo.c:319: cmd.data = 0;
   091B 21 0C 00           1818 	ld	hl,#0x000C
   091E 19                 1819 	add	hl,de
   091F 4D                 1820 	ld	c,l
   0920 44                 1821 	ld	b,h
   0921 3E 00              1822 	ld	a,#0x00
   0923 02                 1823 	ld	(bc),a
                           1824 ;demo.c:320: cmd.argument = 0;
   0924 21 0D 00           1825 	ld	hl,#0x000D
   0927 19                 1826 	add	hl,de
   0928 4D                 1827 	ld	c,l
   0929 44                 1828 	ld	b,h
   092A 3E 00              1829 	ld	a,#0x00
   092C 02                 1830 	ld	(bc),a
                           1831 ;demo.c:321: cmd.command = 0xD0;
   092D 21 0E 00           1832 	ld	hl,#0x000E
   0930 19                 1833 	add	hl,de
   0931 4D                 1834 	ld	c,l
   0932 44                 1835 	ld	b,h
   0933 3E D0              1836 	ld	a,#0xD0
   0935 02                 1837 	ld	(bc),a
                           1838 ;demo.c:323: vdp_copier(&cmd);
   0936 D5                 1839 	push	de
   0937 CDr00s00           1840 	call	_vdp_copier
   093A F1                 1841 	pop	af
                           1842 ;demo.c:326: install_isr(my_isr);
   093B 21r00s00           1843 	ld	hl,#_my_isr
   093E E5                 1844 	push	hl
   093F CDr00s00           1845 	call	_install_isr
   0942 F1                 1846 	pop	af
                           1847 ;demo.c:328: while (!quit) {
   0943                    1848 00112$:
   0943 AF                 1849 	xor	a,a
   0944 DD B6 FF           1850 	or	a,-1 (ix)
   0947 20 48              1851 	jr	NZ,00114$
                           1852 ;demo.c:329: waitVB();
   0949 76                 1853 		halt 
                           1854 ;demo.c:331: if (vbicount < 192) { 
   094A 3ArD0s28           1855 	ld	a,(#_vbicount+0)
   094D D6 C0              1856 	sub	a,#0xC0
   094F 3ArD1s28           1857 	ld	a,(#_vbicount+1)
   0952 DE 00              1858 	sbc	a,#0x00
   0954 F2r5Cs09           1859 	jp	P,00108$
                           1860 ;demo.c:332: fadein(); 
   0957 CDr94s02           1861 	call	_fadein
   095A 18 22              1862 	jr	00109$
   095C                    1863 00108$:
                           1864 ;demo.c:333: } else if (vbicount >= 192 && vbicount < 500) {
   095C 3ArD0s28           1865 	ld	a,(#_vbicount+0)
   095F D6 C0              1866 	sub	a,#0xC0
   0961 3ArD1s28           1867 	ld	a,(#_vbicount+1)
   0964 DE 00              1868 	sbc	a,#0x00
   0966 FAr7Bs09           1869 	jp	M,00104$
   0969 3ArD0s28           1870 	ld	a,(#_vbicount+0)
   096C D6 F4              1871 	sub	a,#0xF4
   096E 3ArD1s28           1872 	ld	a,(#_vbicount+1)
   0971 DE 01              1873 	sbc	a,#0x01
   0973 F2r7Bs09           1874 	jp	P,00104$
                           1875 ;demo.c:334: do_ymmm();
   0976 CDr60s03           1876 	call	_do_ymmm
   0979 18 03              1877 	jr	00109$
   097B                    1878 00104$:
                           1879 ;demo.c:336: do_blocks();
   097B CDr81s05           1880 	call	_do_blocks
   097E                    1881 00109$:
                           1882 ;demo.c:339: if(space())
   097E 21 08 01           1883 	ld	hl,#0x0108
   0981 E5                 1884 	push	hl
   0982 CDr00s00           1885 	call	_ispressed
   0985 F1                 1886 	pop	af
   0986 4D                 1887 	ld	c,l
   0987 AF                 1888 	xor	a,a
   0988 B5                 1889 	or	a,l
   0989 28 B8              1890 	jr	Z,00112$
                           1891 ;demo.c:340: quit=1;
   098B DD 36 FF 01        1892 	ld	-1 (ix),#0x01
   098F 18 B2              1893 	jr	00112$
   0991                    1894 00114$:
                           1895 ;demo.c:343: waitVB();
   0991 76                 1896 		halt 
                           1897 ;demo.c:344: uninstall_isr();
   0992 CDr00s00           1898 	call	_uninstall_isr
                           1899 ;demo.c:345: PLY_Stop();
   0995 CDr00s00           1900 	call	_PLY_Stop
                           1901 ;demo.c:346: PLY_SendRegisters();
   0998 CDr00s00           1902 	call	_PLY_SendRegisters
                           1903 ;demo.c:348: screen(0);
   099B 3E 00              1904 	ld	a,#0x00
   099D F5                 1905 	push	af
   099E 33                 1906 	inc	sp
   099F CDr00s00           1907 	call	_screen
   09A2 33                 1908 	inc	sp
                           1909 ;demo.c:350: puts("demo exit\r\n\r\n");
   09A3 21r19s0A           1910 	ld	hl,#__str_8
   09A6 E5                 1911 	push	hl
   09A7 CDr00s00           1912 	call	_puts
   09AA F1                 1913 	pop	af
                           1914 ;demo.c:352: exit(0);
   09AB 3E 00              1915 	ld	a,#0x00
   09AD F5                 1916 	push	af
   09AE 33                 1917 	inc	sp
   09AF CDr00s00           1918 	call	_exit
   09B2 33                 1919 	inc	sp
   09B3 DD F9              1920 	ld	sp,ix
   09B5 DD E1              1921 	pop	ix
   09B7 C9                 1922 	ret
   09B8                    1923 _main_end::
   09B8                    1924 __str_0:
   09B8 64 65 6D 6F 20 69  1925 	.ascii "demo init"
        6E 69 74
   09C1 0D                 1926 	.db 0x0D
   09C2 0A                 1927 	.db 0x0A
   09C3 0D                 1928 	.db 0x0D
   09C4 0A                 1929 	.db 0x0A
   09C5 00                 1930 	.db 0x00
   09C6                    1931 __str_1:
   09C6 6D 75 73 69 63 20  1932 	.ascii "music init..."
        69 6E 69 74 2E 2E
        2E
   09D3 00                 1933 	.db 0x00
   09D4                    1934 __str_2:
   09D4 64 6F 6E 65 2E     1935 	.ascii "done."
   09D9 0A                 1936 	.db 0x0A
   09DA 0A                 1937 	.db 0x0A
   09DB 00                 1938 	.db 0x00
   09DC                    1939 __str_3:
   09DC 64 65 6D 6F 20 73  1940 	.ascii "demo start"
        74 61 72 74
   09E6 0D                 1941 	.db 0x0D
   09E7 0A                 1942 	.db 0x0A
   09E8 00                 1943 	.db 0x00
   09E9                    1944 __str_4:
   09E9 53 54 44 42 4C 43  1945 	.ascii "STDBLCK PL5"
        4B 20 50 4C 35
   09F4 00                 1946 	.db 0x00
   09F5                    1947 __str_5:
   09F5 4B 45 54 54 55 31  1948 	.ascii "KETTU16 PL5"
        36 20 50 4C 35
   0A00 00                 1949 	.db 0x00
   0A01                    1950 __str_6:
   0A01 4B 45 54 54 55 31  1951 	.ascii "KETTU16 PCK"
        36 20 50 43 4B
   0A0C 00                 1952 	.db 0x00
   0A0D                    1953 __str_7:
   0A0D 53 54 44 42 4C 43  1954 	.ascii "STDBLCK PCK"
        4B 20 50 43 4B
   0A18 00                 1955 	.db 0x00
   0A19                    1956 __str_8:
   0A19 64 65 6D 6F 20 65  1957 	.ascii "demo exit"
        78 69 74
   0A22 0D                 1958 	.db 0x0D
   0A23 0A                 1959 	.db 0x0A
   0A24 0D                 1960 	.db 0x0D
   0A25 0A                 1961 	.db 0x0A
   0A26 00                 1962 	.db 0x00
                           1963 	.area _CODE
                           1964 	.area _CABS
