                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Mar 22 2009) (Mac OS X i386)
                              4 ; This file was generated Tue Feb 13 03:31:19 2018
                              5 ;--------------------------------------------------------
                              6 	.module demo
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _do_blocks
                             14 	.globl _do_ymmm
                             15 	.globl _fadein
                             16 	.globl _raw_load
                             17 	.globl _pause
                             18 	.globl _pal_load
                             19 	.globl _scratch_clear
                             20 	.globl _ge5_load
                             21 	.globl _my_isr
                             22 	.globl _flof
                             23 	.globl _btab
                             24 	.globl _bty
                             25 	.globl _btx
                             26 	.globl _bsy
                             27 	.globl _bsx
                             28 	.globl _block_init
                             29 	.globl _cc
                             30 	.globl _yo
                             31 	.globl _tick
                             32 	.globl _vbicount
                             33 	.globl _block_palette
                             34 	.globl _cur_palette
                             35 	.globl _scratch
                             36 	.globl _packbuffer
                             37 	.globl _sintab
                             38 	.globl _sintabx
                             39 ;--------------------------------------------------------
                             40 ; special function registers
                             41 ;--------------------------------------------------------
                             42 ;--------------------------------------------------------
                             43 ;  ram data
                             44 ;--------------------------------------------------------
                             45 	.area _DATA
   0000                      46 _sintab::
   0000                      47 	.ds 256
   0100                      48 _packbuffer::
   0100                      49 	.ds 16000
   3F80                      50 _scratch::
   3F80                      51 	.ds 128
   4000                      52 _cur_palette::
   4000                      53 	.ds 32
   4020                      54 _block_palette::
   4020                      55 	.ds 32
   4040                      56 _vbicount::
   4040                      57 	.ds 2
   4042                      58 _tick::
   4042                      59 	.ds 2
   4044                      60 _yo::
   4044                      61 	.ds 1
   4045                      62 _cc::
   4045                      63 	.ds 1
   4046                      64 _flipper:
   4046                      65 	.ds 2
   4048                      66 _ymmmf:
   4048                      67 	.ds 2
   404A                      68 _block_init::
   404A                      69 	.ds 1
   404B                      70 _bsx::
   404B                      71 	.ds 2
   404D                      72 _bsy::
   404D                      73 	.ds 2
   404F                      74 _btx::
   404F                      75 	.ds 2
   4051                      76 _bty::
   4051                      77 	.ds 2
   4053                      78 _btab::
   4053                      79 	.ds 32
   4073                      80 _flof::
   4073                      81 	.ds 2
                             82 ;--------------------------------------------------------
                             83 ; overlayable items in  ram 
                             84 ;--------------------------------------------------------
                             85 	.area _OVERLAY
                             86 ;--------------------------------------------------------
                             87 ; external initialized ram data
                             88 ;--------------------------------------------------------
                             89 ;--------------------------------------------------------
                             90 ; global & static initialisations
                             91 ;--------------------------------------------------------
                             92 	.area _HOME
                             93 	.area _GSINIT
                             94 	.area _GSFINAL
                             95 	.area _GSINIT
                             96 ;types.h:27: signed char sintab[256]={
   0000 21r00s00             97 	ld	hl,#_sintab
   0003 CDr00s00             98 	call	__initrleblock
   0006 3B                   99 	.db	59
   0007 00 03 06 09 0C 0F   100 	.db	0x00, 0x03, 0x06, 0x09, 0x0C, 0x0F, 0x12, 0x15
        12 15
   000F 18 1B 1E 21 24 27   101 	.db	0x18, 0x1B, 0x1E, 0x21, 0x24, 0x27, 0x2A, 0x2D
        2A 2D
   0017 30 33 36 39 3B 3E   102 	.db	0x30, 0x33, 0x36, 0x39, 0x3B, 0x3E, 0x41, 0x43
        41 43
   001F 46 49 4B 4E 50 52   103 	.db	0x46, 0x49, 0x4B, 0x4E, 0x50, 0x52, 0x55, 0x57
        55 57
   0027 59 5B 5E 60 62 64   104 	.db	0x59, 0x5B, 0x5E, 0x60, 0x62, 0x64, 0x66, 0x67
        66 67
   002F 69 6B 6C 6E 70 71   105 	.db	0x69, 0x6B, 0x6C, 0x6E, 0x70, 0x71, 0x72, 0x74
        72 74
   0037 75 76 77 78 79 7A   106 	.db	0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7B
        7B 7B
   003F 7C 7D 7D            107 	.db	0x7C, 0x7D, 0x7D
   0042 FB 7E               108 	.db	#-5,#0x7E
   0044 01                  109 	.db	1
   0045 7F                  110 	.db	0x7F
   0046 FB 7E               111 	.db	#-5,#0x7E
   0048 75                  112 	.db	117
   0049 7D 7D 7C 7B 7B 7A   113 	.db	0x7D, 0x7D, 0x7C, 0x7B, 0x7B, 0x7A, 0x79, 0x78
        79 78
   0051 77 76 75 74 72 71   114 	.db	0x77, 0x76, 0x75, 0x74, 0x72, 0x71, 0x70, 0x6E
        70 6E
   0059 6C 6B 69 67 66 64   115 	.db	0x6C, 0x6B, 0x69, 0x67, 0x66, 0x64, 0x62, 0x60
        62 60
   0061 5E 5B 59 57 55 52   116 	.db	0x5E, 0x5B, 0x59, 0x57, 0x55, 0x52, 0x50, 0x4E
        50 4E
   0069 4B 49 46 43 41 3E   117 	.db	0x4B, 0x49, 0x46, 0x43, 0x41, 0x3E, 0x3B, 0x39
        3B 39
   0071 36 33 30 2D 2A 27   118 	.db	0x36, 0x33, 0x30, 0x2D, 0x2A, 0x27, 0x24, 0x21
        24 21
   0079 1E 1B 18 15 12 0F   119 	.db	0x1E, 0x1B, 0x18, 0x15, 0x12, 0x0F, 0x0C, 0x09
        0C 09
   0081 06 03 00 FD FA F7   120 	.db	0x06, 0x03, 0x00, 0xFD, 0xFA, 0xF7, 0xF4, 0xF1
        F4 F1
   0089 EE EB E8 E5 E2 DF   121 	.db	0xEE, 0xEB, 0xE8, 0xE5, 0xE2, 0xDF, 0xDC, 0xD9
        DC D9
   0091 D6 D3 D0 CD CA C7   122 	.db	0xD6, 0xD3, 0xD0, 0xCD, 0xCA, 0xC7, 0xC5, 0xC2
        C5 C2
   0099 BF BD BA B7 B5 B2   123 	.db	0xBF, 0xBD, 0xBA, 0xB7, 0xB5, 0xB2, 0xB0, 0xAE
        B0 AE
   00A1 AB A9 A7 A5 A2 A0   124 	.db	0xAB, 0xA9, 0xA7, 0xA5, 0xA2, 0xA0, 0x9E, 0x9C
        9E 9C
   00A9 9A 99 97 95 94 92   125 	.db	0x9A, 0x99, 0x97, 0x95, 0x94, 0x92, 0x90, 0x8F
        90 8F
   00B1 8E 8C 8B 8A 89 88   126 	.db	0x8E, 0x8C, 0x8B, 0x8A, 0x89, 0x88, 0x87, 0x86
        87 86
   00B9 85 85 84 83 83      127 	.db	0x85, 0x85, 0x84, 0x83, 0x83
   00BE FB 82               128 	.db	#-5,#0x82
   00C0 01                  129 	.db	1
   00C1 81                  130 	.db	0x81
   00C2 FB 82               131 	.db	#-5,#0x82
   00C4 3A                  132 	.db	58
   00C5 83 83 84 85 85 86   133 	.db	0x83, 0x83, 0x84, 0x85, 0x85, 0x86, 0x87, 0x88
        87 88
   00CD 89 8A 8B 8C 8E 8F   134 	.db	0x89, 0x8A, 0x8B, 0x8C, 0x8E, 0x8F, 0x90, 0x92
        90 92
   00D5 94 95 97 99 9A 9C   135 	.db	0x94, 0x95, 0x97, 0x99, 0x9A, 0x9C, 0x9E, 0xA0
        9E A0
   00DD A2 A5 A7 A9 AB AE   136 	.db	0xA2, 0xA5, 0xA7, 0xA9, 0xAB, 0xAE, 0xB0, 0xB2
        B0 B2
   00E5 B5 B7 BA BD BF C2   137 	.db	0xB5, 0xB7, 0xBA, 0xBD, 0xBF, 0xC2, 0xC5, 0xC7
        C5 C7
   00ED CA CD D0 D3 D6 D9   138 	.db	0xCA, 0xCD, 0xD0, 0xD3, 0xD6, 0xD9, 0xDC, 0xDF
        DC DF
   00F5 E2 E5 E8 EB EE F1   139 	.db	0xE2, 0xE5, 0xE8, 0xEB, 0xEE, 0xF1, 0xF4, 0xF7
        F4 F7
   00FD FA FD               140 	.db	0xFA, 0xFD
   00FF 00                  141 	.db	0
                            142 ;demo.c:36: uint8_t packbuffer[16000] = {0};
   0100 21r00s01            143 	ld	hl,#_packbuffer
   0103 CDr00s00            144 	call	__initrleblock
   0106 81 00               145 	.db	#-127,#0x00
   0108 81 00               146 	.db	#-127,#0x00
   010A 81 00               147 	.db	#-127,#0x00
   010C 81 00               148 	.db	#-127,#0x00
   010E 81 00               149 	.db	#-127,#0x00
   0110 81 00               150 	.db	#-127,#0x00
   0112 81 00               151 	.db	#-127,#0x00
   0114 81 00               152 	.db	#-127,#0x00
   0116 81 00               153 	.db	#-127,#0x00
   0118 81 00               154 	.db	#-127,#0x00
   011A 81 00               155 	.db	#-127,#0x00
   011C 81 00               156 	.db	#-127,#0x00
   011E 81 00               157 	.db	#-127,#0x00
   0120 81 00               158 	.db	#-127,#0x00
   0122 81 00               159 	.db	#-127,#0x00
   0124 81 00               160 	.db	#-127,#0x00
   0126 81 00               161 	.db	#-127,#0x00
   0128 81 00               162 	.db	#-127,#0x00
   012A 81 00               163 	.db	#-127,#0x00
   012C 81 00               164 	.db	#-127,#0x00
   012E 81 00               165 	.db	#-127,#0x00
   0130 81 00               166 	.db	#-127,#0x00
   0132 81 00               167 	.db	#-127,#0x00
   0134 81 00               168 	.db	#-127,#0x00
   0136 81 00               169 	.db	#-127,#0x00
   0138 81 00               170 	.db	#-127,#0x00
   013A 81 00               171 	.db	#-127,#0x00
   013C 81 00               172 	.db	#-127,#0x00
   013E 81 00               173 	.db	#-127,#0x00
   0140 81 00               174 	.db	#-127,#0x00
   0142 81 00               175 	.db	#-127,#0x00
   0144 81 00               176 	.db	#-127,#0x00
   0146 81 00               177 	.db	#-127,#0x00
   0148 81 00               178 	.db	#-127,#0x00
   014A 81 00               179 	.db	#-127,#0x00
   014C 81 00               180 	.db	#-127,#0x00
   014E 81 00               181 	.db	#-127,#0x00
   0150 81 00               182 	.db	#-127,#0x00
   0152 81 00               183 	.db	#-127,#0x00
   0154 81 00               184 	.db	#-127,#0x00
   0156 81 00               185 	.db	#-127,#0x00
   0158 81 00               186 	.db	#-127,#0x00
   015A 81 00               187 	.db	#-127,#0x00
   015C 81 00               188 	.db	#-127,#0x00
   015E 81 00               189 	.db	#-127,#0x00
   0160 81 00               190 	.db	#-127,#0x00
   0162 81 00               191 	.db	#-127,#0x00
   0164 81 00               192 	.db	#-127,#0x00
   0166 81 00               193 	.db	#-127,#0x00
   0168 81 00               194 	.db	#-127,#0x00
   016A 81 00               195 	.db	#-127,#0x00
   016C 81 00               196 	.db	#-127,#0x00
   016E 81 00               197 	.db	#-127,#0x00
   0170 81 00               198 	.db	#-127,#0x00
   0172 81 00               199 	.db	#-127,#0x00
   0174 81 00               200 	.db	#-127,#0x00
   0176 81 00               201 	.db	#-127,#0x00
   0178 81 00               202 	.db	#-127,#0x00
   017A 81 00               203 	.db	#-127,#0x00
   017C 81 00               204 	.db	#-127,#0x00
   017E 81 00               205 	.db	#-127,#0x00
   0180 81 00               206 	.db	#-127,#0x00
   0182 81 00               207 	.db	#-127,#0x00
   0184 81 00               208 	.db	#-127,#0x00
   0186 81 00               209 	.db	#-127,#0x00
   0188 81 00               210 	.db	#-127,#0x00
   018A 81 00               211 	.db	#-127,#0x00
   018C 81 00               212 	.db	#-127,#0x00
   018E 81 00               213 	.db	#-127,#0x00
   0190 81 00               214 	.db	#-127,#0x00
   0192 81 00               215 	.db	#-127,#0x00
   0194 81 00               216 	.db	#-127,#0x00
   0196 81 00               217 	.db	#-127,#0x00
   0198 81 00               218 	.db	#-127,#0x00
   019A 81 00               219 	.db	#-127,#0x00
   019C 81 00               220 	.db	#-127,#0x00
   019E 81 00               221 	.db	#-127,#0x00
   01A0 81 00               222 	.db	#-127,#0x00
   01A2 81 00               223 	.db	#-127,#0x00
   01A4 81 00               224 	.db	#-127,#0x00
   01A6 81 00               225 	.db	#-127,#0x00
   01A8 81 00               226 	.db	#-127,#0x00
   01AA 81 00               227 	.db	#-127,#0x00
   01AC 81 00               228 	.db	#-127,#0x00
   01AE 81 00               229 	.db	#-127,#0x00
   01B0 81 00               230 	.db	#-127,#0x00
   01B2 81 00               231 	.db	#-127,#0x00
   01B4 81 00               232 	.db	#-127,#0x00
   01B6 81 00               233 	.db	#-127,#0x00
   01B8 81 00               234 	.db	#-127,#0x00
   01BA 81 00               235 	.db	#-127,#0x00
   01BC 81 00               236 	.db	#-127,#0x00
   01BE 81 00               237 	.db	#-127,#0x00
   01C0 81 00               238 	.db	#-127,#0x00
   01C2 81 00               239 	.db	#-127,#0x00
   01C4 81 00               240 	.db	#-127,#0x00
   01C6 81 00               241 	.db	#-127,#0x00
   01C8 81 00               242 	.db	#-127,#0x00
   01CA 81 00               243 	.db	#-127,#0x00
   01CC 81 00               244 	.db	#-127,#0x00
   01CE 81 00               245 	.db	#-127,#0x00
   01D0 81 00               246 	.db	#-127,#0x00
   01D2 81 00               247 	.db	#-127,#0x00
   01D4 81 00               248 	.db	#-127,#0x00
   01D6 81 00               249 	.db	#-127,#0x00
   01D8 81 00               250 	.db	#-127,#0x00
   01DA 81 00               251 	.db	#-127,#0x00
   01DC 81 00               252 	.db	#-127,#0x00
   01DE 81 00               253 	.db	#-127,#0x00
   01E0 81 00               254 	.db	#-127,#0x00
   01E2 81 00               255 	.db	#-127,#0x00
   01E4 81 00               256 	.db	#-127,#0x00
   01E6 81 00               257 	.db	#-127,#0x00
   01E8 81 00               258 	.db	#-127,#0x00
   01EA 81 00               259 	.db	#-127,#0x00
   01EC 81 00               260 	.db	#-127,#0x00
   01EE 81 00               261 	.db	#-127,#0x00
   01F0 81 00               262 	.db	#-127,#0x00
   01F2 81 00               263 	.db	#-127,#0x00
   01F4 81 00               264 	.db	#-127,#0x00
   01F6 81 00               265 	.db	#-127,#0x00
   01F8 81 00               266 	.db	#-127,#0x00
   01FA 81 00               267 	.db	#-127,#0x00
   01FC 81 00               268 	.db	#-127,#0x00
   01FE 81 00               269 	.db	#-127,#0x00
   0200 83 00               270 	.db	#-125,#0x00
   0202 00                  271 	.db	0
                            272 ;demo.c:42: volatile int vbicount=0;
   0203 FD 21r40s40         273 	ld	iy,#_vbicount
   0207 FD 36 00 00         274 	ld	0 (iy),#0x00
   020B FD 21r40s40         275 	ld	iy,#_vbicount
   020F FD 36 01 00         276 	ld	1 (iy),#0x00
                            277 ;demo.c:43: volatile int tick=0;
   0213 FD 21r42s40         278 	ld	iy,#_tick
   0217 FD 36 00 00         279 	ld	0 (iy),#0x00
   021B FD 21r42s40         280 	ld	iy,#_tick
   021F FD 36 01 00         281 	ld	1 (iy),#0x00
                            282 ;demo.c:186: uint8_t yo = 0;
   0223 FD 21r44s40         283 	ld	iy,#_yo
   0227 FD 36 00 00         284 	ld	0 (iy),#0x00
                            285 ;demo.c:187: uint8_t cc = 0;
   022B FD 21r45s40         286 	ld	iy,#_cc
   022F FD 36 00 00         287 	ld	0 (iy),#0x00
                            288 ;demo.c:188: static int flipper = 0;
   0233 FD 21r46s40         289 	ld	iy,#_flipper
   0237 FD 36 00 00         290 	ld	0 (iy),#0x00
   023B FD 21r46s40         291 	ld	iy,#_flipper
   023F FD 36 01 00         292 	ld	1 (iy),#0x00
                            293 ;demo.c:189: static int ymmmf = 0;
   0243 FD 21r48s40         294 	ld	iy,#_ymmmf
   0247 FD 36 00 00         295 	ld	0 (iy),#0x00
   024B FD 21r48s40         296 	ld	iy,#_ymmmf
   024F FD 36 01 00         297 	ld	1 (iy),#0x00
                            298 ;demo.c:221: char block_init = 0;
   0253 FD 21r4As40         299 	ld	iy,#_block_init
   0257 FD 36 00 00         300 	ld	0 (iy),#0x00
                            301 ;demo.c:223: int bsx = 0;
   025B FD 21r4Bs40         302 	ld	iy,#_bsx
   025F FD 36 00 00         303 	ld	0 (iy),#0x00
   0263 FD 21r4Bs40         304 	ld	iy,#_bsx
   0267 FD 36 01 00         305 	ld	1 (iy),#0x00
                            306 ;demo.c:224: int bsy = 0;
   026B FD 21r4Ds40         307 	ld	iy,#_bsy
   026F FD 36 00 00         308 	ld	0 (iy),#0x00
   0273 FD 21r4Ds40         309 	ld	iy,#_bsy
   0277 FD 36 01 00         310 	ld	1 (iy),#0x00
                            311 ;demo.c:225: int btx = 0;
   027B FD 21r4Fs40         312 	ld	iy,#_btx
   027F FD 36 00 00         313 	ld	0 (iy),#0x00
   0283 FD 21r4Fs40         314 	ld	iy,#_btx
   0287 FD 36 01 00         315 	ld	1 (iy),#0x00
                            316 ;demo.c:226: int bty = 0;
   028B FD 21r51s40         317 	ld	iy,#_bty
   028F FD 36 00 00         318 	ld	0 (iy),#0x00
   0293 FD 21r51s40         319 	ld	iy,#_bty
   0297 FD 36 01 00         320 	ld	1 (iy),#0x00
                            321 ;demo.c:228: int btab[16] = {0};
   029B 21r53s40            322 	ld	hl,#_btab
   029E CDr00s00            323 	call	__initrleblock
   02A1 E0 00               324 	.db	#-32,#0x00
   02A3 00                  325 	.db	0
                            326 ;demo.c:230: int flof = 0;
   02A4 FD 21r73s40         327 	ld	iy,#_flof
   02A8 FD 36 00 00         328 	ld	0 (iy),#0x00
   02AC FD 21r73s40         329 	ld	iy,#_flof
   02B0 FD 36 01 00         330 	ld	1 (iy),#0x00
                            331 ;--------------------------------------------------------
                            332 ; Home
                            333 ;--------------------------------------------------------
                            334 	.area _HOME
                            335 	.area _HOME
                            336 ;--------------------------------------------------------
                            337 ; code
                            338 ;--------------------------------------------------------
                            339 	.area _CODE
                            340 ;demo.c:49: void my_isr(void) interrupt
                            341 ;	---------------------------------
                            342 ; Function my_isr
                            343 ; ---------------------------------
   0000                     344 _my_isr_start::
   0000                     345 _my_isr:
   0000 F5                  346 	push	af
   0001 C5                  347 	push	bc
   0002 D5                  348 	push	de
   0003 E5                  349 	push	hl
   0004 FD E5               350 	push	iy
                            351 ;demo.c:51: DI;
   0006 F3                  352 		di 
                            353 ;demo.c:52: READ_VDP_STATUS;
   0007 DB 99               354 		in a,(#0x99) 
                            355 ;demo.c:54: PLY_Play();
   0009 CDr00s00            356 	call	_PLY_Play
                            357 ;demo.c:55: PLY_SendRegisters();
   000C CDr00s00            358 	call	_PLY_SendRegisters
                            359 ;demo.c:57: vbicount++;
   000F FD 21r40s40         360 	ld	iy,#_vbicount
   0013 FD 34 00            361 	inc	0 (iy)
   0016 20 07               362 	jr	NZ,00103$
   0018 FD 21r40s40         363 	ld	iy,#_vbicount
   001C FD 34 01            364 	inc	1 (iy)
   001F                     365 00103$:
                            366 ;demo.c:58: tick++;
   001F FD 21r42s40         367 	ld	iy,#_tick
   0023 FD 34 00            368 	inc	0 (iy)
   0026 20 07               369 	jr	NZ,00104$
   0028 FD 21r42s40         370 	ld	iy,#_tick
   002C FD 34 01            371 	inc	1 (iy)
   002F                     372 00104$:
                            373 ;demo.c:60: EI;
   002F FB                  374 		ei 
   0030 FD E1               375 	pop	iy
   0032 E1                  376 	pop	hl
   0033 D1                  377 	pop	de
   0034 C1                  378 	pop	bc
   0035 F1                  379 	pop	af
   0036 ED 4D               380 	reti
   0038                     381 _my_isr_end::
   0038                     382 _sintabx:
   0038 78 00               383 	.dw #0x0078
   003A 7A 00               384 	.dw #0x007A
   003C 7D 00               385 	.dw #0x007D
   003E 80 00               386 	.dw #0x0080
   0040 83 00               387 	.dw #0x0083
   0042 86 00               388 	.dw #0x0086
   0044 89 00               389 	.dw #0x0089
   0046 8C 00               390 	.dw #0x008C
   0048 8F 00               391 	.dw #0x008F
   004A 92 00               392 	.dw #0x0092
   004C 95 00               393 	.dw #0x0095
   004E 98 00               394 	.dw #0x0098
   0050 9A 00               395 	.dw #0x009A
   0052 9D 00               396 	.dw #0x009D
   0054 A0 00               397 	.dw #0x00A0
   0056 A3 00               398 	.dw #0x00A3
   0058 A5 00               399 	.dw #0x00A5
   005A A8 00               400 	.dw #0x00A8
   005C AB 00               401 	.dw #0x00AB
   005E AD 00               402 	.dw #0x00AD
   0060 B0 00               403 	.dw #0x00B0
   0062 B3 00               404 	.dw #0x00B3
   0064 B5 00               405 	.dw #0x00B5
   0066 B8 00               406 	.dw #0x00B8
   0068 BA 00               407 	.dw #0x00BA
   006A BD 00               408 	.dw #0x00BD
   006C BF 00               409 	.dw #0x00BF
   006E C1 00               410 	.dw #0x00C1
   0070 C4 00               411 	.dw #0x00C4
   0072 C6 00               412 	.dw #0x00C6
   0074 C8 00               413 	.dw #0x00C8
   0076 CA 00               414 	.dw #0x00CA
   0078 CC 00               415 	.dw #0x00CC
   007A CE 00               416 	.dw #0x00CE
   007C D0 00               417 	.dw #0x00D0
   007E D2 00               418 	.dw #0x00D2
   0080 D4 00               419 	.dw #0x00D4
   0082 D6 00               420 	.dw #0x00D6
   0084 D8 00               421 	.dw #0x00D8
   0086 DA 00               422 	.dw #0x00DA
   0088 DB 00               423 	.dw #0x00DB
   008A DD 00               424 	.dw #0x00DD
   008C DE 00               425 	.dw #0x00DE
   008E E0 00               426 	.dw #0x00E0
   0090 E1 00               427 	.dw #0x00E1
   0092 E3 00               428 	.dw #0x00E3
   0094 E4 00               429 	.dw #0x00E4
   0096 E5 00               430 	.dw #0x00E5
   0098 E6 00               431 	.dw #0x00E6
   009A E7 00               432 	.dw #0x00E7
   009C E8 00               433 	.dw #0x00E8
   009E E9 00               434 	.dw #0x00E9
   00A0 EA 00               435 	.dw #0x00EA
   00A2 EB 00               436 	.dw #0x00EB
   00A4 EC 00               437 	.dw #0x00EC
   00A6 ED 00               438 	.dw #0x00ED
   00A8 ED 00               439 	.dw #0x00ED
   00AA EE 00               440 	.dw #0x00EE
   00AC EE 00               441 	.dw #0x00EE
   00AE EF 00               442 	.dw #0x00EF
   00B0 EF 00               443 	.dw #0x00EF
   00B2 EF 00               444 	.dw #0x00EF
   00B4 EF 00               445 	.dw #0x00EF
   00B6 EF 00               446 	.dw #0x00EF
   00B8 F0 00               447 	.dw #0x00F0
   00BA EF 00               448 	.dw #0x00EF
   00BC EF 00               449 	.dw #0x00EF
   00BE EF 00               450 	.dw #0x00EF
   00C0 EF 00               451 	.dw #0x00EF
   00C2 EF 00               452 	.dw #0x00EF
   00C4 EE 00               453 	.dw #0x00EE
   00C6 EE 00               454 	.dw #0x00EE
   00C8 ED 00               455 	.dw #0x00ED
   00CA ED 00               456 	.dw #0x00ED
   00CC EC 00               457 	.dw #0x00EC
   00CE EB 00               458 	.dw #0x00EB
   00D0 EA 00               459 	.dw #0x00EA
   00D2 E9 00               460 	.dw #0x00E9
   00D4 E8 00               461 	.dw #0x00E8
   00D6 E7 00               462 	.dw #0x00E7
   00D8 E6 00               463 	.dw #0x00E6
   00DA E5 00               464 	.dw #0x00E5
   00DC E4 00               465 	.dw #0x00E4
   00DE E3 00               466 	.dw #0x00E3
   00E0 E1 00               467 	.dw #0x00E1
   00E2 E0 00               468 	.dw #0x00E0
   00E4 DE 00               469 	.dw #0x00DE
   00E6 DD 00               470 	.dw #0x00DD
   00E8 DB 00               471 	.dw #0x00DB
   00EA DA 00               472 	.dw #0x00DA
   00EC D8 00               473 	.dw #0x00D8
   00EE D6 00               474 	.dw #0x00D6
   00F0 D4 00               475 	.dw #0x00D4
   00F2 D2 00               476 	.dw #0x00D2
   00F4 D0 00               477 	.dw #0x00D0
   00F6 CE 00               478 	.dw #0x00CE
   00F8 CC 00               479 	.dw #0x00CC
   00FA CA 00               480 	.dw #0x00CA
   00FC C8 00               481 	.dw #0x00C8
   00FE C6 00               482 	.dw #0x00C6
   0100 C4 00               483 	.dw #0x00C4
   0102 C1 00               484 	.dw #0x00C1
   0104 BF 00               485 	.dw #0x00BF
   0106 BD 00               486 	.dw #0x00BD
   0108 BA 00               487 	.dw #0x00BA
   010A B8 00               488 	.dw #0x00B8
   010C B5 00               489 	.dw #0x00B5
   010E B3 00               490 	.dw #0x00B3
   0110 B0 00               491 	.dw #0x00B0
   0112 AD 00               492 	.dw #0x00AD
   0114 AB 00               493 	.dw #0x00AB
   0116 A8 00               494 	.dw #0x00A8
   0118 A5 00               495 	.dw #0x00A5
   011A A3 00               496 	.dw #0x00A3
   011C A0 00               497 	.dw #0x00A0
   011E 9D 00               498 	.dw #0x009D
   0120 9A 00               499 	.dw #0x009A
   0122 98 00               500 	.dw #0x0098
   0124 95 00               501 	.dw #0x0095
   0126 92 00               502 	.dw #0x0092
   0128 8F 00               503 	.dw #0x008F
   012A 8C 00               504 	.dw #0x008C
   012C 89 00               505 	.dw #0x0089
   012E 86 00               506 	.dw #0x0086
   0130 83 00               507 	.dw #0x0083
   0132 80 00               508 	.dw #0x0080
   0134 7D 00               509 	.dw #0x007D
   0136 7A 00               510 	.dw #0x007A
   0138 78 00               511 	.dw #0x0078
   013A 75 00               512 	.dw #0x0075
   013C 72 00               513 	.dw #0x0072
   013E 6F 00               514 	.dw #0x006F
   0140 6C 00               515 	.dw #0x006C
   0142 69 00               516 	.dw #0x0069
   0144 66 00               517 	.dw #0x0066
   0146 63 00               518 	.dw #0x0063
   0148 60 00               519 	.dw #0x0060
   014A 5D 00               520 	.dw #0x005D
   014C 5A 00               521 	.dw #0x005A
   014E 57 00               522 	.dw #0x0057
   0150 55 00               523 	.dw #0x0055
   0152 52 00               524 	.dw #0x0052
   0154 4F 00               525 	.dw #0x004F
   0156 4C 00               526 	.dw #0x004C
   0158 4A 00               527 	.dw #0x004A
   015A 47 00               528 	.dw #0x0047
   015C 44 00               529 	.dw #0x0044
   015E 42 00               530 	.dw #0x0042
   0160 3F 00               531 	.dw #0x003F
   0162 3C 00               532 	.dw #0x003C
   0164 3A 00               533 	.dw #0x003A
   0166 37 00               534 	.dw #0x0037
   0168 35 00               535 	.dw #0x0035
   016A 32 00               536 	.dw #0x0032
   016C 30 00               537 	.dw #0x0030
   016E 2E 00               538 	.dw #0x002E
   0170 2B 00               539 	.dw #0x002B
   0172 29 00               540 	.dw #0x0029
   0174 27 00               541 	.dw #0x0027
   0176 25 00               542 	.dw #0x0025
   0178 23 00               543 	.dw #0x0023
   017A 21 00               544 	.dw #0x0021
   017C 1F 00               545 	.dw #0x001F
   017E 1D 00               546 	.dw #0x001D
   0180 1B 00               547 	.dw #0x001B
   0182 19 00               548 	.dw #0x0019
   0184 17 00               549 	.dw #0x0017
   0186 15 00               550 	.dw #0x0015
   0188 14 00               551 	.dw #0x0014
   018A 12 00               552 	.dw #0x0012
   018C 11 00               553 	.dw #0x0011
   018E 0F 00               554 	.dw #0x000F
   0190 0E 00               555 	.dw #0x000E
   0192 0C 00               556 	.dw #0x000C
   0194 0B 00               557 	.dw #0x000B
   0196 0A 00               558 	.dw #0x000A
   0198 09 00               559 	.dw #0x0009
   019A 08 00               560 	.dw #0x0008
   019C 07 00               561 	.dw #0x0007
   019E 06 00               562 	.dw #0x0006
   01A0 05 00               563 	.dw #0x0005
   01A2 04 00               564 	.dw #0x0004
   01A4 03 00               565 	.dw #0x0003
   01A6 02 00               566 	.dw #0x0002
   01A8 02 00               567 	.dw #0x0002
   01AA 01 00               568 	.dw #0x0001
   01AC 01 00               569 	.dw #0x0001
   01AE 00 00               570 	.dw #0x0000
   01B0 00 00               571 	.dw #0x0000
   01B2 00 00               572 	.dw #0x0000
   01B4 00 00               573 	.dw #0x0000
   01B6 00 00               574 	.dw #0x0000
   01B8 00 00               575 	.dw #0x0000
   01BA 00 00               576 	.dw #0x0000
   01BC 00 00               577 	.dw #0x0000
   01BE 00 00               578 	.dw #0x0000
   01C0 00 00               579 	.dw #0x0000
   01C2 00 00               580 	.dw #0x0000
   01C4 01 00               581 	.dw #0x0001
   01C6 01 00               582 	.dw #0x0001
   01C8 02 00               583 	.dw #0x0002
   01CA 02 00               584 	.dw #0x0002
   01CC 03 00               585 	.dw #0x0003
   01CE 04 00               586 	.dw #0x0004
   01D0 05 00               587 	.dw #0x0005
   01D2 06 00               588 	.dw #0x0006
   01D4 07 00               589 	.dw #0x0007
   01D6 08 00               590 	.dw #0x0008
   01D8 09 00               591 	.dw #0x0009
   01DA 0A 00               592 	.dw #0x000A
   01DC 0B 00               593 	.dw #0x000B
   01DE 0C 00               594 	.dw #0x000C
   01E0 0E 00               595 	.dw #0x000E
   01E2 0F 00               596 	.dw #0x000F
   01E4 11 00               597 	.dw #0x0011
   01E6 12 00               598 	.dw #0x0012
   01E8 14 00               599 	.dw #0x0014
   01EA 15 00               600 	.dw #0x0015
   01EC 17 00               601 	.dw #0x0017
   01EE 19 00               602 	.dw #0x0019
   01F0 1B 00               603 	.dw #0x001B
   01F2 1D 00               604 	.dw #0x001D
   01F4 1F 00               605 	.dw #0x001F
   01F6 21 00               606 	.dw #0x0021
   01F8 23 00               607 	.dw #0x0023
   01FA 25 00               608 	.dw #0x0025
   01FC 27 00               609 	.dw #0x0027
   01FE 29 00               610 	.dw #0x0029
   0200 2B 00               611 	.dw #0x002B
   0202 2E 00               612 	.dw #0x002E
   0204 30 00               613 	.dw #0x0030
   0206 32 00               614 	.dw #0x0032
   0208 35 00               615 	.dw #0x0035
   020A 37 00               616 	.dw #0x0037
   020C 3A 00               617 	.dw #0x003A
   020E 3C 00               618 	.dw #0x003C
   0210 3F 00               619 	.dw #0x003F
   0212 42 00               620 	.dw #0x0042
   0214 44 00               621 	.dw #0x0044
   0216 47 00               622 	.dw #0x0047
   0218 4A 00               623 	.dw #0x004A
   021A 4C 00               624 	.dw #0x004C
   021C 4F 00               625 	.dw #0x004F
   021E 52 00               626 	.dw #0x0052
   0220 55 00               627 	.dw #0x0055
   0222 57 00               628 	.dw #0x0057
   0224 5A 00               629 	.dw #0x005A
   0226 5D 00               630 	.dw #0x005D
   0228 60 00               631 	.dw #0x0060
   022A 63 00               632 	.dw #0x0063
   022C 66 00               633 	.dw #0x0066
   022E 69 00               634 	.dw #0x0069
   0230 6C 00               635 	.dw #0x006C
   0232 6F 00               636 	.dw #0x006F
   0234 72 00               637 	.dw #0x0072
   0236 75 00               638 	.dw #0x0075
                            639 ;demo.c:67: uint8_t ge5_load(char *file_name, uint8_t vramh, uint16_t vraml) {
                            640 ;	---------------------------------
                            641 ; Function ge5_load
                            642 ; ---------------------------------
   0238                     643 _ge5_load_start::
   0238                     644 _ge5_load:
   0238 DD E5               645 	push	ix
   023A DD 21 00 00         646 	ld	ix,#0
   023E DD 39               647 	add	ix,sp
   0240 21 D2 FF            648 	ld	hl,#-46
   0243 39                  649 	add	hl,sp
   0244 F9                  650 	ld	sp,hl
                            651 ;demo.c:71: memset((uint8_t *) &f, 0, sizeof(fcb));
   0245 21 00 00            652 	ld	hl,#0x0000
   0248 39                  653 	add	hl,sp
   0249 4D                  654 	ld	c,l
   024A 44                  655 	ld	b,h
   024B 21 2E 00            656 	ld	hl,#0x002E
   024E E5                  657 	push	hl
   024F 3E 00               658 	ld	a,#0x00
   0251 F5                  659 	push	af
   0252 33                  660 	inc	sp
   0253 C5                  661 	push	bc
   0254 CDr00s00            662 	call	_memset
   0257 F1                  663 	pop	af
   0258 F1                  664 	pop	af
   0259 33                  665 	inc	sp
                            666 ;demo.c:73: f.record_size = 128;
   025A 21 00 00            667 	ld	hl,#0x0000
   025D 39                  668 	add	hl,sp
   025E 4D                  669 	ld	c,l
   025F 44                  670 	ld	b,h
   0260 21 0F 00            671 	ld	hl,#0x000F
   0263 09                  672 	add	hl,bc
   0264 EB                  673 	ex	de,hl
   0265 3E 80               674 	ld	a,#0x80
   0267 12                  675 	ld	(de),a
                            676 ;demo.c:74: f.drive = 0;
   0268 3E 00               677 	ld	a,#0x00
   026A 02                  678 	ld	(bc),a
                            679 ;demo.c:76: memcpy(f.name, file_name, 11);
   026B DD 5E 04            680 	ld	e,4 (ix)
   026E DD 56 05            681 	ld	d,5 (ix)
   0271 03                  682 	inc	bc
   0272 21 0B 00            683 	ld	hl,#0x000B
   0275 E5                  684 	push	hl
   0276 D5                  685 	push	de
   0277 C5                  686 	push	bc
   0278 CDr00s00            687 	call	_memcpy
   027B F1                  688 	pop	af
   027C F1                  689 	pop	af
   027D F1                  690 	pop	af
                            691 ;demo.c:78: if (open(&f) != 0) return 0;
   027E 21 00 00            692 	ld	hl,#0x0000
   0281 39                  693 	add	hl,sp
   0282 E5                  694 	push	hl
   0283 CDr00s00            695 	call	_open
   0286 F1                  696 	pop	af
   0287 AF                  697 	xor	a,a
   0288 B5                  698 	or	a,l
   0289 28 05               699 	jr	Z,00102$
   028B 2E 00               700 	ld	l,#0x00
   028D C3r04s03            701 	jp	00114$
   0290                     702 00102$:
                            703 ;demo.c:79: vdp_set_write_address(vramh, vraml);
   0290 DD 6E 07            704 	ld	l,7 (ix)
   0293 DD 66 08            705 	ld	h,8 (ix)
   0296 E5                  706 	push	hl
   0297 DD 7E 06            707 	ld	a,6 (ix)
   029A F5                  708 	push	af
   029B 33                  709 	inc	sp
   029C CDr00s00            710 	call	_vdp_set_write_address
   029F F1                  711 	pop	af
   02A0 33                  712 	inc	sp
                            713 ;demo.c:81: for (i = 0; i < 213; i++) {
   02A1 0E 00               714 	ld	c,#0x00
   02A3                     715 00110$:
   02A3 79                  716 	ld	a,c
   02A4 D6 D5               717 	sub	a,#0xD5
   02A6 D2rF9s02            718 	jp	NC,00113$
                            719 ;demo.c:82: if (block_set_data_ptr(scratch) != 0) return 0;
   02A9 C5                  720 	push	bc
   02AA 21r80s3F            721 	ld	hl,#_scratch
   02AD E5                  722 	push	hl
   02AE CDr00s00            723 	call	_block_set_data_ptr
   02B1 F1                  724 	pop	af
   02B2 7D                  725 	ld	a,l
   02B3 C1                  726 	pop	bc
   02B4 47                  727 	ld	b,a
   02B5 B7                  728 	or	a,a
   02B6 28 05               729 	jr	Z,00104$
   02B8 2E 00               730 	ld	l,#0x00
   02BA C3r04s03            731 	jp	00114$
   02BD                     732 00104$:
                            733 ;demo.c:83: if (block_read(&f) != 0) return 0;
   02BD 21 00 00            734 	ld	hl,#0x0000
   02C0 39                  735 	add	hl,sp
   02C1 C5                  736 	push	bc
   02C2 E5                  737 	push	hl
   02C3 CDr00s00            738 	call	_block_read
   02C6 F1                  739 	pop	af
   02C7 7D                  740 	ld	a,l
   02C8 C1                  741 	pop	bc
   02C9 47                  742 	ld	b,a
   02CA B7                  743 	or	a,a
   02CB 28 04               744 	jr	Z,00106$
   02CD 2E 00               745 	ld	l,#0x00
   02CF 18 33               746 	jr	00114$
   02D1                     747 00106$:
                            748 ;demo.c:85: if (i == 0) vdp_load_screen(scratch + 7, 121);   // to skip GE5 header
   02D1 AF                  749 	xor	a,a
   02D2 B1                  750 	or	a,c
   02D3 20 11               751 	jr	NZ,00108$
   02D5 11r87s3F            752 	ld	de,#_scratch + 7
   02D8 C5                  753 	push	bc
   02D9 3E 79               754 	ld	a,#0x79
   02DB F5                  755 	push	af
   02DC 33                  756 	inc	sp
   02DD D5                  757 	push	de
   02DE CDr00s00            758 	call	_vdp_load_screen
   02E1 F1                  759 	pop	af
   02E2 33                  760 	inc	sp
   02E3 C1                  761 	pop	bc
   02E4 18 0F               762 	jr	00112$
   02E6                     763 00108$:
                            764 ;demo.c:86: else vdp_load_screen(scratch, 128);
   02E6 C5                  765 	push	bc
   02E7 3E 80               766 	ld	a,#0x80
   02E9 F5                  767 	push	af
   02EA 33                  768 	inc	sp
   02EB 21r80s3F            769 	ld	hl,#_scratch
   02EE E5                  770 	push	hl
   02EF CDr00s00            771 	call	_vdp_load_screen
   02F2 F1                  772 	pop	af
   02F3 33                  773 	inc	sp
   02F4 C1                  774 	pop	bc
   02F5                     775 00112$:
                            776 ;demo.c:81: for (i = 0; i < 213; i++) {
   02F5 0C                  777 	inc	c
   02F6 C3rA3s02            778 	jp	00110$
   02F9                     779 00113$:
                            780 ;demo.c:89: close(&f);
   02F9 21 00 00            781 	ld	hl,#0x0000
   02FC 39                  782 	add	hl,sp
   02FD E5                  783 	push	hl
   02FE CDr00s00            784 	call	_close
   0301 F1                  785 	pop	af
                            786 ;demo.c:91: return 1;
   0302 2E 01               787 	ld	l,#0x01
   0304                     788 00114$:
   0304 DD F9               789 	ld	sp,ix
   0306 DD E1               790 	pop	ix
   0308 C9                  791 	ret
   0309                     792 _ge5_load_end::
                            793 ;demo.c:94: void scratch_clear() {
                            794 ;	---------------------------------
                            795 ; Function scratch_clear
                            796 ; ---------------------------------
   0309                     797 _scratch_clear_start::
   0309                     798 _scratch_clear:
                            799 ;demo.c:95: memset((uint8_t *) &scratch, 0, 128);
   0309 21 80 00            800 	ld	hl,#0x0080
   030C E5                  801 	push	hl
   030D 3E 00               802 	ld	a,#0x00
   030F F5                  803 	push	af
   0310 33                  804 	inc	sp
   0311 21r80s3F            805 	ld	hl,#_scratch
   0314 E5                  806 	push	hl
   0315 CDr00s00            807 	call	_memset
   0318 F1                  808 	pop	af
   0319 F1                  809 	pop	af
   031A 33                  810 	inc	sp
   031B C9                  811 	ret
   031C                     812 _scratch_clear_end::
                            813 ;demo.c:98: uint8_t pal_load(char *file_name, uint8_t ss) {
                            814 ;	---------------------------------
                            815 ; Function pal_load
                            816 ; ---------------------------------
   031C                     817 _pal_load_start::
   031C                     818 _pal_load:
   031C DD E5               819 	push	ix
   031E DD 21 00 00         820 	ld	ix,#0
   0322 DD 39               821 	add	ix,sp
   0324 21 D2 FF            822 	ld	hl,#-46
   0327 39                  823 	add	hl,sp
   0328 F9                  824 	ld	sp,hl
                            825 ;demo.c:101: memset((uint8_t *) &f, 0, sizeof(fcb));
   0329 21 00 00            826 	ld	hl,#0x0000
   032C 39                  827 	add	hl,sp
   032D 4D                  828 	ld	c,l
   032E 44                  829 	ld	b,h
   032F 21 2E 00            830 	ld	hl,#0x002E
   0332 E5                  831 	push	hl
   0333 3E 00               832 	ld	a,#0x00
   0335 F5                  833 	push	af
   0336 33                  834 	inc	sp
   0337 C5                  835 	push	bc
   0338 CDr00s00            836 	call	_memset
   033B F1                  837 	pop	af
   033C F1                  838 	pop	af
   033D 33                  839 	inc	sp
                            840 ;demo.c:102: scratch_clear();
   033E CDr09s03            841 	call	_scratch_clear
                            842 ;demo.c:104: f.record_size = ss;
   0341 21 00 00            843 	ld	hl,#0x0000
   0344 39                  844 	add	hl,sp
   0345 4D                  845 	ld	c,l
   0346 44                  846 	ld	b,h
   0347 21 0F 00            847 	ld	hl,#0x000F
   034A 09                  848 	add	hl,bc
   034B EB                  849 	ex	de,hl
   034C DD 7E 06            850 	ld	a,6 (ix)
   034F 12                  851 	ld	(de),a
                            852 ;demo.c:105: f.drive = 0;
   0350 3E 00               853 	ld	a,#0x00
   0352 02                  854 	ld	(bc),a
                            855 ;demo.c:107: memcpy(f.name, file_name, 11);
   0353 DD 5E 04            856 	ld	e,4 (ix)
   0356 DD 56 05            857 	ld	d,5 (ix)
   0359 03                  858 	inc	bc
   035A 21 0B 00            859 	ld	hl,#0x000B
   035D E5                  860 	push	hl
   035E D5                  861 	push	de
   035F C5                  862 	push	bc
   0360 CDr00s00            863 	call	_memcpy
   0363 F1                  864 	pop	af
   0364 F1                  865 	pop	af
   0365 F1                  866 	pop	af
                            867 ;demo.c:109: if (open(&f) != 0) return 0;
   0366 21 00 00            868 	ld	hl,#0x0000
   0369 39                  869 	add	hl,sp
   036A E5                  870 	push	hl
   036B CDr00s00            871 	call	_open
   036E F1                  872 	pop	af
   036F AF                  873 	xor	a,a
   0370 B5                  874 	or	a,l
   0371 28 04               875 	jr	Z,00102$
   0373 2E 00               876 	ld	l,#0x00
   0375 18 40               877 	jr	00107$
   0377                     878 00102$:
                            879 ;demo.c:110: if (block_set_data_ptr(scratch) != 0) return 0;
   0377 21r80s3F            880 	ld	hl,#_scratch
   037A E5                  881 	push	hl
   037B CDr00s00            882 	call	_block_set_data_ptr
   037E F1                  883 	pop	af
   037F AF                  884 	xor	a,a
   0380 B5                  885 	or	a,l
   0381 28 04               886 	jr	Z,00104$
   0383 2E 00               887 	ld	l,#0x00
   0385 18 30               888 	jr	00107$
   0387                     889 00104$:
                            890 ;demo.c:111: if (block_read(&f) != 0) return 0;
   0387 21 00 00            891 	ld	hl,#0x0000
   038A 39                  892 	add	hl,sp
   038B E5                  893 	push	hl
   038C CDr00s00            894 	call	_block_read
   038F F1                  895 	pop	af
   0390 AF                  896 	xor	a,a
   0391 B5                  897 	or	a,l
   0392 28 04               898 	jr	Z,00106$
   0394 2E 00               899 	ld	l,#0x00
   0396 18 1F               900 	jr	00107$
   0398                     901 00106$:
                            902 ;demo.c:113: memcpy(cur_palette, scratch+7, ss);
   0398 DD 4E 06            903 	ld	c,6 (ix)
   039B 06 00               904 	ld	b,#0x00
   039D 11r87s3F            905 	ld	de,#_scratch + 7
   03A0 C5                  906 	push	bc
   03A1 D5                  907 	push	de
   03A2 21r00s40            908 	ld	hl,#_cur_palette
   03A5 E5                  909 	push	hl
   03A6 CDr00s00            910 	call	_memcpy
   03A9 F1                  911 	pop	af
   03AA F1                  912 	pop	af
   03AB F1                  913 	pop	af
                            914 ;demo.c:115: close(&f);
   03AC 21 00 00            915 	ld	hl,#0x0000
   03AF 39                  916 	add	hl,sp
   03B0 E5                  917 	push	hl
   03B1 CDr00s00            918 	call	_close
   03B4 F1                  919 	pop	af
                            920 ;demo.c:116: return 1;
   03B5 2E 01               921 	ld	l,#0x01
   03B7                     922 00107$:
   03B7 DD F9               923 	ld	sp,ix
   03B9 DD E1               924 	pop	ix
   03BB C9                  925 	ret
   03BC                     926 _pal_load_end::
                            927 ;demo.c:120: void pause() {
                            928 ;	---------------------------------
                            929 ; Function pause
                            930 ; ---------------------------------
   03BC                     931 _pause_start::
   03BC                     932 _pause:
                            933 ;demo.c:121: uint8_t i,j,k = 0;
                            934 ;demo.c:122: for (i = 0; i < 255; i++) {	
   03BC 01 00 00            935 	ld	bc,#0x0000
   03BF                     936 00104$:
   03BF 78                  937 	ld	a,b
   03C0 D6 FF               938 	sub	a,#0xFF
   03C2 D0                  939 	ret	NC
                            940 ;demo.c:123: for (j = 0; j < 255; j++) {
   03C3 59                  941 	ld	e,c
   03C4 16 FF               942 	ld	d,#0xFF
   03C6                     943 00103$:
                            944 ;demo.c:124: k++;
   03C6 1C                  945 	inc	e
   03C7 15                  946 	dec	d
                            947 ;demo.c:123: for (j = 0; j < 255; j++) {
   03C8 AF                  948 	xor	a,a
   03C9 B2                  949 	or	a,d
   03CA 20 FA               950 	jr	NZ,00103$
                            951 ;demo.c:122: for (i = 0; i < 255; i++) {	
   03CC 4B                  952 	ld	c,e
   03CD 04                  953 	inc	b
   03CE 18 EF               954 	jr	00104$
   03D0                     955 _pause_end::
                            956 ;demo.c:130: uint8_t raw_load(char *file_name, int size, char* buffer) {
                            957 ;	---------------------------------
                            958 ; Function raw_load
                            959 ; ---------------------------------
   03D0                     960 _raw_load_start::
   03D0                     961 _raw_load:
   03D0 DD E5               962 	push	ix
   03D2 DD 21 00 00         963 	ld	ix,#0
   03D6 DD 39               964 	add	ix,sp
   03D8 21 D2 FF            965 	ld	hl,#-46
   03DB 39                  966 	add	hl,sp
   03DC F9                  967 	ld	sp,hl
                            968 ;demo.c:135: memset((uint8_t *) &f, 0, sizeof(fcb));
   03DD 21 00 00            969 	ld	hl,#0x0000
   03E0 39                  970 	add	hl,sp
   03E1 4D                  971 	ld	c,l
   03E2 44                  972 	ld	b,h
   03E3 21 2E 00            973 	ld	hl,#0x002E
   03E6 E5                  974 	push	hl
   03E7 3E 00               975 	ld	a,#0x00
   03E9 F5                  976 	push	af
   03EA 33                  977 	inc	sp
   03EB C5                  978 	push	bc
   03EC CDr00s00            979 	call	_memset
   03EF F1                  980 	pop	af
   03F0 F1                  981 	pop	af
   03F1 33                  982 	inc	sp
                            983 ;demo.c:136: scratch_clear();
   03F2 CDr09s03            984 	call	_scratch_clear
                            985 ;demo.c:138: f.record_size = 128;
   03F5 21 00 00            986 	ld	hl,#0x0000
   03F8 39                  987 	add	hl,sp
   03F9 4D                  988 	ld	c,l
   03FA 44                  989 	ld	b,h
   03FB 21 0F 00            990 	ld	hl,#0x000F
   03FE 09                  991 	add	hl,bc
   03FF EB                  992 	ex	de,hl
   0400 3E 80               993 	ld	a,#0x80
   0402 12                  994 	ld	(de),a
                            995 ;demo.c:139: f.drive = 0;
   0403 3E 00               996 	ld	a,#0x00
   0405 02                  997 	ld	(bc),a
                            998 ;demo.c:141: memcpy(f.name, file_name, 11);
   0406 DD 5E 04            999 	ld	e,4 (ix)
   0409 DD 56 05           1000 	ld	d,5 (ix)
   040C 03                 1001 	inc	bc
   040D 21 0B 00           1002 	ld	hl,#0x000B
   0410 E5                 1003 	push	hl
   0411 D5                 1004 	push	de
   0412 C5                 1005 	push	bc
   0413 CDr00s00           1006 	call	_memcpy
   0416 F1                 1007 	pop	af
   0417 F1                 1008 	pop	af
   0418 F1                 1009 	pop	af
                           1010 ;demo.c:143: if (open(&f) != 0) return 0;
   0419 21 00 00           1011 	ld	hl,#0x0000
   041C 39                 1012 	add	hl,sp
   041D E5                 1013 	push	hl
   041E CDr00s00           1014 	call	_open
   0421 F1                 1015 	pop	af
   0422 AF                 1016 	xor	a,a
   0423 B5                 1017 	or	a,l
   0424 28 05              1018 	jr	Z,00116$
   0426 2E 00              1019 	ld	l,#0x00
   0428 C3r8Fs04           1020 	jp	00110$
                           1021 ;demo.c:145: while(total < size) {
   042B                    1022 00116$:
   042B 01 00 00           1023 	ld	bc,#0x0000
   042E                    1024 00107$:
   042E 79                 1025 	ld	a,c
   042F DD 96 06           1026 	sub	a,6 (ix)
   0432 78                 1027 	ld	a,b
   0433 DD 9E 07           1028 	sbc	a,7 (ix)
   0436 F2r84s04           1029 	jp	P,00109$
                           1030 ;demo.c:146: if (block_set_data_ptr(scratch) != 0) return 0;
   0439 C5                 1031 	push	bc
   043A 21r80s3F           1032 	ld	hl,#_scratch
   043D E5                 1033 	push	hl
   043E CDr00s00           1034 	call	_block_set_data_ptr
   0441 F1                 1035 	pop	af
   0442 5D                 1036 	ld	e,l
   0443 C1                 1037 	pop	bc
   0444 AF                 1038 	xor	a,a
   0445 B3                 1039 	or	a,e
   0446 28 04              1040 	jr	Z,00104$
   0448 2E 00              1041 	ld	l,#0x00
   044A 18 43              1042 	jr	00110$
   044C                    1043 00104$:
                           1044 ;demo.c:147: if (block_read(&f) != 0) return 0;
   044C 21 00 00           1045 	ld	hl,#0x0000
   044F 39                 1046 	add	hl,sp
   0450 C5                 1047 	push	bc
   0451 E5                 1048 	push	hl
   0452 CDr00s00           1049 	call	_block_read
   0455 F1                 1050 	pop	af
   0456 5D                 1051 	ld	e,l
   0457 C1                 1052 	pop	bc
   0458 AF                 1053 	xor	a,a
   0459 B3                 1054 	or	a,e
   045A 28 04              1055 	jr	Z,00106$
   045C 2E 00              1056 	ld	l,#0x00
   045E 18 2F              1057 	jr	00110$
   0460                    1058 00106$:
                           1059 ;demo.c:149: memcpy(buffer+total,scratch,incr);
   0460 DD 7E 08           1060 	ld	a,8 (ix)
   0463 81                 1061 	add	a,c
   0464 5F                 1062 	ld	e,a
   0465 DD 7E 09           1063 	ld	a,9 (ix)
   0468 88                 1064 	adc	a,b
   0469 57                 1065 	ld	d,a
   046A C5                 1066 	push	bc
   046B 21 80 00           1067 	ld	hl,#0x0080
   046E E5                 1068 	push	hl
   046F 21r80s3F           1069 	ld	hl,#_scratch
   0472 E5                 1070 	push	hl
   0473 D5                 1071 	push	de
   0474 CDr00s00           1072 	call	_memcpy
   0477 F1                 1073 	pop	af
   0478 F1                 1074 	pop	af
   0479 F1                 1075 	pop	af
   047A C1                 1076 	pop	bc
                           1077 ;demo.c:151: total+=incr;
   047B 21 80 00           1078 	ld	hl,#0x0080
   047E 09                 1079 	add	hl,bc
   047F 4D                 1080 	ld	c,l
   0480 44                 1081 	ld	b,h
   0481 C3r2Es04           1082 	jp	00107$
   0484                    1083 00109$:
                           1084 ;demo.c:154: close(&f);
   0484 21 00 00           1085 	ld	hl,#0x0000
   0487 39                 1086 	add	hl,sp
   0488 E5                 1087 	push	hl
   0489 CDr00s00           1088 	call	_close
   048C F1                 1089 	pop	af
                           1090 ;demo.c:156: return 1;
   048D 2E 01              1091 	ld	l,#0x01
   048F                    1092 00110$:
   048F DD F9              1093 	ld	sp,ix
   0491 DD E1              1094 	pop	ix
   0493 C9                 1095 	ret
   0494                    1096 _raw_load_end::
                           1097 ;demo.c:159: void fadein() {
                           1098 ;	---------------------------------
                           1099 ; Function fadein
                           1100 ; ---------------------------------
   0494                    1101 _fadein_start::
   0494                    1102 _fadein:
   0494 DD E5              1103 	push	ix
   0496 DD 21 00 00        1104 	ld	ix,#0
   049A DD 39              1105 	add	ix,sp
   049C F5                 1106 	push	af
                           1107 ;demo.c:162: if (tick < 4) return;
   049D 3Ar42s40           1108 	ld	a,(#_tick+0)
   04A0 D6 04              1109 	sub	a,#0x04
   04A2 3Ar43s40           1110 	ld	a,(#_tick+1)
   04A5 DE 00              1111 	sbc	a,#0x00
   04A7 F2rADs04           1112 	jp	P,00102$
   04AA C3r5Bs05           1113 	jp	00113$
   04AD                    1114 00102$:
                           1115 ;demo.c:164: tick = 0;
   04AD 21r42s40           1116 	ld	hl,#_tick + 0
   04B0 36 00              1117 	ld	(hl), #0x00
   04B2 21r43s40           1118 	ld	hl,#_tick + 1
   04B5 36 00              1119 	ld	(hl), #0x00
                           1120 ;demo.c:166: for(i = 0; i < 32; i+=2) {
   04B7 0E 00              1121 	ld	c,#0x00
   04B9                    1122 00109$:
   04B9 79                 1123 	ld	a,c
   04BA D6 20              1124 	sub	a,#0x20
   04BC D2r53s05           1125 	jp	NC,00112$
                           1126 ;demo.c:167: uint8_t r = scratch[i] >> 4;
   04BF 3Er80              1127 	ld	a,#<_scratch
   04C1 81                 1128 	add	a,c
   04C2 5F                 1129 	ld	e,a
   04C3 3Es3F              1130 	ld	a,#>_scratch
   04C5 CE 00              1131 	adc	a,#0x00
   04C7 57                 1132 	ld	d,a
   04C8 1A                 1133 	ld	a,(de)
   04C9 47                 1134 	ld	b,a
   04CA 58                 1135 	ld	e,b
   04CB CB 3B              1136 	srl	e
   04CD CB 3B              1137 	srl	e
   04CF CB 3B              1138 	srl	e
   04D1 CB 3B              1139 	srl	e
                           1140 ;demo.c:168: uint8_t b = scratch[i] & 0xf;
   04D3 78                 1141 	ld	a,b
   04D4 E6 0F              1142 	and	a,#0x0F
   04D6 DD 77 FF           1143 	ld	-1 (ix),a
                           1144 ;demo.c:169: uint8_t g = scratch[i+1];
   04D9 51                 1145 	ld	d,c
   04DA 14                 1146 	inc	d
   04DB 3Er80              1147 	ld	a,#<_scratch
   04DD 82                 1148 	add	a,d
   04DE 6F                 1149 	ld	l,a
   04DF 3Es3F              1150 	ld	a,#>_scratch
   04E1 CE 00              1151 	adc	a,#0x00
   04E3 67                 1152 	ld	h,a
   04E4 56                 1153 	ld	d,(hl)
   04E5 DD 72 FE           1154 	ld	-2 (ix),d
                           1155 ;demo.c:171: if (r < (cur_palette[i] >> 4)) r++;
   04E8 3Er00              1156 	ld	a,#<_cur_palette
   04EA 81                 1157 	add	a,c
   04EB 6F                 1158 	ld	l,a
   04EC 3Es40              1159 	ld	a,#>_cur_palette
   04EE CE 00              1160 	adc	a,#0x00
   04F0 67                 1161 	ld	h,a
   04F1 56                 1162 	ld	d,(hl)
   04F2 CB 3A              1163 	srl	d
   04F4 CB 3A              1164 	srl	d
   04F6 CB 3A              1165 	srl	d
   04F8 CB 3A              1166 	srl	d
   04FA 7B                 1167 	ld	a,e
   04FB 92                 1168 	sub	a,d
   04FC 30 01              1169 	jr	NC,00104$
   04FE 1C                 1170 	inc	e
   04FF                    1171 00104$:
                           1172 ;demo.c:172: if (b < (cur_palette[i] & 0xf)) b++;
   04FF 3Er00              1173 	ld	a,#<_cur_palette
   0501 81                 1174 	add	a,c
   0502 6F                 1175 	ld	l,a
   0503 3Es40              1176 	ld	a,#>_cur_palette
   0505 CE 00              1177 	adc	a,#0x00
   0507 67                 1178 	ld	h,a
   0508 7E                 1179 	ld	a,(hl)
   0509 E6 0F              1180 	and	a,#0x0F
   050B 47                 1181 	ld	b,a
   050C DD 7E FF           1182 	ld	a,-1 (ix)
   050F 90                 1183 	sub	a,b
   0510 30 03              1184 	jr	NC,00106$
   0512 DD 34 FF           1185 	inc	-1 (ix)
   0515                    1186 00106$:
                           1187 ;demo.c:174: scratch[i] = (r << 4) | b;
   0515 3Er80              1188 	ld	a,#<_scratch
   0517 81                 1189 	add	a,c
   0518 47                 1190 	ld	b,a
   0519 3Es3F              1191 	ld	a,#>_scratch
   051B CE 00              1192 	adc	a,#0x00
   051D 57                 1193 	ld	d,a
   051E 7B                 1194 	ld	a,e
   051F 07                 1195 	rlca
   0520 07                 1196 	rlca
   0521 07                 1197 	rlca
   0522 07                 1198 	rlca
   0523 E6 F0              1199 	and	a,#0xF0
   0525 DD B6 FF           1200 	or	a,-1 (ix)
   0528 68                 1201 	ld	l,b
   0529 62                 1202 	ld	h,d
   052A 77                 1203 	ld	(hl),a
                           1204 ;demo.c:175: if (g < cur_palette[i+1]) scratch[i+1]++;
   052B 41                 1205 	ld	b,c
   052C 04                 1206 	inc	b
   052D 3Er00              1207 	ld	a,#<_cur_palette
   052F 80                 1208 	add	a,b
   0530 5F                 1209 	ld	e,a
   0531 3Es40              1210 	ld	a,#>_cur_palette
   0533 CE 00              1211 	adc	a,#0x00
   0535 57                 1212 	ld	d,a
   0536 1A                 1213 	ld	a,(de)
   0537 5F                 1214 	ld	e,a
   0538 DD 7E FE           1215 	ld	a,-2 (ix)
   053B 93                 1216 	sub	a,e
   053C 30 10              1217 	jr	NC,00111$
   053E 3Er80              1218 	ld	a,#<_scratch
   0540 80                 1219 	add	a,b
   0541 47                 1220 	ld	b,a
   0542 3Es3F              1221 	ld	a,#>_scratch
   0544 CE 00              1222 	adc	a,#0x00
   0546 5F                 1223 	ld	e,a
   0547 68                 1224 	ld	l,b
   0548 67                 1225 	ld	h,a
   0549 7E                 1226 	ld	a,(hl)
   054A 3C                 1227 	inc	a
   054B 68                 1228 	ld	l,b
   054C 63                 1229 	ld	h,e
   054D 77                 1230 	ld	(hl),a
   054E                    1231 00111$:
                           1232 ;demo.c:166: for(i = 0; i < 32; i+=2) {
   054E 0C                 1233 	inc	c
   054F 0C                 1234 	inc	c
   0550 C3rB9s04           1235 	jp	00109$
   0553                    1236 00112$:
                           1237 ;demo.c:179: vdp_load_palette(scratch);
   0553 21r80s3F           1238 	ld	hl,#_scratch
   0556 E5                 1239 	push	hl
   0557 CDr00s00           1240 	call	_vdp_load_palette
   055A F1                 1241 	pop	af
   055B                    1242 00113$:
   055B DD F9              1243 	ld	sp,ix
   055D DD E1              1244 	pop	ix
   055F C9                 1245 	ret
   0560                    1246 _fadein_end::
                           1247 ;demo.c:191: void do_ymmm() {
                           1248 ;	---------------------------------
                           1249 ; Function do_ymmm
                           1250 ; ---------------------------------
   0560                    1251 _do_ymmm_start::
   0560                    1252 _do_ymmm:
   0560 DD E5              1253 	push	ix
   0562 DD 21 00 00        1254 	ld	ix,#0
   0566 DD 39              1255 	add	ix,sp
   0568 21 EB FF           1256 	ld	hl,#-21
   056B 39                 1257 	add	hl,sp
   056C F9                 1258 	ld	sp,hl
                           1259 ;demo.c:196: if (tick > 32) { tick = 0; flipper++;}
   056D 3E 20              1260 	ld	a,#0x20
   056F FD 21r42s40        1261 	ld	iy,#_tick
   0573 FD 96 00           1262 	sub	a,0 (iy)
   0576 3E 00              1263 	ld	a,#0x00
   0578 FD 21r42s40        1264 	ld	iy,#_tick
   057C FD 9E 01           1265 	sbc	a,1 (iy)
   057F F2r9Cs05           1266 	jp	P,00102$
   0582 21r42s40           1267 	ld	hl,#_tick + 0
   0585 36 00              1268 	ld	(hl), #0x00
   0587 21r43s40           1269 	ld	hl,#_tick + 1
   058A 36 00              1270 	ld	(hl), #0x00
   058C FD 21r46s40        1271 	ld	iy,#_flipper
   0590 FD 34 00           1272 	inc	0 (iy)
   0593 20 07              1273 	jr	NZ,00115$
   0595 FD 21r46s40        1274 	ld	iy,#_flipper
   0599 FD 34 01           1275 	inc	1 (iy)
   059C                    1276 00115$:
   059C                    1277 00102$:
                           1278 ;demo.c:197: if (flipper > 10) { flipper = 0;}
   059C 3E 0A              1279 	ld	a,#0x0A
   059E FD 21r46s40        1280 	ld	iy,#_flipper
   05A2 FD 96 00           1281 	sub	a,0 (iy)
   05A5 3E 00              1282 	ld	a,#0x00
   05A7 FD 21r46s40        1283 	ld	iy,#_flipper
   05AB FD 9E 01           1284 	sbc	a,1 (iy)
   05AE F2rBBs05           1285 	jp	P,00104$
   05B1 21r46s40           1286 	ld	hl,#_flipper + 0
   05B4 36 00              1287 	ld	(hl), #0x00
   05B6 21r47s40           1288 	ld	hl,#_flipper + 1
   05B9 36 00              1289 	ld	(hl), #0x00
   05BB                    1290 00104$:
                           1291 ;demo.c:199: ymmmf++;
   05BB FD 21r48s40        1292 	ld	iy,#_ymmmf
   05BF FD 34 00           1293 	inc	0 (iy)
   05C2 20 07              1294 	jr	NZ,00116$
   05C4 FD 21r48s40        1295 	ld	iy,#_ymmmf
   05C8 FD 34 01           1296 	inc	1 (iy)
   05CB                    1297 00116$:
                           1298 ;demo.c:200: for (yo = 0; yo<212-step;yo+=step) {
   05CB 21r44s40           1299 	ld	hl,#_yo + 0
   05CE 36 00              1300 	ld	(hl), #0x00
   05D0                    1301 00105$:
   05D0 3Ar44s40           1302 	ld	a,(#_yo+0)
   05D3 DD 77 ED           1303 	ld	-19 (ix),a
   05D6 DD 36 EE 00        1304 	ld	-18 (ix),#0x00
   05DA DD 7E ED           1305 	ld	a,-19 (ix)
   05DD D6 D2              1306 	sub	a,#0xD2
   05DF DD 7E EE           1307 	ld	a,-18 (ix)
   05E2 DE 00              1308 	sbc	a,#0x00
   05E4 F2r90s06           1309 	jp	P,00109$
                           1310 ;demo.c:201: xo = (sintabx[(yo+ymmmf) & 255]);
   05E7 21r48s40           1311 	ld	hl,#_ymmmf
   05EA DD 7E ED           1312 	ld	a,-19 (ix)
   05ED 86                 1313 	add	a,(hl)
   05EE 5F                 1314 	ld	e,a
   05EF DD 7E EE           1315 	ld	a,-18 (ix)
   05F2 23                 1316 	inc	hl
   05F3 8E                 1317 	adc	a,(hl)
   05F4 16 00              1318 	ld	d,#0x00
   05F6 CB 23              1319 	sla	e
   05F8 CB 12              1320 	rl	d
   05FA 21r38s00           1321 	ld	hl,#_sintabx
   05FD 19                 1322 	add	hl,de
   05FE 5E                 1323 	ld	e,(hl)
   05FF 23                 1324 	inc	hl
   0600 56                 1325 	ld	d,(hl)
   0601 DD 73 EF           1326 	ld	-17 (ix),e
   0604 DD 72 F0           1327 	ld	-16 (ix),d
                           1328 ;demo.c:204: cmd.source_x = 0;
   0607 21 06 00           1329 	ld	hl,#0x0006
   060A 39                 1330 	add	hl,sp
   060B 36 00              1331 	ld	(hl),#0x00
   060D 23                 1332 	inc	hl
   060E 36 00              1333 	ld	(hl),#0x00
                           1334 ;demo.c:205: cmd.source_y = 0+yo;
   0610 21 06 00           1335 	ld	hl,#0x0006
   0613 39                 1336 	add	hl,sp
   0614 EB                 1337 	ex	de,hl
   0615 4B                 1338 	ld	c,e
   0616 42                 1339 	ld	b,d
   0617 69                 1340 	ld	l,c
   0618 60                 1341 	ld	h,b
   0619 23                 1342 	inc	hl
   061A 23                 1343 	inc	hl
   061B DD 7E ED           1344 	ld	a,-19 (ix)
   061E 77                 1345 	ld	(hl),a
   061F 23                 1346 	inc	hl
   0620 DD 7E EE           1347 	ld	a,-18 (ix)
   0623 77                 1348 	ld	(hl),a
                           1349 ;demo.c:206: cmd.dest_x = xo;
   0624 21 04 00           1350 	ld	hl,#0x0004
   0627 19                 1351 	add	hl,de
   0628 DD 7E EF           1352 	ld	a,-17 (ix)
   062B 77                 1353 	ld	(hl),a
   062C 23                 1354 	inc	hl
   062D DD 7E F0           1355 	ld	a,-16 (ix)
   0630 77                 1356 	ld	(hl),a
                           1357 ;demo.c:207: cmd.dest_y = 3+yo;
   0631 21 06 00           1358 	ld	hl,#0x0006
   0634 19                 1359 	add	hl,de
   0635 DD 75 EB           1360 	ld	-21 (ix),l
   0638 DD 74 EC           1361 	ld	-20 (ix),h
   063B DD 7E ED           1362 	ld	a,-19 (ix)
   063E C6 03              1363 	add	a,#0x03
   0640 4F                 1364 	ld	c,a
   0641 DD 7E EE           1365 	ld	a,-18 (ix)
   0644 CE 00              1366 	adc	a,#0x00
   0646 47                 1367 	ld	b,a
   0647 DD 6E EB           1368 	ld	l,-21 (ix)
   064A DD 66 EC           1369 	ld	h,-20 (ix)
   064D 71                 1370 	ld	(hl),c
   064E 23                 1371 	inc	hl
   064F 70                 1372 	ld	(hl),b
                           1373 ;demo.c:208: cmd.size_x = 256;
   0650 21 08 00           1374 	ld	hl,#0x0008
   0653 19                 1375 	add	hl,de
   0654 36 00              1376 	ld	(hl),#0x00
   0656 23                 1377 	inc	hl
   0657 36 01              1378 	ld	(hl),#0x01
                           1379 ;demo.c:209: cmd.size_y = 1;
   0659 21 0A 00           1380 	ld	hl,#0x000A
   065C 19                 1381 	add	hl,de
   065D 36 01              1382 	ld	(hl),#0x01
   065F 23                 1383 	inc	hl
   0660 36 00              1384 	ld	(hl),#0x00
                           1385 ;demo.c:210: cmd.data = 0;
   0662 21 0C 00           1386 	ld	hl,#0x000C
   0665 19                 1387 	add	hl,de
   0666 4D                 1388 	ld	c,l
   0667 44                 1389 	ld	b,h
   0668 3E 00              1390 	ld	a,#0x00
   066A 02                 1391 	ld	(bc),a
                           1392 ;demo.c:211: cmd.argument = 0;
   066B 21 0D 00           1393 	ld	hl,#0x000D
   066E 19                 1394 	add	hl,de
   066F 4D                 1395 	ld	c,l
   0670 44                 1396 	ld	b,h
   0671 3E 00              1397 	ld	a,#0x00
   0673 02                 1398 	ld	(bc),a
                           1399 ;demo.c:212: cmd.command = 0xD0;
   0674 21 0E 00           1400 	ld	hl,#0x000E
   0677 19                 1401 	add	hl,de
   0678 4D                 1402 	ld	c,l
   0679 44                 1403 	ld	b,h
   067A 3E D0              1404 	ld	a,#0xD0
   067C 02                 1405 	ld	(bc),a
                           1406 ;demo.c:215: vdp_copier(&cmd);
   067D D5                 1407 	push	de
   067E CDr00s00           1408 	call	_vdp_copier
   0681 F1                 1409 	pop	af
                           1410 ;demo.c:200: for (yo = 0; yo<212-step;yo+=step) {
   0682 21r44s40           1411 	ld	hl,#_yo + 0
   0685 4E                 1412 	ld	c,(hl)
   0686 21r44s40           1413 	ld	hl,#_yo
   0689 79                 1414 	ld	a,c
   068A C6 02              1415 	add	a,#0x02
   068C 77                 1416 	ld	(hl),a
   068D C3rD0s05           1417 	jp	00105$
   0690                    1418 00109$:
   0690 DD F9              1419 	ld	sp,ix
   0692 DD E1              1420 	pop	ix
   0694 C9                 1421 	ret
   0695                    1422 _do_ymmm_end::
                           1423 ;demo.c:232: void do_blocks() {
                           1424 ;	---------------------------------
                           1425 ; Function do_blocks
                           1426 ; ---------------------------------
   0695                    1427 _do_blocks_start::
   0695                    1428 _do_blocks:
   0695 DD E5              1429 	push	ix
   0697 DD 21 00 00        1430 	ld	ix,#0
   069B DD 39              1431 	add	ix,sp
   069D 21 E9 FF           1432 	ld	hl,#-23
   06A0 39                 1433 	add	hl,sp
   06A1 F9                 1434 	ld	sp,hl
                           1435 ;demo.c:235: int ys = 0;
   06A2 DD 36 ED 00        1436 	ld	-19 (ix),#0x00
   06A6 DD 36 EE 00        1437 	ld	-18 (ix),#0x00
                           1438 ;demo.c:236: int ye = 0;
   06AA DD 36 EB 00        1439 	ld	-21 (ix),#0x00
   06AE DD 36 EC 00        1440 	ld	-20 (ix),#0x00
                           1441 ;demo.c:238: vdp_register(VDP_VOFFSET,0);
   06B2 21 17 00           1442 	ld	hl,#0x0017
   06B5 E5                 1443 	push	hl
   06B6 CDr00s00           1444 	call	_vdp_register
   06B9 F1                 1445 	pop	af
                           1446 ;demo.c:240: if (block_init == 0) {
   06BA AF                 1447 	xor	a,a
   06BB FD 21r4As40        1448 	ld	iy,#_block_init
   06BF FD B6 00           1449 	or	a,0 (iy)
   06C2 C2r2As07           1450 	jp	NZ,00108$
                           1451 ;demo.c:242: vdp_set_screen5();
   06C5 CDr00s00           1452 	call	_vdp_set_screen5
                           1453 ;demo.c:244: vdp_register(2, 0x5F);
   06C8 21 02 5F           1454 	ld	hl,#0x5F02
   06CB E5                 1455 	push	hl
   06CC CDr00s00           1456 	call	_vdp_register
   06CF F1                 1457 	pop	af
                           1458 ;demo.c:246: for(i=0;i<16;i++) btab[i] = i*16;
   06D0 DD 36 EF 00        1459 	ld	-17 (ix),#0x00
   06D4 DD 36 F0 00        1460 	ld	-16 (ix),#0x00
   06D8                    1461 00110$:
   06D8 DD 7E EF           1462 	ld	a,-17 (ix)
   06DB D6 10              1463 	sub	a,#0x10
   06DD DD 7E F0           1464 	ld	a,-16 (ix)
   06E0 DE 00              1465 	sbc	a,#0x00
   06E2 F2r1As07           1466 	jp	P,00113$
   06E5 DD 4E EF           1467 	ld	c,-17 (ix)
   06E8 DD 46 F0           1468 	ld	b,-16 (ix)
   06EB CB 21              1469 	sla	c
   06ED CB 10              1470 	rl	b
   06EF 21r53s40           1471 	ld	hl,#_btab
   06F2 09                 1472 	add	hl,bc
   06F3 4D                 1473 	ld	c,l
   06F4 44                 1474 	ld	b,h
   06F5 DD 5E EF           1475 	ld	e,-17 (ix)
   06F8 DD 56 F0           1476 	ld	d,-16 (ix)
   06FB CB 23              1477 	sla	e
   06FD CB 12              1478 	rl	d
   06FF CB 23              1479 	sla	e
   0701 CB 12              1480 	rl	d
   0703 CB 23              1481 	sla	e
   0705 CB 12              1482 	rl	d
   0707 CB 23              1483 	sla	e
   0709 CB 12              1484 	rl	d
   070B 69                 1485 	ld	l,c
   070C 60                 1486 	ld	h,b
   070D 73                 1487 	ld	(hl),e
   070E 23                 1488 	inc	hl
   070F 72                 1489 	ld	(hl),d
   0710 DD 34 EF           1490 	inc	-17 (ix)
   0713 20 03              1491 	jr	NZ,00139$
   0715 DD 34 F0           1492 	inc	-16 (ix)
   0718                    1493 00139$:
   0718 18 BE              1494 	jr	00110$
   071A                    1495 00113$:
                           1496 ;demo.c:247: vdp_load_palette(block_palette);
   071A 21r20s40           1497 	ld	hl,#_block_palette
   071D E5                 1498 	push	hl
   071E CDr00s00           1499 	call	_vdp_load_palette
   0721 F1                 1500 	pop	af
                           1501 ;demo.c:249: block_init = 1;
   0722 21r4As40           1502 	ld	hl,#_block_init + 0
   0725 36 01              1503 	ld	(hl), #0x01
   0727 C3rE9s08           1504 	jp	00122$
   072A                    1505 00108$:
                           1506 ;demo.c:253: if (flof == 0) { ys = 0; ye = 8; }
   072A 3Ar73s40           1507 	ld	a,(#_flof+0)
   072D FD 21r73s40        1508 	ld	iy,#_flof
   0731 FD B6 01           1509 	or	a,1 (iy)
   0734 20 10              1510 	jr	NZ,00102$
   0736 DD 36 ED 00        1511 	ld	-19 (ix),#0x00
   073A DD 36 EE 00        1512 	ld	-18 (ix),#0x00
   073E DD 36 EB 08        1513 	ld	-21 (ix),#0x08
   0742 DD 36 EC 00        1514 	ld	-20 (ix),#0x00
   0746                    1515 00102$:
                           1516 ;demo.c:254: if (flof == 1) { ys = 8; ye = 16; }
   0746 3Ar73s40           1517 	ld	a,(#_flof+0)
   0749 D6 01              1518 	sub	a,#0x01
   074B 20 06              1519 	jr	NZ,00140$
   074D 3Ar74s40           1520 	ld	a,(#_flof+1)
   0750 B7                 1521 	or	a,a
   0751 28 02              1522 	jr	Z,00141$
   0753                    1523 00140$:
   0753 18 10              1524 	jr	00104$
   0755                    1525 00141$:
   0755 DD 36 ED 08        1526 	ld	-19 (ix),#0x08
   0759 DD 36 EE 00        1527 	ld	-18 (ix),#0x00
   075D DD 36 EB 10        1528 	ld	-21 (ix),#0x10
   0761 DD 36 EC 00        1529 	ld	-20 (ix),#0x00
   0765                    1530 00104$:
                           1531 ;demo.c:256: for(bty=3;bty<11;bty++) {
   0765 FD 21r51s40        1532 	ld	iy,#_bty
   0769 FD 36 00 03        1533 	ld	0 (iy),#0x03
   076D FD 21r51s40        1534 	ld	iy,#_bty
   0771 FD 36 01 00        1535 	ld	1 (iy),#0x00
   0775                    1536 00118$:
   0775 3Ar51s40           1537 	ld	a,(#_bty+0)
   0778 D6 0B              1538 	sub	a,#0x0B
   077A 3Ar52s40           1539 	ld	a,(#_bty+1)
   077D DE 00              1540 	sbc	a,#0x00
   077F F2rC0s08           1541 	jp	P,00121$
                           1542 ;demo.c:257: for(btx=ys;btx<ye;btx++) {
   0782 DD 7E ED           1543 	ld	a,-19 (ix)
   0785 FD 21r4Fs40        1544 	ld	iy,#_btx
   0789 FD 77 00           1545 	ld	0 (iy),a
   078C DD 7E EE           1546 	ld	a,-18 (ix)
   078F FD 21r4Fs40        1547 	ld	iy,#_btx
   0793 FD 77 01           1548 	ld	1 (iy),a
   0796                    1549 00114$:
   0796 3Ar4Fs40           1550 	ld	a,(#_btx+0)
   0799 DD 96 EB           1551 	sub	a,-21 (ix)
   079C 3Ar50s40           1552 	ld	a,(#_btx+1)
   079F DD 9E EC           1553 	sbc	a,-20 (ix)
   07A2 F2rADs08           1554 	jp	P,00120$
                           1555 ;demo.c:258: bsx = (PLY_PSGReg8 & PLY_PSGReg9 | PLY_PSGReg10)>>1;
   07A5 3Ar00s00           1556 	ld	a,(#_PLY_PSGReg8+0)
   07A8 FD 21r00s00        1557 	ld	iy,#_PLY_PSGReg9
   07AC FD A6 00           1558 	and	a,0 (iy)
   07AF 21r00s00           1559 	ld	hl,#_PLY_PSGReg10 + 0
   07B2 B6                 1560 	or	a,(hl)
   07B3 4F                 1561 	ld	c,a
   07B4 CB 39              1562 	srl	c
   07B6 21r4Bs40           1563 	ld	hl,#_bsx + 0
   07B9 71                 1564 	ld	(hl), c
   07BA 21r4Cs40           1565 	ld	hl,#_bsx + 1
   07BD 36 00              1566 	ld	(hl), #0x00
                           1567 ;demo.c:259: bsy = PLY_PSGReg10;
   07BF 3Ar00s00           1568 	ld	a,(#_PLY_PSGReg10+0)
   07C2 21r4Ds40           1569 	ld	hl,#_bsy + 0
   07C5 77                 1570 	ld	(hl), a
   07C6 21r4Es40           1571 	ld	hl,#_bsy + 1
   07C9 36 00              1572 	ld	(hl), #0x00
                           1573 ;demo.c:260: cmd.source_x = btab[bsx];
   07CB 21 08 00           1574 	ld	hl,#0x0008
   07CE 39                 1575 	add	hl,sp
   07CF 4D                 1576 	ld	c,l
   07D0 44                 1577 	ld	b,h
   07D1 21r4Bs40           1578 	ld	hl,#_bsx + 0
   07D4 5E                 1579 	ld	e,(hl)
   07D5 21r4Cs40           1580 	ld	hl,#_bsx + 1
   07D8 56                 1581 	ld	d,(hl)
   07D9 CB 23              1582 	sla	e
   07DB CB 12              1583 	rl	d
   07DD 21r53s40           1584 	ld	hl,#_btab
   07E0 19                 1585 	add	hl,de
   07E1 5E                 1586 	ld	e,(hl)
   07E2 23                 1587 	inc	hl
   07E3 56                 1588 	ld	d,(hl)
   07E4 69                 1589 	ld	l,c
   07E5 60                 1590 	ld	h,b
   07E6 73                 1591 	ld	(hl),e
   07E7 23                 1592 	inc	hl
   07E8 72                 1593 	ld	(hl),d
                           1594 ;demo.c:261: cmd.source_y = 768+btab[bsy];
   07E9 21 08 00           1595 	ld	hl,#0x0008
   07EC 39                 1596 	add	hl,sp
   07ED 4D                 1597 	ld	c,l
   07EE 44                 1598 	ld	b,h
   07EF 21 02 00           1599 	ld	hl,#0x0002
   07F2 09                 1600 	add	hl,bc
   07F3 DD 75 E9           1601 	ld	-23 (ix),l
   07F6 DD 74 EA           1602 	ld	-22 (ix),h
   07F9 21r4Ds40           1603 	ld	hl,#_bsy + 0
   07FC 5E                 1604 	ld	e,(hl)
   07FD 21r4Es40           1605 	ld	hl,#_bsy + 1
   0800 56                 1606 	ld	d,(hl)
   0801 CB 23              1607 	sla	e
   0803 CB 12              1608 	rl	d
   0805 21r53s40           1609 	ld	hl,#_btab
   0808 19                 1610 	add	hl,de
   0809 5E                 1611 	ld	e,(hl)
   080A 23                 1612 	inc	hl
   080B 56                 1613 	ld	d,(hl)
   080C 21 00 03           1614 	ld	hl,#0x0300
   080F 19                 1615 	add	hl,de
   0810 EB                 1616 	ex	de,hl
   0811 DD 6E E9           1617 	ld	l,-23 (ix)
   0814 DD 66 EA           1618 	ld	h,-22 (ix)
   0817 73                 1619 	ld	(hl),e
   0818 23                 1620 	inc	hl
   0819 72                 1621 	ld	(hl),d
                           1622 ;demo.c:262: cmd.dest_x = btab[btx];
   081A 21 04 00           1623 	ld	hl,#0x0004
   081D 09                 1624 	add	hl,bc
   081E DD 75 E9           1625 	ld	-23 (ix),l
   0821 DD 74 EA           1626 	ld	-22 (ix),h
   0824 21r4Fs40           1627 	ld	hl,#_btx + 0
   0827 5E                 1628 	ld	e,(hl)
   0828 21r50s40           1629 	ld	hl,#_btx + 1
   082B 56                 1630 	ld	d,(hl)
   082C CB 23              1631 	sla	e
   082E CB 12              1632 	rl	d
   0830 21r53s40           1633 	ld	hl,#_btab
   0833 19                 1634 	add	hl,de
   0834 5E                 1635 	ld	e,(hl)
   0835 23                 1636 	inc	hl
   0836 56                 1637 	ld	d,(hl)
   0837 DD 6E E9           1638 	ld	l,-23 (ix)
   083A DD 66 EA           1639 	ld	h,-22 (ix)
   083D 73                 1640 	ld	(hl),e
   083E 23                 1641 	inc	hl
   083F 72                 1642 	ld	(hl),d
                           1643 ;demo.c:263: cmd.dest_y = 512+btab[bty];
   0840 21 06 00           1644 	ld	hl,#0x0006
   0843 09                 1645 	add	hl,bc
   0844 DD 75 E9           1646 	ld	-23 (ix),l
   0847 DD 74 EA           1647 	ld	-22 (ix),h
   084A 21r51s40           1648 	ld	hl,#_bty + 0
   084D 5E                 1649 	ld	e,(hl)
   084E 21r52s40           1650 	ld	hl,#_bty + 1
   0851 56                 1651 	ld	d,(hl)
   0852 CB 23              1652 	sla	e
   0854 CB 12              1653 	rl	d
   0856 21r53s40           1654 	ld	hl,#_btab
   0859 19                 1655 	add	hl,de
   085A 5E                 1656 	ld	e,(hl)
   085B 23                 1657 	inc	hl
   085C 56                 1658 	ld	d,(hl)
   085D 21 00 02           1659 	ld	hl,#0x0200
   0860 19                 1660 	add	hl,de
   0861 EB                 1661 	ex	de,hl
   0862 DD 6E E9           1662 	ld	l,-23 (ix)
   0865 DD 66 EA           1663 	ld	h,-22 (ix)
   0868 73                 1664 	ld	(hl),e
   0869 23                 1665 	inc	hl
   086A 72                 1666 	ld	(hl),d
                           1667 ;demo.c:264: cmd.size_x = 16;
   086B 21 08 00           1668 	ld	hl,#0x0008
   086E 09                 1669 	add	hl,bc
   086F 36 10              1670 	ld	(hl),#0x10
   0871 23                 1671 	inc	hl
   0872 36 00              1672 	ld	(hl),#0x00
                           1673 ;demo.c:265: cmd.size_y = 16;
   0874 21 0A 00           1674 	ld	hl,#0x000A
   0877 09                 1675 	add	hl,bc
   0878 36 10              1676 	ld	(hl),#0x10
   087A 23                 1677 	inc	hl
   087B 36 00              1678 	ld	(hl),#0x00
                           1679 ;demo.c:266: cmd.data = 0;
   087D 21 0C 00           1680 	ld	hl,#0x000C
   0880 09                 1681 	add	hl,bc
   0881 EB                 1682 	ex	de,hl
   0882 3E 00              1683 	ld	a,#0x00
   0884 12                 1684 	ld	(de),a
                           1685 ;demo.c:267: cmd.argument = 0x00;
   0885 21 0D 00           1686 	ld	hl,#0x000D
   0888 09                 1687 	add	hl,bc
   0889 EB                 1688 	ex	de,hl
   088A 3E 00              1689 	ld	a,#0x00
   088C 12                 1690 	ld	(de),a
                           1691 ;demo.c:268: cmd.command = 0xD0;
   088D 21 0E 00           1692 	ld	hl,#0x000E
   0890 09                 1693 	add	hl,bc
   0891 EB                 1694 	ex	de,hl
   0892 3E D0              1695 	ld	a,#0xD0
   0894 12                 1696 	ld	(de),a
                           1697 ;demo.c:269: vdp_copier(&cmd);
   0895 C5                 1698 	push	bc
   0896 CDr00s00           1699 	call	_vdp_copier
   0899 F1                 1700 	pop	af
                           1701 ;demo.c:257: for(btx=ys;btx<ye;btx++) {
   089A FD 21r4Fs40        1702 	ld	iy,#_btx
   089E FD 34 00           1703 	inc	0 (iy)
   08A1 20 07              1704 	jr	NZ,00150$
   08A3 FD 21r4Fs40        1705 	ld	iy,#_btx
   08A7 FD 34 01           1706 	inc	1 (iy)
   08AA                    1707 00150$:
   08AA C3r96s07           1708 	jp	00114$
   08AD                    1709 00120$:
                           1710 ;demo.c:256: for(bty=3;bty<11;bty++) {
   08AD FD 21r51s40        1711 	ld	iy,#_bty
   08B1 FD 34 00           1712 	inc	0 (iy)
   08B4 20 07              1713 	jr	NZ,00151$
   08B6 FD 21r51s40        1714 	ld	iy,#_bty
   08BA FD 34 01           1715 	inc	1 (iy)
   08BD                    1716 00151$:
   08BD C3r75s07           1717 	jp	00118$
   08C0                    1718 00121$:
                           1719 ;demo.c:273: flof++;
   08C0 FD 21r73s40        1720 	ld	iy,#_flof
   08C4 FD 34 00           1721 	inc	0 (iy)
   08C7 20 07              1722 	jr	NZ,00152$
   08C9 FD 21r73s40        1723 	ld	iy,#_flof
   08CD FD 34 01           1724 	inc	1 (iy)
   08D0                    1725 00152$:
                           1726 ;demo.c:274: if (flof == 2) flof = 0;
   08D0 3Ar73s40           1727 	ld	a,(#_flof+0)
   08D3 D6 02              1728 	sub	a,#0x02
   08D5 20 06              1729 	jr	NZ,00153$
   08D7 3Ar74s40           1730 	ld	a,(#_flof+1)
   08DA B7                 1731 	or	a,a
   08DB 28 02              1732 	jr	Z,00154$
   08DD                    1733 00153$:
   08DD 18 0A              1734 	jr	00122$
   08DF                    1735 00154$:
   08DF 21r73s40           1736 	ld	hl,#_flof + 0
   08E2 36 00              1737 	ld	(hl), #0x00
   08E4 21r74s40           1738 	ld	hl,#_flof + 1
   08E7 36 00              1739 	ld	(hl), #0x00
   08E9                    1740 00122$:
   08E9 DD F9              1741 	ld	sp,ix
   08EB DD E1              1742 	pop	ix
   08ED C9                 1743 	ret
   08EE                    1744 _do_blocks_end::
                           1745 ;demo.c:284: void main() {
                           1746 ;	---------------------------------
                           1747 ; Function main
                           1748 ; ---------------------------------
   08EE                    1749 _main_start::
   08EE                    1750 _main:
   08EE DD E5              1751 	push	ix
   08F0 DD 21 00 00        1752 	ld	ix,#0
   08F4 DD 39              1753 	add	ix,sp
   08F6 21 E7 FF           1754 	ld	hl,#-25
   08F9 39                 1755 	add	hl,sp
   08FA F9                 1756 	ld	sp,hl
                           1757 ;demo.c:285: unsigned char quit=0;
   08FB DD 36 FF 00        1758 	ld	-1 (ix),#0x00
                           1759 ;demo.c:286: int modes = 128; // interlace bit on
   08FF 06 80              1760 	ld	b,#0x80
   0901 1E 00              1761 	ld	e,#0x00
                           1762 ;demo.c:288: int frames = 0;
   0903 DD 36 FD 00        1763 	ld	-3 (ix),#0x00
   0907 DD 36 FE 00        1764 	ld	-2 (ix),#0x00
                           1765 ;demo.c:289: int po = 0;
   090B DD 36 FB 00        1766 	ld	-5 (ix),#0x00
   090F DD 36 FC 00        1767 	ld	-4 (ix),#0x00
                           1768 ;demo.c:293: spindown();
   0913 C5                 1769 	push	bc
   0914 D5                 1770 	push	de
   0915 CDr00s00           1771 	call	_spindown
   0918 D1                 1772 	pop	de
   0919 C1                 1773 	pop	bc
                           1774 ;demo.c:295: puts("demo init\r\n\r\n");
   091A C5                 1775 	push	bc
   091B D5                 1776 	push	de
   091C 21rA4s0B           1777 	ld	hl,#__str_0
   091F E5                 1778 	push	hl
   0920 CDr00s00           1779 	call	_puts
   0923 F1                 1780 	pop	af
   0924 D1                 1781 	pop	de
   0925 C1                 1782 	pop	bc
                           1783 ;demo.c:308: puts("music init...");
   0926 C5                 1784 	push	bc
   0927 D5                 1785 	push	de
   0928 21rB2s0B           1786 	ld	hl,#__str_1
   092B E5                 1787 	push	hl
   092C CDr00s00           1788 	call	_puts
   092F F1                 1789 	pop	af
   0930 D1                 1790 	pop	de
   0931 C1                 1791 	pop	bc
                           1792 ;demo.c:310: PLY_SongPtr = (char *)0x0103;
   0932 21r00s00           1793 	ld	hl,#_PLY_SongPtr + 0
   0935 36 03              1794 	ld	(hl), #0x03
   0937 21r01s00           1795 	ld	hl,#_PLY_SongPtr + 1
   093A 36 01              1796 	ld	(hl), #0x01
                           1797 ;demo.c:311: PLY_Init();
   093C C5                 1798 	push	bc
   093D D5                 1799 	push	de
   093E CDr00s00           1800 	call	_PLY_Init
   0941 D1                 1801 	pop	de
   0942 C1                 1802 	pop	bc
                           1803 ;demo.c:312: puts("done.\n\n");
   0943 C5                 1804 	push	bc
   0944 D5                 1805 	push	de
   0945 21rC0s0B           1806 	ld	hl,#__str_2
   0948 E5                 1807 	push	hl
   0949 CDr00s00           1808 	call	_puts
   094C F1                 1809 	pop	af
   094D D1                 1810 	pop	de
   094E C1                 1811 	pop	bc
                           1812 ;demo.c:314: if(isvdp2())
   094F C5                 1813 	push	bc
   0950 D5                 1814 	push	de
   0951 CDr00s00           1815 	call	_isvdp2
   0954 4D                 1816 	ld	c,l
   0955 D1                 1817 	pop	de
   0956 F1                 1818 	pop	af
   0957 47                 1819 	ld	b,a
   0958 AF                 1820 	xor	a,a
   0959 B1                 1821 	or	a,c
   095A 28 04              1822 	jr	Z,00102$
                           1823 ;demo.c:316: modes+=2; // pal
   095C 06 82              1824 	ld	b,#0x82
   095E 1E 00              1825 	ld	e,#0x00
   0960                    1826 00102$:
                           1827 ;demo.c:320: vdp_set_screen5();
   0960 C5                 1828 	push	bc
   0961 D5                 1829 	push	de
   0962 CDr00s00           1830 	call	_vdp_set_screen5
   0965 D1                 1831 	pop	de
   0966 C1                 1832 	pop	bc
                           1833 ;demo.c:322: vdp_register(VDP_MODE3,modes); // interlace on, screen mode pal or ntsc
   0967 78                 1834 	ld	a,b
   0968 F5                 1835 	push	af
   0969 33                 1836 	inc	sp
   096A 3E 09              1837 	ld	a,#0x09
   096C F5                 1838 	push	af
   096D 33                 1839 	inc	sp
   096E CDr00s00           1840 	call	_vdp_register
   0971 F1                 1841 	pop	af
                           1842 ;demo.c:324: puts("demo start\r\n");
   0972 21rC8s0B           1843 	ld	hl,#__str_3
   0975 E5                 1844 	push	hl
   0976 CDr00s00           1845 	call	_puts
   0979 F1                 1846 	pop	af
                           1847 ;demo.c:326: scratch_clear();
   097A CDr09s03           1848 	call	_scratch_clear
                           1849 ;demo.c:327: vdp_load_palette(scratch);
   097D 21r80s3F           1850 	ld	hl,#_scratch
   0980 E5                 1851 	push	hl
   0981 CDr00s00           1852 	call	_vdp_load_palette
   0984 F1                 1853 	pop	af
                           1854 ;demo.c:329: vdp_register(VDP_VOFFSET,0);
   0985 21 17 00           1855 	ld	hl,#0x0017
   0988 E5                 1856 	push	hl
   0989 CDr00s00           1857 	call	_vdp_register
   098C F1                 1858 	pop	af
                           1859 ;demo.c:331: pal_load("LF      PL5",32);
   098D 3E 20              1860 	ld	a,#0x20
   098F F5                 1861 	push	af
   0990 33                 1862 	inc	sp
   0991 21rD5s0B           1863 	ld	hl,#__str_4
   0994 E5                 1864 	push	hl
   0995 CDr1Cs03           1865 	call	_pal_load
   0998 F1                 1866 	pop	af
   0999 33                 1867 	inc	sp
                           1868 ;demo.c:332: vdp_load_palette(cur_palette);
   099A 21r00s40           1869 	ld	hl,#_cur_palette
   099D E5                 1870 	push	hl
   099E CDr00s00           1871 	call	_vdp_load_palette
   09A1 F1                 1872 	pop	af
                           1873 ;demo.c:334: memset((uint8_t *) &packbuffer, 0, 14100);
   09A2 21 14 37           1874 	ld	hl,#0x3714
   09A5 E5                 1875 	push	hl
   09A6 3E 00              1876 	ld	a,#0x00
   09A8 F5                 1877 	push	af
   09A9 33                 1878 	inc	sp
   09AA 21r00s01           1879 	ld	hl,#_packbuffer
   09AD E5                 1880 	push	hl
   09AE CDr00s00           1881 	call	_memset
   09B1 F1                 1882 	pop	af
   09B2 F1                 1883 	pop	af
   09B3 33                 1884 	inc	sp
                           1885 ;demo.c:335: raw_load("LF1     PCK", 14089, packbuffer);
   09B4 21r00s01           1886 	ld	hl,#_packbuffer
   09B7 E5                 1887 	push	hl
   09B8 21 09 37           1888 	ld	hl,#0x3709
   09BB E5                 1889 	push	hl
   09BC 21rE1s0B           1890 	ld	hl,#__str_5
   09BF E5                 1891 	push	hl
   09C0 CDrD0s03           1892 	call	_raw_load
   09C3 F1                 1893 	pop	af
   09C4 F1                 1894 	pop	af
   09C5 F1                 1895 	pop	af
                           1896 ;demo.c:336: bitbuster(packbuffer,0x8000,VRAM_0); // to page 1
   09C6 3E 01              1897 	ld	a,#0x01
   09C8 F5                 1898 	push	af
   09C9 33                 1899 	inc	sp
   09CA 21 00 80           1900 	ld	hl,#0x8000
   09CD E5                 1901 	push	hl
   09CE 21r00s01           1902 	ld	hl,#_packbuffer
   09D1 E5                 1903 	push	hl
   09D2 CDr00s00           1904 	call	_bitbuster
   09D5 F1                 1905 	pop	af
   09D6 F1                 1906 	pop	af
   09D7 33                 1907 	inc	sp
                           1908 ;demo.c:338: memset((uint8_t *) &packbuffer, 0, 15990);
   09D8 21 76 3E           1909 	ld	hl,#0x3E76
   09DB E5                 1910 	push	hl
   09DC 3E 00              1911 	ld	a,#0x00
   09DE F5                 1912 	push	af
   09DF 33                 1913 	inc	sp
   09E0 21r00s01           1914 	ld	hl,#_packbuffer
   09E3 E5                 1915 	push	hl
   09E4 CDr00s00           1916 	call	_memset
   09E7 F1                 1917 	pop	af
   09E8 F1                 1918 	pop	af
   09E9 33                 1919 	inc	sp
                           1920 ;demo.c:339: raw_load("LF2     PCK", 15990, packbuffer);
   09EA 21r00s01           1921 	ld	hl,#_packbuffer
   09ED E5                 1922 	push	hl
   09EE 21 76 3E           1923 	ld	hl,#0x3E76
   09F1 E5                 1924 	push	hl
   09F2 21rEDs0B           1925 	ld	hl,#__str_6
   09F5 E5                 1926 	push	hl
   09F6 CDrD0s03           1927 	call	_raw_load
   09F9 F1                 1928 	pop	af
   09FA F1                 1929 	pop	af
   09FB F1                 1930 	pop	af
                           1931 ;demo.c:340: bitbuster(packbuffer,0x0000,VRAM_1); // to page 2
   09FC 3E 00              1932 	ld	a,#0x00
   09FE F5                 1933 	push	af
   09FF 33                 1934 	inc	sp
   0A00 21 00 00           1935 	ld	hl,#0x0000
   0A03 E5                 1936 	push	hl
   0A04 21r00s01           1937 	ld	hl,#_packbuffer
   0A07 E5                 1938 	push	hl
   0A08 CDr00s00           1939 	call	_bitbuster
   0A0B F1                 1940 	pop	af
   0A0C F1                 1941 	pop	af
   0A0D 33                 1942 	inc	sp
                           1943 ;demo.c:342: memset((uint8_t *) &packbuffer, 0, 15006);
   0A0E 21 9E 3A           1944 	ld	hl,#0x3A9E
   0A11 E5                 1945 	push	hl
   0A12 3E 00              1946 	ld	a,#0x00
   0A14 F5                 1947 	push	af
   0A15 33                 1948 	inc	sp
   0A16 21r00s01           1949 	ld	hl,#_packbuffer
   0A19 E5                 1950 	push	hl
   0A1A CDr00s00           1951 	call	_memset
   0A1D F1                 1952 	pop	af
   0A1E F1                 1953 	pop	af
   0A1F 33                 1954 	inc	sp
                           1955 ;demo.c:343: raw_load("LF3     PCK", 15006, packbuffer);
   0A20 21r00s01           1956 	ld	hl,#_packbuffer
   0A23 E5                 1957 	push	hl
   0A24 21 9E 3A           1958 	ld	hl,#0x3A9E
   0A27 E5                 1959 	push	hl
   0A28 21rF9s0B           1960 	ld	hl,#__str_7
   0A2B E5                 1961 	push	hl
   0A2C CDrD0s03           1962 	call	_raw_load
   0A2F F1                 1963 	pop	af
   0A30 F1                 1964 	pop	af
   0A31 F1                 1965 	pop	af
                           1966 ;demo.c:344: bitbuster(packbuffer,0x8000,VRAM_1); // to page 3
   0A32 3E 00              1967 	ld	a,#0x00
   0A34 F5                 1968 	push	af
   0A35 33                 1969 	inc	sp
   0A36 21 00 80           1970 	ld	hl,#0x8000
   0A39 E5                 1971 	push	hl
   0A3A 21r00s01           1972 	ld	hl,#_packbuffer
   0A3D E5                 1973 	push	hl
   0A3E CDr00s00           1974 	call	_bitbuster
   0A41 F1                 1975 	pop	af
   0A42 F1                 1976 	pop	af
   0A43 33                 1977 	inc	sp
                           1978 ;demo.c:346: install_isr(my_isr);
   0A44 21r00s00           1979 	ld	hl,#_my_isr
   0A47 E5                 1980 	push	hl
   0A48 CDr00s00           1981 	call	_install_isr
   0A4B F1                 1982 	pop	af
                           1983 ;demo.c:348: while (!quit) {
   0A4C                    1984 00109$:
   0A4C AF                 1985 	xor	a,a
   0A4D DD B6 FF           1986 	or	a,-1 (ix)
   0A50 C2r7Ds0B           1987 	jp	NZ,00111$
                           1988 ;demo.c:351: for (y = 0; y < 106; y+=1) {
   0A53 DD 7E FB           1989 	ld	a,-5 (ix)
   0A56 C6 00              1990 	add	a,#0x00
   0A58 4F                 1991 	ld	c,a
   0A59 DD 7E FC           1992 	ld	a,-4 (ix)
   0A5C CE 01              1993 	adc	a,#0x01
   0A5E 57                 1994 	ld	d,a
   0A5F 79                 1995 	ld	a,c
   0A60 DD 86 FD           1996 	add	a,-3 (ix)
   0A63 DD 77 E9           1997 	ld	-23 (ix),a
   0A66 7A                 1998 	ld	a,d
   0A67 DD 8E FE           1999 	adc	a,-2 (ix)
   0A6A DD 77 EA           2000 	ld	-22 (ix),a
   0A6D DD 36 FA 00        2001 	ld	-6 (ix),#0x00
   0A71                    2002 00112$:
   0A71 DD 7E FA           2003 	ld	a,-6 (ix)
   0A74 D6 6A              2004 	sub	a,#0x6A
   0A76 D2r1Es0B           2005 	jp	NC,00115$
                           2006 ;demo.c:352: cmd.source_x = 0;
   0A79 21 04 00           2007 	ld	hl,#0x0004
   0A7C 39                 2008 	add	hl,sp
   0A7D 36 00              2009 	ld	(hl),#0x00
   0A7F 23                 2010 	inc	hl
   0A80 36 00              2011 	ld	(hl),#0x00
                           2012 ;demo.c:353: cmd.source_y = 256+po+frames+(y>>1);
   0A82 21 04 00           2013 	ld	hl,#0x0004
   0A85 39                 2014 	add	hl,sp
   0A86 45                 2015 	ld	b,l
   0A87 5C                 2016 	ld	e,h
   0A88 78                 2017 	ld	a,b
   0A89 C6 02              2018 	add	a,#0x02
   0A8B DD 77 E7           2019 	ld	-25 (ix),a
   0A8E 7B                 2020 	ld	a,e
   0A8F CE 00              2021 	adc	a,#0x00
   0A91 DD 77 E8           2022 	ld	-24 (ix),a
   0A94 DD 4E FA           2023 	ld	c,-6 (ix)
   0A97 CB 39              2024 	srl	c
   0A99 16 00              2025 	ld	d,#0x00
   0A9B DD 7E E9           2026 	ld	a,-23 (ix)
   0A9E 81                 2027 	add	a,c
   0A9F 4F                 2028 	ld	c,a
   0AA0 DD 7E EA           2029 	ld	a,-22 (ix)
   0AA3 8A                 2030 	adc	a,d
   0AA4 57                 2031 	ld	d,a
   0AA5 DD 6E E7           2032 	ld	l,-25 (ix)
   0AA8 DD 66 E8           2033 	ld	h,-24 (ix)
   0AAB 71                 2034 	ld	(hl),c
   0AAC 23                 2035 	inc	hl
   0AAD 72                 2036 	ld	(hl),d
                           2037 ;demo.c:354: cmd.dest_x = 0;
   0AAE 78                 2038 	ld	a,b
   0AAF C6 04              2039 	add	a,#0x04
   0AB1 6F                 2040 	ld	l,a
   0AB2 7B                 2041 	ld	a,e
   0AB3 CE 00              2042 	adc	a,#0x00
   0AB5 67                 2043 	ld	h,a
   0AB6 36 00              2044 	ld	(hl),#0x00
   0AB8 23                 2045 	inc	hl
   0AB9 36 00              2046 	ld	(hl),#0x00
                           2047 ;demo.c:355: cmd.dest_y = (y<<1);
   0ABB 78                 2048 	ld	a,b
   0ABC C6 06              2049 	add	a,#0x06
   0ABE DD 77 E7           2050 	ld	-25 (ix),a
   0AC1 7B                 2051 	ld	a,e
   0AC2 CE 00              2052 	adc	a,#0x00
   0AC4 DD 77 E8           2053 	ld	-24 (ix),a
   0AC7 DD 4E FA           2054 	ld	c,-6 (ix)
   0ACA 16 00              2055 	ld	d,#0x00
   0ACC CB 21              2056 	sla	c
   0ACE CB 12              2057 	rl	d
   0AD0 DD 6E E7           2058 	ld	l,-25 (ix)
   0AD3 DD 66 E8           2059 	ld	h,-24 (ix)
   0AD6 71                 2060 	ld	(hl),c
   0AD7 23                 2061 	inc	hl
   0AD8 72                 2062 	ld	(hl),d
                           2063 ;demo.c:356: cmd.size_x = 256;
   0AD9 78                 2064 	ld	a,b
   0ADA C6 08              2065 	add	a,#0x08
   0ADC 6F                 2066 	ld	l,a
   0ADD 7B                 2067 	ld	a,e
   0ADE CE 00              2068 	adc	a,#0x00
   0AE0 67                 2069 	ld	h,a
   0AE1 36 00              2070 	ld	(hl),#0x00
   0AE3 23                 2071 	inc	hl
   0AE4 36 01              2072 	ld	(hl),#0x01
                           2073 ;demo.c:357: cmd.size_y = 1;
   0AE6 78                 2074 	ld	a,b
   0AE7 C6 0A              2075 	add	a,#0x0A
   0AE9 6F                 2076 	ld	l,a
   0AEA 7B                 2077 	ld	a,e
   0AEB CE 00              2078 	adc	a,#0x00
   0AED 67                 2079 	ld	h,a
   0AEE 36 01              2080 	ld	(hl),#0x01
   0AF0 23                 2081 	inc	hl
   0AF1 36 00              2082 	ld	(hl),#0x00
                           2083 ;demo.c:358: cmd.data = 0;
   0AF3 78                 2084 	ld	a,b
   0AF4 C6 0C              2085 	add	a,#0x0C
   0AF6 6F                 2086 	ld	l,a
   0AF7 7B                 2087 	ld	a,e
   0AF8 CE 00              2088 	adc	a,#0x00
   0AFA 67                 2089 	ld	h,a
   0AFB 36 00              2090 	ld	(hl),#0x00
                           2091 ;demo.c:359: cmd.argument = 0x00;
   0AFD 78                 2092 	ld	a,b
   0AFE C6 0D              2093 	add	a,#0x0D
   0B00 6F                 2094 	ld	l,a
   0B01 7B                 2095 	ld	a,e
   0B02 CE 00              2096 	adc	a,#0x00
   0B04 67                 2097 	ld	h,a
   0B05 36 00              2098 	ld	(hl),#0x00
                           2099 ;demo.c:360: cmd.command = 0xD0;
   0B07 78                 2100 	ld	a,b
   0B08 C6 0E              2101 	add	a,#0x0E
   0B0A 6F                 2102 	ld	l,a
   0B0B 7B                 2103 	ld	a,e
   0B0C CE 00              2104 	adc	a,#0x00
   0B0E 67                 2105 	ld	h,a
   0B0F 36 D0              2106 	ld	(hl),#0xD0
                           2107 ;demo.c:361: vdp_copier(&cmd);
   0B11 68                 2108 	ld	l,b
   0B12 63                 2109 	ld	h,e
   0B13 E5                 2110 	push	hl
   0B14 CDr00s00           2111 	call	_vdp_copier
   0B17 F1                 2112 	pop	af
                           2113 ;demo.c:351: for (y = 0; y < 106; y+=1) {
   0B18 DD 34 FA           2114 	inc	-6 (ix)
   0B1B C3r71s0A           2115 	jp	00112$
   0B1E                    2116 00115$:
                           2117 ;demo.c:364: frames+=53;
   0B1E DD 7E FD           2118 	ld	a,-3 (ix)
   0B21 C6 35              2119 	add	a,#0x35
   0B23 DD 77 FD           2120 	ld	-3 (ix),a
   0B26 DD 7E FE           2121 	ld	a,-2 (ix)
   0B29 CE 00              2122 	adc	a,#0x00
   0B2B DD 77 FE           2123 	ld	-2 (ix),a
                           2124 ;demo.c:365: if (frames >= 212) { frames = 0; po+=256; }
   0B2E DD 7E FD           2125 	ld	a,-3 (ix)
   0B31 D6 D4              2126 	sub	a,#0xD4
   0B33 DD 7E FE           2127 	ld	a,-2 (ix)
   0B36 DE 00              2128 	sbc	a,#0x00
   0B38 FAr53s0B           2129 	jp	M,00104$
   0B3B DD 36 FD 00        2130 	ld	-3 (ix),#0x00
   0B3F DD 36 FE 00        2131 	ld	-2 (ix),#0x00
   0B43 DD 7E FB           2132 	ld	a,-5 (ix)
   0B46 C6 00              2133 	add	a,#0x00
   0B48 DD 77 FB           2134 	ld	-5 (ix),a
   0B4B DD 7E FC           2135 	ld	a,-4 (ix)
   0B4E CE 01              2136 	adc	a,#0x01
   0B50 DD 77 FC           2137 	ld	-4 (ix),a
   0B53                    2138 00104$:
                           2139 ;demo.c:366: if (po >= 768) {
   0B53 DD 7E FB           2140 	ld	a,-5 (ix)
   0B56 D6 00              2141 	sub	a,#0x00
   0B58 DD 7E FC           2142 	ld	a,-4 (ix)
   0B5B DE 03              2143 	sbc	a,#0x03
   0B5D FAr68s0B           2144 	jp	M,00106$
                           2145 ;demo.c:367: po = 0;
   0B60 DD 36 FB 00        2146 	ld	-5 (ix),#0x00
   0B64 DD 36 FC 00        2147 	ld	-4 (ix),#0x00
   0B68                    2148 00106$:
                           2149 ;demo.c:370: if(space())
   0B68 21 08 01           2150 	ld	hl,#0x0108
   0B6B E5                 2151 	push	hl
   0B6C CDr00s00           2152 	call	_ispressed
   0B6F F1                 2153 	pop	af
   0B70 4D                 2154 	ld	c,l
   0B71 AF                 2155 	xor	a,a
   0B72 B5                 2156 	or	a,l
   0B73 CAr4Cs0A           2157 	jp	Z,00109$
                           2158 ;demo.c:371: quit=1;
   0B76 DD 36 FF 01        2159 	ld	-1 (ix),#0x01
   0B7A C3r4Cs0A           2160 	jp	00109$
   0B7D                    2161 00111$:
                           2162 ;demo.c:410: waitVB();
   0B7D 76                 2163 		halt 
                           2164 ;demo.c:411: uninstall_isr();
   0B7E CDr00s00           2165 	call	_uninstall_isr
                           2166 ;demo.c:412: PLY_Stop();
   0B81 CDr00s00           2167 	call	_PLY_Stop
                           2168 ;demo.c:413: PLY_SendRegisters();
   0B84 CDr00s00           2169 	call	_PLY_SendRegisters
                           2170 ;demo.c:415: screen(0);
   0B87 3E 00              2171 	ld	a,#0x00
   0B89 F5                 2172 	push	af
   0B8A 33                 2173 	inc	sp
   0B8B CDr00s00           2174 	call	_screen
   0B8E 33                 2175 	inc	sp
                           2176 ;demo.c:417: puts("demo exit\r\n\r\n");
   0B8F 21r05s0C           2177 	ld	hl,#__str_8
   0B92 E5                 2178 	push	hl
   0B93 CDr00s00           2179 	call	_puts
   0B96 F1                 2180 	pop	af
                           2181 ;demo.c:419: exit(0);
   0B97 3E 00              2182 	ld	a,#0x00
   0B99 F5                 2183 	push	af
   0B9A 33                 2184 	inc	sp
   0B9B CDr00s00           2185 	call	_exit
   0B9E 33                 2186 	inc	sp
   0B9F DD F9              2187 	ld	sp,ix
   0BA1 DD E1              2188 	pop	ix
   0BA3 C9                 2189 	ret
   0BA4                    2190 _main_end::
   0BA4                    2191 __str_0:
   0BA4 64 65 6D 6F 20 69  2192 	.ascii "demo init"
        6E 69 74
   0BAD 0D                 2193 	.db 0x0D
   0BAE 0A                 2194 	.db 0x0A
   0BAF 0D                 2195 	.db 0x0D
   0BB0 0A                 2196 	.db 0x0A
   0BB1 00                 2197 	.db 0x00
   0BB2                    2198 __str_1:
   0BB2 6D 75 73 69 63 20  2199 	.ascii "music init..."
        69 6E 69 74 2E 2E
        2E
   0BBF 00                 2200 	.db 0x00
   0BC0                    2201 __str_2:
   0BC0 64 6F 6E 65 2E     2202 	.ascii "done."
   0BC5 0A                 2203 	.db 0x0A
   0BC6 0A                 2204 	.db 0x0A
   0BC7 00                 2205 	.db 0x00
   0BC8                    2206 __str_3:
   0BC8 64 65 6D 6F 20 73  2207 	.ascii "demo start"
        74 61 72 74
   0BD2 0D                 2208 	.db 0x0D
   0BD3 0A                 2209 	.db 0x0A
   0BD4 00                 2210 	.db 0x00
   0BD5                    2211 __str_4:
   0BD5 4C 46 20 20 20 20  2212 	.ascii "LF      PL5"
        20 20 50 4C 35
   0BE0 00                 2213 	.db 0x00
   0BE1                    2214 __str_5:
   0BE1 4C 46 31 20 20 20  2215 	.ascii "LF1     PCK"
        20 20 50 43 4B
   0BEC 00                 2216 	.db 0x00
   0BED                    2217 __str_6:
   0BED 4C 46 32 20 20 20  2218 	.ascii "LF2     PCK"
        20 20 50 43 4B
   0BF8 00                 2219 	.db 0x00
   0BF9                    2220 __str_7:
   0BF9 4C 46 33 20 20 20  2221 	.ascii "LF3     PCK"
        20 20 50 43 4B
   0C04 00                 2222 	.db 0x00
   0C05                    2223 __str_8:
   0C05 64 65 6D 6F 20 65  2224 	.ascii "demo exit"
        78 69 74
   0C0E 0D                 2225 	.db 0x0D
   0C0F 0A                 2226 	.db 0x0A
   0C10 0D                 2227 	.db 0x0D
   0C11 0A                 2228 	.db 0x0A
   0C12 00                 2229 	.db 0x00
                           2230 	.area _CODE
                           2231 	.area _CABS
