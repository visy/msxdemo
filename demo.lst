                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Mar 22 2009) (Mac OS X i386)
                              4 ; This file was generated Thu Feb 22 00:36:45 2018
                              5 ;--------------------------------------------------------
                              6 	.module demo
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _do_animplay
                             14 	.globl _font
                             15 	.globl _do_letter
                             16 	.globl _twister
                             17 	.globl _raster_effu
                             18 	.globl _do_blocks
                             19 	.globl _do_ymmm
                             20 	.globl _fadein
                             21 	.globl _raw_load
                             22 	.globl _pause
                             23 	.globl _pal_load
                             24 	.globl _scratch_clear
                             25 	.globl _ge5_load
                             26 	.globl _color_isr
                             27 	.globl _my_isr
                             28 	.globl _isNthBitSet
                             29 	.globl _ly
                             30 	.globl _lx
                             31 	.globl _linenum
                             32 	.globl _flof
                             33 	.globl _btab
                             34 	.globl _bty
                             35 	.globl _btx
                             36 	.globl _bsy
                             37 	.globl _bsx
                             38 	.globl _block_init
                             39 	.globl _cc
                             40 	.globl _yofff
                             41 	.globl _tick
                             42 	.globl _vbicount
                             43 	.globl _block_palette
                             44 	.globl _cur_palette
                             45 	.globl _scratch
                             46 	.globl _packbuffer
                             47 	.globl _sintab
                             48 	.globl _font_h
                             49 	.globl _font_w
                             50 	.globl _font_y
                             51 	.globl _font_x
                             52 	.globl _sintabx
                             53 ;--------------------------------------------------------
                             54 ; special function registers
                             55 ;--------------------------------------------------------
                             56 ;--------------------------------------------------------
                             57 ;  ram data
                             58 ;--------------------------------------------------------
                             59 	.area _DATA
   0000                      60 _sintab::
   0000                      61 	.ds 256
   0100                      62 _packbuffer::
   0100                      63 	.ds 16000
   3F80                      64 _scratch::
   3F80                      65 	.ds 128
   4000                      66 _cur_palette::
   4000                      67 	.ds 32
   4020                      68 _block_palette::
   4020                      69 	.ds 32
   4040                      70 _vbicount::
   4040                      71 	.ds 2
   4042                      72 _tick::
   4042                      73 	.ds 2
   4044                      74 _isNthBitSet_mask_1_1:
   4044                      75 	.ds 8
   404C                      76 _yofff::
   404C                      77 	.ds 1
   404D                      78 _cc::
   404D                      79 	.ds 1
   404E                      80 _flipper:
   404E                      81 	.ds 2
   4050                      82 _ymmmf:
   4050                      83 	.ds 2
   4052                      84 _block_init::
   4052                      85 	.ds 1
   4053                      86 _bsx::
   4053                      87 	.ds 2
   4055                      88 _bsy::
   4055                      89 	.ds 2
   4057                      90 _btx::
   4057                      91 	.ds 2
   4059                      92 _bty::
   4059                      93 	.ds 2
   405B                      94 _btab::
   405B                      95 	.ds 32
   407B                      96 _flof::
   407B                      97 	.ds 2
   407D                      98 _linenum::
   407D                      99 	.ds 2
   407F                     100 _lx::
   407F                     101 	.ds 2
   4081                     102 _ly::
   4081                     103 	.ds 2
   4083                     104 _xo:
   4083                     105 	.ds 2
   4085                     106 _yo:
   4085                     107 	.ds 2
   4087                     108 _po:
   4087                     109 	.ds 2
   4089                     110 _fffaaa:
   4089                     111 	.ds 2
                            112 ;--------------------------------------------------------
                            113 ; overlayable items in  ram 
                            114 ;--------------------------------------------------------
                            115 	.area _OVERLAY
                            116 ;--------------------------------------------------------
                            117 ; external initialized ram data
                            118 ;--------------------------------------------------------
                            119 ;--------------------------------------------------------
                            120 ; global & static initialisations
                            121 ;--------------------------------------------------------
                            122 	.area _HOME
                            123 	.area _GSINIT
                            124 	.area _GSFINAL
                            125 	.area _GSINIT
                            126 ;demo.c:47: static unsigned char mask[] = {1, 2, 4, 8, 16, 32, 64, 128};
   0000 21r44s40            127 	ld	hl,#_isNthBitSet_mask_1_1
   0003 CDr00s00            128 	call	__initrleblock
   0006 08                  129 	.db	8
   0007 01 02 04 08 10 20   130 	.db	0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80
        40 80
   000F 00                  131 	.db	0
                            132 ;types.h:27: signed char sintab[256]={
   0010 21r00s00            133 	ld	hl,#_sintab
   0013 CDr00s00            134 	call	__initrleblock
   0016 3B                  135 	.db	59
   0017 00 03 06 09 0C 0F   136 	.db	0x00, 0x03, 0x06, 0x09, 0x0C, 0x0F, 0x12, 0x15
        12 15
   001F 18 1B 1E 21 24 27   137 	.db	0x18, 0x1B, 0x1E, 0x21, 0x24, 0x27, 0x2A, 0x2D
        2A 2D
   0027 30 33 36 39 3B 3E   138 	.db	0x30, 0x33, 0x36, 0x39, 0x3B, 0x3E, 0x41, 0x43
        41 43
   002F 46 49 4B 4E 50 52   139 	.db	0x46, 0x49, 0x4B, 0x4E, 0x50, 0x52, 0x55, 0x57
        55 57
   0037 59 5B 5E 60 62 64   140 	.db	0x59, 0x5B, 0x5E, 0x60, 0x62, 0x64, 0x66, 0x67
        66 67
   003F 69 6B 6C 6E 70 71   141 	.db	0x69, 0x6B, 0x6C, 0x6E, 0x70, 0x71, 0x72, 0x74
        72 74
   0047 75 76 77 78 79 7A   142 	.db	0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7B
        7B 7B
   004F 7C 7D 7D            143 	.db	0x7C, 0x7D, 0x7D
   0052 FB 7E               144 	.db	#-5,#0x7E
   0054 01                  145 	.db	1
   0055 7F                  146 	.db	0x7F
   0056 FB 7E               147 	.db	#-5,#0x7E
   0058 75                  148 	.db	117
   0059 7D 7D 7C 7B 7B 7A   149 	.db	0x7D, 0x7D, 0x7C, 0x7B, 0x7B, 0x7A, 0x79, 0x78
        79 78
   0061 77 76 75 74 72 71   150 	.db	0x77, 0x76, 0x75, 0x74, 0x72, 0x71, 0x70, 0x6E
        70 6E
   0069 6C 6B 69 67 66 64   151 	.db	0x6C, 0x6B, 0x69, 0x67, 0x66, 0x64, 0x62, 0x60
        62 60
   0071 5E 5B 59 57 55 52   152 	.db	0x5E, 0x5B, 0x59, 0x57, 0x55, 0x52, 0x50, 0x4E
        50 4E
   0079 4B 49 46 43 41 3E   153 	.db	0x4B, 0x49, 0x46, 0x43, 0x41, 0x3E, 0x3B, 0x39
        3B 39
   0081 36 33 30 2D 2A 27   154 	.db	0x36, 0x33, 0x30, 0x2D, 0x2A, 0x27, 0x24, 0x21
        24 21
   0089 1E 1B 18 15 12 0F   155 	.db	0x1E, 0x1B, 0x18, 0x15, 0x12, 0x0F, 0x0C, 0x09
        0C 09
   0091 06 03 00 FD FA F7   156 	.db	0x06, 0x03, 0x00, 0xFD, 0xFA, 0xF7, 0xF4, 0xF1
        F4 F1
   0099 EE EB E8 E5 E2 DF   157 	.db	0xEE, 0xEB, 0xE8, 0xE5, 0xE2, 0xDF, 0xDC, 0xD9
        DC D9
   00A1 D6 D3 D0 CD CA C7   158 	.db	0xD6, 0xD3, 0xD0, 0xCD, 0xCA, 0xC7, 0xC5, 0xC2
        C5 C2
   00A9 BF BD BA B7 B5 B2   159 	.db	0xBF, 0xBD, 0xBA, 0xB7, 0xB5, 0xB2, 0xB0, 0xAE
        B0 AE
   00B1 AB A9 A7 A5 A2 A0   160 	.db	0xAB, 0xA9, 0xA7, 0xA5, 0xA2, 0xA0, 0x9E, 0x9C
        9E 9C
   00B9 9A 99 97 95 94 92   161 	.db	0x9A, 0x99, 0x97, 0x95, 0x94, 0x92, 0x90, 0x8F
        90 8F
   00C1 8E 8C 8B 8A 89 88   162 	.db	0x8E, 0x8C, 0x8B, 0x8A, 0x89, 0x88, 0x87, 0x86
        87 86
   00C9 85 85 84 83 83      163 	.db	0x85, 0x85, 0x84, 0x83, 0x83
   00CE FB 82               164 	.db	#-5,#0x82
   00D0 01                  165 	.db	1
   00D1 81                  166 	.db	0x81
   00D2 FB 82               167 	.db	#-5,#0x82
   00D4 3A                  168 	.db	58
   00D5 83 83 84 85 85 86   169 	.db	0x83, 0x83, 0x84, 0x85, 0x85, 0x86, 0x87, 0x88
        87 88
   00DD 89 8A 8B 8C 8E 8F   170 	.db	0x89, 0x8A, 0x8B, 0x8C, 0x8E, 0x8F, 0x90, 0x92
        90 92
   00E5 94 95 97 99 9A 9C   171 	.db	0x94, 0x95, 0x97, 0x99, 0x9A, 0x9C, 0x9E, 0xA0
        9E A0
   00ED A2 A5 A7 A9 AB AE   172 	.db	0xA2, 0xA5, 0xA7, 0xA9, 0xAB, 0xAE, 0xB0, 0xB2
        B0 B2
   00F5 B5 B7 BA BD BF C2   173 	.db	0xB5, 0xB7, 0xBA, 0xBD, 0xBF, 0xC2, 0xC5, 0xC7
        C5 C7
   00FD CA CD D0 D3 D6 D9   174 	.db	0xCA, 0xCD, 0xD0, 0xD3, 0xD6, 0xD9, 0xDC, 0xDF
        DC DF
   0105 E2 E5 E8 EB EE F1   175 	.db	0xE2, 0xE5, 0xE8, 0xEB, 0xEE, 0xF1, 0xF4, 0xF7
        F4 F7
   010D FA FD               176 	.db	0xFA, 0xFD
   010F 00                  177 	.db	0
                            178 ;demo.c:36: uint8_t packbuffer[16000] = {0};
   0110 21r00s01            179 	ld	hl,#_packbuffer
   0113 CDr00s00            180 	call	__initrleblock
   0116 81 00               181 	.db	#-127,#0x00
   0118 81 00               182 	.db	#-127,#0x00
   011A 81 00               183 	.db	#-127,#0x00
   011C 81 00               184 	.db	#-127,#0x00
   011E 81 00               185 	.db	#-127,#0x00
   0120 81 00               186 	.db	#-127,#0x00
   0122 81 00               187 	.db	#-127,#0x00
   0124 81 00               188 	.db	#-127,#0x00
   0126 81 00               189 	.db	#-127,#0x00
   0128 81 00               190 	.db	#-127,#0x00
   012A 81 00               191 	.db	#-127,#0x00
   012C 81 00               192 	.db	#-127,#0x00
   012E 81 00               193 	.db	#-127,#0x00
   0130 81 00               194 	.db	#-127,#0x00
   0132 81 00               195 	.db	#-127,#0x00
   0134 81 00               196 	.db	#-127,#0x00
   0136 81 00               197 	.db	#-127,#0x00
   0138 81 00               198 	.db	#-127,#0x00
   013A 81 00               199 	.db	#-127,#0x00
   013C 81 00               200 	.db	#-127,#0x00
   013E 81 00               201 	.db	#-127,#0x00
   0140 81 00               202 	.db	#-127,#0x00
   0142 81 00               203 	.db	#-127,#0x00
   0144 81 00               204 	.db	#-127,#0x00
   0146 81 00               205 	.db	#-127,#0x00
   0148 81 00               206 	.db	#-127,#0x00
   014A 81 00               207 	.db	#-127,#0x00
   014C 81 00               208 	.db	#-127,#0x00
   014E 81 00               209 	.db	#-127,#0x00
   0150 81 00               210 	.db	#-127,#0x00
   0152 81 00               211 	.db	#-127,#0x00
   0154 81 00               212 	.db	#-127,#0x00
   0156 81 00               213 	.db	#-127,#0x00
   0158 81 00               214 	.db	#-127,#0x00
   015A 81 00               215 	.db	#-127,#0x00
   015C 81 00               216 	.db	#-127,#0x00
   015E 81 00               217 	.db	#-127,#0x00
   0160 81 00               218 	.db	#-127,#0x00
   0162 81 00               219 	.db	#-127,#0x00
   0164 81 00               220 	.db	#-127,#0x00
   0166 81 00               221 	.db	#-127,#0x00
   0168 81 00               222 	.db	#-127,#0x00
   016A 81 00               223 	.db	#-127,#0x00
   016C 81 00               224 	.db	#-127,#0x00
   016E 81 00               225 	.db	#-127,#0x00
   0170 81 00               226 	.db	#-127,#0x00
   0172 81 00               227 	.db	#-127,#0x00
   0174 81 00               228 	.db	#-127,#0x00
   0176 81 00               229 	.db	#-127,#0x00
   0178 81 00               230 	.db	#-127,#0x00
   017A 81 00               231 	.db	#-127,#0x00
   017C 81 00               232 	.db	#-127,#0x00
   017E 81 00               233 	.db	#-127,#0x00
   0180 81 00               234 	.db	#-127,#0x00
   0182 81 00               235 	.db	#-127,#0x00
   0184 81 00               236 	.db	#-127,#0x00
   0186 81 00               237 	.db	#-127,#0x00
   0188 81 00               238 	.db	#-127,#0x00
   018A 81 00               239 	.db	#-127,#0x00
   018C 81 00               240 	.db	#-127,#0x00
   018E 81 00               241 	.db	#-127,#0x00
   0190 81 00               242 	.db	#-127,#0x00
   0192 81 00               243 	.db	#-127,#0x00
   0194 81 00               244 	.db	#-127,#0x00
   0196 81 00               245 	.db	#-127,#0x00
   0198 81 00               246 	.db	#-127,#0x00
   019A 81 00               247 	.db	#-127,#0x00
   019C 81 00               248 	.db	#-127,#0x00
   019E 81 00               249 	.db	#-127,#0x00
   01A0 81 00               250 	.db	#-127,#0x00
   01A2 81 00               251 	.db	#-127,#0x00
   01A4 81 00               252 	.db	#-127,#0x00
   01A6 81 00               253 	.db	#-127,#0x00
   01A8 81 00               254 	.db	#-127,#0x00
   01AA 81 00               255 	.db	#-127,#0x00
   01AC 81 00               256 	.db	#-127,#0x00
   01AE 81 00               257 	.db	#-127,#0x00
   01B0 81 00               258 	.db	#-127,#0x00
   01B2 81 00               259 	.db	#-127,#0x00
   01B4 81 00               260 	.db	#-127,#0x00
   01B6 81 00               261 	.db	#-127,#0x00
   01B8 81 00               262 	.db	#-127,#0x00
   01BA 81 00               263 	.db	#-127,#0x00
   01BC 81 00               264 	.db	#-127,#0x00
   01BE 81 00               265 	.db	#-127,#0x00
   01C0 81 00               266 	.db	#-127,#0x00
   01C2 81 00               267 	.db	#-127,#0x00
   01C4 81 00               268 	.db	#-127,#0x00
   01C6 81 00               269 	.db	#-127,#0x00
   01C8 81 00               270 	.db	#-127,#0x00
   01CA 81 00               271 	.db	#-127,#0x00
   01CC 81 00               272 	.db	#-127,#0x00
   01CE 81 00               273 	.db	#-127,#0x00
   01D0 81 00               274 	.db	#-127,#0x00
   01D2 81 00               275 	.db	#-127,#0x00
   01D4 81 00               276 	.db	#-127,#0x00
   01D6 81 00               277 	.db	#-127,#0x00
   01D8 81 00               278 	.db	#-127,#0x00
   01DA 81 00               279 	.db	#-127,#0x00
   01DC 81 00               280 	.db	#-127,#0x00
   01DE 81 00               281 	.db	#-127,#0x00
   01E0 81 00               282 	.db	#-127,#0x00
   01E2 81 00               283 	.db	#-127,#0x00
   01E4 81 00               284 	.db	#-127,#0x00
   01E6 81 00               285 	.db	#-127,#0x00
   01E8 81 00               286 	.db	#-127,#0x00
   01EA 81 00               287 	.db	#-127,#0x00
   01EC 81 00               288 	.db	#-127,#0x00
   01EE 81 00               289 	.db	#-127,#0x00
   01F0 81 00               290 	.db	#-127,#0x00
   01F2 81 00               291 	.db	#-127,#0x00
   01F4 81 00               292 	.db	#-127,#0x00
   01F6 81 00               293 	.db	#-127,#0x00
   01F8 81 00               294 	.db	#-127,#0x00
   01FA 81 00               295 	.db	#-127,#0x00
   01FC 81 00               296 	.db	#-127,#0x00
   01FE 81 00               297 	.db	#-127,#0x00
   0200 81 00               298 	.db	#-127,#0x00
   0202 81 00               299 	.db	#-127,#0x00
   0204 81 00               300 	.db	#-127,#0x00
   0206 81 00               301 	.db	#-127,#0x00
   0208 81 00               302 	.db	#-127,#0x00
   020A 81 00               303 	.db	#-127,#0x00
   020C 81 00               304 	.db	#-127,#0x00
   020E 81 00               305 	.db	#-127,#0x00
   0210 83 00               306 	.db	#-125,#0x00
   0212 00                  307 	.db	0
                            308 ;demo.c:42: volatile int vbicount=0;
   0213 FD 21r40s40         309 	ld	iy,#_vbicount
   0217 FD 36 00 00         310 	ld	0 (iy),#0x00
   021B FD 21r40s40         311 	ld	iy,#_vbicount
   021F FD 36 01 00         312 	ld	1 (iy),#0x00
                            313 ;demo.c:43: volatile int tick=0;
   0223 FD 21r42s40         314 	ld	iy,#_tick
   0227 FD 36 00 00         315 	ld	0 (iy),#0x00
   022B FD 21r42s40         316 	ld	iy,#_tick
   022F FD 36 01 00         317 	ld	1 (iy),#0x00
                            318 ;demo.c:213: uint8_t yofff = 0;
   0233 FD 21r4Cs40         319 	ld	iy,#_yofff
   0237 FD 36 00 00         320 	ld	0 (iy),#0x00
                            321 ;demo.c:214: uint8_t cc = 0;
   023B FD 21r4Ds40         322 	ld	iy,#_cc
   023F FD 36 00 00         323 	ld	0 (iy),#0x00
                            324 ;demo.c:215: static int flipper = 0;
   0243 FD 21r4Es40         325 	ld	iy,#_flipper
   0247 FD 36 00 00         326 	ld	0 (iy),#0x00
   024B FD 21r4Es40         327 	ld	iy,#_flipper
   024F FD 36 01 00         328 	ld	1 (iy),#0x00
                            329 ;demo.c:216: static int ymmmf = 0;
   0253 FD 21r50s40         330 	ld	iy,#_ymmmf
   0257 FD 36 00 00         331 	ld	0 (iy),#0x00
   025B FD 21r50s40         332 	ld	iy,#_ymmmf
   025F FD 36 01 00         333 	ld	1 (iy),#0x00
                            334 ;demo.c:248: char block_init = 0;
   0263 FD 21r52s40         335 	ld	iy,#_block_init
   0267 FD 36 00 00         336 	ld	0 (iy),#0x00
                            337 ;demo.c:250: int bsx = 0;
   026B FD 21r53s40         338 	ld	iy,#_bsx
   026F FD 36 00 00         339 	ld	0 (iy),#0x00
   0273 FD 21r53s40         340 	ld	iy,#_bsx
   0277 FD 36 01 00         341 	ld	1 (iy),#0x00
                            342 ;demo.c:251: int bsy = 0;
   027B FD 21r55s40         343 	ld	iy,#_bsy
   027F FD 36 00 00         344 	ld	0 (iy),#0x00
   0283 FD 21r55s40         345 	ld	iy,#_bsy
   0287 FD 36 01 00         346 	ld	1 (iy),#0x00
                            347 ;demo.c:252: int btx = 0;
   028B FD 21r57s40         348 	ld	iy,#_btx
   028F FD 36 00 00         349 	ld	0 (iy),#0x00
   0293 FD 21r57s40         350 	ld	iy,#_btx
   0297 FD 36 01 00         351 	ld	1 (iy),#0x00
                            352 ;demo.c:253: int bty = 0;
   029B FD 21r59s40         353 	ld	iy,#_bty
   029F FD 36 00 00         354 	ld	0 (iy),#0x00
   02A3 FD 21r59s40         355 	ld	iy,#_bty
   02A7 FD 36 01 00         356 	ld	1 (iy),#0x00
                            357 ;demo.c:255: int btab[16] = {0};
   02AB 21r5Bs40            358 	ld	hl,#_btab
   02AE CDr00s00            359 	call	__initrleblock
   02B1 E0 00               360 	.db	#-32,#0x00
   02B3 00                  361 	.db	0
                            362 ;demo.c:257: int flof = 0;
   02B4 FD 21r7Bs40         363 	ld	iy,#_flof
   02B8 FD 36 00 00         364 	ld	0 (iy),#0x00
   02BC FD 21r7Bs40         365 	ld	iy,#_flof
   02C0 FD 36 01 00         366 	ld	1 (iy),#0x00
                            367 ;demo.c:307: int linenum = 0;
   02C4 FD 21r7Ds40         368 	ld	iy,#_linenum
   02C8 FD 36 00 00         369 	ld	0 (iy),#0x00
   02CC FD 21r7Ds40         370 	ld	iy,#_linenum
   02D0 FD 36 01 00         371 	ld	1 (iy),#0x00
                            372 ;demo.c:376: int lx = 0;
   02D4 FD 21r7Fs40         373 	ld	iy,#_lx
   02D8 FD 36 00 00         374 	ld	0 (iy),#0x00
   02DC FD 21r7Fs40         375 	ld	iy,#_lx
   02E0 FD 36 01 00         376 	ld	1 (iy),#0x00
                            377 ;demo.c:377: int ly = 0;
   02E4 FD 21r81s40         378 	ld	iy,#_ly
   02E8 FD 36 00 00         379 	ld	0 (iy),#0x00
   02EC FD 21r81s40         380 	ld	iy,#_ly
   02F0 FD 36 01 00         381 	ld	1 (iy),#0x00
                            382 ;demo.c:441: static int xo = 0;
   02F4 FD 21r83s40         383 	ld	iy,#_xo
   02F8 FD 36 00 00         384 	ld	0 (iy),#0x00
   02FC FD 21r83s40         385 	ld	iy,#_xo
   0300 FD 36 01 00         386 	ld	1 (iy),#0x00
                            387 ;demo.c:442: static int yo = 0;
   0304 FD 21r85s40         388 	ld	iy,#_yo
   0308 FD 36 00 00         389 	ld	0 (iy),#0x00
   030C FD 21r85s40         390 	ld	iy,#_yo
   0310 FD 36 01 00         391 	ld	1 (iy),#0x00
                            392 ;demo.c:443: static int po = 0;
   0314 FD 21r87s40         393 	ld	iy,#_po
   0318 FD 36 00 00         394 	ld	0 (iy),#0x00
   031C FD 21r87s40         395 	ld	iy,#_po
   0320 FD 36 01 00         396 	ld	1 (iy),#0x00
                            397 ;demo.c:444: static int fffaaa = 0;
   0324 FD 21r89s40         398 	ld	iy,#_fffaaa
   0328 FD 36 00 00         399 	ld	0 (iy),#0x00
   032C FD 21r89s40         400 	ld	iy,#_fffaaa
   0330 FD 36 01 00         401 	ld	1 (iy),#0x00
                            402 ;--------------------------------------------------------
                            403 ; Home
                            404 ;--------------------------------------------------------
                            405 	.area _HOME
                            406 	.area _HOME
                            407 ;--------------------------------------------------------
                            408 ; code
                            409 ;--------------------------------------------------------
                            410 	.area _CODE
                            411 ;demo.c:46: int isNthBitSet (unsigned char c, int n) {
                            412 ;	---------------------------------
                            413 ; Function isNthBitSet
                            414 ; ---------------------------------
   0000                     415 _isNthBitSet_start::
   0000                     416 _isNthBitSet:
   0000 DD E5               417 	push	ix
   0002 DD 21 00 00         418 	ld	ix,#0
   0006 DD 39               419 	add	ix,sp
                            420 ;demo.c:48: return ((c & mask[n]) != 0);
   0008 3Er44               421 	ld	a,#<_isNthBitSet_mask_1_1
   000A DD 86 05            422 	add	a,5 (ix)
   000D 4F                  423 	ld	c,a
   000E 3Es40               424 	ld	a,#>_isNthBitSet_mask_1_1
   0010 DD 8E 06            425 	adc	a,6 (ix)
   0013 47                  426 	ld	b,a
   0014 0A                  427 	ld	a,(bc)
   0015 DD A6 04            428 	and	a,4 (ix)
   0018 20 04               429 	jr	NZ,00103$
   001A 3E 01               430 	ld	a,#0x01
   001C 18 01               431 	jr	00104$
   001E                     432 00103$:
   001E AF                  433 	xor	a,a
   001F                     434 00104$:
   001F B7                  435 	or	a,a
   0020 D6 01               436 	sub	a,#0x01
   0022 3E 00               437 	ld	a,#0x00
   0024 17                  438 	rla
   0025 4F                  439 	ld	c,a
   0026 69                  440 	ld	l,c
   0027 26 00               441 	ld	h,#0x00
   0029 DD E1               442 	pop	ix
   002B C9                  443 	ret
   002C                     444 _isNthBitSet_end::
   002C                     445 _sintabx:
   002C 78 00               446 	.dw #0x0078
   002E 7A 00               447 	.dw #0x007A
   0030 7D 00               448 	.dw #0x007D
   0032 80 00               449 	.dw #0x0080
   0034 83 00               450 	.dw #0x0083
   0036 86 00               451 	.dw #0x0086
   0038 89 00               452 	.dw #0x0089
   003A 8C 00               453 	.dw #0x008C
   003C 8F 00               454 	.dw #0x008F
   003E 92 00               455 	.dw #0x0092
   0040 95 00               456 	.dw #0x0095
   0042 98 00               457 	.dw #0x0098
   0044 9A 00               458 	.dw #0x009A
   0046 9D 00               459 	.dw #0x009D
   0048 A0 00               460 	.dw #0x00A0
   004A A3 00               461 	.dw #0x00A3
   004C A5 00               462 	.dw #0x00A5
   004E A8 00               463 	.dw #0x00A8
   0050 AB 00               464 	.dw #0x00AB
   0052 AD 00               465 	.dw #0x00AD
   0054 B0 00               466 	.dw #0x00B0
   0056 B3 00               467 	.dw #0x00B3
   0058 B5 00               468 	.dw #0x00B5
   005A B8 00               469 	.dw #0x00B8
   005C BA 00               470 	.dw #0x00BA
   005E BD 00               471 	.dw #0x00BD
   0060 BF 00               472 	.dw #0x00BF
   0062 C1 00               473 	.dw #0x00C1
   0064 C4 00               474 	.dw #0x00C4
   0066 C6 00               475 	.dw #0x00C6
   0068 C8 00               476 	.dw #0x00C8
   006A CA 00               477 	.dw #0x00CA
   006C CC 00               478 	.dw #0x00CC
   006E CE 00               479 	.dw #0x00CE
   0070 D0 00               480 	.dw #0x00D0
   0072 D2 00               481 	.dw #0x00D2
   0074 D4 00               482 	.dw #0x00D4
   0076 D6 00               483 	.dw #0x00D6
   0078 D8 00               484 	.dw #0x00D8
   007A DA 00               485 	.dw #0x00DA
   007C DB 00               486 	.dw #0x00DB
   007E DD 00               487 	.dw #0x00DD
   0080 DE 00               488 	.dw #0x00DE
   0082 E0 00               489 	.dw #0x00E0
   0084 E1 00               490 	.dw #0x00E1
   0086 E3 00               491 	.dw #0x00E3
   0088 E4 00               492 	.dw #0x00E4
   008A E5 00               493 	.dw #0x00E5
   008C E6 00               494 	.dw #0x00E6
   008E E7 00               495 	.dw #0x00E7
   0090 E8 00               496 	.dw #0x00E8
   0092 E9 00               497 	.dw #0x00E9
   0094 EA 00               498 	.dw #0x00EA
   0096 EB 00               499 	.dw #0x00EB
   0098 EC 00               500 	.dw #0x00EC
   009A ED 00               501 	.dw #0x00ED
   009C ED 00               502 	.dw #0x00ED
   009E EE 00               503 	.dw #0x00EE
   00A0 EE 00               504 	.dw #0x00EE
   00A2 EF 00               505 	.dw #0x00EF
   00A4 EF 00               506 	.dw #0x00EF
   00A6 EF 00               507 	.dw #0x00EF
   00A8 EF 00               508 	.dw #0x00EF
   00AA EF 00               509 	.dw #0x00EF
   00AC F0 00               510 	.dw #0x00F0
   00AE EF 00               511 	.dw #0x00EF
   00B0 EF 00               512 	.dw #0x00EF
   00B2 EF 00               513 	.dw #0x00EF
   00B4 EF 00               514 	.dw #0x00EF
   00B6 EF 00               515 	.dw #0x00EF
   00B8 EE 00               516 	.dw #0x00EE
   00BA EE 00               517 	.dw #0x00EE
   00BC ED 00               518 	.dw #0x00ED
   00BE ED 00               519 	.dw #0x00ED
   00C0 EC 00               520 	.dw #0x00EC
   00C2 EB 00               521 	.dw #0x00EB
   00C4 EA 00               522 	.dw #0x00EA
   00C6 E9 00               523 	.dw #0x00E9
   00C8 E8 00               524 	.dw #0x00E8
   00CA E7 00               525 	.dw #0x00E7
   00CC E6 00               526 	.dw #0x00E6
   00CE E5 00               527 	.dw #0x00E5
   00D0 E4 00               528 	.dw #0x00E4
   00D2 E3 00               529 	.dw #0x00E3
   00D4 E1 00               530 	.dw #0x00E1
   00D6 E0 00               531 	.dw #0x00E0
   00D8 DE 00               532 	.dw #0x00DE
   00DA DD 00               533 	.dw #0x00DD
   00DC DB 00               534 	.dw #0x00DB
   00DE DA 00               535 	.dw #0x00DA
   00E0 D8 00               536 	.dw #0x00D8
   00E2 D6 00               537 	.dw #0x00D6
   00E4 D4 00               538 	.dw #0x00D4
   00E6 D2 00               539 	.dw #0x00D2
   00E8 D0 00               540 	.dw #0x00D0
   00EA CE 00               541 	.dw #0x00CE
   00EC CC 00               542 	.dw #0x00CC
   00EE CA 00               543 	.dw #0x00CA
   00F0 C8 00               544 	.dw #0x00C8
   00F2 C6 00               545 	.dw #0x00C6
   00F4 C4 00               546 	.dw #0x00C4
   00F6 C1 00               547 	.dw #0x00C1
   00F8 BF 00               548 	.dw #0x00BF
   00FA BD 00               549 	.dw #0x00BD
   00FC BA 00               550 	.dw #0x00BA
   00FE B8 00               551 	.dw #0x00B8
   0100 B5 00               552 	.dw #0x00B5
   0102 B3 00               553 	.dw #0x00B3
   0104 B0 00               554 	.dw #0x00B0
   0106 AD 00               555 	.dw #0x00AD
   0108 AB 00               556 	.dw #0x00AB
   010A A8 00               557 	.dw #0x00A8
   010C A5 00               558 	.dw #0x00A5
   010E A3 00               559 	.dw #0x00A3
   0110 A0 00               560 	.dw #0x00A0
   0112 9D 00               561 	.dw #0x009D
   0114 9A 00               562 	.dw #0x009A
   0116 98 00               563 	.dw #0x0098
   0118 95 00               564 	.dw #0x0095
   011A 92 00               565 	.dw #0x0092
   011C 8F 00               566 	.dw #0x008F
   011E 8C 00               567 	.dw #0x008C
   0120 89 00               568 	.dw #0x0089
   0122 86 00               569 	.dw #0x0086
   0124 83 00               570 	.dw #0x0083
   0126 80 00               571 	.dw #0x0080
   0128 7D 00               572 	.dw #0x007D
   012A 7A 00               573 	.dw #0x007A
   012C 78 00               574 	.dw #0x0078
   012E 75 00               575 	.dw #0x0075
   0130 72 00               576 	.dw #0x0072
   0132 6F 00               577 	.dw #0x006F
   0134 6C 00               578 	.dw #0x006C
   0136 69 00               579 	.dw #0x0069
   0138 66 00               580 	.dw #0x0066
   013A 63 00               581 	.dw #0x0063
   013C 60 00               582 	.dw #0x0060
   013E 5D 00               583 	.dw #0x005D
   0140 5A 00               584 	.dw #0x005A
   0142 57 00               585 	.dw #0x0057
   0144 55 00               586 	.dw #0x0055
   0146 52 00               587 	.dw #0x0052
   0148 4F 00               588 	.dw #0x004F
   014A 4C 00               589 	.dw #0x004C
   014C 4A 00               590 	.dw #0x004A
   014E 47 00               591 	.dw #0x0047
   0150 44 00               592 	.dw #0x0044
   0152 42 00               593 	.dw #0x0042
   0154 3F 00               594 	.dw #0x003F
   0156 3C 00               595 	.dw #0x003C
   0158 3A 00               596 	.dw #0x003A
   015A 37 00               597 	.dw #0x0037
   015C 35 00               598 	.dw #0x0035
   015E 32 00               599 	.dw #0x0032
   0160 30 00               600 	.dw #0x0030
   0162 2E 00               601 	.dw #0x002E
   0164 2B 00               602 	.dw #0x002B
   0166 29 00               603 	.dw #0x0029
   0168 27 00               604 	.dw #0x0027
   016A 25 00               605 	.dw #0x0025
   016C 23 00               606 	.dw #0x0023
   016E 21 00               607 	.dw #0x0021
   0170 1F 00               608 	.dw #0x001F
   0172 1D 00               609 	.dw #0x001D
   0174 1B 00               610 	.dw #0x001B
   0176 19 00               611 	.dw #0x0019
   0178 17 00               612 	.dw #0x0017
   017A 15 00               613 	.dw #0x0015
   017C 14 00               614 	.dw #0x0014
   017E 12 00               615 	.dw #0x0012
   0180 11 00               616 	.dw #0x0011
   0182 0F 00               617 	.dw #0x000F
   0184 0E 00               618 	.dw #0x000E
   0186 0C 00               619 	.dw #0x000C
   0188 0B 00               620 	.dw #0x000B
   018A 0A 00               621 	.dw #0x000A
   018C 09 00               622 	.dw #0x0009
   018E 08 00               623 	.dw #0x0008
   0190 07 00               624 	.dw #0x0007
   0192 06 00               625 	.dw #0x0006
   0194 05 00               626 	.dw #0x0005
   0196 04 00               627 	.dw #0x0004
   0198 03 00               628 	.dw #0x0003
   019A 02 00               629 	.dw #0x0002
   019C 02 00               630 	.dw #0x0002
   019E 01 00               631 	.dw #0x0001
   01A0 01 00               632 	.dw #0x0001
   01A2 00 00               633 	.dw #0x0000
   01A4 00 00               634 	.dw #0x0000
   01A6 00 00               635 	.dw #0x0000
   01A8 00 00               636 	.dw #0x0000
   01AA 00 00               637 	.dw #0x0000
   01AC 00 00               638 	.dw #0x0000
   01AE 00 00               639 	.dw #0x0000
   01B0 00 00               640 	.dw #0x0000
   01B2 00 00               641 	.dw #0x0000
   01B4 00 00               642 	.dw #0x0000
   01B6 00 00               643 	.dw #0x0000
   01B8 01 00               644 	.dw #0x0001
   01BA 01 00               645 	.dw #0x0001
   01BC 02 00               646 	.dw #0x0002
   01BE 02 00               647 	.dw #0x0002
   01C0 03 00               648 	.dw #0x0003
   01C2 04 00               649 	.dw #0x0004
   01C4 05 00               650 	.dw #0x0005
   01C6 06 00               651 	.dw #0x0006
   01C8 07 00               652 	.dw #0x0007
   01CA 08 00               653 	.dw #0x0008
   01CC 09 00               654 	.dw #0x0009
   01CE 0A 00               655 	.dw #0x000A
   01D0 0B 00               656 	.dw #0x000B
   01D2 0C 00               657 	.dw #0x000C
   01D4 0E 00               658 	.dw #0x000E
   01D6 0F 00               659 	.dw #0x000F
   01D8 11 00               660 	.dw #0x0011
   01DA 12 00               661 	.dw #0x0012
   01DC 14 00               662 	.dw #0x0014
   01DE 15 00               663 	.dw #0x0015
   01E0 17 00               664 	.dw #0x0017
   01E2 19 00               665 	.dw #0x0019
   01E4 1B 00               666 	.dw #0x001B
   01E6 1D 00               667 	.dw #0x001D
   01E8 1F 00               668 	.dw #0x001F
   01EA 21 00               669 	.dw #0x0021
   01EC 23 00               670 	.dw #0x0023
   01EE 25 00               671 	.dw #0x0025
   01F0 27 00               672 	.dw #0x0027
   01F2 29 00               673 	.dw #0x0029
   01F4 2B 00               674 	.dw #0x002B
   01F6 2E 00               675 	.dw #0x002E
   01F8 30 00               676 	.dw #0x0030
   01FA 32 00               677 	.dw #0x0032
   01FC 35 00               678 	.dw #0x0035
   01FE 37 00               679 	.dw #0x0037
   0200 3A 00               680 	.dw #0x003A
   0202 3C 00               681 	.dw #0x003C
   0204 3F 00               682 	.dw #0x003F
   0206 42 00               683 	.dw #0x0042
   0208 44 00               684 	.dw #0x0044
   020A 47 00               685 	.dw #0x0047
   020C 4A 00               686 	.dw #0x004A
   020E 4C 00               687 	.dw #0x004C
   0210 4F 00               688 	.dw #0x004F
   0212 52 00               689 	.dw #0x0052
   0214 55 00               690 	.dw #0x0055
   0216 57 00               691 	.dw #0x0057
   0218 5A 00               692 	.dw #0x005A
   021A 5D 00               693 	.dw #0x005D
   021C 60 00               694 	.dw #0x0060
   021E 63 00               695 	.dw #0x0063
   0220 66 00               696 	.dw #0x0066
   0222 69 00               697 	.dw #0x0069
   0224 6C 00               698 	.dw #0x006C
   0226 6F 00               699 	.dw #0x006F
   0228 72 00               700 	.dw #0x0072
   022A 75 00               701 	.dw #0x0075
                            702 ;demo.c:55: void my_isr(void) interrupt
                            703 ;	---------------------------------
                            704 ; Function my_isr
                            705 ; ---------------------------------
   022C                     706 _my_isr_start::
   022C                     707 _my_isr:
   022C F5                  708 	push	af
   022D C5                  709 	push	bc
   022E D5                  710 	push	de
   022F E5                  711 	push	hl
   0230 FD E5               712 	push	iy
                            713 ;demo.c:57: DI;
   0232 F3                  714 		di 
                            715 ;demo.c:59: READ_VDP_STATUS;
   0233 DB 99               716 		in a,(#0x99) 
                            717 ;demo.c:61: PLY_Play();
   0235 CDr00s00            718 	call	_PLY_Play
                            719 ;demo.c:62: PLY_SendRegisters();
   0238 CDr00s00            720 	call	_PLY_SendRegisters
                            721 ;demo.c:64: vbicount+=2;
   023B 21r40s40            722 	ld	hl,#_vbicount
   023E 7E                  723 	ld	a,(hl)
   023F C6 02               724 	add	a,#0x02
   0241 23                  725 	inc	hl
   0242 2B                  726 	dec	hl
   0243 C5                  727 	push	bc
   0244 4F                  728 	ld	c, a
   0245 23                  729 	inc	hl
   0246 7E                  730 	ld	a, (hl)
   0247 47                  731 	ld	b, a
   0248 79                  732 	ld	a, c
   0249 2B                  733 	dec	hl
   024A 77                  734 	ld	(hl), a
   024B 78                  735 	ld	a, b
   024C C1                  736 	pop	bc
   024D CE 00               737 	adc	a,#0x00
   024F 23                  738 	inc	hl
   0250 77                  739 	ld	(hl),a
                            740 ;demo.c:65: tick++;
   0251 FD 21r42s40         741 	ld	iy,#_tick
   0255 FD 34 00            742 	inc	0 (iy)
   0258 20 07               743 	jr	NZ,00103$
   025A FD 21r42s40         744 	ld	iy,#_tick
   025E FD 34 01            745 	inc	1 (iy)
   0261                     746 00103$:
                            747 ;demo.c:67: EI;
   0261 FB                  748 		ei 
   0262 FD E1               749 	pop	iy
   0264 E1                  750 	pop	hl
   0265 D1                  751 	pop	de
   0266 C1                  752 	pop	bc
   0267 F1                  753 	pop	af
   0268 ED 4D               754 	reti
   026A                     755 _my_isr_end::
                            756 ;demo.c:70: void color_isr(void) interrupt
                            757 ;	---------------------------------
                            758 ; Function color_isr
                            759 ; ---------------------------------
   026A                     760 _color_isr_start::
   026A                     761 _color_isr:
   026A F5                  762 	push	af
   026B C5                  763 	push	bc
   026C D5                  764 	push	de
   026D E5                  765 	push	hl
   026E FD E5               766 	push	iy
                            767 ;demo.c:72: DI;
   0270 F3                  768 		di 
                            769 ;demo.c:74: if(isNthBitSet(vdp2_status(1),0)) {
   0271 3E 01               770 	ld	a,#0x01
   0273 F5                  771 	push	af
   0274 33                  772 	inc	sp
   0275 CDr00s00            773 	call	_vdp2_status
   0278 33                  774 	inc	sp
   0279 4D                  775 	ld	c,l
   027A 21 00 00            776 	ld	hl,#0x0000
   027D E5                  777 	push	hl
   027E 79                  778 	ld	a,c
   027F F5                  779 	push	af
   0280 33                  780 	inc	sp
   0281 CDr00s00            781 	call	_isNthBitSet
   0284 F1                  782 	pop	af
   0285 33                  783 	inc	sp
   0286 44                  784 	ld	b,h
   0287 4D                  785 	ld	c,l
   0288 79                  786 	ld	a,c
   0289 B0                  787 	or	a,b
   028A 28 19               788 	jr	Z,00102$
                            789 ;demo.c:75: vdp_register(VDP_VOFFSET,sintab[vbicount & 255]);
   028C 21r40s40            790 	ld	hl,#_vbicount + 0
   028F 4E                  791 	ld	c,(hl)
   0290 06 00               792 	ld	b,#0x00
   0292 21r00s00            793 	ld	hl,#_sintab
   0295 09                  794 	add	hl,bc
   0296 7E                  795 	ld	a,(hl)
   0297 F5                  796 	push	af
   0298 33                  797 	inc	sp
   0299 3E 17               798 	ld	a,#0x17
   029B F5                  799 	push	af
   029C 33                  800 	inc	sp
   029D CDr00s00            801 	call	_vdp_register
   02A0 F1                  802 	pop	af
                            803 ;demo.c:76: READ_VDP_STATUS;
   02A1 DB 99               804 		in a,(#0x99) 
   02A3 18 18               805 	jr	00103$
   02A5                     806 00102$:
                            807 ;demo.c:79: READ_VDP_STATUS;
   02A5 DB 99               808 		in a,(#0x99) 
                            809 ;demo.c:80: vbicount++;
   02A7 FD 21r40s40         810 	ld	iy,#_vbicount
   02AB FD 34 00            811 	inc	0 (iy)
   02AE 20 07               812 	jr	NZ,00107$
   02B0 FD 21r40s40         813 	ld	iy,#_vbicount
   02B4 FD 34 01            814 	inc	1 (iy)
   02B7                     815 00107$:
                            816 ;demo.c:83: PLY_Play();
   02B7 CDr00s00            817 	call	_PLY_Play
                            818 ;demo.c:84: PLY_SendRegisters();
   02BA CDr00s00            819 	call	_PLY_SendRegisters
   02BD                     820 00103$:
                            821 ;demo.c:87: EI;
   02BD FB                  822 		ei 
   02BE FD E1               823 	pop	iy
   02C0 E1                  824 	pop	hl
   02C1 D1                  825 	pop	de
   02C2 C1                  826 	pop	bc
   02C3 F1                  827 	pop	af
   02C4 ED 4D               828 	reti
   02C6                     829 _color_isr_end::
                            830 ;demo.c:94: uint8_t ge5_load(char *file_name, uint8_t vramh, uint16_t vraml) {
                            831 ;	---------------------------------
                            832 ; Function ge5_load
                            833 ; ---------------------------------
   02C6                     834 _ge5_load_start::
   02C6                     835 _ge5_load:
   02C6 DD E5               836 	push	ix
   02C8 DD 21 00 00         837 	ld	ix,#0
   02CC DD 39               838 	add	ix,sp
   02CE 21 D2 FF            839 	ld	hl,#-46
   02D1 39                  840 	add	hl,sp
   02D2 F9                  841 	ld	sp,hl
                            842 ;demo.c:98: memset((uint8_t *) &f, 0, sizeof(fcb));
   02D3 21 00 00            843 	ld	hl,#0x0000
   02D6 39                  844 	add	hl,sp
   02D7 4D                  845 	ld	c,l
   02D8 44                  846 	ld	b,h
   02D9 21 2E 00            847 	ld	hl,#0x002E
   02DC E5                  848 	push	hl
   02DD 3E 00               849 	ld	a,#0x00
   02DF F5                  850 	push	af
   02E0 33                  851 	inc	sp
   02E1 C5                  852 	push	bc
   02E2 CDr00s00            853 	call	_memset
   02E5 F1                  854 	pop	af
   02E6 F1                  855 	pop	af
   02E7 33                  856 	inc	sp
                            857 ;demo.c:100: f.record_size = 128;
   02E8 21 00 00            858 	ld	hl,#0x0000
   02EB 39                  859 	add	hl,sp
   02EC 4D                  860 	ld	c,l
   02ED 44                  861 	ld	b,h
   02EE 21 0F 00            862 	ld	hl,#0x000F
   02F1 09                  863 	add	hl,bc
   02F2 EB                  864 	ex	de,hl
   02F3 3E 80               865 	ld	a,#0x80
   02F5 12                  866 	ld	(de),a
                            867 ;demo.c:101: f.drive = 0;
   02F6 3E 00               868 	ld	a,#0x00
   02F8 02                  869 	ld	(bc),a
                            870 ;demo.c:103: memcpy(f.name, file_name, 11);
   02F9 DD 5E 04            871 	ld	e,4 (ix)
   02FC DD 56 05            872 	ld	d,5 (ix)
   02FF 03                  873 	inc	bc
   0300 21 0B 00            874 	ld	hl,#0x000B
   0303 E5                  875 	push	hl
   0304 D5                  876 	push	de
   0305 C5                  877 	push	bc
   0306 CDr00s00            878 	call	_memcpy
   0309 F1                  879 	pop	af
   030A F1                  880 	pop	af
   030B F1                  881 	pop	af
                            882 ;demo.c:105: if (open(&f) != 0) return 0;
   030C 21 00 00            883 	ld	hl,#0x0000
   030F 39                  884 	add	hl,sp
   0310 E5                  885 	push	hl
   0311 CDr00s00            886 	call	_open
   0314 F1                  887 	pop	af
   0315 AF                  888 	xor	a,a
   0316 B5                  889 	or	a,l
   0317 28 05               890 	jr	Z,00102$
   0319 2E 00               891 	ld	l,#0x00
   031B C3r92s03            892 	jp	00114$
   031E                     893 00102$:
                            894 ;demo.c:106: vdp_set_write_address(vramh, vraml);
   031E DD 6E 07            895 	ld	l,7 (ix)
   0321 DD 66 08            896 	ld	h,8 (ix)
   0324 E5                  897 	push	hl
   0325 DD 7E 06            898 	ld	a,6 (ix)
   0328 F5                  899 	push	af
   0329 33                  900 	inc	sp
   032A CDr00s00            901 	call	_vdp_set_write_address
   032D F1                  902 	pop	af
   032E 33                  903 	inc	sp
                            904 ;demo.c:108: for (i = 0; i < 213; i++) {
   032F 0E 00               905 	ld	c,#0x00
   0331                     906 00110$:
   0331 79                  907 	ld	a,c
   0332 D6 D5               908 	sub	a,#0xD5
   0334 D2r87s03            909 	jp	NC,00113$
                            910 ;demo.c:109: if (block_set_data_ptr(scratch) != 0) return 0;
   0337 C5                  911 	push	bc
   0338 21r80s3F            912 	ld	hl,#_scratch
   033B E5                  913 	push	hl
   033C CDr00s00            914 	call	_block_set_data_ptr
   033F F1                  915 	pop	af
   0340 7D                  916 	ld	a,l
   0341 C1                  917 	pop	bc
   0342 47                  918 	ld	b,a
   0343 B7                  919 	or	a,a
   0344 28 05               920 	jr	Z,00104$
   0346 2E 00               921 	ld	l,#0x00
   0348 C3r92s03            922 	jp	00114$
   034B                     923 00104$:
                            924 ;demo.c:110: if (block_read(&f) != 0) return 0;
   034B 21 00 00            925 	ld	hl,#0x0000
   034E 39                  926 	add	hl,sp
   034F C5                  927 	push	bc
   0350 E5                  928 	push	hl
   0351 CDr00s00            929 	call	_block_read
   0354 F1                  930 	pop	af
   0355 7D                  931 	ld	a,l
   0356 C1                  932 	pop	bc
   0357 47                  933 	ld	b,a
   0358 B7                  934 	or	a,a
   0359 28 04               935 	jr	Z,00106$
   035B 2E 00               936 	ld	l,#0x00
   035D 18 33               937 	jr	00114$
   035F                     938 00106$:
                            939 ;demo.c:112: if (i == 0) vdp_load_screen(scratch + 7, 121);   // to skip GE5 header
   035F AF                  940 	xor	a,a
   0360 B1                  941 	or	a,c
   0361 20 11               942 	jr	NZ,00108$
   0363 11r87s3F            943 	ld	de,#_scratch + 7
   0366 C5                  944 	push	bc
   0367 3E 79               945 	ld	a,#0x79
   0369 F5                  946 	push	af
   036A 33                  947 	inc	sp
   036B D5                  948 	push	de
   036C CDr00s00            949 	call	_vdp_load_screen
   036F F1                  950 	pop	af
   0370 33                  951 	inc	sp
   0371 C1                  952 	pop	bc
   0372 18 0F               953 	jr	00112$
   0374                     954 00108$:
                            955 ;demo.c:113: else vdp_load_screen(scratch, 128);
   0374 C5                  956 	push	bc
   0375 3E 80               957 	ld	a,#0x80
   0377 F5                  958 	push	af
   0378 33                  959 	inc	sp
   0379 21r80s3F            960 	ld	hl,#_scratch
   037C E5                  961 	push	hl
   037D CDr00s00            962 	call	_vdp_load_screen
   0380 F1                  963 	pop	af
   0381 33                  964 	inc	sp
   0382 C1                  965 	pop	bc
   0383                     966 00112$:
                            967 ;demo.c:108: for (i = 0; i < 213; i++) {
   0383 0C                  968 	inc	c
   0384 C3r31s03            969 	jp	00110$
   0387                     970 00113$:
                            971 ;demo.c:116: close(&f);
   0387 21 00 00            972 	ld	hl,#0x0000
   038A 39                  973 	add	hl,sp
   038B E5                  974 	push	hl
   038C CDr00s00            975 	call	_close
   038F F1                  976 	pop	af
                            977 ;demo.c:118: return 1;
   0390 2E 01               978 	ld	l,#0x01
   0392                     979 00114$:
   0392 DD F9               980 	ld	sp,ix
   0394 DD E1               981 	pop	ix
   0396 C9                  982 	ret
   0397                     983 _ge5_load_end::
                            984 ;demo.c:121: void scratch_clear() {
                            985 ;	---------------------------------
                            986 ; Function scratch_clear
                            987 ; ---------------------------------
   0397                     988 _scratch_clear_start::
   0397                     989 _scratch_clear:
                            990 ;demo.c:122: memset((uint8_t *) &scratch, 0, 128);
   0397 21 80 00            991 	ld	hl,#0x0080
   039A E5                  992 	push	hl
   039B 3E 00               993 	ld	a,#0x00
   039D F5                  994 	push	af
   039E 33                  995 	inc	sp
   039F 21r80s3F            996 	ld	hl,#_scratch
   03A2 E5                  997 	push	hl
   03A3 CDr00s00            998 	call	_memset
   03A6 F1                  999 	pop	af
   03A7 F1                 1000 	pop	af
   03A8 33                 1001 	inc	sp
   03A9 C9                 1002 	ret
   03AA                    1003 _scratch_clear_end::
                           1004 ;demo.c:125: uint8_t pal_load(char *file_name, uint8_t ss) {
                           1005 ;	---------------------------------
                           1006 ; Function pal_load
                           1007 ; ---------------------------------
   03AA                    1008 _pal_load_start::
   03AA                    1009 _pal_load:
   03AA DD E5              1010 	push	ix
   03AC DD 21 00 00        1011 	ld	ix,#0
   03B0 DD 39              1012 	add	ix,sp
   03B2 21 D2 FF           1013 	ld	hl,#-46
   03B5 39                 1014 	add	hl,sp
   03B6 F9                 1015 	ld	sp,hl
                           1016 ;demo.c:128: memset((uint8_t *) &f, 0, sizeof(fcb));
   03B7 21 00 00           1017 	ld	hl,#0x0000
   03BA 39                 1018 	add	hl,sp
   03BB 4D                 1019 	ld	c,l
   03BC 44                 1020 	ld	b,h
   03BD 21 2E 00           1021 	ld	hl,#0x002E
   03C0 E5                 1022 	push	hl
   03C1 3E 00              1023 	ld	a,#0x00
   03C3 F5                 1024 	push	af
   03C4 33                 1025 	inc	sp
   03C5 C5                 1026 	push	bc
   03C6 CDr00s00           1027 	call	_memset
   03C9 F1                 1028 	pop	af
   03CA F1                 1029 	pop	af
   03CB 33                 1030 	inc	sp
                           1031 ;demo.c:129: scratch_clear();
   03CC CDr97s03           1032 	call	_scratch_clear
                           1033 ;demo.c:131: f.record_size = ss;
   03CF 21 00 00           1034 	ld	hl,#0x0000
   03D2 39                 1035 	add	hl,sp
   03D3 4D                 1036 	ld	c,l
   03D4 44                 1037 	ld	b,h
   03D5 21 0F 00           1038 	ld	hl,#0x000F
   03D8 09                 1039 	add	hl,bc
   03D9 EB                 1040 	ex	de,hl
   03DA DD 7E 06           1041 	ld	a,6 (ix)
   03DD 12                 1042 	ld	(de),a
                           1043 ;demo.c:132: f.drive = 0;
   03DE 3E 00              1044 	ld	a,#0x00
   03E0 02                 1045 	ld	(bc),a
                           1046 ;demo.c:134: memcpy(f.name, file_name, 11);
   03E1 DD 5E 04           1047 	ld	e,4 (ix)
   03E4 DD 56 05           1048 	ld	d,5 (ix)
   03E7 03                 1049 	inc	bc
   03E8 21 0B 00           1050 	ld	hl,#0x000B
   03EB E5                 1051 	push	hl
   03EC D5                 1052 	push	de
   03ED C5                 1053 	push	bc
   03EE CDr00s00           1054 	call	_memcpy
   03F1 F1                 1055 	pop	af
   03F2 F1                 1056 	pop	af
   03F3 F1                 1057 	pop	af
                           1058 ;demo.c:136: if (open(&f) != 0) return 0;
   03F4 21 00 00           1059 	ld	hl,#0x0000
   03F7 39                 1060 	add	hl,sp
   03F8 E5                 1061 	push	hl
   03F9 CDr00s00           1062 	call	_open
   03FC F1                 1063 	pop	af
   03FD AF                 1064 	xor	a,a
   03FE B5                 1065 	or	a,l
   03FF 28 04              1066 	jr	Z,00102$
   0401 2E 00              1067 	ld	l,#0x00
   0403 18 40              1068 	jr	00107$
   0405                    1069 00102$:
                           1070 ;demo.c:137: if (block_set_data_ptr(scratch) != 0) return 0;
   0405 21r80s3F           1071 	ld	hl,#_scratch
   0408 E5                 1072 	push	hl
   0409 CDr00s00           1073 	call	_block_set_data_ptr
   040C F1                 1074 	pop	af
   040D AF                 1075 	xor	a,a
   040E B5                 1076 	or	a,l
   040F 28 04              1077 	jr	Z,00104$
   0411 2E 00              1078 	ld	l,#0x00
   0413 18 30              1079 	jr	00107$
   0415                    1080 00104$:
                           1081 ;demo.c:138: if (block_read(&f) != 0) return 0;
   0415 21 00 00           1082 	ld	hl,#0x0000
   0418 39                 1083 	add	hl,sp
   0419 E5                 1084 	push	hl
   041A CDr00s00           1085 	call	_block_read
   041D F1                 1086 	pop	af
   041E AF                 1087 	xor	a,a
   041F B5                 1088 	or	a,l
   0420 28 04              1089 	jr	Z,00106$
   0422 2E 00              1090 	ld	l,#0x00
   0424 18 1F              1091 	jr	00107$
   0426                    1092 00106$:
                           1093 ;demo.c:140: memcpy(cur_palette, scratch+7, ss);
   0426 DD 4E 06           1094 	ld	c,6 (ix)
   0429 06 00              1095 	ld	b,#0x00
   042B 11r87s3F           1096 	ld	de,#_scratch + 7
   042E C5                 1097 	push	bc
   042F D5                 1098 	push	de
   0430 21r00s40           1099 	ld	hl,#_cur_palette
   0433 E5                 1100 	push	hl
   0434 CDr00s00           1101 	call	_memcpy
   0437 F1                 1102 	pop	af
   0438 F1                 1103 	pop	af
   0439 F1                 1104 	pop	af
                           1105 ;demo.c:142: close(&f);
   043A 21 00 00           1106 	ld	hl,#0x0000
   043D 39                 1107 	add	hl,sp
   043E E5                 1108 	push	hl
   043F CDr00s00           1109 	call	_close
   0442 F1                 1110 	pop	af
                           1111 ;demo.c:143: return 1;
   0443 2E 01              1112 	ld	l,#0x01
   0445                    1113 00107$:
   0445 DD F9              1114 	ld	sp,ix
   0447 DD E1              1115 	pop	ix
   0449 C9                 1116 	ret
   044A                    1117 _pal_load_end::
                           1118 ;demo.c:147: void pause() {
                           1119 ;	---------------------------------
                           1120 ; Function pause
                           1121 ; ---------------------------------
   044A                    1122 _pause_start::
   044A                    1123 _pause:
                           1124 ;demo.c:148: uint8_t i,j,k = 0;
                           1125 ;demo.c:149: for (i = 0; i < 255; i++) {	
   044A 01 00 00           1126 	ld	bc,#0x0000
   044D                    1127 00104$:
   044D 78                 1128 	ld	a,b
   044E D6 FF              1129 	sub	a,#0xFF
   0450 D0                 1130 	ret	NC
                           1131 ;demo.c:150: for (j = 0; j < 255; j++) {
   0451 59                 1132 	ld	e,c
   0452 16 FF              1133 	ld	d,#0xFF
   0454                    1134 00103$:
                           1135 ;demo.c:151: k++;
   0454 1C                 1136 	inc	e
   0455 15                 1137 	dec	d
                           1138 ;demo.c:150: for (j = 0; j < 255; j++) {
   0456 AF                 1139 	xor	a,a
   0457 B2                 1140 	or	a,d
   0458 20 FA              1141 	jr	NZ,00103$
                           1142 ;demo.c:149: for (i = 0; i < 255; i++) {	
   045A 4B                 1143 	ld	c,e
   045B 04                 1144 	inc	b
   045C 18 EF              1145 	jr	00104$
   045E                    1146 _pause_end::
                           1147 ;demo.c:157: uint8_t raw_load(char *file_name, int size, char* buffer) {
                           1148 ;	---------------------------------
                           1149 ; Function raw_load
                           1150 ; ---------------------------------
   045E                    1151 _raw_load_start::
   045E                    1152 _raw_load:
   045E DD E5              1153 	push	ix
   0460 DD 21 00 00        1154 	ld	ix,#0
   0464 DD 39              1155 	add	ix,sp
   0466 21 D2 FF           1156 	ld	hl,#-46
   0469 39                 1157 	add	hl,sp
   046A F9                 1158 	ld	sp,hl
                           1159 ;demo.c:162: memset((uint8_t *) &f, 0, sizeof(fcb));
   046B 21 00 00           1160 	ld	hl,#0x0000
   046E 39                 1161 	add	hl,sp
   046F 4D                 1162 	ld	c,l
   0470 44                 1163 	ld	b,h
   0471 21 2E 00           1164 	ld	hl,#0x002E
   0474 E5                 1165 	push	hl
   0475 3E 00              1166 	ld	a,#0x00
   0477 F5                 1167 	push	af
   0478 33                 1168 	inc	sp
   0479 C5                 1169 	push	bc
   047A CDr00s00           1170 	call	_memset
   047D F1                 1171 	pop	af
   047E F1                 1172 	pop	af
   047F 33                 1173 	inc	sp
                           1174 ;demo.c:163: scratch_clear();
   0480 CDr97s03           1175 	call	_scratch_clear
                           1176 ;demo.c:165: f.record_size = 128;
   0483 21 00 00           1177 	ld	hl,#0x0000
   0486 39                 1178 	add	hl,sp
   0487 4D                 1179 	ld	c,l
   0488 44                 1180 	ld	b,h
   0489 21 0F 00           1181 	ld	hl,#0x000F
   048C 09                 1182 	add	hl,bc
   048D EB                 1183 	ex	de,hl
   048E 3E 80              1184 	ld	a,#0x80
   0490 12                 1185 	ld	(de),a
                           1186 ;demo.c:166: f.drive = 0;
   0491 3E 00              1187 	ld	a,#0x00
   0493 02                 1188 	ld	(bc),a
                           1189 ;demo.c:168: memcpy(f.name, file_name, 11);
   0494 DD 5E 04           1190 	ld	e,4 (ix)
   0497 DD 56 05           1191 	ld	d,5 (ix)
   049A 03                 1192 	inc	bc
   049B 21 0B 00           1193 	ld	hl,#0x000B
   049E E5                 1194 	push	hl
   049F D5                 1195 	push	de
   04A0 C5                 1196 	push	bc
   04A1 CDr00s00           1197 	call	_memcpy
   04A4 F1                 1198 	pop	af
   04A5 F1                 1199 	pop	af
   04A6 F1                 1200 	pop	af
                           1201 ;demo.c:170: if (open(&f) != 0) return 0;
   04A7 21 00 00           1202 	ld	hl,#0x0000
   04AA 39                 1203 	add	hl,sp
   04AB E5                 1204 	push	hl
   04AC CDr00s00           1205 	call	_open
   04AF F1                 1206 	pop	af
   04B0 AF                 1207 	xor	a,a
   04B1 B5                 1208 	or	a,l
   04B2 28 05              1209 	jr	Z,00116$
   04B4 2E 00              1210 	ld	l,#0x00
   04B6 C3r1Ds05           1211 	jp	00110$
                           1212 ;demo.c:172: while(total < size) {
   04B9                    1213 00116$:
   04B9 01 00 00           1214 	ld	bc,#0x0000
   04BC                    1215 00107$:
   04BC 79                 1216 	ld	a,c
   04BD DD 96 06           1217 	sub	a,6 (ix)
   04C0 78                 1218 	ld	a,b
   04C1 DD 9E 07           1219 	sbc	a,7 (ix)
   04C4 F2r12s05           1220 	jp	P,00109$
                           1221 ;demo.c:173: if (block_set_data_ptr(scratch) != 0) return 0;
   04C7 C5                 1222 	push	bc
   04C8 21r80s3F           1223 	ld	hl,#_scratch
   04CB E5                 1224 	push	hl
   04CC CDr00s00           1225 	call	_block_set_data_ptr
   04CF F1                 1226 	pop	af
   04D0 5D                 1227 	ld	e,l
   04D1 C1                 1228 	pop	bc
   04D2 AF                 1229 	xor	a,a
   04D3 B3                 1230 	or	a,e
   04D4 28 04              1231 	jr	Z,00104$
   04D6 2E 00              1232 	ld	l,#0x00
   04D8 18 43              1233 	jr	00110$
   04DA                    1234 00104$:
                           1235 ;demo.c:174: if (block_read(&f) != 0) return 0;
   04DA 21 00 00           1236 	ld	hl,#0x0000
   04DD 39                 1237 	add	hl,sp
   04DE C5                 1238 	push	bc
   04DF E5                 1239 	push	hl
   04E0 CDr00s00           1240 	call	_block_read
   04E3 F1                 1241 	pop	af
   04E4 5D                 1242 	ld	e,l
   04E5 C1                 1243 	pop	bc
   04E6 AF                 1244 	xor	a,a
   04E7 B3                 1245 	or	a,e
   04E8 28 04              1246 	jr	Z,00106$
   04EA 2E 00              1247 	ld	l,#0x00
   04EC 18 2F              1248 	jr	00110$
   04EE                    1249 00106$:
                           1250 ;demo.c:176: memcpy(buffer+total,scratch,incr);
   04EE DD 7E 08           1251 	ld	a,8 (ix)
   04F1 81                 1252 	add	a,c
   04F2 5F                 1253 	ld	e,a
   04F3 DD 7E 09           1254 	ld	a,9 (ix)
   04F6 88                 1255 	adc	a,b
   04F7 57                 1256 	ld	d,a
   04F8 C5                 1257 	push	bc
   04F9 21 80 00           1258 	ld	hl,#0x0080
   04FC E5                 1259 	push	hl
   04FD 21r80s3F           1260 	ld	hl,#_scratch
   0500 E5                 1261 	push	hl
   0501 D5                 1262 	push	de
   0502 CDr00s00           1263 	call	_memcpy
   0505 F1                 1264 	pop	af
   0506 F1                 1265 	pop	af
   0507 F1                 1266 	pop	af
   0508 C1                 1267 	pop	bc
                           1268 ;demo.c:178: total+=incr;
   0509 21 80 00           1269 	ld	hl,#0x0080
   050C 09                 1270 	add	hl,bc
   050D 4D                 1271 	ld	c,l
   050E 44                 1272 	ld	b,h
   050F C3rBCs04           1273 	jp	00107$
   0512                    1274 00109$:
                           1275 ;demo.c:181: close(&f);
   0512 21 00 00           1276 	ld	hl,#0x0000
   0515 39                 1277 	add	hl,sp
   0516 E5                 1278 	push	hl
   0517 CDr00s00           1279 	call	_close
   051A F1                 1280 	pop	af
                           1281 ;demo.c:183: return 1;
   051B 2E 01              1282 	ld	l,#0x01
   051D                    1283 00110$:
   051D DD F9              1284 	ld	sp,ix
   051F DD E1              1285 	pop	ix
   0521 C9                 1286 	ret
   0522                    1287 _raw_load_end::
                           1288 ;demo.c:186: void fadein() {
                           1289 ;	---------------------------------
                           1290 ; Function fadein
                           1291 ; ---------------------------------
   0522                    1292 _fadein_start::
   0522                    1293 _fadein:
   0522 DD E5              1294 	push	ix
   0524 DD 21 00 00        1295 	ld	ix,#0
   0528 DD 39              1296 	add	ix,sp
   052A F5                 1297 	push	af
                           1298 ;demo.c:189: if (tick < 4) return;
   052B 3Ar42s40           1299 	ld	a,(#_tick+0)
   052E D6 04              1300 	sub	a,#0x04
   0530 3Ar43s40           1301 	ld	a,(#_tick+1)
   0533 DE 00              1302 	sbc	a,#0x00
   0535 F2r3Bs05           1303 	jp	P,00102$
   0538 C3rE9s05           1304 	jp	00113$
   053B                    1305 00102$:
                           1306 ;demo.c:191: tick = 0;
   053B 21r42s40           1307 	ld	hl,#_tick + 0
   053E 36 00              1308 	ld	(hl), #0x00
   0540 21r43s40           1309 	ld	hl,#_tick + 1
   0543 36 00              1310 	ld	(hl), #0x00
                           1311 ;demo.c:193: for(i = 0; i < 32; i+=2) {
   0545 0E 00              1312 	ld	c,#0x00
   0547                    1313 00109$:
   0547 79                 1314 	ld	a,c
   0548 D6 20              1315 	sub	a,#0x20
   054A D2rE1s05           1316 	jp	NC,00112$
                           1317 ;demo.c:194: uint8_t r = scratch[i] >> 4;
   054D 3Er80              1318 	ld	a,#<_scratch
   054F 81                 1319 	add	a,c
   0550 5F                 1320 	ld	e,a
   0551 3Es3F              1321 	ld	a,#>_scratch
   0553 CE 00              1322 	adc	a,#0x00
   0555 57                 1323 	ld	d,a
   0556 1A                 1324 	ld	a,(de)
   0557 47                 1325 	ld	b,a
   0558 58                 1326 	ld	e,b
   0559 CB 3B              1327 	srl	e
   055B CB 3B              1328 	srl	e
   055D CB 3B              1329 	srl	e
   055F CB 3B              1330 	srl	e
                           1331 ;demo.c:195: uint8_t b = scratch[i] & 0xf;
   0561 78                 1332 	ld	a,b
   0562 E6 0F              1333 	and	a,#0x0F
   0564 DD 77 FF           1334 	ld	-1 (ix),a
                           1335 ;demo.c:196: uint8_t g = scratch[i+1];
   0567 51                 1336 	ld	d,c
   0568 14                 1337 	inc	d
   0569 3Er80              1338 	ld	a,#<_scratch
   056B 82                 1339 	add	a,d
   056C 6F                 1340 	ld	l,a
   056D 3Es3F              1341 	ld	a,#>_scratch
   056F CE 00              1342 	adc	a,#0x00
   0571 67                 1343 	ld	h,a
   0572 56                 1344 	ld	d,(hl)
   0573 DD 72 FE           1345 	ld	-2 (ix),d
                           1346 ;demo.c:198: if (r < (cur_palette[i] >> 4)) r++;
   0576 3Er00              1347 	ld	a,#<_cur_palette
   0578 81                 1348 	add	a,c
   0579 6F                 1349 	ld	l,a
   057A 3Es40              1350 	ld	a,#>_cur_palette
   057C CE 00              1351 	adc	a,#0x00
   057E 67                 1352 	ld	h,a
   057F 56                 1353 	ld	d,(hl)
   0580 CB 3A              1354 	srl	d
   0582 CB 3A              1355 	srl	d
   0584 CB 3A              1356 	srl	d
   0586 CB 3A              1357 	srl	d
   0588 7B                 1358 	ld	a,e
   0589 92                 1359 	sub	a,d
   058A 30 01              1360 	jr	NC,00104$
   058C 1C                 1361 	inc	e
   058D                    1362 00104$:
                           1363 ;demo.c:199: if (b < (cur_palette[i] & 0xf)) b++;
   058D 3Er00              1364 	ld	a,#<_cur_palette
   058F 81                 1365 	add	a,c
   0590 6F                 1366 	ld	l,a
   0591 3Es40              1367 	ld	a,#>_cur_palette
   0593 CE 00              1368 	adc	a,#0x00
   0595 67                 1369 	ld	h,a
   0596 7E                 1370 	ld	a,(hl)
   0597 E6 0F              1371 	and	a,#0x0F
   0599 47                 1372 	ld	b,a
   059A DD 7E FF           1373 	ld	a,-1 (ix)
   059D 90                 1374 	sub	a,b
   059E 30 03              1375 	jr	NC,00106$
   05A0 DD 34 FF           1376 	inc	-1 (ix)
   05A3                    1377 00106$:
                           1378 ;demo.c:201: scratch[i] = (r << 4) | b;
   05A3 3Er80              1379 	ld	a,#<_scratch
   05A5 81                 1380 	add	a,c
   05A6 47                 1381 	ld	b,a
   05A7 3Es3F              1382 	ld	a,#>_scratch
   05A9 CE 00              1383 	adc	a,#0x00
   05AB 57                 1384 	ld	d,a
   05AC 7B                 1385 	ld	a,e
   05AD 07                 1386 	rlca
   05AE 07                 1387 	rlca
   05AF 07                 1388 	rlca
   05B0 07                 1389 	rlca
   05B1 E6 F0              1390 	and	a,#0xF0
   05B3 DD B6 FF           1391 	or	a,-1 (ix)
   05B6 68                 1392 	ld	l,b
   05B7 62                 1393 	ld	h,d
   05B8 77                 1394 	ld	(hl),a
                           1395 ;demo.c:202: if (g < cur_palette[i+1]) scratch[i+1]++;
   05B9 41                 1396 	ld	b,c
   05BA 04                 1397 	inc	b
   05BB 3Er00              1398 	ld	a,#<_cur_palette
   05BD 80                 1399 	add	a,b
   05BE 5F                 1400 	ld	e,a
   05BF 3Es40              1401 	ld	a,#>_cur_palette
   05C1 CE 00              1402 	adc	a,#0x00
   05C3 57                 1403 	ld	d,a
   05C4 1A                 1404 	ld	a,(de)
   05C5 5F                 1405 	ld	e,a
   05C6 DD 7E FE           1406 	ld	a,-2 (ix)
   05C9 93                 1407 	sub	a,e
   05CA 30 10              1408 	jr	NC,00111$
   05CC 3Er80              1409 	ld	a,#<_scratch
   05CE 80                 1410 	add	a,b
   05CF 47                 1411 	ld	b,a
   05D0 3Es3F              1412 	ld	a,#>_scratch
   05D2 CE 00              1413 	adc	a,#0x00
   05D4 5F                 1414 	ld	e,a
   05D5 68                 1415 	ld	l,b
   05D6 67                 1416 	ld	h,a
   05D7 7E                 1417 	ld	a,(hl)
   05D8 3C                 1418 	inc	a
   05D9 68                 1419 	ld	l,b
   05DA 63                 1420 	ld	h,e
   05DB 77                 1421 	ld	(hl),a
   05DC                    1422 00111$:
                           1423 ;demo.c:193: for(i = 0; i < 32; i+=2) {
   05DC 0C                 1424 	inc	c
   05DD 0C                 1425 	inc	c
   05DE C3r47s05           1426 	jp	00109$
   05E1                    1427 00112$:
                           1428 ;demo.c:206: vdp_load_palette(scratch);
   05E1 21r80s3F           1429 	ld	hl,#_scratch
   05E4 E5                 1430 	push	hl
   05E5 CDr00s00           1431 	call	_vdp_load_palette
   05E8 F1                 1432 	pop	af
   05E9                    1433 00113$:
   05E9 DD F9              1434 	ld	sp,ix
   05EB DD E1              1435 	pop	ix
   05ED C9                 1436 	ret
   05EE                    1437 _fadein_end::
                           1438 ;demo.c:218: void do_ymmm() {
                           1439 ;	---------------------------------
                           1440 ; Function do_ymmm
                           1441 ; ---------------------------------
   05EE                    1442 _do_ymmm_start::
   05EE                    1443 _do_ymmm:
   05EE DD E5              1444 	push	ix
   05F0 DD 21 00 00        1445 	ld	ix,#0
   05F4 DD 39              1446 	add	ix,sp
   05F6 21 EB FF           1447 	ld	hl,#-21
   05F9 39                 1448 	add	hl,sp
   05FA F9                 1449 	ld	sp,hl
                           1450 ;demo.c:223: if (tick > 32) { tick = 0; flipper++;}
   05FB 3E 20              1451 	ld	a,#0x20
   05FD FD 21r42s40        1452 	ld	iy,#_tick
   0601 FD 96 00           1453 	sub	a,0 (iy)
   0604 3E 00              1454 	ld	a,#0x00
   0606 FD 21r42s40        1455 	ld	iy,#_tick
   060A FD 9E 01           1456 	sbc	a,1 (iy)
   060D F2r2As06           1457 	jp	P,00102$
   0610 21r42s40           1458 	ld	hl,#_tick + 0
   0613 36 00              1459 	ld	(hl), #0x00
   0615 21r43s40           1460 	ld	hl,#_tick + 1
   0618 36 00              1461 	ld	(hl), #0x00
   061A FD 21r4Es40        1462 	ld	iy,#_flipper
   061E FD 34 00           1463 	inc	0 (iy)
   0621 20 07              1464 	jr	NZ,00115$
   0623 FD 21r4Es40        1465 	ld	iy,#_flipper
   0627 FD 34 01           1466 	inc	1 (iy)
   062A                    1467 00115$:
   062A                    1468 00102$:
                           1469 ;demo.c:224: if (flipper > 10) { flipper = 0;}
   062A 3E 0A              1470 	ld	a,#0x0A
   062C FD 21r4Es40        1471 	ld	iy,#_flipper
   0630 FD 96 00           1472 	sub	a,0 (iy)
   0633 3E 00              1473 	ld	a,#0x00
   0635 FD 21r4Es40        1474 	ld	iy,#_flipper
   0639 FD 9E 01           1475 	sbc	a,1 (iy)
   063C F2r49s06           1476 	jp	P,00104$
   063F 21r4Es40           1477 	ld	hl,#_flipper + 0
   0642 36 00              1478 	ld	(hl), #0x00
   0644 21r4Fs40           1479 	ld	hl,#_flipper + 1
   0647 36 00              1480 	ld	(hl), #0x00
   0649                    1481 00104$:
                           1482 ;demo.c:226: ymmmf++;
   0649 FD 21r50s40        1483 	ld	iy,#_ymmmf
   064D FD 34 00           1484 	inc	0 (iy)
   0650 20 07              1485 	jr	NZ,00116$
   0652 FD 21r50s40        1486 	ld	iy,#_ymmmf
   0656 FD 34 01           1487 	inc	1 (iy)
   0659                    1488 00116$:
                           1489 ;demo.c:227: for (yofff = 0; yofff<212-step;yofff+=step) {
   0659 21r4Cs40           1490 	ld	hl,#_yofff + 0
   065C 36 00              1491 	ld	(hl), #0x00
   065E                    1492 00105$:
   065E 3Ar4Cs40           1493 	ld	a,(#_yofff+0)
   0661 DD 77 ED           1494 	ld	-19 (ix),a
   0664 DD 36 EE 00        1495 	ld	-18 (ix),#0x00
   0668 DD 7E ED           1496 	ld	a,-19 (ix)
   066B D6 D2              1497 	sub	a,#0xD2
   066D DD 7E EE           1498 	ld	a,-18 (ix)
   0670 DE 00              1499 	sbc	a,#0x00
   0672 F2r1Es07           1500 	jp	P,00109$
                           1501 ;demo.c:228: xo = (sintabx[(yofff+ymmmf) & 255]);
   0675 21r50s40           1502 	ld	hl,#_ymmmf
   0678 DD 7E ED           1503 	ld	a,-19 (ix)
   067B 86                 1504 	add	a,(hl)
   067C 5F                 1505 	ld	e,a
   067D DD 7E EE           1506 	ld	a,-18 (ix)
   0680 23                 1507 	inc	hl
   0681 8E                 1508 	adc	a,(hl)
   0682 16 00              1509 	ld	d,#0x00
   0684 CB 23              1510 	sla	e
   0686 CB 12              1511 	rl	d
   0688 21r2Cs00           1512 	ld	hl,#_sintabx
   068B 19                 1513 	add	hl,de
   068C 5E                 1514 	ld	e,(hl)
   068D 23                 1515 	inc	hl
   068E 56                 1516 	ld	d,(hl)
   068F DD 73 EF           1517 	ld	-17 (ix),e
   0692 DD 72 F0           1518 	ld	-16 (ix),d
                           1519 ;demo.c:231: cmd.source_x = 0;
   0695 21 06 00           1520 	ld	hl,#0x0006
   0698 39                 1521 	add	hl,sp
   0699 36 00              1522 	ld	(hl),#0x00
   069B 23                 1523 	inc	hl
   069C 36 00              1524 	ld	(hl),#0x00
                           1525 ;demo.c:232: cmd.source_y = 0+yofff;
   069E 21 06 00           1526 	ld	hl,#0x0006
   06A1 39                 1527 	add	hl,sp
   06A2 EB                 1528 	ex	de,hl
   06A3 4B                 1529 	ld	c,e
   06A4 42                 1530 	ld	b,d
   06A5 69                 1531 	ld	l,c
   06A6 60                 1532 	ld	h,b
   06A7 23                 1533 	inc	hl
   06A8 23                 1534 	inc	hl
   06A9 DD 7E ED           1535 	ld	a,-19 (ix)
   06AC 77                 1536 	ld	(hl),a
   06AD 23                 1537 	inc	hl
   06AE DD 7E EE           1538 	ld	a,-18 (ix)
   06B1 77                 1539 	ld	(hl),a
                           1540 ;demo.c:233: cmd.dest_x = xo;
   06B2 21 04 00           1541 	ld	hl,#0x0004
   06B5 19                 1542 	add	hl,de
   06B6 DD 7E EF           1543 	ld	a,-17 (ix)
   06B9 77                 1544 	ld	(hl),a
   06BA 23                 1545 	inc	hl
   06BB DD 7E F0           1546 	ld	a,-16 (ix)
   06BE 77                 1547 	ld	(hl),a
                           1548 ;demo.c:234: cmd.dest_y = 3+yofff;
   06BF 21 06 00           1549 	ld	hl,#0x0006
   06C2 19                 1550 	add	hl,de
   06C3 DD 75 EB           1551 	ld	-21 (ix),l
   06C6 DD 74 EC           1552 	ld	-20 (ix),h
   06C9 DD 7E ED           1553 	ld	a,-19 (ix)
   06CC C6 03              1554 	add	a,#0x03
   06CE 4F                 1555 	ld	c,a
   06CF DD 7E EE           1556 	ld	a,-18 (ix)
   06D2 CE 00              1557 	adc	a,#0x00
   06D4 47                 1558 	ld	b,a
   06D5 DD 6E EB           1559 	ld	l,-21 (ix)
   06D8 DD 66 EC           1560 	ld	h,-20 (ix)
   06DB 71                 1561 	ld	(hl),c
   06DC 23                 1562 	inc	hl
   06DD 70                 1563 	ld	(hl),b
                           1564 ;demo.c:235: cmd.size_x = 256;
   06DE 21 08 00           1565 	ld	hl,#0x0008
   06E1 19                 1566 	add	hl,de
   06E2 36 00              1567 	ld	(hl),#0x00
   06E4 23                 1568 	inc	hl
   06E5 36 01              1569 	ld	(hl),#0x01
                           1570 ;demo.c:236: cmd.size_y = 1;
   06E7 21 0A 00           1571 	ld	hl,#0x000A
   06EA 19                 1572 	add	hl,de
   06EB 36 01              1573 	ld	(hl),#0x01
   06ED 23                 1574 	inc	hl
   06EE 36 00              1575 	ld	(hl),#0x00
                           1576 ;demo.c:237: cmd.data = 0;
   06F0 21 0C 00           1577 	ld	hl,#0x000C
   06F3 19                 1578 	add	hl,de
   06F4 4D                 1579 	ld	c,l
   06F5 44                 1580 	ld	b,h
   06F6 3E 00              1581 	ld	a,#0x00
   06F8 02                 1582 	ld	(bc),a
                           1583 ;demo.c:238: cmd.argument = 0;
   06F9 21 0D 00           1584 	ld	hl,#0x000D
   06FC 19                 1585 	add	hl,de
   06FD 4D                 1586 	ld	c,l
   06FE 44                 1587 	ld	b,h
   06FF 3E 00              1588 	ld	a,#0x00
   0701 02                 1589 	ld	(bc),a
                           1590 ;demo.c:239: cmd.command = 0xD0;
   0702 21 0E 00           1591 	ld	hl,#0x000E
   0705 19                 1592 	add	hl,de
   0706 4D                 1593 	ld	c,l
   0707 44                 1594 	ld	b,h
   0708 3E D0              1595 	ld	a,#0xD0
   070A 02                 1596 	ld	(bc),a
                           1597 ;demo.c:242: vdp_copier(&cmd);
   070B D5                 1598 	push	de
   070C CDr00s00           1599 	call	_vdp_copier
   070F F1                 1600 	pop	af
                           1601 ;demo.c:227: for (yofff = 0; yofff<212-step;yofff+=step) {
   0710 21r4Cs40           1602 	ld	hl,#_yofff + 0
   0713 4E                 1603 	ld	c,(hl)
   0714 21r4Cs40           1604 	ld	hl,#_yofff
   0717 79                 1605 	ld	a,c
   0718 C6 02              1606 	add	a,#0x02
   071A 77                 1607 	ld	(hl),a
   071B C3r5Es06           1608 	jp	00105$
   071E                    1609 00109$:
   071E DD F9              1610 	ld	sp,ix
   0720 DD E1              1611 	pop	ix
   0722 C9                 1612 	ret
   0723                    1613 _do_ymmm_end::
                           1614 ;demo.c:259: void do_blocks() {
                           1615 ;	---------------------------------
                           1616 ; Function do_blocks
                           1617 ; ---------------------------------
   0723                    1618 _do_blocks_start::
   0723                    1619 _do_blocks:
   0723 DD E5              1620 	push	ix
   0725 DD 21 00 00        1621 	ld	ix,#0
   0729 DD 39              1622 	add	ix,sp
   072B 21 E9 FF           1623 	ld	hl,#-23
   072E 39                 1624 	add	hl,sp
   072F F9                 1625 	ld	sp,hl
                           1626 ;demo.c:262: int ys = 0;
   0730 DD 36 ED 00        1627 	ld	-19 (ix),#0x00
   0734 DD 36 EE 00        1628 	ld	-18 (ix),#0x00
                           1629 ;demo.c:263: int ye = 0;
   0738 DD 36 EB 00        1630 	ld	-21 (ix),#0x00
   073C DD 36 EC 00        1631 	ld	-20 (ix),#0x00
                           1632 ;demo.c:265: vdp_register(VDP_VOFFSET,0);
   0740 21 17 00           1633 	ld	hl,#0x0017
   0743 E5                 1634 	push	hl
   0744 CDr00s00           1635 	call	_vdp_register
   0747 F1                 1636 	pop	af
                           1637 ;demo.c:267: if (block_init == 0) {
   0748 AF                 1638 	xor	a,a
   0749 FD 21r52s40        1639 	ld	iy,#_block_init
   074D FD B6 00           1640 	or	a,0 (iy)
   0750 C2rB8s07           1641 	jp	NZ,00108$
                           1642 ;demo.c:269: vdp_set_screen5();
   0753 CDr00s00           1643 	call	_vdp_set_screen5
                           1644 ;demo.c:271: vdp_register(2, 0x5F);
   0756 21 02 5F           1645 	ld	hl,#0x5F02
   0759 E5                 1646 	push	hl
   075A CDr00s00           1647 	call	_vdp_register
   075D F1                 1648 	pop	af
                           1649 ;demo.c:273: for(i=0;i<16;i++) btab[i] = i*16;
   075E DD 36 EF 00        1650 	ld	-17 (ix),#0x00
   0762 DD 36 F0 00        1651 	ld	-16 (ix),#0x00
   0766                    1652 00110$:
   0766 DD 7E EF           1653 	ld	a,-17 (ix)
   0769 D6 10              1654 	sub	a,#0x10
   076B DD 7E F0           1655 	ld	a,-16 (ix)
   076E DE 00              1656 	sbc	a,#0x00
   0770 F2rA8s07           1657 	jp	P,00113$
   0773 DD 4E EF           1658 	ld	c,-17 (ix)
   0776 DD 46 F0           1659 	ld	b,-16 (ix)
   0779 CB 21              1660 	sla	c
   077B CB 10              1661 	rl	b
   077D 21r5Bs40           1662 	ld	hl,#_btab
   0780 09                 1663 	add	hl,bc
   0781 4D                 1664 	ld	c,l
   0782 44                 1665 	ld	b,h
   0783 DD 5E EF           1666 	ld	e,-17 (ix)
   0786 DD 56 F0           1667 	ld	d,-16 (ix)
   0789 CB 23              1668 	sla	e
   078B CB 12              1669 	rl	d
   078D CB 23              1670 	sla	e
   078F CB 12              1671 	rl	d
   0791 CB 23              1672 	sla	e
   0793 CB 12              1673 	rl	d
   0795 CB 23              1674 	sla	e
   0797 CB 12              1675 	rl	d
   0799 69                 1676 	ld	l,c
   079A 60                 1677 	ld	h,b
   079B 73                 1678 	ld	(hl),e
   079C 23                 1679 	inc	hl
   079D 72                 1680 	ld	(hl),d
   079E DD 34 EF           1681 	inc	-17 (ix)
   07A1 20 03              1682 	jr	NZ,00139$
   07A3 DD 34 F0           1683 	inc	-16 (ix)
   07A6                    1684 00139$:
   07A6 18 BE              1685 	jr	00110$
   07A8                    1686 00113$:
                           1687 ;demo.c:274: vdp_load_palette(block_palette);
   07A8 21r20s40           1688 	ld	hl,#_block_palette
   07AB E5                 1689 	push	hl
   07AC CDr00s00           1690 	call	_vdp_load_palette
   07AF F1                 1691 	pop	af
                           1692 ;demo.c:276: block_init = 1;
   07B0 21r52s40           1693 	ld	hl,#_block_init + 0
   07B3 36 01              1694 	ld	(hl), #0x01
   07B5 C3r77s09           1695 	jp	00122$
   07B8                    1696 00108$:
                           1697 ;demo.c:280: if (flof == 0) { ys = 0; ye = 8; }
   07B8 3Ar7Bs40           1698 	ld	a,(#_flof+0)
   07BB FD 21r7Bs40        1699 	ld	iy,#_flof
   07BF FD B6 01           1700 	or	a,1 (iy)
   07C2 20 10              1701 	jr	NZ,00102$
   07C4 DD 36 ED 00        1702 	ld	-19 (ix),#0x00
   07C8 DD 36 EE 00        1703 	ld	-18 (ix),#0x00
   07CC DD 36 EB 08        1704 	ld	-21 (ix),#0x08
   07D0 DD 36 EC 00        1705 	ld	-20 (ix),#0x00
   07D4                    1706 00102$:
                           1707 ;demo.c:281: if (flof == 1) { ys = 8; ye = 16; }
   07D4 3Ar7Bs40           1708 	ld	a,(#_flof+0)
   07D7 D6 01              1709 	sub	a,#0x01
   07D9 20 06              1710 	jr	NZ,00140$
   07DB 3Ar7Cs40           1711 	ld	a,(#_flof+1)
   07DE B7                 1712 	or	a,a
   07DF 28 02              1713 	jr	Z,00141$
   07E1                    1714 00140$:
   07E1 18 10              1715 	jr	00104$
   07E3                    1716 00141$:
   07E3 DD 36 ED 08        1717 	ld	-19 (ix),#0x08
   07E7 DD 36 EE 00        1718 	ld	-18 (ix),#0x00
   07EB DD 36 EB 10        1719 	ld	-21 (ix),#0x10
   07EF DD 36 EC 00        1720 	ld	-20 (ix),#0x00
   07F3                    1721 00104$:
                           1722 ;demo.c:283: for(bty=3;bty<11;bty++) {
   07F3 FD 21r59s40        1723 	ld	iy,#_bty
   07F7 FD 36 00 03        1724 	ld	0 (iy),#0x03
   07FB FD 21r59s40        1725 	ld	iy,#_bty
   07FF FD 36 01 00        1726 	ld	1 (iy),#0x00
   0803                    1727 00118$:
   0803 3Ar59s40           1728 	ld	a,(#_bty+0)
   0806 D6 0B              1729 	sub	a,#0x0B
   0808 3Ar5As40           1730 	ld	a,(#_bty+1)
   080B DE 00              1731 	sbc	a,#0x00
   080D F2r4Es09           1732 	jp	P,00121$
                           1733 ;demo.c:284: for(btx=ys;btx<ye;btx++) {
   0810 DD 7E ED           1734 	ld	a,-19 (ix)
   0813 FD 21r57s40        1735 	ld	iy,#_btx
   0817 FD 77 00           1736 	ld	0 (iy),a
   081A DD 7E EE           1737 	ld	a,-18 (ix)
   081D FD 21r57s40        1738 	ld	iy,#_btx
   0821 FD 77 01           1739 	ld	1 (iy),a
   0824                    1740 00114$:
   0824 3Ar57s40           1741 	ld	a,(#_btx+0)
   0827 DD 96 EB           1742 	sub	a,-21 (ix)
   082A 3Ar58s40           1743 	ld	a,(#_btx+1)
   082D DD 9E EC           1744 	sbc	a,-20 (ix)
   0830 F2r3Bs09           1745 	jp	P,00120$
                           1746 ;demo.c:285: bsx = (PLY_PSGReg8 & PLY_PSGReg9 | PLY_PSGReg10)>>1;
   0833 3Ar00s00           1747 	ld	a,(#_PLY_PSGReg8+0)
   0836 FD 21r00s00        1748 	ld	iy,#_PLY_PSGReg9
   083A FD A6 00           1749 	and	a,0 (iy)
   083D 21r00s00           1750 	ld	hl,#_PLY_PSGReg10 + 0
   0840 B6                 1751 	or	a,(hl)
   0841 4F                 1752 	ld	c,a
   0842 CB 39              1753 	srl	c
   0844 21r53s40           1754 	ld	hl,#_bsx + 0
   0847 71                 1755 	ld	(hl), c
   0848 21r54s40           1756 	ld	hl,#_bsx + 1
   084B 36 00              1757 	ld	(hl), #0x00
                           1758 ;demo.c:286: bsy = PLY_PSGReg10;
   084D 3Ar00s00           1759 	ld	a,(#_PLY_PSGReg10+0)
   0850 21r55s40           1760 	ld	hl,#_bsy + 0
   0853 77                 1761 	ld	(hl), a
   0854 21r56s40           1762 	ld	hl,#_bsy + 1
   0857 36 00              1763 	ld	(hl), #0x00
                           1764 ;demo.c:287: cmd.source_x = btab[bsx];
   0859 21 08 00           1765 	ld	hl,#0x0008
   085C 39                 1766 	add	hl,sp
   085D 4D                 1767 	ld	c,l
   085E 44                 1768 	ld	b,h
   085F 21r53s40           1769 	ld	hl,#_bsx + 0
   0862 5E                 1770 	ld	e,(hl)
   0863 21r54s40           1771 	ld	hl,#_bsx + 1
   0866 56                 1772 	ld	d,(hl)
   0867 CB 23              1773 	sla	e
   0869 CB 12              1774 	rl	d
   086B 21r5Bs40           1775 	ld	hl,#_btab
   086E 19                 1776 	add	hl,de
   086F 5E                 1777 	ld	e,(hl)
   0870 23                 1778 	inc	hl
   0871 56                 1779 	ld	d,(hl)
   0872 69                 1780 	ld	l,c
   0873 60                 1781 	ld	h,b
   0874 73                 1782 	ld	(hl),e
   0875 23                 1783 	inc	hl
   0876 72                 1784 	ld	(hl),d
                           1785 ;demo.c:288: cmd.source_y = 768+btab[bsy];
   0877 21 08 00           1786 	ld	hl,#0x0008
   087A 39                 1787 	add	hl,sp
   087B 4D                 1788 	ld	c,l
   087C 44                 1789 	ld	b,h
   087D 21 02 00           1790 	ld	hl,#0x0002
   0880 09                 1791 	add	hl,bc
   0881 DD 75 E9           1792 	ld	-23 (ix),l
   0884 DD 74 EA           1793 	ld	-22 (ix),h
   0887 21r55s40           1794 	ld	hl,#_bsy + 0
   088A 5E                 1795 	ld	e,(hl)
   088B 21r56s40           1796 	ld	hl,#_bsy + 1
   088E 56                 1797 	ld	d,(hl)
   088F CB 23              1798 	sla	e
   0891 CB 12              1799 	rl	d
   0893 21r5Bs40           1800 	ld	hl,#_btab
   0896 19                 1801 	add	hl,de
   0897 5E                 1802 	ld	e,(hl)
   0898 23                 1803 	inc	hl
   0899 56                 1804 	ld	d,(hl)
   089A 21 00 03           1805 	ld	hl,#0x0300
   089D 19                 1806 	add	hl,de
   089E EB                 1807 	ex	de,hl
   089F DD 6E E9           1808 	ld	l,-23 (ix)
   08A2 DD 66 EA           1809 	ld	h,-22 (ix)
   08A5 73                 1810 	ld	(hl),e
   08A6 23                 1811 	inc	hl
   08A7 72                 1812 	ld	(hl),d
                           1813 ;demo.c:289: cmd.dest_x = btab[btx];
   08A8 21 04 00           1814 	ld	hl,#0x0004
   08AB 09                 1815 	add	hl,bc
   08AC DD 75 E9           1816 	ld	-23 (ix),l
   08AF DD 74 EA           1817 	ld	-22 (ix),h
   08B2 21r57s40           1818 	ld	hl,#_btx + 0
   08B5 5E                 1819 	ld	e,(hl)
   08B6 21r58s40           1820 	ld	hl,#_btx + 1
   08B9 56                 1821 	ld	d,(hl)
   08BA CB 23              1822 	sla	e
   08BC CB 12              1823 	rl	d
   08BE 21r5Bs40           1824 	ld	hl,#_btab
   08C1 19                 1825 	add	hl,de
   08C2 5E                 1826 	ld	e,(hl)
   08C3 23                 1827 	inc	hl
   08C4 56                 1828 	ld	d,(hl)
   08C5 DD 6E E9           1829 	ld	l,-23 (ix)
   08C8 DD 66 EA           1830 	ld	h,-22 (ix)
   08CB 73                 1831 	ld	(hl),e
   08CC 23                 1832 	inc	hl
   08CD 72                 1833 	ld	(hl),d
                           1834 ;demo.c:290: cmd.dest_y = 512+btab[bty];
   08CE 21 06 00           1835 	ld	hl,#0x0006
   08D1 09                 1836 	add	hl,bc
   08D2 DD 75 E9           1837 	ld	-23 (ix),l
   08D5 DD 74 EA           1838 	ld	-22 (ix),h
   08D8 21r59s40           1839 	ld	hl,#_bty + 0
   08DB 5E                 1840 	ld	e,(hl)
   08DC 21r5As40           1841 	ld	hl,#_bty + 1
   08DF 56                 1842 	ld	d,(hl)
   08E0 CB 23              1843 	sla	e
   08E2 CB 12              1844 	rl	d
   08E4 21r5Bs40           1845 	ld	hl,#_btab
   08E7 19                 1846 	add	hl,de
   08E8 5E                 1847 	ld	e,(hl)
   08E9 23                 1848 	inc	hl
   08EA 56                 1849 	ld	d,(hl)
   08EB 21 00 02           1850 	ld	hl,#0x0200
   08EE 19                 1851 	add	hl,de
   08EF EB                 1852 	ex	de,hl
   08F0 DD 6E E9           1853 	ld	l,-23 (ix)
   08F3 DD 66 EA           1854 	ld	h,-22 (ix)
   08F6 73                 1855 	ld	(hl),e
   08F7 23                 1856 	inc	hl
   08F8 72                 1857 	ld	(hl),d
                           1858 ;demo.c:291: cmd.size_x = 16;
   08F9 21 08 00           1859 	ld	hl,#0x0008
   08FC 09                 1860 	add	hl,bc
   08FD 36 10              1861 	ld	(hl),#0x10
   08FF 23                 1862 	inc	hl
   0900 36 00              1863 	ld	(hl),#0x00
                           1864 ;demo.c:292: cmd.size_y = 16;
   0902 21 0A 00           1865 	ld	hl,#0x000A
   0905 09                 1866 	add	hl,bc
   0906 36 10              1867 	ld	(hl),#0x10
   0908 23                 1868 	inc	hl
   0909 36 00              1869 	ld	(hl),#0x00
                           1870 ;demo.c:293: cmd.data = 0;
   090B 21 0C 00           1871 	ld	hl,#0x000C
   090E 09                 1872 	add	hl,bc
   090F EB                 1873 	ex	de,hl
   0910 3E 00              1874 	ld	a,#0x00
   0912 12                 1875 	ld	(de),a
                           1876 ;demo.c:294: cmd.argument = 0x00;
   0913 21 0D 00           1877 	ld	hl,#0x000D
   0916 09                 1878 	add	hl,bc
   0917 EB                 1879 	ex	de,hl
   0918 3E 00              1880 	ld	a,#0x00
   091A 12                 1881 	ld	(de),a
                           1882 ;demo.c:295: cmd.command = 0xD0;
   091B 21 0E 00           1883 	ld	hl,#0x000E
   091E 09                 1884 	add	hl,bc
   091F EB                 1885 	ex	de,hl
   0920 3E D0              1886 	ld	a,#0xD0
   0922 12                 1887 	ld	(de),a
                           1888 ;demo.c:296: vdp_copier(&cmd);
   0923 C5                 1889 	push	bc
   0924 CDr00s00           1890 	call	_vdp_copier
   0927 F1                 1891 	pop	af
                           1892 ;demo.c:284: for(btx=ys;btx<ye;btx++) {
   0928 FD 21r57s40        1893 	ld	iy,#_btx
   092C FD 34 00           1894 	inc	0 (iy)
   092F 20 07              1895 	jr	NZ,00150$
   0931 FD 21r57s40        1896 	ld	iy,#_btx
   0935 FD 34 01           1897 	inc	1 (iy)
   0938                    1898 00150$:
   0938 C3r24s08           1899 	jp	00114$
   093B                    1900 00120$:
                           1901 ;demo.c:283: for(bty=3;bty<11;bty++) {
   093B FD 21r59s40        1902 	ld	iy,#_bty
   093F FD 34 00           1903 	inc	0 (iy)
   0942 20 07              1904 	jr	NZ,00151$
   0944 FD 21r59s40        1905 	ld	iy,#_bty
   0948 FD 34 01           1906 	inc	1 (iy)
   094B                    1907 00151$:
   094B C3r03s08           1908 	jp	00118$
   094E                    1909 00121$:
                           1910 ;demo.c:300: flof++;
   094E FD 21r7Bs40        1911 	ld	iy,#_flof
   0952 FD 34 00           1912 	inc	0 (iy)
   0955 20 07              1913 	jr	NZ,00152$
   0957 FD 21r7Bs40        1914 	ld	iy,#_flof
   095B FD 34 01           1915 	inc	1 (iy)
   095E                    1916 00152$:
                           1917 ;demo.c:301: if (flof == 2) flof = 0;
   095E 3Ar7Bs40           1918 	ld	a,(#_flof+0)
   0961 D6 02              1919 	sub	a,#0x02
   0963 20 06              1920 	jr	NZ,00153$
   0965 3Ar7Cs40           1921 	ld	a,(#_flof+1)
   0968 B7                 1922 	or	a,a
   0969 28 02              1923 	jr	Z,00154$
   096B                    1924 00153$:
   096B 18 0A              1925 	jr	00122$
   096D                    1926 00154$:
   096D 21r7Bs40           1927 	ld	hl,#_flof + 0
   0970 36 00              1928 	ld	(hl), #0x00
   0972 21r7Cs40           1929 	ld	hl,#_flof + 1
   0975 36 00              1930 	ld	(hl), #0x00
   0977                    1931 00122$:
   0977 DD F9              1932 	ld	sp,ix
   0979 DD E1              1933 	pop	ix
   097B C9                 1934 	ret
   097C                    1935 _do_blocks_end::
                           1936 ;demo.c:309: void raster_effu() {
                           1937 ;	---------------------------------
                           1938 ; Function raster_effu
                           1939 ; ---------------------------------
   097C                    1940 _raster_effu_start::
   097C                    1941 _raster_effu:
                           1942 ;demo.c:310: vdp_register(VDP_VOFFSET,0);
   097C 21 17 00           1943 	ld	hl,#0x0017
   097F E5                 1944 	push	hl
   0980 CDr00s00           1945 	call	_vdp_register
   0983 F1                 1946 	pop	af
                           1947 ;demo.c:311: waitVB();
   0984 76                 1948 		halt 
                           1949 ;demo.c:313: vdp_register(1,0x40); // disable vblank
   0985 21 01 40           1950 	ld	hl,#0x4001
   0988 E5                 1951 	push	hl
   0989 CDr00s00           1952 	call	_vdp_register
                           1953 ;demo.c:315: for (linenum = 40; linenum < 212; linenum+=4) {
   098C 3E 28              1954 	ld	a,#0x28
   098E 32r7Ds40           1955 	ld	(#_linenum + 0),a
   0991 F1                 1956 	pop	af
   0992 FD 21r7Ds40        1957 	ld	iy,#_linenum
   0996 FD 36 01 00        1958 	ld	1 (iy),#0x00
   099A                    1959 00101$:
   099A 3Ar7Ds40           1960 	ld	a,(#_linenum+0)
   099D D6 D4              1961 	sub	a,#0xD4
   099F 3Ar7Es40           1962 	ld	a,(#_linenum+1)
   09A2 DE 00              1963 	sbc	a,#0x00
   09A4 F2rD5s09           1964 	jp	P,00104$
                           1965 ;demo.c:316: vdp_register(19,linenum); // interrupt on line
   09A7 3Ar7Ds40           1966 	ld	a,(#_linenum+0)
   09AA F5                 1967 	push	af
   09AB 33                 1968 	inc	sp
   09AC 3E 13              1969 	ld	a,#0x13
   09AE F5                 1970 	push	af
   09AF 33                 1971 	inc	sp
   09B0 CDr00s00           1972 	call	_vdp_register
   09B3 F1                 1973 	pop	af
                           1974 ;demo.c:317: vdp_register(0,0x16); // mode SC5, IE1 interrupts on
   09B4 21 00 16           1975 	ld	hl,#0x1600
   09B7 E5                 1976 	push	hl
   09B8 CDr00s00           1977 	call	_vdp_register
   09BB F1                 1978 	pop	af
                           1979 ;demo.c:319: waitVB();
   09BC 76                 1980 		halt 
                           1981 ;demo.c:315: for (linenum = 40; linenum < 212; linenum+=4) {
   09BD 21r7Ds40           1982 	ld	hl,#_linenum
   09C0 7E                 1983 	ld	a,(hl)
   09C1 C6 04              1984 	add	a,#0x04
   09C3 23                 1985 	inc	hl
   09C4 2B                 1986 	dec	hl
   09C5 C5                 1987 	push	bc
   09C6 4F                 1988 	ld	c, a
   09C7 23                 1989 	inc	hl
   09C8 7E                 1990 	ld	a, (hl)
   09C9 47                 1991 	ld	b, a
   09CA 79                 1992 	ld	a, c
   09CB 2B                 1993 	dec	hl
   09CC 77                 1994 	ld	(hl), a
   09CD 78                 1995 	ld	a, b
   09CE C1                 1996 	pop	bc
   09CF CE 00              1997 	adc	a,#0x00
   09D1 23                 1998 	inc	hl
   09D2 77                 1999 	ld	(hl),a
   09D3 18 C5              2000 	jr	00101$
   09D5                    2001 00104$:
                           2002 ;demo.c:322: vdp_register(VDP_VOFFSET,0);
   09D5 21 17 00           2003 	ld	hl,#0x0017
   09D8 E5                 2004 	push	hl
   09D9 CDr00s00           2005 	call	_vdp_register
   09DC F1                 2006 	pop	af
                           2007 ;demo.c:336: vdp_register(0,0x6); // mode SC5, IE1 interrupts off
   09DD 21 00 06           2008 	ld	hl,#0x0600
   09E0 E5                 2009 	push	hl
   09E1 CDr00s00           2010 	call	_vdp_register
   09E4 F1                 2011 	pop	af
                           2012 ;demo.c:337: vdp_register(1,0x60); // enable vblank
   09E5 21 01 60           2013 	ld	hl,#0x6001
   09E8 E5                 2014 	push	hl
   09E9 CDr00s00           2015 	call	_vdp_register
   09EC F1                 2016 	pop	af
   09ED C9                 2017 	ret
   09EE                    2018 _raster_effu_end::
                           2019 ;demo.c:340: void twister() {
                           2020 ;	---------------------------------
                           2021 ; Function twister
                           2022 ; ---------------------------------
   09EE                    2023 _twister_start::
   09EE                    2024 _twister:
   09EE DD E5              2025 	push	ix
   09F0 DD 21 00 00        2026 	ld	ix,#0
   09F4 DD 39              2027 	add	ix,sp
   09F6 21 ED FF           2028 	ld	hl,#-19
   09F9 39                 2029 	add	hl,sp
   09FA F9                 2030 	ld	sp,hl
                           2031 ;demo.c:343: waitVB();
   09FB 76                 2032 		halt 
                           2033 ;demo.c:344: for (y = 0; y < 212; y+=4) {
   09FC DD 36 EF 00        2034 	ld	-17 (ix),#0x00
   0A00 DD 36 F0 00        2035 	ld	-16 (ix),#0x00
   0A04                    2036 00101$:
   0A04 DD 7E EF           2037 	ld	a,-17 (ix)
   0A07 D6 D4              2038 	sub	a,#0xD4
   0A09 DD 7E F0           2039 	ld	a,-16 (ix)
   0A0C DE 00              2040 	sbc	a,#0x00
   0A0E F2rB3s0A           2041 	jp	P,00105$
                           2042 ;demo.c:345: cmd.source_x = 0;
   0A11 21 04 00           2043 	ld	hl,#0x0004
   0A14 39                 2044 	add	hl,sp
   0A15 36 00              2045 	ld	(hl),#0x00
   0A17 23                 2046 	inc	hl
   0A18 36 00              2047 	ld	(hl),#0x00
                           2048 ;demo.c:346: sy = ((sintab[(vbicount+(y>>1)) & 255])>>1)+(256+64);
   0A1A DD 5E EF           2049 	ld	e,-17 (ix)
   0A1D DD 56 F0           2050 	ld	d,-16 (ix)
   0A20 CB 2A              2051 	sra	d
   0A22 CB 1B              2052 	rr	e
   0A24 3Ar40s40           2053 	ld	a,(#_vbicount+0)
   0A27 83                 2054 	add	a,e
   0A28 5F                 2055 	ld	e,a
   0A29 3Ar41s40           2056 	ld	a,(#_vbicount+1)
   0A2C 8A                 2057 	adc	a,d
   0A2D 16 00              2058 	ld	d,#0x00
   0A2F 21r00s00           2059 	ld	hl,#_sintab
   0A32 19                 2060 	add	hl,de
   0A33 5E                 2061 	ld	e,(hl)
   0A34 CB 2B              2062 	sra	e
   0A36 7B                 2063 	ld	a,e
   0A37 17                 2064 	rla	
   0A38 9F                 2065 	sbc	a,a
   0A39 57                 2066 	ld	d,a
   0A3A 21 40 01           2067 	ld	hl,#0x0140
   0A3D 19                 2068 	add	hl,de
   0A3E DD 75 ED           2069 	ld	-19 (ix),l
   0A41 DD 74 EE           2070 	ld	-18 (ix),h
                           2071 ;demo.c:347: cmd.source_y = sy;
   0A44 21 04 00           2072 	ld	hl,#0x0004
   0A47 39                 2073 	add	hl,sp
   0A48 EB                 2074 	ex	de,hl
   0A49 4B                 2075 	ld	c,e
   0A4A 42                 2076 	ld	b,d
   0A4B 69                 2077 	ld	l,c
   0A4C 60                 2078 	ld	h,b
   0A4D 23                 2079 	inc	hl
   0A4E 23                 2080 	inc	hl
   0A4F DD 7E ED           2081 	ld	a,-19 (ix)
   0A52 77                 2082 	ld	(hl),a
   0A53 23                 2083 	inc	hl
   0A54 DD 7E EE           2084 	ld	a,-18 (ix)
   0A57 77                 2085 	ld	(hl),a
                           2086 ;demo.c:348: cmd.dest_x = 0;
   0A58 21 04 00           2087 	ld	hl,#0x0004
   0A5B 19                 2088 	add	hl,de
   0A5C 36 00              2089 	ld	(hl),#0x00
   0A5E 23                 2090 	inc	hl
   0A5F 36 00              2091 	ld	(hl),#0x00
                           2092 ;demo.c:349: cmd.dest_y = y;
   0A61 21 06 00           2093 	ld	hl,#0x0006
   0A64 19                 2094 	add	hl,de
   0A65 DD 7E EF           2095 	ld	a,-17 (ix)
   0A68 77                 2096 	ld	(hl),a
   0A69 23                 2097 	inc	hl
   0A6A DD 7E F0           2098 	ld	a,-16 (ix)
   0A6D 77                 2099 	ld	(hl),a
                           2100 ;demo.c:350: cmd.size_x = 70;
   0A6E 21 08 00           2101 	ld	hl,#0x0008
   0A71 19                 2102 	add	hl,de
   0A72 36 46              2103 	ld	(hl),#0x46
   0A74 23                 2104 	inc	hl
   0A75 36 00              2105 	ld	(hl),#0x00
                           2106 ;demo.c:351: cmd.size_y = 4;
   0A77 21 0A 00           2107 	ld	hl,#0x000A
   0A7A 19                 2108 	add	hl,de
   0A7B 36 04              2109 	ld	(hl),#0x04
   0A7D 23                 2110 	inc	hl
   0A7E 36 00              2111 	ld	(hl),#0x00
                           2112 ;demo.c:352: cmd.data = 0;
   0A80 21 0C 00           2113 	ld	hl,#0x000C
   0A83 19                 2114 	add	hl,de
   0A84 4D                 2115 	ld	c,l
   0A85 44                 2116 	ld	b,h
   0A86 3E 00              2117 	ld	a,#0x00
   0A88 02                 2118 	ld	(bc),a
                           2119 ;demo.c:353: cmd.argument = 0x00;
   0A89 21 0D 00           2120 	ld	hl,#0x000D
   0A8C 19                 2121 	add	hl,de
   0A8D 4D                 2122 	ld	c,l
   0A8E 44                 2123 	ld	b,h
   0A8F 3E 00              2124 	ld	a,#0x00
   0A91 02                 2125 	ld	(bc),a
                           2126 ;demo.c:354: cmd.command = 0xd0; // logical vram to vram
   0A92 21 0E 00           2127 	ld	hl,#0x000E
   0A95 19                 2128 	add	hl,de
   0A96 4D                 2129 	ld	c,l
   0A97 44                 2130 	ld	b,h
   0A98 3E D0              2131 	ld	a,#0xD0
   0A9A 02                 2132 	ld	(bc),a
                           2133 ;demo.c:355: vdp_copier(&cmd);
   0A9B D5                 2134 	push	de
   0A9C CDr00s00           2135 	call	_vdp_copier
   0A9F F1                 2136 	pop	af
                           2137 ;demo.c:344: for (y = 0; y < 212; y+=4) {
   0AA0 DD 7E EF           2138 	ld	a,-17 (ix)
   0AA3 C6 04              2139 	add	a,#0x04
   0AA5 DD 77 EF           2140 	ld	-17 (ix),a
   0AA8 DD 7E F0           2141 	ld	a,-16 (ix)
   0AAB CE 00              2142 	adc	a,#0x00
   0AAD DD 77 F0           2143 	ld	-16 (ix),a
   0AB0 C3r04s0A           2144 	jp	00101$
   0AB3                    2145 00105$:
   0AB3 DD F9              2146 	ld	sp,ix
   0AB5 DD E1              2147 	pop	ix
   0AB7 C9                 2148 	ret
   0AB8                    2149 _twister_end::
                           2150 ;demo.c:380: void do_letter(int cc) {
                           2151 ;	---------------------------------
                           2152 ; Function do_letter
                           2153 ; ---------------------------------
   0AB8                    2154 _do_letter_start::
   0AB8                    2155 _do_letter:
   0AB8 DD E5              2156 	push	ix
   0ABA DD 21 00 00        2157 	ld	ix,#0
   0ABE DD 39              2158 	add	ix,sp
   0AC0 21 ED FF           2159 	ld	hl,#-19
   0AC3 39                 2160 	add	hl,sp
   0AC4 F9                 2161 	ld	sp,hl
                           2162 ;demo.c:382: int cidx = cc - 65;
   0AC5 DD 7E 04           2163 	ld	a,4 (ix)
   0AC8 C6 BF              2164 	add	a,#0xBF
   0ACA 4F                 2165 	ld	c,a
   0ACB DD 7E 05           2166 	ld	a,5 (ix)
   0ACE CE FF              2167 	adc	a,#0xFF
   0AD0 47                 2168 	ld	b,a
                           2169 ;demo.c:383: cmd.source_x = 128+font_x[cidx];
   0AD1 21 04 00           2170 	ld	hl,#0x0004
   0AD4 39                 2171 	add	hl,sp
   0AD5 DD 75 EF           2172 	ld	-17 (ix),l
   0AD8 DD 74 F0           2173 	ld	-16 (ix),h
   0ADB DD 71 ED           2174 	ld	-19 (ix),c
   0ADE DD 70 EE           2175 	ld	-18 (ix),b
   0AE1 DD CB ED 26        2176 	sla	-19 (ix)
   0AE5 DD CB EE 16        2177 	rl	-18 (ix)
   0AE9 3ErE9              2178 	ld	a,#<_font_x
   0AEB DD 86 ED           2179 	add	a,-19 (ix)
   0AEE 5F                 2180 	ld	e,a
   0AEF 3Es0B              2181 	ld	a,#>_font_x
   0AF1 DD 8E EE           2182 	adc	a,-18 (ix)
   0AF4 6B                 2183 	ld	l,e
   0AF5 67                 2184 	ld	h,a
   0AF6 5E                 2185 	ld	e,(hl)
   0AF7 23                 2186 	inc	hl
   0AF8 56                 2187 	ld	d,(hl)
   0AF9 21 80 00           2188 	ld	hl,#0x0080
   0AFC 19                 2189 	add	hl,de
   0AFD EB                 2190 	ex	de,hl
   0AFE DD 6E EF           2191 	ld	l,-17 (ix)
   0B01 DD 66 F0           2192 	ld	h,-16 (ix)
   0B04 73                 2193 	ld	(hl),e
   0B05 23                 2194 	inc	hl
   0B06 72                 2195 	ld	(hl),d
                           2196 ;demo.c:384: cmd.source_y = 256+font_y[cidx];
   0B07 21 04 00           2197 	ld	hl,#0x0004
   0B0A 39                 2198 	add	hl,sp
   0B0B EB                 2199 	ex	de,hl
   0B0C 21 02 00           2200 	ld	hl,#0x0002
   0B0F 19                 2201 	add	hl,de
   0B10 DD 75 EF           2202 	ld	-17 (ix),l
   0B13 DD 74 F0           2203 	ld	-16 (ix),h
   0B16 3Er09              2204 	ld	a,#<_font_y
   0B18 DD 86 ED           2205 	add	a,-19 (ix)
   0B1B 4F                 2206 	ld	c,a
   0B1C 3Es0C              2207 	ld	a,#>_font_y
   0B1E DD 8E EE           2208 	adc	a,-18 (ix)
   0B21 69                 2209 	ld	l,c
   0B22 67                 2210 	ld	h,a
   0B23 4E                 2211 	ld	c,(hl)
   0B24 23                 2212 	inc	hl
   0B25 46                 2213 	ld	b,(hl)
   0B26 21 00 01           2214 	ld	hl,#0x0100
   0B29 09                 2215 	add	hl,bc
   0B2A 4D                 2216 	ld	c,l
   0B2B 44                 2217 	ld	b,h
   0B2C DD 6E EF           2218 	ld	l,-17 (ix)
   0B2F DD 66 F0           2219 	ld	h,-16 (ix)
   0B32 71                 2220 	ld	(hl),c
   0B33 23                 2221 	inc	hl
   0B34 70                 2222 	ld	(hl),b
                           2223 ;demo.c:385: cmd.dest_x = lx;
   0B35 21 04 00           2224 	ld	hl,#0x0004
   0B38 19                 2225 	add	hl,de
   0B39 DD 75 EF           2226 	ld	-17 (ix),l
   0B3C DD 74 F0           2227 	ld	-16 (ix),h
   0B3F ED 4Br7Fs40        2228 	ld	bc,(_lx)
   0B43 DD 6E EF           2229 	ld	l,-17 (ix)
   0B46 DD 66 F0           2230 	ld	h,-16 (ix)
   0B49 71                 2231 	ld	(hl),c
   0B4A 23                 2232 	inc	hl
   0B4B 70                 2233 	ld	(hl),b
                           2234 ;demo.c:386: cmd.dest_y = ly;
   0B4C 21 06 00           2235 	ld	hl,#0x0006
   0B4F 19                 2236 	add	hl,de
   0B50 DD 75 EF           2237 	ld	-17 (ix),l
   0B53 DD 74 F0           2238 	ld	-16 (ix),h
   0B56 ED 4Br81s40        2239 	ld	bc,(_ly)
   0B5A DD 6E EF           2240 	ld	l,-17 (ix)
   0B5D DD 66 F0           2241 	ld	h,-16 (ix)
   0B60 71                 2242 	ld	(hl),c
   0B61 23                 2243 	inc	hl
   0B62 70                 2244 	ld	(hl),b
                           2245 ;demo.c:387: cmd.size_x = font_w[cidx];
   0B63 21 08 00           2246 	ld	hl,#0x0008
   0B66 19                 2247 	add	hl,de
   0B67 DD 75 EF           2248 	ld	-17 (ix),l
   0B6A DD 74 F0           2249 	ld	-16 (ix),h
   0B6D 3Er29              2250 	ld	a,#<_font_w
   0B6F DD 86 ED           2251 	add	a,-19 (ix)
   0B72 4F                 2252 	ld	c,a
   0B73 3Es0C              2253 	ld	a,#>_font_w
   0B75 DD 8E EE           2254 	adc	a,-18 (ix)
   0B78 69                 2255 	ld	l,c
   0B79 67                 2256 	ld	h,a
   0B7A 4E                 2257 	ld	c,(hl)
   0B7B 23                 2258 	inc	hl
   0B7C 46                 2259 	ld	b,(hl)
   0B7D DD 6E EF           2260 	ld	l,-17 (ix)
   0B80 DD 66 F0           2261 	ld	h,-16 (ix)
   0B83 71                 2262 	ld	(hl),c
   0B84 23                 2263 	inc	hl
   0B85 70                 2264 	ld	(hl),b
                           2265 ;demo.c:388: cmd.size_y = font_h[cidx];
   0B86 21 0A 00           2266 	ld	hl,#0x000A
   0B89 19                 2267 	add	hl,de
   0B8A DD 75 EF           2268 	ld	-17 (ix),l
   0B8D DD 74 F0           2269 	ld	-16 (ix),h
   0B90 3Er49              2270 	ld	a,#<_font_h
   0B92 DD 86 ED           2271 	add	a,-19 (ix)
   0B95 4F                 2272 	ld	c,a
   0B96 3Es0C              2273 	ld	a,#>_font_h
   0B98 DD 8E EE           2274 	adc	a,-18 (ix)
   0B9B 69                 2275 	ld	l,c
   0B9C 67                 2276 	ld	h,a
   0B9D 4E                 2277 	ld	c,(hl)
   0B9E 23                 2278 	inc	hl
   0B9F 46                 2279 	ld	b,(hl)
   0BA0 DD 6E EF           2280 	ld	l,-17 (ix)
   0BA3 DD 66 F0           2281 	ld	h,-16 (ix)
   0BA6 71                 2282 	ld	(hl),c
   0BA7 23                 2283 	inc	hl
   0BA8 70                 2284 	ld	(hl),b
                           2285 ;demo.c:389: cmd.argument = 0x00;
   0BA9 21 0D 00           2286 	ld	hl,#0x000D
   0BAC 19                 2287 	add	hl,de
   0BAD 4D                 2288 	ld	c,l
   0BAE 44                 2289 	ld	b,h
   0BAF 3E 00              2290 	ld	a,#0x00
   0BB1 02                 2291 	ld	(bc),a
                           2292 ;demo.c:390: cmd.command = 0xd0; // logical vram to vram
   0BB2 21 0E 00           2293 	ld	hl,#0x000E
   0BB5 19                 2294 	add	hl,de
   0BB6 4D                 2295 	ld	c,l
   0BB7 44                 2296 	ld	b,h
   0BB8 3E D0              2297 	ld	a,#0xD0
   0BBA 02                 2298 	ld	(bc),a
                           2299 ;demo.c:391: vdp_copier(&cmd);
   0BBB D5                 2300 	push	de
   0BBC CDr00s00           2301 	call	_vdp_copier
   0BBF F1                 2302 	pop	af
                           2303 ;demo.c:392: lx+=font_w[cidx];
   0BC0 3Er29              2304 	ld	a,#<_font_w
   0BC2 DD 86 ED           2305 	add	a,-19 (ix)
   0BC5 4F                 2306 	ld	c,a
   0BC6 3Es0C              2307 	ld	a,#>_font_w
   0BC8 DD 8E EE           2308 	adc	a,-18 (ix)
   0BCB 69                 2309 	ld	l,c
   0BCC 67                 2310 	ld	h,a
   0BCD 4E                 2311 	ld	c,(hl)
   0BCE 23                 2312 	inc	hl
   0BCF 46                 2313 	ld	b,(hl)
   0BD0 21r7Fs40           2314 	ld	hl,#_lx
   0BD3 7E                 2315 	ld	a,(hl)
   0BD4 81                 2316 	add	a,c
   0BD5 23                 2317 	inc	hl
   0BD6 2B                 2318 	dec	hl
   0BD7 C5                 2319 	push	bc
   0BD8 4F                 2320 	ld	c, a
   0BD9 23                 2321 	inc	hl
   0BDA 7E                 2322 	ld	a, (hl)
   0BDB 47                 2323 	ld	b, a
   0BDC 79                 2324 	ld	a, c
   0BDD 2B                 2325 	dec	hl
   0BDE 77                 2326 	ld	(hl), a
   0BDF 78                 2327 	ld	a, b
   0BE0 C1                 2328 	pop	bc
   0BE1 88                 2329 	adc	a,b
   0BE2 23                 2330 	inc	hl
   0BE3 77                 2331 	ld	(hl),a
   0BE4 DD F9              2332 	ld	sp,ix
   0BE6 DD E1              2333 	pop	ix
   0BE8 C9                 2334 	ret
   0BE9                    2335 _do_letter_end::
   0BE9                    2336 _font_x:
   0BE9 01 00              2337 	.dw #0x0001
   0BEB 09 00              2338 	.dw #0x0009
   0BED 11 00              2339 	.dw #0x0011
   0BEF 19 00              2340 	.dw #0x0019
   0BF1 21 00              2341 	.dw #0x0021
   0BF3 29 00              2342 	.dw #0x0029
   0BF5 31 00              2343 	.dw #0x0031
   0BF7 39 00              2344 	.dw #0x0039
   0BF9 41 00              2345 	.dw #0x0041
   0BFB 46 00              2346 	.dw #0x0046
   0BFD 00                 2347 	.db 0x00
   0BFE 00                 2348 	.db 0x00
   0BFF 00                 2349 	.db 0x00
   0C00 00                 2350 	.db 0x00
   0C01 00                 2351 	.db 0x00
   0C02 00                 2352 	.db 0x00
   0C03 00                 2353 	.db 0x00
   0C04 00                 2354 	.db 0x00
   0C05 00                 2355 	.db 0x00
   0C06 00                 2356 	.db 0x00
   0C07 00                 2357 	.db 0x00
   0C08 00                 2358 	.db 0x00
   0C09                    2359 _font_y:
   0C09 1C 00              2360 	.dw #0x001C
   0C0B 1C 00              2361 	.dw #0x001C
   0C0D 1C 00              2362 	.dw #0x001C
   0C0F 1C 00              2363 	.dw #0x001C
   0C11 1C 00              2364 	.dw #0x001C
   0C13 1C 00              2365 	.dw #0x001C
   0C15 1C 00              2366 	.dw #0x001C
   0C17 1C 00              2367 	.dw #0x001C
   0C19 1C 00              2368 	.dw #0x001C
   0C1B 1C 00              2369 	.dw #0x001C
   0C1D 00                 2370 	.db 0x00
   0C1E 00                 2371 	.db 0x00
   0C1F 00                 2372 	.db 0x00
   0C20 00                 2373 	.db 0x00
   0C21 00                 2374 	.db 0x00
   0C22 00                 2375 	.db 0x00
   0C23 00                 2376 	.db 0x00
   0C24 00                 2377 	.db 0x00
   0C25 00                 2378 	.db 0x00
   0C26 00                 2379 	.db 0x00
   0C27 00                 2380 	.db 0x00
   0C28 00                 2381 	.db 0x00
   0C29                    2382 _font_w:
   0C29 06 00              2383 	.dw #0x0006
   0C2B 06 00              2384 	.dw #0x0006
   0C2D 06 00              2385 	.dw #0x0006
   0C2F 06 00              2386 	.dw #0x0006
   0C31 06 00              2387 	.dw #0x0006
   0C33 06 00              2388 	.dw #0x0006
   0C35 06 00              2389 	.dw #0x0006
   0C37 06 00              2390 	.dw #0x0006
   0C39 04 00              2391 	.dw #0x0004
   0C3B 06 00              2392 	.dw #0x0006
   0C3D 00                 2393 	.db 0x00
   0C3E 00                 2394 	.db 0x00
   0C3F 00                 2395 	.db 0x00
   0C40 00                 2396 	.db 0x00
   0C41 00                 2397 	.db 0x00
   0C42 00                 2398 	.db 0x00
   0C43 00                 2399 	.db 0x00
   0C44 00                 2400 	.db 0x00
   0C45 00                 2401 	.db 0x00
   0C46 00                 2402 	.db 0x00
   0C47 00                 2403 	.db 0x00
   0C48 00                 2404 	.db 0x00
   0C49                    2405 _font_h:
   0C49 08 00              2406 	.dw #0x0008
   0C4B 08 00              2407 	.dw #0x0008
   0C4D 08 00              2408 	.dw #0x0008
   0C4F 08 00              2409 	.dw #0x0008
   0C51 08 00              2410 	.dw #0x0008
   0C53 08 00              2411 	.dw #0x0008
   0C55 08 00              2412 	.dw #0x0008
   0C57 08 00              2413 	.dw #0x0008
   0C59 08 00              2414 	.dw #0x0008
   0C5B 08 00              2415 	.dw #0x0008
   0C5D 00                 2416 	.db 0x00
   0C5E 00                 2417 	.db 0x00
   0C5F 00                 2418 	.db 0x00
   0C60 00                 2419 	.db 0x00
   0C61 00                 2420 	.db 0x00
   0C62 00                 2421 	.db 0x00
   0C63 00                 2422 	.db 0x00
   0C64 00                 2423 	.db 0x00
   0C65 00                 2424 	.db 0x00
   0C66 00                 2425 	.db 0x00
   0C67 00                 2426 	.db 0x00
   0C68 00                 2427 	.db 0x00
                           2428 ;demo.c:396: void font() {
                           2429 ;	---------------------------------
                           2430 ; Function font
                           2431 ; ---------------------------------
   0C69                    2432 _font_start::
   0C69                    2433 _font:
                           2434 ;demo.c:398: lx = 128;
   0C69 21r7Fs40           2435 	ld	hl,#_lx + 0
   0C6C 36 80              2436 	ld	(hl), #0x80
   0C6E 21r80s40           2437 	ld	hl,#_lx + 1
   0C71 36 00              2438 	ld	(hl), #0x00
                           2439 ;demo.c:399: ly = 128;
   0C73 21r81s40           2440 	ld	hl,#_ly + 0
   0C76 36 80              2441 	ld	(hl), #0x80
   0C78 21r82s40           2442 	ld	hl,#_ly + 1
   0C7B 36 00              2443 	ld	(hl), #0x00
                           2444 ;demo.c:401: do_letter('F');
   0C7D 21 46 00           2445 	ld	hl,#0x0046
   0C80 E5                 2446 	push	hl
   0C81 CDrB8s0A           2447 	call	_do_letter
   0C84 F1                 2448 	pop	af
                           2449 ;demo.c:402: do_letter('A');
   0C85 21 41 00           2450 	ld	hl,#0x0041
   0C88 E5                 2451 	push	hl
   0C89 CDrB8s0A           2452 	call	_do_letter
   0C8C F1                 2453 	pop	af
                           2454 ;demo.c:403: do_letter('D');
   0C8D 21 44 00           2455 	ld	hl,#0x0044
   0C90 E5                 2456 	push	hl
   0C91 CDrB8s0A           2457 	call	_do_letter
   0C94 F1                 2458 	pop	af
                           2459 ;demo.c:404: do_letter('E');
   0C95 21 45 00           2460 	ld	hl,#0x0045
   0C98 E5                 2461 	push	hl
   0C99 CDrB8s0A           2462 	call	_do_letter
   0C9C F1                 2463 	pop	af
                           2464 ;demo.c:405: lx+=2;
   0C9D 21r7Fs40           2465 	ld	hl,#_lx
   0CA0 7E                 2466 	ld	a,(hl)
   0CA1 C6 02              2467 	add	a,#0x02
   0CA3 23                 2468 	inc	hl
   0CA4 2B                 2469 	dec	hl
   0CA5 C5                 2470 	push	bc
   0CA6 4F                 2471 	ld	c, a
   0CA7 23                 2472 	inc	hl
   0CA8 7E                 2473 	ld	a, (hl)
   0CA9 47                 2474 	ld	b, a
   0CAA 79                 2475 	ld	a, c
   0CAB 2B                 2476 	dec	hl
   0CAC 77                 2477 	ld	(hl), a
   0CAD 78                 2478 	ld	a, b
   0CAE C1                 2479 	pop	bc
   0CAF CE 00              2480 	adc	a,#0x00
   0CB1 23                 2481 	inc	hl
   0CB2 77                 2482 	ld	(hl),a
                           2483 ;demo.c:406: do_letter('D');
   0CB3 21 44 00           2484 	ld	hl,#0x0044
   0CB6 E5                 2485 	push	hl
   0CB7 CDrB8s0A           2486 	call	_do_letter
   0CBA F1                 2487 	pop	af
                           2488 ;demo.c:407: do_letter('I');
   0CBB 21 49 00           2489 	ld	hl,#0x0049
   0CBE E5                 2490 	push	hl
   0CBF CDrB8s0A           2491 	call	_do_letter
   0CC2 F1                 2492 	pop	af
                           2493 ;demo.c:408: do_letter('E');
   0CC3 21 45 00           2494 	ld	hl,#0x0045
   0CC6 E5                 2495 	push	hl
   0CC7 CDrB8s0A           2496 	call	_do_letter
   0CCA F1                 2497 	pop	af
                           2498 ;demo.c:409: lx+=2;
   0CCB 21r7Fs40           2499 	ld	hl,#_lx
   0CCE 7E                 2500 	ld	a,(hl)
   0CCF C6 02              2501 	add	a,#0x02
   0CD1 23                 2502 	inc	hl
   0CD2 2B                 2503 	dec	hl
   0CD3 C5                 2504 	push	bc
   0CD4 4F                 2505 	ld	c, a
   0CD5 23                 2506 	inc	hl
   0CD6 7E                 2507 	ld	a, (hl)
   0CD7 47                 2508 	ld	b, a
   0CD8 79                 2509 	ld	a, c
   0CD9 2B                 2510 	dec	hl
   0CDA 77                 2511 	ld	(hl), a
   0CDB 78                 2512 	ld	a, b
   0CDC C1                 2513 	pop	bc
   0CDD CE 00              2514 	adc	a,#0x00
   0CDF 23                 2515 	inc	hl
   0CE0 77                 2516 	ld	(hl),a
                           2517 ;demo.c:410: do_letter('C');
   0CE1 21 43 00           2518 	ld	hl,#0x0043
   0CE4 E5                 2519 	push	hl
   0CE5 CDrB8s0A           2520 	call	_do_letter
   0CE8 F1                 2521 	pop	af
                           2522 ;demo.c:411: do_letter('A');
   0CE9 21 41 00           2523 	ld	hl,#0x0041
   0CEC E5                 2524 	push	hl
   0CED CDrB8s0A           2525 	call	_do_letter
   0CF0 F1                 2526 	pop	af
                           2527 ;demo.c:412: do_letter('F');
   0CF1 21 46 00           2528 	ld	hl,#0x0046
   0CF4 E5                 2529 	push	hl
   0CF5 CDrB8s0A           2530 	call	_do_letter
   0CF8 F1                 2531 	pop	af
                           2532 ;demo.c:413: do_letter('E');
   0CF9 21 45 00           2533 	ld	hl,#0x0045
   0CFC E5                 2534 	push	hl
   0CFD CDrB8s0A           2535 	call	_do_letter
   0D00 F1                 2536 	pop	af
                           2537 ;demo.c:414: lx = 128;
   0D01 21r7Fs40           2538 	ld	hl,#_lx + 0
   0D04 36 80              2539 	ld	(hl), #0x80
   0D06 21r80s40           2540 	ld	hl,#_lx + 1
   0D09 36 00              2541 	ld	(hl), #0x00
                           2542 ;demo.c:415: ly+=10;
   0D0B 21r81s40           2543 	ld	hl,#_ly
   0D0E 7E                 2544 	ld	a,(hl)
   0D0F C6 0A              2545 	add	a,#0x0A
   0D11 23                 2546 	inc	hl
   0D12 2B                 2547 	dec	hl
   0D13 C5                 2548 	push	bc
   0D14 4F                 2549 	ld	c, a
   0D15 23                 2550 	inc	hl
   0D16 7E                 2551 	ld	a, (hl)
   0D17 47                 2552 	ld	b, a
   0D18 79                 2553 	ld	a, c
   0D19 2B                 2554 	dec	hl
   0D1A 77                 2555 	ld	(hl), a
   0D1B 78                 2556 	ld	a, b
   0D1C C1                 2557 	pop	bc
   0D1D CE 00              2558 	adc	a,#0x00
   0D1F 23                 2559 	inc	hl
   0D20 77                 2560 	ld	(hl),a
                           2561 ;demo.c:416: do_letter('A');
   0D21 21 41 00           2562 	ld	hl,#0x0041
   0D24 E5                 2563 	push	hl
   0D25 CDrB8s0A           2564 	call	_do_letter
   0D28 F1                 2565 	pop	af
                           2566 ;demo.c:417: do_letter('B');
   0D29 21 42 00           2567 	ld	hl,#0x0042
   0D2C E5                 2568 	push	hl
   0D2D CDrB8s0A           2569 	call	_do_letter
   0D30 F1                 2570 	pop	af
                           2571 ;demo.c:418: do_letter('C');
   0D31 21 43 00           2572 	ld	hl,#0x0043
   0D34 E5                 2573 	push	hl
   0D35 CDrB8s0A           2574 	call	_do_letter
   0D38 F1                 2575 	pop	af
                           2576 ;demo.c:419: do_letter('D');
   0D39 21 44 00           2577 	ld	hl,#0x0044
   0D3C E5                 2578 	push	hl
   0D3D CDrB8s0A           2579 	call	_do_letter
   0D40 F1                 2580 	pop	af
                           2581 ;demo.c:420: do_letter('E');
   0D41 21 45 00           2582 	ld	hl,#0x0045
   0D44 E5                 2583 	push	hl
   0D45 CDrB8s0A           2584 	call	_do_letter
   0D48 F1                 2585 	pop	af
                           2586 ;demo.c:421: do_letter('F');
   0D49 21 46 00           2587 	ld	hl,#0x0046
   0D4C E5                 2588 	push	hl
   0D4D CDrB8s0A           2589 	call	_do_letter
   0D50 F1                 2590 	pop	af
                           2591 ;demo.c:422: do_letter('G');
   0D51 21 47 00           2592 	ld	hl,#0x0047
   0D54 E5                 2593 	push	hl
   0D55 CDrB8s0A           2594 	call	_do_letter
   0D58 F1                 2595 	pop	af
                           2596 ;demo.c:423: do_letter('H');
   0D59 21 48 00           2597 	ld	hl,#0x0048
   0D5C E5                 2598 	push	hl
   0D5D CDrB8s0A           2599 	call	_do_letter
   0D60 F1                 2600 	pop	af
                           2601 ;demo.c:424: do_letter('I');
   0D61 21 49 00           2602 	ld	hl,#0x0049
   0D64 E5                 2603 	push	hl
   0D65 CDrB8s0A           2604 	call	_do_letter
   0D68 F1                 2605 	pop	af
                           2606 ;demo.c:425: do_letter('J');
   0D69 21 4A 00           2607 	ld	hl,#0x004A
   0D6C E5                 2608 	push	hl
   0D6D CDrB8s0A           2609 	call	_do_letter
   0D70 F1                 2610 	pop	af
                           2611 ;demo.c:426: lx = 128;
   0D71 21r7Fs40           2612 	ld	hl,#_lx + 0
   0D74 36 80              2613 	ld	(hl), #0x80
   0D76 21r80s40           2614 	ld	hl,#_lx + 1
   0D79 36 00              2615 	ld	(hl), #0x00
                           2616 ;demo.c:427: ly+=10;
   0D7B 21r81s40           2617 	ld	hl,#_ly
   0D7E 7E                 2618 	ld	a,(hl)
   0D7F C6 0A              2619 	add	a,#0x0A
   0D81 23                 2620 	inc	hl
   0D82 2B                 2621 	dec	hl
   0D83 C5                 2622 	push	bc
   0D84 4F                 2623 	ld	c, a
   0D85 23                 2624 	inc	hl
   0D86 7E                 2625 	ld	a, (hl)
   0D87 47                 2626 	ld	b, a
   0D88 79                 2627 	ld	a, c
   0D89 2B                 2628 	dec	hl
   0D8A 77                 2629 	ld	(hl), a
   0D8B 78                 2630 	ld	a, b
   0D8C C1                 2631 	pop	bc
   0D8D CE 00              2632 	adc	a,#0x00
   0D8F 23                 2633 	inc	hl
   0D90 77                 2634 	ld	(hl),a
                           2635 ;demo.c:428: do_letter('J');
   0D91 21 4A 00           2636 	ld	hl,#0x004A
   0D94 E5                 2637 	push	hl
   0D95 CDrB8s0A           2638 	call	_do_letter
   0D98 F1                 2639 	pop	af
                           2640 ;demo.c:429: do_letter('I');
   0D99 21 49 00           2641 	ld	hl,#0x0049
   0D9C E5                 2642 	push	hl
   0D9D CDrB8s0A           2643 	call	_do_letter
   0DA0 F1                 2644 	pop	af
                           2645 ;demo.c:430: do_letter('H');
   0DA1 21 48 00           2646 	ld	hl,#0x0048
   0DA4 E5                 2647 	push	hl
   0DA5 CDrB8s0A           2648 	call	_do_letter
   0DA8 F1                 2649 	pop	af
                           2650 ;demo.c:431: do_letter('G');
   0DA9 21 47 00           2651 	ld	hl,#0x0047
   0DAC E5                 2652 	push	hl
   0DAD CDrB8s0A           2653 	call	_do_letter
   0DB0 F1                 2654 	pop	af
                           2655 ;demo.c:432: do_letter('F');
   0DB1 21 46 00           2656 	ld	hl,#0x0046
   0DB4 E5                 2657 	push	hl
   0DB5 CDrB8s0A           2658 	call	_do_letter
   0DB8 F1                 2659 	pop	af
                           2660 ;demo.c:433: do_letter('E');
   0DB9 21 45 00           2661 	ld	hl,#0x0045
   0DBC E5                 2662 	push	hl
   0DBD CDrB8s0A           2663 	call	_do_letter
   0DC0 F1                 2664 	pop	af
                           2665 ;demo.c:434: do_letter('D');
   0DC1 21 44 00           2666 	ld	hl,#0x0044
   0DC4 E5                 2667 	push	hl
   0DC5 CDrB8s0A           2668 	call	_do_letter
   0DC8 F1                 2669 	pop	af
                           2670 ;demo.c:435: do_letter('C');
   0DC9 21 43 00           2671 	ld	hl,#0x0043
   0DCC E5                 2672 	push	hl
   0DCD CDrB8s0A           2673 	call	_do_letter
   0DD0 F1                 2674 	pop	af
                           2675 ;demo.c:436: do_letter('B');
   0DD1 21 42 00           2676 	ld	hl,#0x0042
   0DD4 E5                 2677 	push	hl
   0DD5 CDrB8s0A           2678 	call	_do_letter
   0DD8 F1                 2679 	pop	af
                           2680 ;demo.c:437: do_letter('A');
   0DD9 21 41 00           2681 	ld	hl,#0x0041
   0DDC E5                 2682 	push	hl
   0DDD CDrB8s0A           2683 	call	_do_letter
   0DE0 F1                 2684 	pop	af
   0DE1 C9                 2685 	ret
   0DE2                    2686 _font_end::
                           2687 ;demo.c:445: void do_animplay() {
                           2688 ;	---------------------------------
                           2689 ; Function do_animplay
                           2690 ; ---------------------------------
   0DE2                    2691 _do_animplay_start::
   0DE2                    2692 _do_animplay:
   0DE2 DD E5              2693 	push	ix
   0DE4 DD 21 00 00        2694 	ld	ix,#0
   0DE8 DD 39              2695 	add	ix,sp
   0DEA 21 EC FF           2696 	ld	hl,#-20
   0DED 39                 2697 	add	hl,sp
   0DEE F9                 2698 	ld	sp,hl
                           2699 ;demo.c:451: for (y = 0; y < 106; y+=1) {
   0DEF DD 36 FF 00        2700 	ld	-1 (ix),#0x00
   0DF3                    2701 00107$:
   0DF3 DD 7E FF           2702 	ld	a,-1 (ix)
   0DF6 D6 6A              2703 	sub	a,#0x6A
   0DF8 D2rA4s0E           2704 	jp	NC,00110$
                           2705 ;demo.c:452: cmd.source_x = xo;
   0DFB 21 04 00           2706 	ld	hl,#0x0004
   0DFE 39                 2707 	add	hl,sp
   0DFF EB                 2708 	ex	de,hl
   0E00 ED 4Br83s40        2709 	ld	bc,(_xo)
   0E04 EB                 2710 	ex	de,hl
   0E05 71                 2711 	ld	(hl),c
   0E06 23                 2712 	inc	hl
   0E07 70                 2713 	ld	(hl),b
                           2714 ;demo.c:453: cmd.source_y = 256+po+yo+(y>>1);
   0E08 21 04 00           2715 	ld	hl,#0x0004
   0E0B 39                 2716 	add	hl,sp
   0E0C 4D                 2717 	ld	c,l
   0E0D 44                 2718 	ld	b,h
   0E0E 21 02 00           2719 	ld	hl,#0x0002
   0E11 09                 2720 	add	hl,bc
   0E12 DD 75 EE           2721 	ld	-18 (ix),l
   0E15 DD 74 EF           2722 	ld	-17 (ix),h
   0E18 3Ar87s40           2723 	ld	a,(#_po+0)
   0E1B 5F                 2724 	ld	e,a
   0E1C 3Ar88s40           2725 	ld	a,(#_po+1)
   0E1F C6 01              2726 	add	a,#0x01
   0E21 57                 2727 	ld	d,a
   0E22 21r85s40           2728 	ld	hl,#_yo
   0E25 7B                 2729 	ld	a,e
   0E26 86                 2730 	add	a,(hl)
   0E27 DD 77 EC           2731 	ld	-20 (ix),a
   0E2A 7A                 2732 	ld	a,d
   0E2B 23                 2733 	inc	hl
   0E2C 8E                 2734 	adc	a,(hl)
   0E2D DD 77 ED           2735 	ld	-19 (ix),a
   0E30 DD 5E FF           2736 	ld	e,-1 (ix)
   0E33 CB 3B              2737 	srl	e
   0E35 16 00              2738 	ld	d,#0x00
   0E37 DD 7E EC           2739 	ld	a,-20 (ix)
   0E3A 83                 2740 	add	a,e
   0E3B 5F                 2741 	ld	e,a
   0E3C DD 7E ED           2742 	ld	a,-19 (ix)
   0E3F 8A                 2743 	adc	a,d
   0E40 57                 2744 	ld	d,a
   0E41 DD 6E EE           2745 	ld	l,-18 (ix)
   0E44 DD 66 EF           2746 	ld	h,-17 (ix)
   0E47 73                 2747 	ld	(hl),e
   0E48 23                 2748 	inc	hl
   0E49 72                 2749 	ld	(hl),d
                           2750 ;demo.c:454: cmd.dest_x = 0;
   0E4A 21 04 00           2751 	ld	hl,#0x0004
   0E4D 09                 2752 	add	hl,bc
   0E4E 36 00              2753 	ld	(hl),#0x00
   0E50 23                 2754 	inc	hl
   0E51 36 00              2755 	ld	(hl),#0x00
                           2756 ;demo.c:455: cmd.dest_y = (y<<1);
   0E53 21 06 00           2757 	ld	hl,#0x0006
   0E56 09                 2758 	add	hl,bc
   0E57 DD 75 EC           2759 	ld	-20 (ix),l
   0E5A DD 74 ED           2760 	ld	-19 (ix),h
   0E5D DD 5E FF           2761 	ld	e,-1 (ix)
   0E60 16 00              2762 	ld	d,#0x00
   0E62 CB 23              2763 	sla	e
   0E64 CB 12              2764 	rl	d
   0E66 DD 6E EC           2765 	ld	l,-20 (ix)
   0E69 DD 66 ED           2766 	ld	h,-19 (ix)
   0E6C 73                 2767 	ld	(hl),e
   0E6D 23                 2768 	inc	hl
   0E6E 72                 2769 	ld	(hl),d
                           2770 ;demo.c:456: cmd.size_x = 128;
   0E6F 21 08 00           2771 	ld	hl,#0x0008
   0E72 09                 2772 	add	hl,bc
   0E73 36 80              2773 	ld	(hl),#0x80
   0E75 23                 2774 	inc	hl
   0E76 36 00              2775 	ld	(hl),#0x00
                           2776 ;demo.c:457: cmd.size_y = 1;
   0E78 21 0A 00           2777 	ld	hl,#0x000A
   0E7B 09                 2778 	add	hl,bc
   0E7C 36 01              2779 	ld	(hl),#0x01
   0E7E 23                 2780 	inc	hl
   0E7F 36 00              2781 	ld	(hl),#0x00
                           2782 ;demo.c:458: cmd.data = 0;
   0E81 21 0C 00           2783 	ld	hl,#0x000C
   0E84 09                 2784 	add	hl,bc
   0E85 EB                 2785 	ex	de,hl
   0E86 3E 00              2786 	ld	a,#0x00
   0E88 12                 2787 	ld	(de),a
                           2788 ;demo.c:459: cmd.argument = 0x00;
   0E89 21 0D 00           2789 	ld	hl,#0x000D
   0E8C 09                 2790 	add	hl,bc
   0E8D EB                 2791 	ex	de,hl
   0E8E 3E 00              2792 	ld	a,#0x00
   0E90 12                 2793 	ld	(de),a
                           2794 ;demo.c:460: cmd.command = 0xD0;
   0E91 21 0E 00           2795 	ld	hl,#0x000E
   0E94 09                 2796 	add	hl,bc
   0E95 EB                 2797 	ex	de,hl
   0E96 3E D0              2798 	ld	a,#0xD0
   0E98 12                 2799 	ld	(de),a
                           2800 ;demo.c:461: vdp_copier(&cmd);
   0E99 C5                 2801 	push	bc
   0E9A CDr00s00           2802 	call	_vdp_copier
   0E9D F1                 2803 	pop	af
                           2804 ;demo.c:451: for (y = 0; y < 106; y+=1) {
   0E9E DD 34 FF           2805 	inc	-1 (ix)
   0EA1 C3rF3s0D           2806 	jp	00107$
   0EA4                    2807 00110$:
                           2808 ;demo.c:464: for (y = 0; y < 106; y+=1) {
   0EA4 DD 36 FF 00        2809 	ld	-1 (ix),#0x00
   0EA8                    2810 00111$:
   0EA8 DD 7E FF           2811 	ld	a,-1 (ix)
   0EAB D6 6A              2812 	sub	a,#0x6A
   0EAD D2r59s0F           2813 	jp	NC,00114$
                           2814 ;demo.c:465: cmd.source_x = xo;
   0EB0 21 04 00           2815 	ld	hl,#0x0004
   0EB3 39                 2816 	add	hl,sp
   0EB4 EB                 2817 	ex	de,hl
   0EB5 ED 4Br83s40        2818 	ld	bc,(_xo)
   0EB9 EB                 2819 	ex	de,hl
   0EBA 71                 2820 	ld	(hl),c
   0EBB 23                 2821 	inc	hl
   0EBC 70                 2822 	ld	(hl),b
                           2823 ;demo.c:466: cmd.source_y = 256+po+yo+(y>>1);
   0EBD 21 04 00           2824 	ld	hl,#0x0004
   0EC0 39                 2825 	add	hl,sp
   0EC1 4D                 2826 	ld	c,l
   0EC2 44                 2827 	ld	b,h
   0EC3 21 02 00           2828 	ld	hl,#0x0002
   0EC6 09                 2829 	add	hl,bc
   0EC7 DD 75 EC           2830 	ld	-20 (ix),l
   0ECA DD 74 ED           2831 	ld	-19 (ix),h
   0ECD 3Ar87s40           2832 	ld	a,(#_po+0)
   0ED0 5F                 2833 	ld	e,a
   0ED1 3Ar88s40           2834 	ld	a,(#_po+1)
   0ED4 C6 01              2835 	add	a,#0x01
   0ED6 57                 2836 	ld	d,a
   0ED7 21r85s40           2837 	ld	hl,#_yo
   0EDA 7B                 2838 	ld	a,e
   0EDB 86                 2839 	add	a,(hl)
   0EDC DD 77 EE           2840 	ld	-18 (ix),a
   0EDF 7A                 2841 	ld	a,d
   0EE0 23                 2842 	inc	hl
   0EE1 8E                 2843 	adc	a,(hl)
   0EE2 DD 77 EF           2844 	ld	-17 (ix),a
   0EE5 DD 5E FF           2845 	ld	e,-1 (ix)
   0EE8 CB 3B              2846 	srl	e
   0EEA 16 00              2847 	ld	d,#0x00
   0EEC DD 7E EE           2848 	ld	a,-18 (ix)
   0EEF 83                 2849 	add	a,e
   0EF0 5F                 2850 	ld	e,a
   0EF1 DD 7E EF           2851 	ld	a,-17 (ix)
   0EF4 8A                 2852 	adc	a,d
   0EF5 57                 2853 	ld	d,a
   0EF6 DD 6E EC           2854 	ld	l,-20 (ix)
   0EF9 DD 66 ED           2855 	ld	h,-19 (ix)
   0EFC 73                 2856 	ld	(hl),e
   0EFD 23                 2857 	inc	hl
   0EFE 72                 2858 	ld	(hl),d
                           2859 ;demo.c:467: cmd.dest_x = 128;
   0EFF 21 04 00           2860 	ld	hl,#0x0004
   0F02 09                 2861 	add	hl,bc
   0F03 36 80              2862 	ld	(hl),#0x80
   0F05 23                 2863 	inc	hl
   0F06 36 00              2864 	ld	(hl),#0x00
                           2865 ;demo.c:468: cmd.dest_y = (y<<1);
   0F08 21 06 00           2866 	ld	hl,#0x0006
   0F0B 09                 2867 	add	hl,bc
   0F0C DD 75 EC           2868 	ld	-20 (ix),l
   0F0F DD 74 ED           2869 	ld	-19 (ix),h
   0F12 DD 5E FF           2870 	ld	e,-1 (ix)
   0F15 16 00              2871 	ld	d,#0x00
   0F17 CB 23              2872 	sla	e
   0F19 CB 12              2873 	rl	d
   0F1B DD 6E EC           2874 	ld	l,-20 (ix)
   0F1E DD 66 ED           2875 	ld	h,-19 (ix)
   0F21 73                 2876 	ld	(hl),e
   0F22 23                 2877 	inc	hl
   0F23 72                 2878 	ld	(hl),d
                           2879 ;demo.c:469: cmd.size_x = 128;
   0F24 21 08 00           2880 	ld	hl,#0x0008
   0F27 09                 2881 	add	hl,bc
   0F28 36 80              2882 	ld	(hl),#0x80
   0F2A 23                 2883 	inc	hl
   0F2B 36 00              2884 	ld	(hl),#0x00
                           2885 ;demo.c:470: cmd.size_y = 1;
   0F2D 21 0A 00           2886 	ld	hl,#0x000A
   0F30 09                 2887 	add	hl,bc
   0F31 36 01              2888 	ld	(hl),#0x01
   0F33 23                 2889 	inc	hl
   0F34 36 00              2890 	ld	(hl),#0x00
                           2891 ;demo.c:471: cmd.data = 0;
   0F36 21 0C 00           2892 	ld	hl,#0x000C
   0F39 09                 2893 	add	hl,bc
   0F3A EB                 2894 	ex	de,hl
   0F3B 3E 00              2895 	ld	a,#0x00
   0F3D 12                 2896 	ld	(de),a
                           2897 ;demo.c:472: cmd.argument = 0x00;
   0F3E 21 0D 00           2898 	ld	hl,#0x000D
   0F41 09                 2899 	add	hl,bc
   0F42 EB                 2900 	ex	de,hl
   0F43 3E 00              2901 	ld	a,#0x00
   0F45 12                 2902 	ld	(de),a
                           2903 ;demo.c:473: cmd.command = 0xd2; // logical vram to vram, xor
   0F46 21 0E 00           2904 	ld	hl,#0x000E
   0F49 09                 2905 	add	hl,bc
   0F4A EB                 2906 	ex	de,hl
   0F4B 3E D2              2907 	ld	a,#0xD2
   0F4D 12                 2908 	ld	(de),a
                           2909 ;demo.c:474: vdp_copier(&cmd);
   0F4E C5                 2910 	push	bc
   0F4F CDr00s00           2911 	call	_vdp_copier
   0F52 F1                 2912 	pop	af
                           2913 ;demo.c:464: for (y = 0; y < 106; y+=1) {
   0F53 DD 34 FF           2914 	inc	-1 (ix)
   0F56 C3rA8s0E           2915 	jp	00111$
   0F59                    2916 00114$:
                           2917 ;demo.c:478: xo+=128;
   0F59 21r83s40           2918 	ld	hl,#_xo
   0F5C 7E                 2919 	ld	a,(hl)
   0F5D C6 80              2920 	add	a,#0x80
   0F5F 23                 2921 	inc	hl
   0F60 2B                 2922 	dec	hl
   0F61 C5                 2923 	push	bc
   0F62 4F                 2924 	ld	c, a
   0F63 23                 2925 	inc	hl
   0F64 7E                 2926 	ld	a, (hl)
   0F65 47                 2927 	ld	b, a
   0F66 79                 2928 	ld	a, c
   0F67 2B                 2929 	dec	hl
   0F68 77                 2930 	ld	(hl), a
   0F69 78                 2931 	ld	a, b
   0F6A C1                 2932 	pop	bc
   0F6B CE 00              2933 	adc	a,#0x00
   0F6D 23                 2934 	inc	hl
   0F6E 77                 2935 	ld	(hl),a
                           2936 ;demo.c:479: if (xo >= 256) {
   0F6F 3Ar83s40           2937 	ld	a,(#_xo+0)
   0F72 D6 00              2938 	sub	a,#0x00
   0F74 3Ar84s40           2939 	ld	a,(#_xo+1)
   0F77 DE 01              2940 	sbc	a,#0x01
   0F79 FArE0s0F           2941 	jp	M,00106$
                           2942 ;demo.c:480: xo = 0;
   0F7C 21r83s40           2943 	ld	hl,#_xo + 0
   0F7F 36 00              2944 	ld	(hl), #0x00
   0F81 21r84s40           2945 	ld	hl,#_xo + 1
   0F84 36 00              2946 	ld	(hl), #0x00
                           2947 ;demo.c:481: yo+=53;
   0F86 21r85s40           2948 	ld	hl,#_yo
   0F89 7E                 2949 	ld	a,(hl)
   0F8A C6 35              2950 	add	a,#0x35
   0F8C 23                 2951 	inc	hl
   0F8D 2B                 2952 	dec	hl
   0F8E C5                 2953 	push	bc
   0F8F 4F                 2954 	ld	c, a
   0F90 23                 2955 	inc	hl
   0F91 7E                 2956 	ld	a, (hl)
   0F92 47                 2957 	ld	b, a
   0F93 79                 2958 	ld	a, c
   0F94 2B                 2959 	dec	hl
   0F95 77                 2960 	ld	(hl), a
   0F96 78                 2961 	ld	a, b
   0F97 C1                 2962 	pop	bc
   0F98 CE 00              2963 	adc	a,#0x00
   0F9A 23                 2964 	inc	hl
   0F9B 77                 2965 	ld	(hl),a
                           2966 ;demo.c:482: if (yo >= 212) { yo = 0; po+=256; }
   0F9C 3Ar85s40           2967 	ld	a,(#_yo+0)
   0F9F D6 D4              2968 	sub	a,#0xD4
   0FA1 3Ar86s40           2969 	ld	a,(#_yo+1)
   0FA4 DE 00              2970 	sbc	a,#0x00
   0FA6 FArC9s0F           2971 	jp	M,00102$
   0FA9 21r85s40           2972 	ld	hl,#_yo + 0
   0FAC 36 00              2973 	ld	(hl), #0x00
   0FAE 21r86s40           2974 	ld	hl,#_yo + 1
   0FB1 36 00              2975 	ld	(hl), #0x00
   0FB3 21r87s40           2976 	ld	hl,#_po
   0FB6 7E                 2977 	ld	a,(hl)
   0FB7 C6 00              2978 	add	a,#0x00
   0FB9 23                 2979 	inc	hl
   0FBA 2B                 2980 	dec	hl
   0FBB C5                 2981 	push	bc
   0FBC 4F                 2982 	ld	c, a
   0FBD 23                 2983 	inc	hl
   0FBE 7E                 2984 	ld	a, (hl)
   0FBF 47                 2985 	ld	b, a
   0FC0 79                 2986 	ld	a, c
   0FC1 2B                 2987 	dec	hl
   0FC2 77                 2988 	ld	(hl), a
   0FC3 78                 2989 	ld	a, b
   0FC4 C1                 2990 	pop	bc
   0FC5 CE 01              2991 	adc	a,#0x01
   0FC7 23                 2992 	inc	hl
   0FC8 77                 2993 	ld	(hl),a
   0FC9                    2994 00102$:
                           2995 ;demo.c:483: if (po >= 768) {
   0FC9 3Ar87s40           2996 	ld	a,(#_po+0)
   0FCC D6 00              2997 	sub	a,#0x00
   0FCE 3Ar88s40           2998 	ld	a,(#_po+1)
   0FD1 DE 03              2999 	sbc	a,#0x03
   0FD3 FArE0s0F           3000 	jp	M,00106$
                           3001 ;demo.c:484: po = 0;
   0FD6 21r87s40           3002 	ld	hl,#_po + 0
   0FD9 36 00              3003 	ld	(hl), #0x00
   0FDB 21r88s40           3004 	ld	hl,#_po + 1
   0FDE 36 00              3005 	ld	(hl), #0x00
   0FE0                    3006 00106$:
                           3007 ;demo.c:489: msx2_palette(15,3+sintab[fffaaa & 255]>>5,3,4);
   0FE0 21r89s40           3008 	ld	hl,#_fffaaa + 0
   0FE3 4E                 3009 	ld	c,(hl)
   0FE4 06 00              3010 	ld	b,#0x00
   0FE6 21r00s00           3011 	ld	hl,#_sintab
   0FE9 09                 3012 	add	hl,bc
   0FEA 7E                 3013 	ld	a,(hl)
   0FEB 4F                 3014 	ld	c,a
   0FEC 17                 3015 	rla	
   0FED 9F                 3016 	sbc	a,a
   0FEE 47                 3017 	ld	b,a
   0FEF 03                 3018 	inc	bc
   0FF0 03                 3019 	inc	bc
   0FF1 03                 3020 	inc	bc
   0FF2 CB 28              3021 	sra	b
   0FF4 CB 19              3022 	rr	c
   0FF6 CB 28              3023 	sra	b
   0FF8 CB 19              3024 	rr	c
   0FFA CB 28              3025 	sra	b
   0FFC CB 19              3026 	rr	c
   0FFE CB 28              3027 	sra	b
   1000 CB 19              3028 	rr	c
   1002 CB 28              3029 	sra	b
   1004 CB 19              3030 	rr	c
   1006 21 03 04           3031 	ld	hl,#0x0403
   1009 E5                 3032 	push	hl
   100A 41                 3033 	ld	b,c
   100B 0E 0F              3034 	ld	c,#0x0F
   100D C5                 3035 	push	bc
   100E CDr00s00           3036 	call	_msx2_palette
   1011 F1                 3037 	pop	af
   1012 F1                 3038 	pop	af
                           3039 ;demo.c:490: msx2_palette(3,2+sintab[fffaaa & 255]>>5,0,0);
   1013 21r89s40           3040 	ld	hl,#_fffaaa + 0
   1016 4E                 3041 	ld	c,(hl)
   1017 06 00              3042 	ld	b,#0x00
   1019 21r00s00           3043 	ld	hl,#_sintab
   101C 09                 3044 	add	hl,bc
   101D 7E                 3045 	ld	a,(hl)
   101E 4F                 3046 	ld	c,a
   101F 17                 3047 	rla	
   1020 9F                 3048 	sbc	a,a
   1021 47                 3049 	ld	b,a
   1022 03                 3050 	inc	bc
   1023 03                 3051 	inc	bc
   1024 CB 28              3052 	sra	b
   1026 CB 19              3053 	rr	c
   1028 CB 28              3054 	sra	b
   102A CB 19              3055 	rr	c
   102C CB 28              3056 	sra	b
   102E CB 19              3057 	rr	c
   1030 CB 28              3058 	sra	b
   1032 CB 19              3059 	rr	c
   1034 CB 28              3060 	sra	b
   1036 CB 19              3061 	rr	c
   1038 21 00 00           3062 	ld	hl,#0x0000
   103B E5                 3063 	push	hl
   103C 41                 3064 	ld	b,c
   103D 0E 03              3065 	ld	c,#0x03
   103F C5                 3066 	push	bc
   1040 CDr00s00           3067 	call	_msx2_palette
   1043 F1                 3068 	pop	af
   1044 F1                 3069 	pop	af
                           3070 ;demo.c:491: fffaaa++;
   1045 FD 21r89s40        3071 	ld	iy,#_fffaaa
   1049 FD 34 00           3072 	inc	0 (iy)
   104C 20 07              3073 	jr	NZ,00132$
   104E FD 21r89s40        3074 	ld	iy,#_fffaaa
   1052 FD 34 01           3075 	inc	1 (iy)
   1055                    3076 00132$:
   1055 DD F9              3077 	ld	sp,ix
   1057 DD E1              3078 	pop	ix
   1059 C9                 3079 	ret
   105A                    3080 _do_animplay_end::
                           3081 ;demo.c:500: void main() {
                           3082 ;	---------------------------------
                           3083 ; Function main
                           3084 ; ---------------------------------
   105A                    3085 _main_start::
   105A                    3086 _main:
                           3087 ;demo.c:501: unsigned char quit=0;
   105A 0E 00              3088 	ld	c,#0x00
                           3089 ;demo.c:502: int modes = 128; // interlace bit on
   105C 11 80 00           3090 	ld	de,#0x0080
                           3091 ;demo.c:506: spindown();
   105F C5                 3092 	push	bc
   1060 D5                 3093 	push	de
   1061 CDr00s00           3094 	call	_spindown
   1064 D1                 3095 	pop	de
   1065 C1                 3096 	pop	bc
                           3097 ;demo.c:508: puts("demo init\r\n\r\n");
   1066 C5                 3098 	push	bc
   1067 D5                 3099 	push	de
   1068 21rC1s11           3100 	ld	hl,#__str_0
   106B E5                 3101 	push	hl
   106C CDr00s00           3102 	call	_puts
   106F F1                 3103 	pop	af
   1070 D1                 3104 	pop	de
   1071 C1                 3105 	pop	bc
                           3106 ;demo.c:521: puts("music init...");
   1072 C5                 3107 	push	bc
   1073 D5                 3108 	push	de
   1074 21rCFs11           3109 	ld	hl,#__str_1
   1077 E5                 3110 	push	hl
   1078 CDr00s00           3111 	call	_puts
   107B F1                 3112 	pop	af
   107C D1                 3113 	pop	de
   107D C1                 3114 	pop	bc
                           3115 ;demo.c:523: PLY_SongPtr = (char *)0x0103;
   107E 21r00s00           3116 	ld	hl,#_PLY_SongPtr + 0
   1081 36 03              3117 	ld	(hl), #0x03
   1083 21r01s00           3118 	ld	hl,#_PLY_SongPtr + 1
   1086 36 01              3119 	ld	(hl), #0x01
                           3120 ;demo.c:524: PLY_Init();
   1088 C5                 3121 	push	bc
   1089 D5                 3122 	push	de
   108A CDr00s00           3123 	call	_PLY_Init
   108D D1                 3124 	pop	de
   108E C1                 3125 	pop	bc
                           3126 ;demo.c:525: puts("done.\n\n");
   108F C5                 3127 	push	bc
   1090 D5                 3128 	push	de
   1091 21rDDs11           3129 	ld	hl,#__str_2
   1094 E5                 3130 	push	hl
   1095 CDr00s00           3131 	call	_puts
   1098 F1                 3132 	pop	af
   1099 D1                 3133 	pop	de
   109A C1                 3134 	pop	bc
                           3135 ;demo.c:527: if(isvdp2())
   109B C5                 3136 	push	bc
   109C D5                 3137 	push	de
   109D CDr00s00           3138 	call	_isvdp2
   10A0 45                 3139 	ld	b,l
   10A1 D1                 3140 	pop	de
   10A2 78                 3141 	ld	a,b
   10A3 C1                 3142 	pop	bc
   10A4 47                 3143 	ld	b,a
   10A5 B7                 3144 	or	a,a
   10A6 28 03              3145 	jr	Z,00102$
                           3146 ;demo.c:529: modes+=2; // pal
   10A8 11 82 00           3147 	ld	de,#0x0082
   10AB                    3148 00102$:
                           3149 ;demo.c:533: vdp_set_screen5();
   10AB C5                 3150 	push	bc
   10AC D5                 3151 	push	de
   10AD CDr00s00           3152 	call	_vdp_set_screen5
   10B0 D1                 3153 	pop	de
   10B1 C1                 3154 	pop	bc
                           3155 ;demo.c:535: vdp_register(VDP_MODE3,modes); // interlace on, screen mode pal or ntsc
   10B2 43                 3156 	ld	b,e
   10B3 C5                 3157 	push	bc
   10B4 C5                 3158 	push	bc
   10B5 33                 3159 	inc	sp
   10B6 3E 09              3160 	ld	a,#0x09
   10B8 F5                 3161 	push	af
   10B9 33                 3162 	inc	sp
   10BA CDr00s00           3163 	call	_vdp_register
   10BD F1                 3164 	pop	af
   10BE C1                 3165 	pop	bc
                           3166 ;demo.c:537: puts("demo start\r\n");
   10BF C5                 3167 	push	bc
   10C0 21rE5s11           3168 	ld	hl,#__str_3
   10C3 E5                 3169 	push	hl
   10C4 CDr00s00           3170 	call	_puts
   10C7 F1                 3171 	pop	af
   10C8 C1                 3172 	pop	bc
                           3173 ;demo.c:539: scratch_clear();
   10C9 C5                 3174 	push	bc
   10CA CDr97s03           3175 	call	_scratch_clear
   10CD C1                 3176 	pop	bc
                           3177 ;demo.c:540: vdp_load_palette(scratch);
   10CE C5                 3178 	push	bc
   10CF 21r80s3F           3179 	ld	hl,#_scratch
   10D2 E5                 3180 	push	hl
   10D3 CDr00s00           3181 	call	_vdp_load_palette
   10D6 F1                 3182 	pop	af
   10D7 C1                 3183 	pop	bc
                           3184 ;demo.c:542: vdp_register(VDP_VOFFSET,0);
   10D8 C5                 3185 	push	bc
   10D9 21 17 00           3186 	ld	hl,#0x0017
   10DC E5                 3187 	push	hl
   10DD CDr00s00           3188 	call	_vdp_register
   10E0 F1                 3189 	pop	af
   10E1 C1                 3190 	pop	bc
                           3191 ;demo.c:543: pal_load("TWISTER PL5",32);
   10E2 C5                 3192 	push	bc
   10E3 3E 20              3193 	ld	a,#0x20
   10E5 F5                 3194 	push	af
   10E6 33                 3195 	inc	sp
   10E7 21rF2s11           3196 	ld	hl,#__str_4
   10EA E5                 3197 	push	hl
   10EB CDrAAs03           3198 	call	_pal_load
   10EE F1                 3199 	pop	af
   10EF 33                 3200 	inc	sp
   10F0 C1                 3201 	pop	bc
                           3202 ;demo.c:544: vdp_load_palette(cur_palette);
   10F1 C5                 3203 	push	bc
   10F2 21r00s40           3204 	ld	hl,#_cur_palette
   10F5 E5                 3205 	push	hl
   10F6 CDr00s00           3206 	call	_vdp_load_palette
   10F9 F1                 3207 	pop	af
   10FA C1                 3208 	pop	bc
                           3209 ;demo.c:546: memset((uint8_t *) &packbuffer, 0, 3963);
   10FB C5                 3210 	push	bc
   10FC 21 7B 0F           3211 	ld	hl,#0x0F7B
   10FF E5                 3212 	push	hl
   1100 3E 00              3213 	ld	a,#0x00
   1102 F5                 3214 	push	af
   1103 33                 3215 	inc	sp
   1104 21r00s01           3216 	ld	hl,#_packbuffer
   1107 E5                 3217 	push	hl
   1108 CDr00s00           3218 	call	_memset
   110B F1                 3219 	pop	af
   110C F1                 3220 	pop	af
   110D 33                 3221 	inc	sp
   110E C1                 3222 	pop	bc
                           3223 ;demo.c:547: raw_load("TWISTER PCK", 3963, packbuffer);
   110F C5                 3224 	push	bc
   1110 21r00s01           3225 	ld	hl,#_packbuffer
   1113 E5                 3226 	push	hl
   1114 21 7B 0F           3227 	ld	hl,#0x0F7B
   1117 E5                 3228 	push	hl
   1118 21rFEs11           3229 	ld	hl,#__str_5
   111B E5                 3230 	push	hl
   111C CDr5Es04           3231 	call	_raw_load
   111F F1                 3232 	pop	af
   1120 F1                 3233 	pop	af
   1121 F1                 3234 	pop	af
   1122 C1                 3235 	pop	bc
                           3236 ;demo.c:548: bitbuster(packbuffer,0x8000,VRAM_0); // to page 1
   1123 C5                 3237 	push	bc
   1124 3E 01              3238 	ld	a,#0x01
   1126 F5                 3239 	push	af
   1127 33                 3240 	inc	sp
   1128 21 00 80           3241 	ld	hl,#0x8000
   112B E5                 3242 	push	hl
   112C 21r00s01           3243 	ld	hl,#_packbuffer
   112F E5                 3244 	push	hl
   1130 CDr00s00           3245 	call	_bitbuster
   1133 F1                 3246 	pop	af
   1134 F1                 3247 	pop	af
   1135 33                 3248 	inc	sp
   1136 C1                 3249 	pop	bc
                           3250 ;demo.c:551: vdp_set_write_address(0, 0);
   1137 C5                 3251 	push	bc
   1138 21 00 00           3252 	ld	hl,#0x0000
   113B E5                 3253 	push	hl
   113C 3E 00              3254 	ld	a,#0x00
   113E F5                 3255 	push	af
   113F 33                 3256 	inc	sp
   1140 CDr00s00           3257 	call	_vdp_set_write_address
   1143 F1                 3258 	pop	af
   1144 33                 3259 	inc	sp
   1145 C1                 3260 	pop	bc
                           3261 ;demo.c:552: memset((uint8_t *) &scratch, 0, 256);
   1146 C5                 3262 	push	bc
   1147 21 00 01           3263 	ld	hl,#0x0100
   114A E5                 3264 	push	hl
   114B 3E 00              3265 	ld	a,#0x00
   114D F5                 3266 	push	af
   114E 33                 3267 	inc	sp
   114F 21r80s3F           3268 	ld	hl,#_scratch
   1152 E5                 3269 	push	hl
   1153 CDr00s00           3270 	call	_memset
   1156 F1                 3271 	pop	af
   1157 F1                 3272 	pop	af
   1158 33                 3273 	inc	sp
   1159 C1                 3274 	pop	bc
                           3275 ;demo.c:554: for (i = 0; i < 213; i++) {		
   115A 11 D5 00           3276 	ld	de,#0x00D5
   115D                    3277 00110$:
                           3278 ;demo.c:555: vdp_load_screen(scratch, 128);
   115D C5                 3279 	push	bc
   115E D5                 3280 	push	de
   115F 3E 80              3281 	ld	a,#0x80
   1161 F5                 3282 	push	af
   1162 33                 3283 	inc	sp
   1163 21r80s3F           3284 	ld	hl,#_scratch
   1166 E5                 3285 	push	hl
   1167 CDr00s00           3286 	call	_vdp_load_screen
   116A F1                 3287 	pop	af
   116B 33                 3288 	inc	sp
   116C D1                 3289 	pop	de
   116D C1                 3290 	pop	bc
   116E 1B                 3291 	dec	de
                           3292 ;demo.c:554: for (i = 0; i < 213; i++) {		
   116F 7B                 3293 	ld	a,e
   1170 B2                 3294 	or	a,d
   1171 20 EA              3295 	jr	NZ,00110$
                           3296 ;demo.c:586: install_isr(my_isr);
   1173 C5                 3297 	push	bc
   1174 21r2Cs02           3298 	ld	hl,#_my_isr
   1177 E5                 3299 	push	hl
   1178 CDr00s00           3300 	call	_install_isr
   117B F1                 3301 	pop	af
   117C C1                 3302 	pop	bc
                           3303 ;demo.c:609: while (!quit) {
   117D                    3304 00105$:
   117D AF                 3305 	xor	a,a
   117E B1                 3306 	or	a,c
   117F 20 1D              3307 	jr	NZ,00107$
                           3308 ;demo.c:613: twister();
   1181 C5                 3309 	push	bc
   1182 CDrEEs09           3310 	call	_twister
   1185 C1                 3311 	pop	bc
                           3312 ;demo.c:614: font();
   1186 C5                 3313 	push	bc
   1187 CDr69s0C           3314 	call	_font
   118A C1                 3315 	pop	bc
                           3316 ;demo.c:625: if(space())
   118B C5                 3317 	push	bc
   118C 21 08 01           3318 	ld	hl,#0x0108
   118F E5                 3319 	push	hl
   1190 CDr00s00           3320 	call	_ispressed
   1193 F1                 3321 	pop	af
   1194 7D                 3322 	ld	a,l
   1195 C1                 3323 	pop	bc
   1196 47                 3324 	ld	b,a
   1197 B7                 3325 	or	a,a
   1198 28 E3              3326 	jr	Z,00105$
                           3327 ;demo.c:626: quit=1;
   119A 0E 01              3328 	ld	c,#0x01
   119C 18 DF              3329 	jr	00105$
   119E                    3330 00107$:
                           3331 ;demo.c:629: waitVB();
   119E 76                 3332 		halt 
                           3333 ;demo.c:630: uninstall_isr();
   119F CDr00s00           3334 	call	_uninstall_isr
                           3335 ;demo.c:631: PLY_Stop();
   11A2 CDr00s00           3336 	call	_PLY_Stop
                           3337 ;demo.c:632: PLY_SendRegisters();
   11A5 CDr00s00           3338 	call	_PLY_SendRegisters
                           3339 ;demo.c:634: screen(0);
   11A8 3E 00              3340 	ld	a,#0x00
   11AA F5                 3341 	push	af
   11AB 33                 3342 	inc	sp
   11AC CDr00s00           3343 	call	_screen
   11AF 33                 3344 	inc	sp
                           3345 ;demo.c:636: puts("demo exit\r\n\r\n");
   11B0 21r0As12           3346 	ld	hl,#__str_6
   11B3 E5                 3347 	push	hl
   11B4 CDr00s00           3348 	call	_puts
   11B7 F1                 3349 	pop	af
                           3350 ;demo.c:638: exit(0);
   11B8 3E 00              3351 	ld	a,#0x00
   11BA F5                 3352 	push	af
   11BB 33                 3353 	inc	sp
   11BC CDr00s00           3354 	call	_exit
   11BF 33                 3355 	inc	sp
   11C0 C9                 3356 	ret
   11C1                    3357 _main_end::
   11C1                    3358 __str_0:
   11C1 64 65 6D 6F 20 69  3359 	.ascii "demo init"
        6E 69 74
   11CA 0D                 3360 	.db 0x0D
   11CB 0A                 3361 	.db 0x0A
   11CC 0D                 3362 	.db 0x0D
   11CD 0A                 3363 	.db 0x0A
   11CE 00                 3364 	.db 0x00
   11CF                    3365 __str_1:
   11CF 6D 75 73 69 63 20  3366 	.ascii "music init..."
        69 6E 69 74 2E 2E
        2E
   11DC 00                 3367 	.db 0x00
   11DD                    3368 __str_2:
   11DD 64 6F 6E 65 2E     3369 	.ascii "done."
   11E2 0A                 3370 	.db 0x0A
   11E3 0A                 3371 	.db 0x0A
   11E4 00                 3372 	.db 0x00
   11E5                    3373 __str_3:
   11E5 64 65 6D 6F 20 73  3374 	.ascii "demo start"
        74 61 72 74
   11EF 0D                 3375 	.db 0x0D
   11F0 0A                 3376 	.db 0x0A
   11F1 00                 3377 	.db 0x00
   11F2                    3378 __str_4:
   11F2 54 57 49 53 54 45  3379 	.ascii "TWISTER PL5"
        52 20 50 4C 35
   11FD 00                 3380 	.db 0x00
   11FE                    3381 __str_5:
   11FE 54 57 49 53 54 45  3382 	.ascii "TWISTER PCK"
        52 20 50 43 4B
   1209 00                 3383 	.db 0x00
   120A                    3384 __str_6:
   120A 64 65 6D 6F 20 65  3385 	.ascii "demo exit"
        78 69 74
   1213 0D                 3386 	.db 0x0D
   1214 0A                 3387 	.db 0x0A
   1215 0D                 3388 	.db 0x0D
   1216 0A                 3389 	.db 0x0A
   1217 00                 3390 	.db 0x00
                           3391 	.area _CODE
                           3392 	.area _CABS
