                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Mar 22 2009) (Mac OS X i386)
                              4 ; This file was generated Mon Feb 26 00:34:25 2018
                              5 ;--------------------------------------------------------
                              6 	.module demo
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _boxes
                             14 	.globl _drawbox
                             15 	.globl _animplay
                             16 	.globl _bulbs
                             17 	.globl _twister
                             18 	.globl _font
                             19 	.globl _drawsine
                             20 	.globl _drawstr
                             21 	.globl _do_letter_tall
                             22 	.globl _do_letter
                             23 	.globl _raster_effu
                             24 	.globl _do_blocks
                             25 	.globl _do_ymmm
                             26 	.globl _fadein
                             27 	.globl _pck_load
                             28 	.globl _raw_load
                             29 	.globl _pause
                             30 	.globl _pal_load
                             31 	.globl _scratch_clear
                             32 	.globl _ge5_load
                             33 	.globl _color_isr
                             34 	.globl _my_isr
                             35 	.globl _isNthBitSet
                             36 	.globl _bo
                             37 	.globl _byy
                             38 	.globl _bxx
                             39 	.globl _bt
                             40 	.globl _by
                             41 	.globl _bx
                             42 	.globl _dbly
                             43 	.globl _buffer
                             44 	.globl _boxes_init
                             45 	.globl _anim_init
                             46 	.globl _enderdir
                             47 	.globl _ender
                             48 	.globl _ff2
                             49 	.globl _ff1
                             50 	.globl _bulbflipper
                             51 	.globl _twinited
                             52 	.globl _ff
                             53 	.globl _ly
                             54 	.globl _lx
                             55 	.globl _linenum
                             56 	.globl _flof
                             57 	.globl _btab
                             58 	.globl _bty
                             59 	.globl _btx
                             60 	.globl _bsy
                             61 	.globl _bsx
                             62 	.globl _block_init
                             63 	.globl _cc
                             64 	.globl _yofff
                             65 	.globl _cmd
                             66 	.globl _tick
                             67 	.globl _vbicount
                             68 	.globl _boxes_palette
                             69 	.globl _tf_palette
                             70 	.globl _twister_palette
                             71 	.globl _block_palette
                             72 	.globl _cur_palette
                             73 	.globl _scratch
                             74 	.globl _tf2
                             75 	.globl _tf1
                             76 	.globl _packbuffer
                             77 	.globl _sintab
                             78 	.globl _font_w
                             79 	.globl _font_y
                             80 	.globl _font_x
                             81 	.globl _sintabx
                             82 ;--------------------------------------------------------
                             83 ; special function registers
                             84 ;--------------------------------------------------------
                             85 ;--------------------------------------------------------
                             86 ;  ram data
                             87 ;--------------------------------------------------------
                             88 	.area _DATA
   0000                      89 _sintab::
   0000                      90 	.ds 256
   0100                      91 _packbuffer::
   0100                      92 	.ds 12000
   2FE0                      93 _tf1::
   2FE0                      94 	.ds 12000
   5EC0                      95 _tf2::
   5EC0                      96 	.ds 12000
   8DA0                      97 _scratch::
   8DA0                      98 	.ds 128
   8E20                      99 _cur_palette::
   8E20                     100 	.ds 32
   8E40                     101 _block_palette::
   8E40                     102 	.ds 32
   8E60                     103 _twister_palette::
   8E60                     104 	.ds 32
   8E80                     105 _tf_palette::
   8E80                     106 	.ds 32
   8EA0                     107 _boxes_palette::
   8EA0                     108 	.ds 32
   8EC0                     109 _vbicount::
   8EC0                     110 	.ds 2
   8EC2                     111 _tick::
   8EC2                     112 	.ds 2
   8EC4                     113 _cmd::
   8EC4                     114 	.ds 15
   8ED3                     115 _isNthBitSet_mask_1_1:
   8ED3                     116 	.ds 8
   8EDB                     117 _yofff::
   8EDB                     118 	.ds 1
   8EDC                     119 _cc::
   8EDC                     120 	.ds 1
   8EDD                     121 _flipper:
   8EDD                     122 	.ds 2
   8EDF                     123 _ymmmf:
   8EDF                     124 	.ds 2
   8EE1                     125 _block_init::
   8EE1                     126 	.ds 1
   8EE2                     127 _bsx::
   8EE2                     128 	.ds 2
   8EE4                     129 _bsy::
   8EE4                     130 	.ds 2
   8EE6                     131 _btx::
   8EE6                     132 	.ds 2
   8EE8                     133 _bty::
   8EE8                     134 	.ds 2
   8EEA                     135 _btab::
   8EEA                     136 	.ds 32
   8F0A                     137 _flof::
   8F0A                     138 	.ds 2
   8F0C                     139 _linenum::
   8F0C                     140 	.ds 2
   8F0E                     141 _lx::
   8F0E                     142 	.ds 1
   8F0F                     143 _ly::
   8F0F                     144 	.ds 1
   8F10                     145 _ff::
   8F10                     146 	.ds 2
   8F12                     147 _twinited::
   8F12                     148 	.ds 2
   8F14                     149 _bulbflipper::
   8F14                     150 	.ds 2
   8F16                     151 _ff1::
   8F16                     152 	.ds 2
   8F18                     153 _ff2::
   8F18                     154 	.ds 2
   8F1A                     155 _ender::
   8F1A                     156 	.ds 2
   8F1C                     157 _enderdir::
   8F1C                     158 	.ds 2
   8F1E                     159 _xo:
   8F1E                     160 	.ds 2
   8F20                     161 _yo:
   8F20                     162 	.ds 2
   8F22                     163 _po:
   8F22                     164 	.ds 2
   8F24                     165 _fffaaa:
   8F24                     166 	.ds 2
   8F26                     167 _anim_init::
   8F26                     168 	.ds 2
   8F28                     169 _boxes_init::
   8F28                     170 	.ds 1
   8F29                     171 _buffer::
   8F29                     172 	.ds 2
   8F2B                     173 _dbly::
   8F2B                     174 	.ds 2
   8F2D                     175 _bx::
   8F2D                     176 	.ds 2
   8F2F                     177 _by::
   8F2F                     178 	.ds 2
   8F31                     179 _bt::
   8F31                     180 	.ds 2
   8F33                     181 _bxx::
   8F33                     182 	.ds 2
   8F35                     183 _byy::
   8F35                     184 	.ds 2
   8F37                     185 _bo::
   8F37                     186 	.ds 2
                            187 ;--------------------------------------------------------
                            188 ; overlayable items in  ram 
                            189 ;--------------------------------------------------------
                            190 	.area _OVERLAY
                            191 ;--------------------------------------------------------
                            192 ; external initialized ram data
                            193 ;--------------------------------------------------------
                            194 ;--------------------------------------------------------
                            195 ; global & static initialisations
                            196 ;--------------------------------------------------------
                            197 	.area _HOME
                            198 	.area _GSINIT
                            199 	.area _GSFINAL
                            200 	.area _GSINIT
                            201 ;demo.c:54: static unsigned char mask[] = {1, 2, 4, 8, 16, 32, 64, 128};
   0000 21rD3s8E            202 	ld	hl,#_isNthBitSet_mask_1_1
   0003 CDr00s00            203 	call	__initrleblock
   0006 08                  204 	.db	8
   0007 01 02 04 08 10 20   205 	.db	0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80
        40 80
   000F 00                  206 	.db	0
                            207 ;types.h:27: signed char sintab[256]={
   0010 21r00s00            208 	ld	hl,#_sintab
   0013 CDr00s00            209 	call	__initrleblock
   0016 3B                  210 	.db	59
   0017 00 03 06 09 0C 0F   211 	.db	0x00, 0x03, 0x06, 0x09, 0x0C, 0x0F, 0x12, 0x15
        12 15
   001F 18 1B 1E 21 24 27   212 	.db	0x18, 0x1B, 0x1E, 0x21, 0x24, 0x27, 0x2A, 0x2D
        2A 2D
   0027 30 33 36 39 3B 3E   213 	.db	0x30, 0x33, 0x36, 0x39, 0x3B, 0x3E, 0x41, 0x43
        41 43
   002F 46 49 4B 4E 50 52   214 	.db	0x46, 0x49, 0x4B, 0x4E, 0x50, 0x52, 0x55, 0x57
        55 57
   0037 59 5B 5E 60 62 64   215 	.db	0x59, 0x5B, 0x5E, 0x60, 0x62, 0x64, 0x66, 0x67
        66 67
   003F 69 6B 6C 6E 70 71   216 	.db	0x69, 0x6B, 0x6C, 0x6E, 0x70, 0x71, 0x72, 0x74
        72 74
   0047 75 76 77 78 79 7A   217 	.db	0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7B
        7B 7B
   004F 7C 7D 7D            218 	.db	0x7C, 0x7D, 0x7D
   0052 FB 7E               219 	.db	#-5,#0x7E
   0054 01                  220 	.db	1
   0055 7F                  221 	.db	0x7F
   0056 FB 7E               222 	.db	#-5,#0x7E
   0058 75                  223 	.db	117
   0059 7D 7D 7C 7B 7B 7A   224 	.db	0x7D, 0x7D, 0x7C, 0x7B, 0x7B, 0x7A, 0x79, 0x78
        79 78
   0061 77 76 75 74 72 71   225 	.db	0x77, 0x76, 0x75, 0x74, 0x72, 0x71, 0x70, 0x6E
        70 6E
   0069 6C 6B 69 67 66 64   226 	.db	0x6C, 0x6B, 0x69, 0x67, 0x66, 0x64, 0x62, 0x60
        62 60
   0071 5E 5B 59 57 55 52   227 	.db	0x5E, 0x5B, 0x59, 0x57, 0x55, 0x52, 0x50, 0x4E
        50 4E
   0079 4B 49 46 43 41 3E   228 	.db	0x4B, 0x49, 0x46, 0x43, 0x41, 0x3E, 0x3B, 0x39
        3B 39
   0081 36 33 30 2D 2A 27   229 	.db	0x36, 0x33, 0x30, 0x2D, 0x2A, 0x27, 0x24, 0x21
        24 21
   0089 1E 1B 18 15 12 0F   230 	.db	0x1E, 0x1B, 0x18, 0x15, 0x12, 0x0F, 0x0C, 0x09
        0C 09
   0091 06 03 00 FD FA F7   231 	.db	0x06, 0x03, 0x00, 0xFD, 0xFA, 0xF7, 0xF4, 0xF1
        F4 F1
   0099 EE EB E8 E5 E2 DF   232 	.db	0xEE, 0xEB, 0xE8, 0xE5, 0xE2, 0xDF, 0xDC, 0xD9
        DC D9
   00A1 D6 D3 D0 CD CA C7   233 	.db	0xD6, 0xD3, 0xD0, 0xCD, 0xCA, 0xC7, 0xC5, 0xC2
        C5 C2
   00A9 BF BD BA B7 B5 B2   234 	.db	0xBF, 0xBD, 0xBA, 0xB7, 0xB5, 0xB2, 0xB0, 0xAE
        B0 AE
   00B1 AB A9 A7 A5 A2 A0   235 	.db	0xAB, 0xA9, 0xA7, 0xA5, 0xA2, 0xA0, 0x9E, 0x9C
        9E 9C
   00B9 9A 99 97 95 94 92   236 	.db	0x9A, 0x99, 0x97, 0x95, 0x94, 0x92, 0x90, 0x8F
        90 8F
   00C1 8E 8C 8B 8A 89 88   237 	.db	0x8E, 0x8C, 0x8B, 0x8A, 0x89, 0x88, 0x87, 0x86
        87 86
   00C9 85 85 84 83 83      238 	.db	0x85, 0x85, 0x84, 0x83, 0x83
   00CE FB 82               239 	.db	#-5,#0x82
   00D0 01                  240 	.db	1
   00D1 81                  241 	.db	0x81
   00D2 FB 82               242 	.db	#-5,#0x82
   00D4 3A                  243 	.db	58
   00D5 83 83 84 85 85 86   244 	.db	0x83, 0x83, 0x84, 0x85, 0x85, 0x86, 0x87, 0x88
        87 88
   00DD 89 8A 8B 8C 8E 8F   245 	.db	0x89, 0x8A, 0x8B, 0x8C, 0x8E, 0x8F, 0x90, 0x92
        90 92
   00E5 94 95 97 99 9A 9C   246 	.db	0x94, 0x95, 0x97, 0x99, 0x9A, 0x9C, 0x9E, 0xA0
        9E A0
   00ED A2 A5 A7 A9 AB AE   247 	.db	0xA2, 0xA5, 0xA7, 0xA9, 0xAB, 0xAE, 0xB0, 0xB2
        B0 B2
   00F5 B5 B7 BA BD BF C2   248 	.db	0xB5, 0xB7, 0xBA, 0xBD, 0xBF, 0xC2, 0xC5, 0xC7
        C5 C7
   00FD CA CD D0 D3 D6 D9   249 	.db	0xCA, 0xCD, 0xD0, 0xD3, 0xD6, 0xD9, 0xDC, 0xDF
        DC DF
   0105 E2 E5 E8 EB EE F1   250 	.db	0xE2, 0xE5, 0xE8, 0xEB, 0xEE, 0xF1, 0xF4, 0xF7
        F4 F7
   010D FA FD               251 	.db	0xFA, 0xFD
   010F 00                  252 	.db	0
                            253 ;demo.c:36: uint8_t packbuffer[12000] = {0};
   0110 21r00s01            254 	ld	hl,#_packbuffer
   0113 CDr00s00            255 	call	__initrleblock
   0116 81 00               256 	.db	#-127,#0x00
   0118 81 00               257 	.db	#-127,#0x00
   011A 81 00               258 	.db	#-127,#0x00
   011C 81 00               259 	.db	#-127,#0x00
   011E 81 00               260 	.db	#-127,#0x00
   0120 81 00               261 	.db	#-127,#0x00
   0122 81 00               262 	.db	#-127,#0x00
   0124 81 00               263 	.db	#-127,#0x00
   0126 81 00               264 	.db	#-127,#0x00
   0128 81 00               265 	.db	#-127,#0x00
   012A 81 00               266 	.db	#-127,#0x00
   012C 81 00               267 	.db	#-127,#0x00
   012E 81 00               268 	.db	#-127,#0x00
   0130 81 00               269 	.db	#-127,#0x00
   0132 81 00               270 	.db	#-127,#0x00
   0134 81 00               271 	.db	#-127,#0x00
   0136 81 00               272 	.db	#-127,#0x00
   0138 81 00               273 	.db	#-127,#0x00
   013A 81 00               274 	.db	#-127,#0x00
   013C 81 00               275 	.db	#-127,#0x00
   013E 81 00               276 	.db	#-127,#0x00
   0140 81 00               277 	.db	#-127,#0x00
   0142 81 00               278 	.db	#-127,#0x00
   0144 81 00               279 	.db	#-127,#0x00
   0146 81 00               280 	.db	#-127,#0x00
   0148 81 00               281 	.db	#-127,#0x00
   014A 81 00               282 	.db	#-127,#0x00
   014C 81 00               283 	.db	#-127,#0x00
   014E 81 00               284 	.db	#-127,#0x00
   0150 81 00               285 	.db	#-127,#0x00
   0152 81 00               286 	.db	#-127,#0x00
   0154 81 00               287 	.db	#-127,#0x00
   0156 81 00               288 	.db	#-127,#0x00
   0158 81 00               289 	.db	#-127,#0x00
   015A 81 00               290 	.db	#-127,#0x00
   015C 81 00               291 	.db	#-127,#0x00
   015E 81 00               292 	.db	#-127,#0x00
   0160 81 00               293 	.db	#-127,#0x00
   0162 81 00               294 	.db	#-127,#0x00
   0164 81 00               295 	.db	#-127,#0x00
   0166 81 00               296 	.db	#-127,#0x00
   0168 81 00               297 	.db	#-127,#0x00
   016A 81 00               298 	.db	#-127,#0x00
   016C 81 00               299 	.db	#-127,#0x00
   016E 81 00               300 	.db	#-127,#0x00
   0170 81 00               301 	.db	#-127,#0x00
   0172 81 00               302 	.db	#-127,#0x00
   0174 81 00               303 	.db	#-127,#0x00
   0176 81 00               304 	.db	#-127,#0x00
   0178 81 00               305 	.db	#-127,#0x00
   017A 81 00               306 	.db	#-127,#0x00
   017C 81 00               307 	.db	#-127,#0x00
   017E 81 00               308 	.db	#-127,#0x00
   0180 81 00               309 	.db	#-127,#0x00
   0182 81 00               310 	.db	#-127,#0x00
   0184 81 00               311 	.db	#-127,#0x00
   0186 81 00               312 	.db	#-127,#0x00
   0188 81 00               313 	.db	#-127,#0x00
   018A 81 00               314 	.db	#-127,#0x00
   018C 81 00               315 	.db	#-127,#0x00
   018E 81 00               316 	.db	#-127,#0x00
   0190 81 00               317 	.db	#-127,#0x00
   0192 81 00               318 	.db	#-127,#0x00
   0194 81 00               319 	.db	#-127,#0x00
   0196 81 00               320 	.db	#-127,#0x00
   0198 81 00               321 	.db	#-127,#0x00
   019A 81 00               322 	.db	#-127,#0x00
   019C 81 00               323 	.db	#-127,#0x00
   019E 81 00               324 	.db	#-127,#0x00
   01A0 81 00               325 	.db	#-127,#0x00
   01A2 81 00               326 	.db	#-127,#0x00
   01A4 81 00               327 	.db	#-127,#0x00
   01A6 81 00               328 	.db	#-127,#0x00
   01A8 81 00               329 	.db	#-127,#0x00
   01AA 81 00               330 	.db	#-127,#0x00
   01AC 81 00               331 	.db	#-127,#0x00
   01AE 81 00               332 	.db	#-127,#0x00
   01B0 81 00               333 	.db	#-127,#0x00
   01B2 81 00               334 	.db	#-127,#0x00
   01B4 81 00               335 	.db	#-127,#0x00
   01B6 81 00               336 	.db	#-127,#0x00
   01B8 81 00               337 	.db	#-127,#0x00
   01BA 81 00               338 	.db	#-127,#0x00
   01BC 81 00               339 	.db	#-127,#0x00
   01BE 81 00               340 	.db	#-127,#0x00
   01C0 81 00               341 	.db	#-127,#0x00
   01C2 81 00               342 	.db	#-127,#0x00
   01C4 81 00               343 	.db	#-127,#0x00
   01C6 81 00               344 	.db	#-127,#0x00
   01C8 81 00               345 	.db	#-127,#0x00
   01CA 81 00               346 	.db	#-127,#0x00
   01CC 81 00               347 	.db	#-127,#0x00
   01CE 81 00               348 	.db	#-127,#0x00
   01D0 81 00               349 	.db	#-127,#0x00
   01D2 C2 00               350 	.db	#-62,#0x00
   01D4 00                  351 	.db	0
                            352 ;demo.c:38: uint8_t tf1[12000] = {0};
   01D5 21rE0s2F            353 	ld	hl,#_tf1
   01D8 CDr00s00            354 	call	__initrleblock
   01DB 81 00               355 	.db	#-127,#0x00
   01DD 81 00               356 	.db	#-127,#0x00
   01DF 81 00               357 	.db	#-127,#0x00
   01E1 81 00               358 	.db	#-127,#0x00
   01E3 81 00               359 	.db	#-127,#0x00
   01E5 81 00               360 	.db	#-127,#0x00
   01E7 81 00               361 	.db	#-127,#0x00
   01E9 81 00               362 	.db	#-127,#0x00
   01EB 81 00               363 	.db	#-127,#0x00
   01ED 81 00               364 	.db	#-127,#0x00
   01EF 81 00               365 	.db	#-127,#0x00
   01F1 81 00               366 	.db	#-127,#0x00
   01F3 81 00               367 	.db	#-127,#0x00
   01F5 81 00               368 	.db	#-127,#0x00
   01F7 81 00               369 	.db	#-127,#0x00
   01F9 81 00               370 	.db	#-127,#0x00
   01FB 81 00               371 	.db	#-127,#0x00
   01FD 81 00               372 	.db	#-127,#0x00
   01FF 81 00               373 	.db	#-127,#0x00
   0201 81 00               374 	.db	#-127,#0x00
   0203 81 00               375 	.db	#-127,#0x00
   0205 81 00               376 	.db	#-127,#0x00
   0207 81 00               377 	.db	#-127,#0x00
   0209 81 00               378 	.db	#-127,#0x00
   020B 81 00               379 	.db	#-127,#0x00
   020D 81 00               380 	.db	#-127,#0x00
   020F 81 00               381 	.db	#-127,#0x00
   0211 81 00               382 	.db	#-127,#0x00
   0213 81 00               383 	.db	#-127,#0x00
   0215 81 00               384 	.db	#-127,#0x00
   0217 81 00               385 	.db	#-127,#0x00
   0219 81 00               386 	.db	#-127,#0x00
   021B 81 00               387 	.db	#-127,#0x00
   021D 81 00               388 	.db	#-127,#0x00
   021F 81 00               389 	.db	#-127,#0x00
   0221 81 00               390 	.db	#-127,#0x00
   0223 81 00               391 	.db	#-127,#0x00
   0225 81 00               392 	.db	#-127,#0x00
   0227 81 00               393 	.db	#-127,#0x00
   0229 81 00               394 	.db	#-127,#0x00
   022B 81 00               395 	.db	#-127,#0x00
   022D 81 00               396 	.db	#-127,#0x00
   022F 81 00               397 	.db	#-127,#0x00
   0231 81 00               398 	.db	#-127,#0x00
   0233 81 00               399 	.db	#-127,#0x00
   0235 81 00               400 	.db	#-127,#0x00
   0237 81 00               401 	.db	#-127,#0x00
   0239 81 00               402 	.db	#-127,#0x00
   023B 81 00               403 	.db	#-127,#0x00
   023D 81 00               404 	.db	#-127,#0x00
   023F 81 00               405 	.db	#-127,#0x00
   0241 81 00               406 	.db	#-127,#0x00
   0243 81 00               407 	.db	#-127,#0x00
   0245 81 00               408 	.db	#-127,#0x00
   0247 81 00               409 	.db	#-127,#0x00
   0249 81 00               410 	.db	#-127,#0x00
   024B 81 00               411 	.db	#-127,#0x00
   024D 81 00               412 	.db	#-127,#0x00
   024F 81 00               413 	.db	#-127,#0x00
   0251 81 00               414 	.db	#-127,#0x00
   0253 81 00               415 	.db	#-127,#0x00
   0255 81 00               416 	.db	#-127,#0x00
   0257 81 00               417 	.db	#-127,#0x00
   0259 81 00               418 	.db	#-127,#0x00
   025B 81 00               419 	.db	#-127,#0x00
   025D 81 00               420 	.db	#-127,#0x00
   025F 81 00               421 	.db	#-127,#0x00
   0261 81 00               422 	.db	#-127,#0x00
   0263 81 00               423 	.db	#-127,#0x00
   0265 81 00               424 	.db	#-127,#0x00
   0267 81 00               425 	.db	#-127,#0x00
   0269 81 00               426 	.db	#-127,#0x00
   026B 81 00               427 	.db	#-127,#0x00
   026D 81 00               428 	.db	#-127,#0x00
   026F 81 00               429 	.db	#-127,#0x00
   0271 81 00               430 	.db	#-127,#0x00
   0273 81 00               431 	.db	#-127,#0x00
   0275 81 00               432 	.db	#-127,#0x00
   0277 81 00               433 	.db	#-127,#0x00
   0279 81 00               434 	.db	#-127,#0x00
   027B 81 00               435 	.db	#-127,#0x00
   027D 81 00               436 	.db	#-127,#0x00
   027F 81 00               437 	.db	#-127,#0x00
   0281 81 00               438 	.db	#-127,#0x00
   0283 81 00               439 	.db	#-127,#0x00
   0285 81 00               440 	.db	#-127,#0x00
   0287 81 00               441 	.db	#-127,#0x00
   0289 81 00               442 	.db	#-127,#0x00
   028B 81 00               443 	.db	#-127,#0x00
   028D 81 00               444 	.db	#-127,#0x00
   028F 81 00               445 	.db	#-127,#0x00
   0291 81 00               446 	.db	#-127,#0x00
   0293 81 00               447 	.db	#-127,#0x00
   0295 81 00               448 	.db	#-127,#0x00
   0297 C2 00               449 	.db	#-62,#0x00
   0299 00                  450 	.db	0
                            451 ;demo.c:39: uint8_t tf2[12000] = {0};
   029A 21rC0s5E            452 	ld	hl,#_tf2
   029D CDr00s00            453 	call	__initrleblock
   02A0 81 00               454 	.db	#-127,#0x00
   02A2 81 00               455 	.db	#-127,#0x00
   02A4 81 00               456 	.db	#-127,#0x00
   02A6 81 00               457 	.db	#-127,#0x00
   02A8 81 00               458 	.db	#-127,#0x00
   02AA 81 00               459 	.db	#-127,#0x00
   02AC 81 00               460 	.db	#-127,#0x00
   02AE 81 00               461 	.db	#-127,#0x00
   02B0 81 00               462 	.db	#-127,#0x00
   02B2 81 00               463 	.db	#-127,#0x00
   02B4 81 00               464 	.db	#-127,#0x00
   02B6 81 00               465 	.db	#-127,#0x00
   02B8 81 00               466 	.db	#-127,#0x00
   02BA 81 00               467 	.db	#-127,#0x00
   02BC 81 00               468 	.db	#-127,#0x00
   02BE 81 00               469 	.db	#-127,#0x00
   02C0 81 00               470 	.db	#-127,#0x00
   02C2 81 00               471 	.db	#-127,#0x00
   02C4 81 00               472 	.db	#-127,#0x00
   02C6 81 00               473 	.db	#-127,#0x00
   02C8 81 00               474 	.db	#-127,#0x00
   02CA 81 00               475 	.db	#-127,#0x00
   02CC 81 00               476 	.db	#-127,#0x00
   02CE 81 00               477 	.db	#-127,#0x00
   02D0 81 00               478 	.db	#-127,#0x00
   02D2 81 00               479 	.db	#-127,#0x00
   02D4 81 00               480 	.db	#-127,#0x00
   02D6 81 00               481 	.db	#-127,#0x00
   02D8 81 00               482 	.db	#-127,#0x00
   02DA 81 00               483 	.db	#-127,#0x00
   02DC 81 00               484 	.db	#-127,#0x00
   02DE 81 00               485 	.db	#-127,#0x00
   02E0 81 00               486 	.db	#-127,#0x00
   02E2 81 00               487 	.db	#-127,#0x00
   02E4 81 00               488 	.db	#-127,#0x00
   02E6 81 00               489 	.db	#-127,#0x00
   02E8 81 00               490 	.db	#-127,#0x00
   02EA 81 00               491 	.db	#-127,#0x00
   02EC 81 00               492 	.db	#-127,#0x00
   02EE 81 00               493 	.db	#-127,#0x00
   02F0 81 00               494 	.db	#-127,#0x00
   02F2 81 00               495 	.db	#-127,#0x00
   02F4 81 00               496 	.db	#-127,#0x00
   02F6 81 00               497 	.db	#-127,#0x00
   02F8 81 00               498 	.db	#-127,#0x00
   02FA 81 00               499 	.db	#-127,#0x00
   02FC 81 00               500 	.db	#-127,#0x00
   02FE 81 00               501 	.db	#-127,#0x00
   0300 81 00               502 	.db	#-127,#0x00
   0302 81 00               503 	.db	#-127,#0x00
   0304 81 00               504 	.db	#-127,#0x00
   0306 81 00               505 	.db	#-127,#0x00
   0308 81 00               506 	.db	#-127,#0x00
   030A 81 00               507 	.db	#-127,#0x00
   030C 81 00               508 	.db	#-127,#0x00
   030E 81 00               509 	.db	#-127,#0x00
   0310 81 00               510 	.db	#-127,#0x00
   0312 81 00               511 	.db	#-127,#0x00
   0314 81 00               512 	.db	#-127,#0x00
   0316 81 00               513 	.db	#-127,#0x00
   0318 81 00               514 	.db	#-127,#0x00
   031A 81 00               515 	.db	#-127,#0x00
   031C 81 00               516 	.db	#-127,#0x00
   031E 81 00               517 	.db	#-127,#0x00
   0320 81 00               518 	.db	#-127,#0x00
   0322 81 00               519 	.db	#-127,#0x00
   0324 81 00               520 	.db	#-127,#0x00
   0326 81 00               521 	.db	#-127,#0x00
   0328 81 00               522 	.db	#-127,#0x00
   032A 81 00               523 	.db	#-127,#0x00
   032C 81 00               524 	.db	#-127,#0x00
   032E 81 00               525 	.db	#-127,#0x00
   0330 81 00               526 	.db	#-127,#0x00
   0332 81 00               527 	.db	#-127,#0x00
   0334 81 00               528 	.db	#-127,#0x00
   0336 81 00               529 	.db	#-127,#0x00
   0338 81 00               530 	.db	#-127,#0x00
   033A 81 00               531 	.db	#-127,#0x00
   033C 81 00               532 	.db	#-127,#0x00
   033E 81 00               533 	.db	#-127,#0x00
   0340 81 00               534 	.db	#-127,#0x00
   0342 81 00               535 	.db	#-127,#0x00
   0344 81 00               536 	.db	#-127,#0x00
   0346 81 00               537 	.db	#-127,#0x00
   0348 81 00               538 	.db	#-127,#0x00
   034A 81 00               539 	.db	#-127,#0x00
   034C 81 00               540 	.db	#-127,#0x00
   034E 81 00               541 	.db	#-127,#0x00
   0350 81 00               542 	.db	#-127,#0x00
   0352 81 00               543 	.db	#-127,#0x00
   0354 81 00               544 	.db	#-127,#0x00
   0356 81 00               545 	.db	#-127,#0x00
   0358 81 00               546 	.db	#-127,#0x00
   035A 81 00               547 	.db	#-127,#0x00
   035C C2 00               548 	.db	#-62,#0x00
   035E 00                  549 	.db	0
                            550 ;demo.c:48: volatile int vbicount=0;
   035F FD 21rC0s8E         551 	ld	iy,#_vbicount
   0363 FD 36 00 00         552 	ld	0 (iy),#0x00
   0367 FD 21rC0s8E         553 	ld	iy,#_vbicount
   036B FD 36 01 00         554 	ld	1 (iy),#0x00
                            555 ;demo.c:49: volatile int tick=0;
   036F FD 21rC2s8E         556 	ld	iy,#_tick
   0373 FD 36 00 00         557 	ld	0 (iy),#0x00
   0377 FD 21rC2s8E         558 	ld	iy,#_tick
   037B FD 36 01 00         559 	ld	1 (iy),#0x00
                            560 ;demo.c:226: uint8_t yofff = 0;
   037F FD 21rDBs8E         561 	ld	iy,#_yofff
   0383 FD 36 00 00         562 	ld	0 (iy),#0x00
                            563 ;demo.c:227: uint8_t cc = 0;
   0387 FD 21rDCs8E         564 	ld	iy,#_cc
   038B FD 36 00 00         565 	ld	0 (iy),#0x00
                            566 ;demo.c:228: static int flipper = 0;
   038F FD 21rDDs8E         567 	ld	iy,#_flipper
   0393 FD 36 00 00         568 	ld	0 (iy),#0x00
   0397 FD 21rDDs8E         569 	ld	iy,#_flipper
   039B FD 36 01 00         570 	ld	1 (iy),#0x00
                            571 ;demo.c:229: static int ymmmf = 0;
   039F FD 21rDFs8E         572 	ld	iy,#_ymmmf
   03A3 FD 36 00 00         573 	ld	0 (iy),#0x00
   03A7 FD 21rDFs8E         574 	ld	iy,#_ymmmf
   03AB FD 36 01 00         575 	ld	1 (iy),#0x00
                            576 ;demo.c:260: char block_init = 0;
   03AF FD 21rE1s8E         577 	ld	iy,#_block_init
   03B3 FD 36 00 00         578 	ld	0 (iy),#0x00
                            579 ;demo.c:262: int bsx = 0;
   03B7 FD 21rE2s8E         580 	ld	iy,#_bsx
   03BB FD 36 00 00         581 	ld	0 (iy),#0x00
   03BF FD 21rE2s8E         582 	ld	iy,#_bsx
   03C3 FD 36 01 00         583 	ld	1 (iy),#0x00
                            584 ;demo.c:263: int bsy = 0;
   03C7 FD 21rE4s8E         585 	ld	iy,#_bsy
   03CB FD 36 00 00         586 	ld	0 (iy),#0x00
   03CF FD 21rE4s8E         587 	ld	iy,#_bsy
   03D3 FD 36 01 00         588 	ld	1 (iy),#0x00
                            589 ;demo.c:264: int btx = 0;
   03D7 FD 21rE6s8E         590 	ld	iy,#_btx
   03DB FD 36 00 00         591 	ld	0 (iy),#0x00
   03DF FD 21rE6s8E         592 	ld	iy,#_btx
   03E3 FD 36 01 00         593 	ld	1 (iy),#0x00
                            594 ;demo.c:265: int bty = 0;
   03E7 FD 21rE8s8E         595 	ld	iy,#_bty
   03EB FD 36 00 00         596 	ld	0 (iy),#0x00
   03EF FD 21rE8s8E         597 	ld	iy,#_bty
   03F3 FD 36 01 00         598 	ld	1 (iy),#0x00
                            599 ;demo.c:267: int btab[16] = {0};
   03F7 21rEAs8E            600 	ld	hl,#_btab
   03FA CDr00s00            601 	call	__initrleblock
   03FD E0 00               602 	.db	#-32,#0x00
   03FF 00                  603 	.db	0
                            604 ;demo.c:269: int flof = 0;
   0400 FD 21r0As8F         605 	ld	iy,#_flof
   0404 FD 36 00 00         606 	ld	0 (iy),#0x00
   0408 FD 21r0As8F         607 	ld	iy,#_flof
   040C FD 36 01 00         608 	ld	1 (iy),#0x00
                            609 ;demo.c:318: int linenum = 0;
   0410 FD 21r0Cs8F         610 	ld	iy,#_linenum
   0414 FD 36 00 00         611 	ld	0 (iy),#0x00
   0418 FD 21r0Cs8F         612 	ld	iy,#_linenum
   041C FD 36 01 00         613 	ld	1 (iy),#0x00
                            614 ;demo.c:376: uint8_t lx = 0;
   0420 FD 21r0Es8F         615 	ld	iy,#_lx
   0424 FD 36 00 00         616 	ld	0 (iy),#0x00
                            617 ;demo.c:377: uint8_t ly = 0;
   0428 FD 21r0Fs8F         618 	ld	iy,#_ly
   042C FD 36 00 00         619 	ld	0 (iy),#0x00
                            620 ;demo.c:440: int ff = 0;
   0430 FD 21r10s8F         621 	ld	iy,#_ff
   0434 FD 36 00 00         622 	ld	0 (iy),#0x00
   0438 FD 21r10s8F         623 	ld	iy,#_ff
   043C FD 36 01 00         624 	ld	1 (iy),#0x00
                            625 ;demo.c:441: int twinited = 0;
   0440 FD 21r12s8F         626 	ld	iy,#_twinited
   0444 FD 36 00 00         627 	ld	0 (iy),#0x00
   0448 FD 21r12s8F         628 	ld	iy,#_twinited
   044C FD 36 01 00         629 	ld	1 (iy),#0x00
                            630 ;demo.c:491: int bulbflipper = 1;
   0450 FD 21r14s8F         631 	ld	iy,#_bulbflipper
   0454 FD 36 00 01         632 	ld	0 (iy),#0x01
   0458 FD 21r14s8F         633 	ld	iy,#_bulbflipper
   045C FD 36 01 00         634 	ld	1 (iy),#0x00
                            635 ;demo.c:493: int ff1,ff2 = 0;
   0460 FD 21r18s8F         636 	ld	iy,#_ff2
   0464 FD 36 00 00         637 	ld	0 (iy),#0x00
   0468 FD 21r18s8F         638 	ld	iy,#_ff2
   046C FD 36 01 00         639 	ld	1 (iy),#0x00
                            640 ;demo.c:494: int ender = 212;
   0470 FD 21r1As8F         641 	ld	iy,#_ender
   0474 FD 36 00 D4         642 	ld	0 (iy),#0xD4
   0478 FD 21r1As8F         643 	ld	iy,#_ender
   047C FD 36 01 00         644 	ld	1 (iy),#0x00
                            645 ;demo.c:495: int enderdir = -1;
   0480 FD 21r1Cs8F         646 	ld	iy,#_enderdir
   0484 FD 36 00 FF         647 	ld	0 (iy),#0xFF
   0488 FD 21r1Cs8F         648 	ld	iy,#_enderdir
   048C FD 36 01 FF         649 	ld	1 (iy),#0xFF
                            650 ;demo.c:550: static int xo = 0;
   0490 FD 21r1Es8F         651 	ld	iy,#_xo
   0494 FD 36 00 00         652 	ld	0 (iy),#0x00
   0498 FD 21r1Es8F         653 	ld	iy,#_xo
   049C FD 36 01 00         654 	ld	1 (iy),#0x00
                            655 ;demo.c:551: static int yo = 0;
   04A0 FD 21r20s8F         656 	ld	iy,#_yo
   04A4 FD 36 00 00         657 	ld	0 (iy),#0x00
   04A8 FD 21r20s8F         658 	ld	iy,#_yo
   04AC FD 36 01 00         659 	ld	1 (iy),#0x00
                            660 ;demo.c:552: static int po = 0;
   04B0 FD 21r22s8F         661 	ld	iy,#_po
   04B4 FD 36 00 00         662 	ld	0 (iy),#0x00
   04B8 FD 21r22s8F         663 	ld	iy,#_po
   04BC FD 36 01 00         664 	ld	1 (iy),#0x00
                            665 ;demo.c:553: static int fffaaa = 0;
   04C0 FD 21r24s8F         666 	ld	iy,#_fffaaa
   04C4 FD 36 00 00         667 	ld	0 (iy),#0x00
   04C8 FD 21r24s8F         668 	ld	iy,#_fffaaa
   04CC FD 36 01 00         669 	ld	1 (iy),#0x00
                            670 ;demo.c:555: int anim_init = 0;
   04D0 FD 21r26s8F         671 	ld	iy,#_anim_init
   04D4 FD 36 00 00         672 	ld	0 (iy),#0x00
   04D8 FD 21r26s8F         673 	ld	iy,#_anim_init
   04DC FD 36 01 00         674 	ld	1 (iy),#0x00
                            675 ;demo.c:609: uint8_t boxes_init = 0;
   04E0 FD 21r28s8F         676 	ld	iy,#_boxes_init
   04E4 FD 36 00 00         677 	ld	0 (iy),#0x00
                            678 ;demo.c:610: int buffer = 1;
   04E8 FD 21r29s8F         679 	ld	iy,#_buffer
   04EC FD 36 00 01         680 	ld	0 (iy),#0x01
   04F0 FD 21r29s8F         681 	ld	iy,#_buffer
   04F4 FD 36 01 00         682 	ld	1 (iy),#0x00
                            683 ;demo.c:611: int dbly = 0;
   04F8 FD 21r2Bs8F         684 	ld	iy,#_dbly
   04FC FD 36 00 00         685 	ld	0 (iy),#0x00
   0500 FD 21r2Bs8F         686 	ld	iy,#_dbly
   0504 FD 36 01 00         687 	ld	1 (iy),#0x00
                            688 ;demo.c:641: int bx = 256-42;
   0508 FD 21r2Ds8F         689 	ld	iy,#_bx
   050C FD 36 00 D6         690 	ld	0 (iy),#0xD6
   0510 FD 21r2Ds8F         691 	ld	iy,#_bx
   0514 FD 36 01 00         692 	ld	1 (iy),#0x00
                            693 ;demo.c:642: int by = 192-42;
   0518 FD 21r2Fs8F         694 	ld	iy,#_by
   051C FD 36 00 96         695 	ld	0 (iy),#0x96
   0520 FD 21r2Fs8F         696 	ld	iy,#_by
   0524 FD 36 01 00         697 	ld	1 (iy),#0x00
                            698 ;demo.c:643: int bt = 0;
   0528 FD 21r31s8F         699 	ld	iy,#_bt
   052C FD 36 00 00         700 	ld	0 (iy),#0x00
   0530 FD 21r31s8F         701 	ld	iy,#_bt
   0534 FD 36 01 00         702 	ld	1 (iy),#0x00
                            703 ;demo.c:644: int bxx = 0;
   0538 FD 21r33s8F         704 	ld	iy,#_bxx
   053C FD 36 00 00         705 	ld	0 (iy),#0x00
   0540 FD 21r33s8F         706 	ld	iy,#_bxx
   0544 FD 36 01 00         707 	ld	1 (iy),#0x00
                            708 ;demo.c:645: int byy = 0;
   0548 FD 21r35s8F         709 	ld	iy,#_byy
   054C FD 36 00 00         710 	ld	0 (iy),#0x00
   0550 FD 21r35s8F         711 	ld	iy,#_byy
   0554 FD 36 01 00         712 	ld	1 (iy),#0x00
                            713 ;demo.c:646: int bo = 0;
   0558 FD 21r37s8F         714 	ld	iy,#_bo
   055C FD 36 00 00         715 	ld	0 (iy),#0x00
   0560 FD 21r37s8F         716 	ld	iy,#_bo
   0564 FD 36 01 00         717 	ld	1 (iy),#0x00
                            718 ;--------------------------------------------------------
                            719 ; Home
                            720 ;--------------------------------------------------------
                            721 	.area _HOME
                            722 	.area _HOME
                            723 ;--------------------------------------------------------
                            724 ; code
                            725 ;--------------------------------------------------------
                            726 	.area _CODE
                            727 ;demo.c:53: int isNthBitSet (unsigned char c, int n) {
                            728 ;	---------------------------------
                            729 ; Function isNthBitSet
                            730 ; ---------------------------------
   0000                     731 _isNthBitSet_start::
   0000                     732 _isNthBitSet:
   0000 DD E5               733 	push	ix
   0002 DD 21 00 00         734 	ld	ix,#0
   0006 DD 39               735 	add	ix,sp
                            736 ;demo.c:55: return ((c & mask[n]) != 0);
   0008 3ErD3               737 	ld	a,#<_isNthBitSet_mask_1_1
   000A DD 86 05            738 	add	a,5 (ix)
   000D 4F                  739 	ld	c,a
   000E 3Es8E               740 	ld	a,#>_isNthBitSet_mask_1_1
   0010 DD 8E 06            741 	adc	a,6 (ix)
   0013 47                  742 	ld	b,a
   0014 0A                  743 	ld	a,(bc)
   0015 DD A6 04            744 	and	a,4 (ix)
   0018 20 04               745 	jr	NZ,00103$
   001A 3E 01               746 	ld	a,#0x01
   001C 18 01               747 	jr	00104$
   001E                     748 00103$:
   001E AF                  749 	xor	a,a
   001F                     750 00104$:
   001F B7                  751 	or	a,a
   0020 D6 01               752 	sub	a,#0x01
   0022 3E 00               753 	ld	a,#0x00
   0024 17                  754 	rla
   0025 4F                  755 	ld	c,a
   0026 69                  756 	ld	l,c
   0027 26 00               757 	ld	h,#0x00
   0029 DD E1               758 	pop	ix
   002B C9                  759 	ret
   002C                     760 _isNthBitSet_end::
   002C                     761 _sintabx:
   002C 78 00               762 	.dw #0x0078
   002E 7A 00               763 	.dw #0x007A
   0030 7D 00               764 	.dw #0x007D
   0032 80 00               765 	.dw #0x0080
   0034 83 00               766 	.dw #0x0083
   0036 86 00               767 	.dw #0x0086
   0038 89 00               768 	.dw #0x0089
   003A 8C 00               769 	.dw #0x008C
   003C 8F 00               770 	.dw #0x008F
   003E 92 00               771 	.dw #0x0092
   0040 95 00               772 	.dw #0x0095
   0042 98 00               773 	.dw #0x0098
   0044 9A 00               774 	.dw #0x009A
   0046 9D 00               775 	.dw #0x009D
   0048 A0 00               776 	.dw #0x00A0
   004A A3 00               777 	.dw #0x00A3
   004C A5 00               778 	.dw #0x00A5
   004E A8 00               779 	.dw #0x00A8
   0050 AB 00               780 	.dw #0x00AB
   0052 AD 00               781 	.dw #0x00AD
   0054 B0 00               782 	.dw #0x00B0
   0056 B3 00               783 	.dw #0x00B3
   0058 B5 00               784 	.dw #0x00B5
   005A B8 00               785 	.dw #0x00B8
   005C BA 00               786 	.dw #0x00BA
   005E BD 00               787 	.dw #0x00BD
   0060 BF 00               788 	.dw #0x00BF
   0062 C1 00               789 	.dw #0x00C1
   0064 C4 00               790 	.dw #0x00C4
   0066 C6 00               791 	.dw #0x00C6
   0068 C8 00               792 	.dw #0x00C8
   006A CA 00               793 	.dw #0x00CA
   006C CC 00               794 	.dw #0x00CC
   006E CE 00               795 	.dw #0x00CE
   0070 D0 00               796 	.dw #0x00D0
   0072 D2 00               797 	.dw #0x00D2
   0074 D4 00               798 	.dw #0x00D4
   0076 D6 00               799 	.dw #0x00D6
   0078 D8 00               800 	.dw #0x00D8
   007A DA 00               801 	.dw #0x00DA
   007C DB 00               802 	.dw #0x00DB
   007E DD 00               803 	.dw #0x00DD
   0080 DE 00               804 	.dw #0x00DE
   0082 E0 00               805 	.dw #0x00E0
   0084 E1 00               806 	.dw #0x00E1
   0086 E3 00               807 	.dw #0x00E3
   0088 E4 00               808 	.dw #0x00E4
   008A E5 00               809 	.dw #0x00E5
   008C E6 00               810 	.dw #0x00E6
   008E E7 00               811 	.dw #0x00E7
   0090 E8 00               812 	.dw #0x00E8
   0092 E9 00               813 	.dw #0x00E9
   0094 EA 00               814 	.dw #0x00EA
   0096 EB 00               815 	.dw #0x00EB
   0098 EC 00               816 	.dw #0x00EC
   009A ED 00               817 	.dw #0x00ED
   009C ED 00               818 	.dw #0x00ED
   009E EE 00               819 	.dw #0x00EE
   00A0 EE 00               820 	.dw #0x00EE
   00A2 EF 00               821 	.dw #0x00EF
   00A4 EF 00               822 	.dw #0x00EF
   00A6 EF 00               823 	.dw #0x00EF
   00A8 EF 00               824 	.dw #0x00EF
   00AA EF 00               825 	.dw #0x00EF
   00AC F0 00               826 	.dw #0x00F0
   00AE EF 00               827 	.dw #0x00EF
   00B0 EF 00               828 	.dw #0x00EF
   00B2 EF 00               829 	.dw #0x00EF
   00B4 EF 00               830 	.dw #0x00EF
   00B6 EF 00               831 	.dw #0x00EF
   00B8 EE 00               832 	.dw #0x00EE
   00BA EE 00               833 	.dw #0x00EE
   00BC ED 00               834 	.dw #0x00ED
   00BE ED 00               835 	.dw #0x00ED
   00C0 EC 00               836 	.dw #0x00EC
   00C2 EB 00               837 	.dw #0x00EB
   00C4 EA 00               838 	.dw #0x00EA
   00C6 E9 00               839 	.dw #0x00E9
   00C8 E8 00               840 	.dw #0x00E8
   00CA E7 00               841 	.dw #0x00E7
   00CC E6 00               842 	.dw #0x00E6
   00CE E5 00               843 	.dw #0x00E5
   00D0 E4 00               844 	.dw #0x00E4
   00D2 E3 00               845 	.dw #0x00E3
   00D4 E1 00               846 	.dw #0x00E1
   00D6 E0 00               847 	.dw #0x00E0
   00D8 DE 00               848 	.dw #0x00DE
   00DA DD 00               849 	.dw #0x00DD
   00DC DB 00               850 	.dw #0x00DB
   00DE DA 00               851 	.dw #0x00DA
   00E0 D8 00               852 	.dw #0x00D8
   00E2 D6 00               853 	.dw #0x00D6
   00E4 D4 00               854 	.dw #0x00D4
   00E6 D2 00               855 	.dw #0x00D2
   00E8 D0 00               856 	.dw #0x00D0
   00EA CE 00               857 	.dw #0x00CE
   00EC CC 00               858 	.dw #0x00CC
   00EE CA 00               859 	.dw #0x00CA
   00F0 C8 00               860 	.dw #0x00C8
   00F2 C6 00               861 	.dw #0x00C6
   00F4 C4 00               862 	.dw #0x00C4
   00F6 C1 00               863 	.dw #0x00C1
   00F8 BF 00               864 	.dw #0x00BF
   00FA BD 00               865 	.dw #0x00BD
   00FC BA 00               866 	.dw #0x00BA
   00FE B8 00               867 	.dw #0x00B8
   0100 B5 00               868 	.dw #0x00B5
   0102 B3 00               869 	.dw #0x00B3
   0104 B0 00               870 	.dw #0x00B0
   0106 AD 00               871 	.dw #0x00AD
   0108 AB 00               872 	.dw #0x00AB
   010A A8 00               873 	.dw #0x00A8
   010C A5 00               874 	.dw #0x00A5
   010E A3 00               875 	.dw #0x00A3
   0110 A0 00               876 	.dw #0x00A0
   0112 9D 00               877 	.dw #0x009D
   0114 9A 00               878 	.dw #0x009A
   0116 98 00               879 	.dw #0x0098
   0118 95 00               880 	.dw #0x0095
   011A 92 00               881 	.dw #0x0092
   011C 8F 00               882 	.dw #0x008F
   011E 8C 00               883 	.dw #0x008C
   0120 89 00               884 	.dw #0x0089
   0122 86 00               885 	.dw #0x0086
   0124 83 00               886 	.dw #0x0083
   0126 80 00               887 	.dw #0x0080
   0128 7D 00               888 	.dw #0x007D
   012A 7A 00               889 	.dw #0x007A
   012C 78 00               890 	.dw #0x0078
   012E 75 00               891 	.dw #0x0075
   0130 72 00               892 	.dw #0x0072
   0132 6F 00               893 	.dw #0x006F
   0134 6C 00               894 	.dw #0x006C
   0136 69 00               895 	.dw #0x0069
   0138 66 00               896 	.dw #0x0066
   013A 63 00               897 	.dw #0x0063
   013C 60 00               898 	.dw #0x0060
   013E 5D 00               899 	.dw #0x005D
   0140 5A 00               900 	.dw #0x005A
   0142 57 00               901 	.dw #0x0057
   0144 55 00               902 	.dw #0x0055
   0146 52 00               903 	.dw #0x0052
   0148 4F 00               904 	.dw #0x004F
   014A 4C 00               905 	.dw #0x004C
   014C 4A 00               906 	.dw #0x004A
   014E 47 00               907 	.dw #0x0047
   0150 44 00               908 	.dw #0x0044
   0152 42 00               909 	.dw #0x0042
   0154 3F 00               910 	.dw #0x003F
   0156 3C 00               911 	.dw #0x003C
   0158 3A 00               912 	.dw #0x003A
   015A 37 00               913 	.dw #0x0037
   015C 35 00               914 	.dw #0x0035
   015E 32 00               915 	.dw #0x0032
   0160 30 00               916 	.dw #0x0030
   0162 2E 00               917 	.dw #0x002E
   0164 2B 00               918 	.dw #0x002B
   0166 29 00               919 	.dw #0x0029
   0168 27 00               920 	.dw #0x0027
   016A 25 00               921 	.dw #0x0025
   016C 23 00               922 	.dw #0x0023
   016E 21 00               923 	.dw #0x0021
   0170 1F 00               924 	.dw #0x001F
   0172 1D 00               925 	.dw #0x001D
   0174 1B 00               926 	.dw #0x001B
   0176 19 00               927 	.dw #0x0019
   0178 17 00               928 	.dw #0x0017
   017A 15 00               929 	.dw #0x0015
   017C 14 00               930 	.dw #0x0014
   017E 12 00               931 	.dw #0x0012
   0180 11 00               932 	.dw #0x0011
   0182 0F 00               933 	.dw #0x000F
   0184 0E 00               934 	.dw #0x000E
   0186 0C 00               935 	.dw #0x000C
   0188 0B 00               936 	.dw #0x000B
   018A 0A 00               937 	.dw #0x000A
   018C 09 00               938 	.dw #0x0009
   018E 08 00               939 	.dw #0x0008
   0190 07 00               940 	.dw #0x0007
   0192 06 00               941 	.dw #0x0006
   0194 05 00               942 	.dw #0x0005
   0196 04 00               943 	.dw #0x0004
   0198 03 00               944 	.dw #0x0003
   019A 02 00               945 	.dw #0x0002
   019C 02 00               946 	.dw #0x0002
   019E 01 00               947 	.dw #0x0001
   01A0 01 00               948 	.dw #0x0001
   01A2 00 00               949 	.dw #0x0000
   01A4 00 00               950 	.dw #0x0000
   01A6 00 00               951 	.dw #0x0000
   01A8 00 00               952 	.dw #0x0000
   01AA 00 00               953 	.dw #0x0000
   01AC 00 00               954 	.dw #0x0000
   01AE 00 00               955 	.dw #0x0000
   01B0 00 00               956 	.dw #0x0000
   01B2 00 00               957 	.dw #0x0000
   01B4 00 00               958 	.dw #0x0000
   01B6 00 00               959 	.dw #0x0000
   01B8 01 00               960 	.dw #0x0001
   01BA 01 00               961 	.dw #0x0001
   01BC 02 00               962 	.dw #0x0002
   01BE 02 00               963 	.dw #0x0002
   01C0 03 00               964 	.dw #0x0003
   01C2 04 00               965 	.dw #0x0004
   01C4 05 00               966 	.dw #0x0005
   01C6 06 00               967 	.dw #0x0006
   01C8 07 00               968 	.dw #0x0007
   01CA 08 00               969 	.dw #0x0008
   01CC 09 00               970 	.dw #0x0009
   01CE 0A 00               971 	.dw #0x000A
   01D0 0B 00               972 	.dw #0x000B
   01D2 0C 00               973 	.dw #0x000C
   01D4 0E 00               974 	.dw #0x000E
   01D6 0F 00               975 	.dw #0x000F
   01D8 11 00               976 	.dw #0x0011
   01DA 12 00               977 	.dw #0x0012
   01DC 14 00               978 	.dw #0x0014
   01DE 15 00               979 	.dw #0x0015
   01E0 17 00               980 	.dw #0x0017
   01E2 19 00               981 	.dw #0x0019
   01E4 1B 00               982 	.dw #0x001B
   01E6 1D 00               983 	.dw #0x001D
   01E8 1F 00               984 	.dw #0x001F
   01EA 21 00               985 	.dw #0x0021
   01EC 23 00               986 	.dw #0x0023
   01EE 25 00               987 	.dw #0x0025
   01F0 27 00               988 	.dw #0x0027
   01F2 29 00               989 	.dw #0x0029
   01F4 2B 00               990 	.dw #0x002B
   01F6 2E 00               991 	.dw #0x002E
   01F8 30 00               992 	.dw #0x0030
   01FA 32 00               993 	.dw #0x0032
   01FC 35 00               994 	.dw #0x0035
   01FE 37 00               995 	.dw #0x0037
   0200 3A 00               996 	.dw #0x003A
   0202 3C 00               997 	.dw #0x003C
   0204 3F 00               998 	.dw #0x003F
   0206 42 00               999 	.dw #0x0042
   0208 44 00              1000 	.dw #0x0044
   020A 47 00              1001 	.dw #0x0047
   020C 4A 00              1002 	.dw #0x004A
   020E 4C 00              1003 	.dw #0x004C
   0210 4F 00              1004 	.dw #0x004F
   0212 52 00              1005 	.dw #0x0052
   0214 55 00              1006 	.dw #0x0055
   0216 57 00              1007 	.dw #0x0057
   0218 5A 00              1008 	.dw #0x005A
   021A 5D 00              1009 	.dw #0x005D
   021C 60 00              1010 	.dw #0x0060
   021E 63 00              1011 	.dw #0x0063
   0220 66 00              1012 	.dw #0x0066
   0222 69 00              1013 	.dw #0x0069
   0224 6C 00              1014 	.dw #0x006C
   0226 6F 00              1015 	.dw #0x006F
   0228 72 00              1016 	.dw #0x0072
   022A 75 00              1017 	.dw #0x0075
                           1018 ;demo.c:62: void my_isr(void) interrupt
                           1019 ;	---------------------------------
                           1020 ; Function my_isr
                           1021 ; ---------------------------------
   022C                    1022 _my_isr_start::
   022C                    1023 _my_isr:
   022C F5                 1024 	push	af
   022D C5                 1025 	push	bc
   022E D5                 1026 	push	de
   022F E5                 1027 	push	hl
   0230 FD E5              1028 	push	iy
                           1029 ;demo.c:64: DI;
   0232 F3                 1030 		di 
                           1031 ;demo.c:66: READ_VDP_STATUS;
   0233 DB 99              1032 		in a,(#0x99) 
                           1033 ;demo.c:68: PLY_Play();
   0235 CDr00s00           1034 	call	_PLY_Play
                           1035 ;demo.c:69: PLY_SendRegisters();
   0238 CDr00s00           1036 	call	_PLY_SendRegisters
                           1037 ;demo.c:71: vbicount+=1;
   023B FD 21rC0s8E        1038 	ld	iy,#_vbicount
   023F FD 34 00           1039 	inc	0 (iy)
   0242 20 07              1040 	jr	NZ,00103$
   0244 FD 21rC0s8E        1041 	ld	iy,#_vbicount
   0248 FD 34 01           1042 	inc	1 (iy)
   024B                    1043 00103$:
                           1044 ;demo.c:72: tick++;
   024B FD 21rC2s8E        1045 	ld	iy,#_tick
   024F FD 34 00           1046 	inc	0 (iy)
   0252 20 07              1047 	jr	NZ,00104$
   0254 FD 21rC2s8E        1048 	ld	iy,#_tick
   0258 FD 34 01           1049 	inc	1 (iy)
   025B                    1050 00104$:
                           1051 ;demo.c:74: EI;
   025B FB                 1052 		ei 
   025C FD E1              1053 	pop	iy
   025E E1                 1054 	pop	hl
   025F D1                 1055 	pop	de
   0260 C1                 1056 	pop	bc
   0261 F1                 1057 	pop	af
   0262 ED 4D              1058 	reti
   0264                    1059 _my_isr_end::
                           1060 ;demo.c:77: void color_isr(void) interrupt
                           1061 ;	---------------------------------
                           1062 ; Function color_isr
                           1063 ; ---------------------------------
   0264                    1064 _color_isr_start::
   0264                    1065 _color_isr:
   0264 F5                 1066 	push	af
   0265 C5                 1067 	push	bc
   0266 D5                 1068 	push	de
   0267 E5                 1069 	push	hl
   0268 FD E5              1070 	push	iy
                           1071 ;demo.c:79: DI;
   026A F3                 1072 		di 
                           1073 ;demo.c:81: if(isNthBitSet(vdp2_status(1),0)) {
   026B 3E 01              1074 	ld	a,#0x01
   026D F5                 1075 	push	af
   026E 33                 1076 	inc	sp
   026F CDr00s00           1077 	call	_vdp2_status
   0272 33                 1078 	inc	sp
   0273 4D                 1079 	ld	c,l
   0274 21 00 00           1080 	ld	hl,#0x0000
   0277 E5                 1081 	push	hl
   0278 79                 1082 	ld	a,c
   0279 F5                 1083 	push	af
   027A 33                 1084 	inc	sp
   027B CDr00s00           1085 	call	_isNthBitSet
   027E F1                 1086 	pop	af
   027F 33                 1087 	inc	sp
   0280 44                 1088 	ld	b,h
   0281 4D                 1089 	ld	c,l
   0282 79                 1090 	ld	a,c
   0283 B0                 1091 	or	a,b
   0284 28 19              1092 	jr	Z,00102$
                           1093 ;demo.c:82: vdp_register(VDP_VOFFSET,sintab[vbicount & 255]);
   0286 21rC0s8E           1094 	ld	hl,#_vbicount + 0
   0289 4E                 1095 	ld	c,(hl)
   028A 06 00              1096 	ld	b,#0x00
   028C 21r00s00           1097 	ld	hl,#_sintab
   028F 09                 1098 	add	hl,bc
   0290 7E                 1099 	ld	a,(hl)
   0291 F5                 1100 	push	af
   0292 33                 1101 	inc	sp
   0293 3E 17              1102 	ld	a,#0x17
   0295 F5                 1103 	push	af
   0296 33                 1104 	inc	sp
   0297 CDr00s00           1105 	call	_vdp_register
   029A F1                 1106 	pop	af
                           1107 ;demo.c:83: READ_VDP_STATUS;
   029B DB 99              1108 		in a,(#0x99) 
   029D 18 18              1109 	jr	00103$
   029F                    1110 00102$:
                           1111 ;demo.c:86: READ_VDP_STATUS;
   029F DB 99              1112 		in a,(#0x99) 
                           1113 ;demo.c:87: vbicount++;
   02A1 FD 21rC0s8E        1114 	ld	iy,#_vbicount
   02A5 FD 34 00           1115 	inc	0 (iy)
   02A8 20 07              1116 	jr	NZ,00107$
   02AA FD 21rC0s8E        1117 	ld	iy,#_vbicount
   02AE FD 34 01           1118 	inc	1 (iy)
   02B1                    1119 00107$:
                           1120 ;demo.c:90: PLY_Play();
   02B1 CDr00s00           1121 	call	_PLY_Play
                           1122 ;demo.c:91: PLY_SendRegisters();
   02B4 CDr00s00           1123 	call	_PLY_SendRegisters
   02B7                    1124 00103$:
                           1125 ;demo.c:94: EI;
   02B7 FB                 1126 		ei 
   02B8 FD E1              1127 	pop	iy
   02BA E1                 1128 	pop	hl
   02BB D1                 1129 	pop	de
   02BC C1                 1130 	pop	bc
   02BD F1                 1131 	pop	af
   02BE ED 4D              1132 	reti
   02C0                    1133 _color_isr_end::
                           1134 ;demo.c:101: uint8_t ge5_load(char *file_name, uint8_t vramh, uint16_t vraml) {
                           1135 ;	---------------------------------
                           1136 ; Function ge5_load
                           1137 ; ---------------------------------
   02C0                    1138 _ge5_load_start::
   02C0                    1139 _ge5_load:
   02C0 DD E5              1140 	push	ix
   02C2 DD 21 00 00        1141 	ld	ix,#0
   02C6 DD 39              1142 	add	ix,sp
   02C8 21 D2 FF           1143 	ld	hl,#-46
   02CB 39                 1144 	add	hl,sp
   02CC F9                 1145 	ld	sp,hl
                           1146 ;demo.c:105: memset((uint8_t *) &f, 0, sizeof(fcb));
   02CD 21 00 00           1147 	ld	hl,#0x0000
   02D0 39                 1148 	add	hl,sp
   02D1 4D                 1149 	ld	c,l
   02D2 44                 1150 	ld	b,h
   02D3 21 2E 00           1151 	ld	hl,#0x002E
   02D6 E5                 1152 	push	hl
   02D7 3E 00              1153 	ld	a,#0x00
   02D9 F5                 1154 	push	af
   02DA 33                 1155 	inc	sp
   02DB C5                 1156 	push	bc
   02DC CDr00s00           1157 	call	_memset
   02DF F1                 1158 	pop	af
   02E0 F1                 1159 	pop	af
   02E1 33                 1160 	inc	sp
                           1161 ;demo.c:107: f.record_size = 128;
   02E2 21 00 00           1162 	ld	hl,#0x0000
   02E5 39                 1163 	add	hl,sp
   02E6 4D                 1164 	ld	c,l
   02E7 44                 1165 	ld	b,h
   02E8 21 0F 00           1166 	ld	hl,#0x000F
   02EB 09                 1167 	add	hl,bc
   02EC EB                 1168 	ex	de,hl
   02ED 3E 80              1169 	ld	a,#0x80
   02EF 12                 1170 	ld	(de),a
                           1171 ;demo.c:108: f.drive = 0;
   02F0 3E 00              1172 	ld	a,#0x00
   02F2 02                 1173 	ld	(bc),a
                           1174 ;demo.c:110: memcpy(f.name, file_name, 11);
   02F3 DD 5E 04           1175 	ld	e,4 (ix)
   02F6 DD 56 05           1176 	ld	d,5 (ix)
   02F9 03                 1177 	inc	bc
   02FA 21 0B 00           1178 	ld	hl,#0x000B
   02FD E5                 1179 	push	hl
   02FE D5                 1180 	push	de
   02FF C5                 1181 	push	bc
   0300 CDr00s00           1182 	call	_memcpy
   0303 F1                 1183 	pop	af
   0304 F1                 1184 	pop	af
   0305 F1                 1185 	pop	af
                           1186 ;demo.c:112: if (open(&f) != 0) return 0;
   0306 21 00 00           1187 	ld	hl,#0x0000
   0309 39                 1188 	add	hl,sp
   030A E5                 1189 	push	hl
   030B CDr00s00           1190 	call	_open
   030E F1                 1191 	pop	af
   030F AF                 1192 	xor	a,a
   0310 B5                 1193 	or	a,l
   0311 28 05              1194 	jr	Z,00102$
   0313 2E 00              1195 	ld	l,#0x00
   0315 C3r8Cs03           1196 	jp	00114$
   0318                    1197 00102$:
                           1198 ;demo.c:113: vdp_set_write_address(vramh, vraml);
   0318 DD 6E 07           1199 	ld	l,7 (ix)
   031B DD 66 08           1200 	ld	h,8 (ix)
   031E E5                 1201 	push	hl
   031F DD 7E 06           1202 	ld	a,6 (ix)
   0322 F5                 1203 	push	af
   0323 33                 1204 	inc	sp
   0324 CDr00s00           1205 	call	_vdp_set_write_address
   0327 F1                 1206 	pop	af
   0328 33                 1207 	inc	sp
                           1208 ;demo.c:115: for (i = 0; i < 213; i++) {
   0329 0E 00              1209 	ld	c,#0x00
   032B                    1210 00110$:
   032B 79                 1211 	ld	a,c
   032C D6 D5              1212 	sub	a,#0xD5
   032E D2r81s03           1213 	jp	NC,00113$
                           1214 ;demo.c:116: if (block_set_data_ptr(scratch) != 0) return 0;
   0331 C5                 1215 	push	bc
   0332 21rA0s8D           1216 	ld	hl,#_scratch
   0335 E5                 1217 	push	hl
   0336 CDr00s00           1218 	call	_block_set_data_ptr
   0339 F1                 1219 	pop	af
   033A 7D                 1220 	ld	a,l
   033B C1                 1221 	pop	bc
   033C 47                 1222 	ld	b,a
   033D B7                 1223 	or	a,a
   033E 28 05              1224 	jr	Z,00104$
   0340 2E 00              1225 	ld	l,#0x00
   0342 C3r8Cs03           1226 	jp	00114$
   0345                    1227 00104$:
                           1228 ;demo.c:117: if (block_read(&f) != 0) return 0;
   0345 21 00 00           1229 	ld	hl,#0x0000
   0348 39                 1230 	add	hl,sp
   0349 C5                 1231 	push	bc
   034A E5                 1232 	push	hl
   034B CDr00s00           1233 	call	_block_read
   034E F1                 1234 	pop	af
   034F 7D                 1235 	ld	a,l
   0350 C1                 1236 	pop	bc
   0351 47                 1237 	ld	b,a
   0352 B7                 1238 	or	a,a
   0353 28 04              1239 	jr	Z,00106$
   0355 2E 00              1240 	ld	l,#0x00
   0357 18 33              1241 	jr	00114$
   0359                    1242 00106$:
                           1243 ;demo.c:119: if (i == 0) vdp_load_screen(scratch + 7, 121);   // to skip GE5 header
   0359 AF                 1244 	xor	a,a
   035A B1                 1245 	or	a,c
   035B 20 11              1246 	jr	NZ,00108$
   035D 11rA7s8D           1247 	ld	de,#_scratch + 7
   0360 C5                 1248 	push	bc
   0361 3E 79              1249 	ld	a,#0x79
   0363 F5                 1250 	push	af
   0364 33                 1251 	inc	sp
   0365 D5                 1252 	push	de
   0366 CDr00s00           1253 	call	_vdp_load_screen
   0369 F1                 1254 	pop	af
   036A 33                 1255 	inc	sp
   036B C1                 1256 	pop	bc
   036C 18 0F              1257 	jr	00112$
   036E                    1258 00108$:
                           1259 ;demo.c:120: else vdp_load_screen(scratch, 128);
   036E C5                 1260 	push	bc
   036F 3E 80              1261 	ld	a,#0x80
   0371 F5                 1262 	push	af
   0372 33                 1263 	inc	sp
   0373 21rA0s8D           1264 	ld	hl,#_scratch
   0376 E5                 1265 	push	hl
   0377 CDr00s00           1266 	call	_vdp_load_screen
   037A F1                 1267 	pop	af
   037B 33                 1268 	inc	sp
   037C C1                 1269 	pop	bc
   037D                    1270 00112$:
                           1271 ;demo.c:115: for (i = 0; i < 213; i++) {
   037D 0C                 1272 	inc	c
   037E C3r2Bs03           1273 	jp	00110$
   0381                    1274 00113$:
                           1275 ;demo.c:123: close(&f);
   0381 21 00 00           1276 	ld	hl,#0x0000
   0384 39                 1277 	add	hl,sp
   0385 E5                 1278 	push	hl
   0386 CDr00s00           1279 	call	_close
   0389 F1                 1280 	pop	af
                           1281 ;demo.c:125: return 1;
   038A 2E 01              1282 	ld	l,#0x01
   038C                    1283 00114$:
   038C DD F9              1284 	ld	sp,ix
   038E DD E1              1285 	pop	ix
   0390 C9                 1286 	ret
   0391                    1287 _ge5_load_end::
                           1288 ;demo.c:128: void scratch_clear() {
                           1289 ;	---------------------------------
                           1290 ; Function scratch_clear
                           1291 ; ---------------------------------
   0391                    1292 _scratch_clear_start::
   0391                    1293 _scratch_clear:
                           1294 ;demo.c:129: memset((uint8_t *) &scratch, 0, 128);
   0391 21 80 00           1295 	ld	hl,#0x0080
   0394 E5                 1296 	push	hl
   0395 3E 00              1297 	ld	a,#0x00
   0397 F5                 1298 	push	af
   0398 33                 1299 	inc	sp
   0399 21rA0s8D           1300 	ld	hl,#_scratch
   039C E5                 1301 	push	hl
   039D CDr00s00           1302 	call	_memset
   03A0 F1                 1303 	pop	af
   03A1 F1                 1304 	pop	af
   03A2 33                 1305 	inc	sp
   03A3 C9                 1306 	ret
   03A4                    1307 _scratch_clear_end::
                           1308 ;demo.c:132: uint8_t pal_load(char *file_name, uint8_t ss) {
                           1309 ;	---------------------------------
                           1310 ; Function pal_load
                           1311 ; ---------------------------------
   03A4                    1312 _pal_load_start::
   03A4                    1313 _pal_load:
   03A4 DD E5              1314 	push	ix
   03A6 DD 21 00 00        1315 	ld	ix,#0
   03AA DD 39              1316 	add	ix,sp
   03AC 21 D2 FF           1317 	ld	hl,#-46
   03AF 39                 1318 	add	hl,sp
   03B0 F9                 1319 	ld	sp,hl
                           1320 ;demo.c:135: memset((uint8_t *) &f, 0, sizeof(fcb));
   03B1 21 00 00           1321 	ld	hl,#0x0000
   03B4 39                 1322 	add	hl,sp
   03B5 4D                 1323 	ld	c,l
   03B6 44                 1324 	ld	b,h
   03B7 21 2E 00           1325 	ld	hl,#0x002E
   03BA E5                 1326 	push	hl
   03BB 3E 00              1327 	ld	a,#0x00
   03BD F5                 1328 	push	af
   03BE 33                 1329 	inc	sp
   03BF C5                 1330 	push	bc
   03C0 CDr00s00           1331 	call	_memset
   03C3 F1                 1332 	pop	af
   03C4 F1                 1333 	pop	af
   03C5 33                 1334 	inc	sp
                           1335 ;demo.c:136: scratch_clear();
   03C6 CDr91s03           1336 	call	_scratch_clear
                           1337 ;demo.c:138: f.record_size = ss;
   03C9 21 00 00           1338 	ld	hl,#0x0000
   03CC 39                 1339 	add	hl,sp
   03CD 4D                 1340 	ld	c,l
   03CE 44                 1341 	ld	b,h
   03CF 21 0F 00           1342 	ld	hl,#0x000F
   03D2 09                 1343 	add	hl,bc
   03D3 EB                 1344 	ex	de,hl
   03D4 DD 7E 06           1345 	ld	a,6 (ix)
   03D7 12                 1346 	ld	(de),a
                           1347 ;demo.c:139: f.drive = 0;
   03D8 3E 00              1348 	ld	a,#0x00
   03DA 02                 1349 	ld	(bc),a
                           1350 ;demo.c:141: memcpy(f.name, file_name, 11);
   03DB DD 5E 04           1351 	ld	e,4 (ix)
   03DE DD 56 05           1352 	ld	d,5 (ix)
   03E1 03                 1353 	inc	bc
   03E2 21 0B 00           1354 	ld	hl,#0x000B
   03E5 E5                 1355 	push	hl
   03E6 D5                 1356 	push	de
   03E7 C5                 1357 	push	bc
   03E8 CDr00s00           1358 	call	_memcpy
   03EB F1                 1359 	pop	af
   03EC F1                 1360 	pop	af
   03ED F1                 1361 	pop	af
                           1362 ;demo.c:143: if (open(&f) != 0) return 0;
   03EE 21 00 00           1363 	ld	hl,#0x0000
   03F1 39                 1364 	add	hl,sp
   03F2 E5                 1365 	push	hl
   03F3 CDr00s00           1366 	call	_open
   03F6 F1                 1367 	pop	af
   03F7 AF                 1368 	xor	a,a
   03F8 B5                 1369 	or	a,l
   03F9 28 04              1370 	jr	Z,00102$
   03FB 2E 00              1371 	ld	l,#0x00
   03FD 18 40              1372 	jr	00107$
   03FF                    1373 00102$:
                           1374 ;demo.c:144: if (block_set_data_ptr(scratch) != 0) return 0;
   03FF 21rA0s8D           1375 	ld	hl,#_scratch
   0402 E5                 1376 	push	hl
   0403 CDr00s00           1377 	call	_block_set_data_ptr
   0406 F1                 1378 	pop	af
   0407 AF                 1379 	xor	a,a
   0408 B5                 1380 	or	a,l
   0409 28 04              1381 	jr	Z,00104$
   040B 2E 00              1382 	ld	l,#0x00
   040D 18 30              1383 	jr	00107$
   040F                    1384 00104$:
                           1385 ;demo.c:145: if (block_read(&f) != 0) return 0;
   040F 21 00 00           1386 	ld	hl,#0x0000
   0412 39                 1387 	add	hl,sp
   0413 E5                 1388 	push	hl
   0414 CDr00s00           1389 	call	_block_read
   0417 F1                 1390 	pop	af
   0418 AF                 1391 	xor	a,a
   0419 B5                 1392 	or	a,l
   041A 28 04              1393 	jr	Z,00106$
   041C 2E 00              1394 	ld	l,#0x00
   041E 18 1F              1395 	jr	00107$
   0420                    1396 00106$:
                           1397 ;demo.c:147: memcpy(cur_palette, scratch+7, ss);
   0420 DD 4E 06           1398 	ld	c,6 (ix)
   0423 06 00              1399 	ld	b,#0x00
   0425 11rA7s8D           1400 	ld	de,#_scratch + 7
   0428 C5                 1401 	push	bc
   0429 D5                 1402 	push	de
   042A 21r20s8E           1403 	ld	hl,#_cur_palette
   042D E5                 1404 	push	hl
   042E CDr00s00           1405 	call	_memcpy
   0431 F1                 1406 	pop	af
   0432 F1                 1407 	pop	af
   0433 F1                 1408 	pop	af
                           1409 ;demo.c:149: close(&f);
   0434 21 00 00           1410 	ld	hl,#0x0000
   0437 39                 1411 	add	hl,sp
   0438 E5                 1412 	push	hl
   0439 CDr00s00           1413 	call	_close
   043C F1                 1414 	pop	af
                           1415 ;demo.c:150: return 1;
   043D 2E 01              1416 	ld	l,#0x01
   043F                    1417 00107$:
   043F DD F9              1418 	ld	sp,ix
   0441 DD E1              1419 	pop	ix
   0443 C9                 1420 	ret
   0444                    1421 _pal_load_end::
                           1422 ;demo.c:154: void pause() {
                           1423 ;	---------------------------------
                           1424 ; Function pause
                           1425 ; ---------------------------------
   0444                    1426 _pause_start::
   0444                    1427 _pause:
                           1428 ;demo.c:155: uint8_t i,j,k = 0;
                           1429 ;demo.c:156: for (i = 0; i < 255; i++) {	
   0444 01 00 00           1430 	ld	bc,#0x0000
   0447                    1431 00104$:
   0447 78                 1432 	ld	a,b
   0448 D6 FF              1433 	sub	a,#0xFF
   044A D0                 1434 	ret	NC
                           1435 ;demo.c:157: for (j = 0; j < 255; j++) {
   044B 59                 1436 	ld	e,c
   044C 16 FF              1437 	ld	d,#0xFF
   044E                    1438 00103$:
                           1439 ;demo.c:158: k++;
   044E 1C                 1440 	inc	e
   044F 15                 1441 	dec	d
                           1442 ;demo.c:157: for (j = 0; j < 255; j++) {
   0450 AF                 1443 	xor	a,a
   0451 B2                 1444 	or	a,d
   0452 20 FA              1445 	jr	NZ,00103$
                           1446 ;demo.c:156: for (i = 0; i < 255; i++) {	
   0454 4B                 1447 	ld	c,e
   0455 04                 1448 	inc	b
   0456 18 EF              1449 	jr	00104$
   0458                    1450 _pause_end::
                           1451 ;demo.c:164: uint8_t raw_load(char *file_name, int size, char* buffer) {
                           1452 ;	---------------------------------
                           1453 ; Function raw_load
                           1454 ; ---------------------------------
   0458                    1455 _raw_load_start::
   0458                    1456 _raw_load:
   0458 DD E5              1457 	push	ix
   045A DD 21 00 00        1458 	ld	ix,#0
   045E DD 39              1459 	add	ix,sp
   0460 21 D2 FF           1460 	ld	hl,#-46
   0463 39                 1461 	add	hl,sp
   0464 F9                 1462 	ld	sp,hl
                           1463 ;demo.c:169: memset((uint8_t *) &f, 0, sizeof(fcb));
   0465 21 00 00           1464 	ld	hl,#0x0000
   0468 39                 1465 	add	hl,sp
   0469 4D                 1466 	ld	c,l
   046A 44                 1467 	ld	b,h
   046B 21 2E 00           1468 	ld	hl,#0x002E
   046E E5                 1469 	push	hl
   046F 3E 00              1470 	ld	a,#0x00
   0471 F5                 1471 	push	af
   0472 33                 1472 	inc	sp
   0473 C5                 1473 	push	bc
   0474 CDr00s00           1474 	call	_memset
   0477 F1                 1475 	pop	af
   0478 F1                 1476 	pop	af
   0479 33                 1477 	inc	sp
                           1478 ;demo.c:170: scratch_clear();
   047A CDr91s03           1479 	call	_scratch_clear
                           1480 ;demo.c:172: f.record_size = 128;
   047D 21 00 00           1481 	ld	hl,#0x0000
   0480 39                 1482 	add	hl,sp
   0481 4D                 1483 	ld	c,l
   0482 44                 1484 	ld	b,h
   0483 21 0F 00           1485 	ld	hl,#0x000F
   0486 09                 1486 	add	hl,bc
   0487 EB                 1487 	ex	de,hl
   0488 3E 80              1488 	ld	a,#0x80
   048A 12                 1489 	ld	(de),a
                           1490 ;demo.c:173: f.drive = 0;
   048B 3E 00              1491 	ld	a,#0x00
   048D 02                 1492 	ld	(bc),a
                           1493 ;demo.c:175: memcpy(f.name, file_name, 11);
   048E DD 5E 04           1494 	ld	e,4 (ix)
   0491 DD 56 05           1495 	ld	d,5 (ix)
   0494 03                 1496 	inc	bc
   0495 21 0B 00           1497 	ld	hl,#0x000B
   0498 E5                 1498 	push	hl
   0499 D5                 1499 	push	de
   049A C5                 1500 	push	bc
   049B CDr00s00           1501 	call	_memcpy
   049E F1                 1502 	pop	af
   049F F1                 1503 	pop	af
   04A0 F1                 1504 	pop	af
                           1505 ;demo.c:177: if (open(&f) != 0) return 0;
   04A1 21 00 00           1506 	ld	hl,#0x0000
   04A4 39                 1507 	add	hl,sp
   04A5 E5                 1508 	push	hl
   04A6 CDr00s00           1509 	call	_open
   04A9 F1                 1510 	pop	af
   04AA AF                 1511 	xor	a,a
   04AB B5                 1512 	or	a,l
   04AC 28 05              1513 	jr	Z,00116$
   04AE 2E 00              1514 	ld	l,#0x00
   04B0 C3r17s05           1515 	jp	00110$
                           1516 ;demo.c:179: while(total < size) {
   04B3                    1517 00116$:
   04B3 01 00 00           1518 	ld	bc,#0x0000
   04B6                    1519 00107$:
   04B6 79                 1520 	ld	a,c
   04B7 DD 96 06           1521 	sub	a,6 (ix)
   04BA 78                 1522 	ld	a,b
   04BB DD 9E 07           1523 	sbc	a,7 (ix)
   04BE F2r0Cs05           1524 	jp	P,00109$
                           1525 ;demo.c:180: if (block_set_data_ptr(scratch) != 0) return 0;
   04C1 C5                 1526 	push	bc
   04C2 21rA0s8D           1527 	ld	hl,#_scratch
   04C5 E5                 1528 	push	hl
   04C6 CDr00s00           1529 	call	_block_set_data_ptr
   04C9 F1                 1530 	pop	af
   04CA 5D                 1531 	ld	e,l
   04CB C1                 1532 	pop	bc
   04CC AF                 1533 	xor	a,a
   04CD B3                 1534 	or	a,e
   04CE 28 04              1535 	jr	Z,00104$
   04D0 2E 00              1536 	ld	l,#0x00
   04D2 18 43              1537 	jr	00110$
   04D4                    1538 00104$:
                           1539 ;demo.c:181: if (block_read(&f) != 0) return 0;
   04D4 21 00 00           1540 	ld	hl,#0x0000
   04D7 39                 1541 	add	hl,sp
   04D8 C5                 1542 	push	bc
   04D9 E5                 1543 	push	hl
   04DA CDr00s00           1544 	call	_block_read
   04DD F1                 1545 	pop	af
   04DE 5D                 1546 	ld	e,l
   04DF C1                 1547 	pop	bc
   04E0 AF                 1548 	xor	a,a
   04E1 B3                 1549 	or	a,e
   04E2 28 04              1550 	jr	Z,00106$
   04E4 2E 00              1551 	ld	l,#0x00
   04E6 18 2F              1552 	jr	00110$
   04E8                    1553 00106$:
                           1554 ;demo.c:183: memcpy(buffer+total,scratch,incr);
   04E8 DD 7E 08           1555 	ld	a,8 (ix)
   04EB 81                 1556 	add	a,c
   04EC 5F                 1557 	ld	e,a
   04ED DD 7E 09           1558 	ld	a,9 (ix)
   04F0 88                 1559 	adc	a,b
   04F1 57                 1560 	ld	d,a
   04F2 C5                 1561 	push	bc
   04F3 21 80 00           1562 	ld	hl,#0x0080
   04F6 E5                 1563 	push	hl
   04F7 21rA0s8D           1564 	ld	hl,#_scratch
   04FA E5                 1565 	push	hl
   04FB D5                 1566 	push	de
   04FC CDr00s00           1567 	call	_memcpy
   04FF F1                 1568 	pop	af
   0500 F1                 1569 	pop	af
   0501 F1                 1570 	pop	af
   0502 C1                 1571 	pop	bc
                           1572 ;demo.c:185: total+=incr;
   0503 21 80 00           1573 	ld	hl,#0x0080
   0506 09                 1574 	add	hl,bc
   0507 4D                 1575 	ld	c,l
   0508 44                 1576 	ld	b,h
   0509 C3rB6s04           1577 	jp	00107$
   050C                    1578 00109$:
                           1579 ;demo.c:188: close(&f);
   050C 21 00 00           1580 	ld	hl,#0x0000
   050F 39                 1581 	add	hl,sp
   0510 E5                 1582 	push	hl
   0511 CDr00s00           1583 	call	_close
   0514 F1                 1584 	pop	af
                           1585 ;demo.c:190: return 1;
   0515 2E 01              1586 	ld	l,#0x01
   0517                    1587 00110$:
   0517 DD F9              1588 	ld	sp,ix
   0519 DD E1              1589 	pop	ix
   051B C9                 1590 	ret
   051C                    1591 _raw_load_end::
                           1592 ;demo.c:193: void pck_load(char *file_name, int size, uint16_t address, int vram_offset) {
                           1593 ;	---------------------------------
                           1594 ; Function pck_load
                           1595 ; ---------------------------------
   051C                    1596 _pck_load_start::
   051C                    1597 _pck_load:
   051C DD E5              1598 	push	ix
   051E DD 21 00 00        1599 	ld	ix,#0
   0522 DD 39              1600 	add	ix,sp
                           1601 ;demo.c:194: memset((uint8_t *) &packbuffer, 0, size);
   0524 DD 4E 06           1602 	ld	c,6 (ix)
   0527 DD 46 07           1603 	ld	b,7 (ix)
   052A C5                 1604 	push	bc
   052B C5                 1605 	push	bc
   052C 3E 00              1606 	ld	a,#0x00
   052E F5                 1607 	push	af
   052F 33                 1608 	inc	sp
   0530 21r00s01           1609 	ld	hl,#_packbuffer
   0533 E5                 1610 	push	hl
   0534 CDr00s00           1611 	call	_memset
   0537 F1                 1612 	pop	af
   0538 F1                 1613 	pop	af
   0539 33                 1614 	inc	sp
   053A C1                 1615 	pop	bc
                           1616 ;demo.c:195: raw_load(file_name, size, packbuffer);
   053B 21r00s01           1617 	ld	hl,#_packbuffer
   053E E5                 1618 	push	hl
   053F C5                 1619 	push	bc
   0540 DD 6E 04           1620 	ld	l,4 (ix)
   0543 DD 66 05           1621 	ld	h,5 (ix)
   0546 E5                 1622 	push	hl
   0547 CDr58s04           1623 	call	_raw_load
   054A F1                 1624 	pop	af
   054B F1                 1625 	pop	af
   054C F1                 1626 	pop	af
                           1627 ;demo.c:196: bitbuster(packbuffer,address,vram_offset);
   054D DD 7E 0A           1628 	ld	a,10 (ix)
   0550 F5                 1629 	push	af
   0551 33                 1630 	inc	sp
   0552 DD 6E 08           1631 	ld	l,8 (ix)
   0555 DD 66 09           1632 	ld	h,9 (ix)
   0558 E5                 1633 	push	hl
   0559 21r00s01           1634 	ld	hl,#_packbuffer
   055C E5                 1635 	push	hl
   055D CDr00s00           1636 	call	_bitbuster
   0560 F1                 1637 	pop	af
   0561 F1                 1638 	pop	af
   0562 33                 1639 	inc	sp
   0563 DD E1              1640 	pop	ix
   0565 C9                 1641 	ret
   0566                    1642 _pck_load_end::
                           1643 ;demo.c:199: void fadein() {
                           1644 ;	---------------------------------
                           1645 ; Function fadein
                           1646 ; ---------------------------------
   0566                    1647 _fadein_start::
   0566                    1648 _fadein:
   0566 DD E5              1649 	push	ix
   0568 DD 21 00 00        1650 	ld	ix,#0
   056C DD 39              1651 	add	ix,sp
   056E F5                 1652 	push	af
                           1653 ;demo.c:202: if (tick < 4) return;
   056F 3ArC2s8E           1654 	ld	a,(#_tick+0)
   0572 D6 04              1655 	sub	a,#0x04
   0574 3ArC3s8E           1656 	ld	a,(#_tick+1)
   0577 DE 00              1657 	sbc	a,#0x00
   0579 F2r7Fs05           1658 	jp	P,00102$
   057C C3r2Ds06           1659 	jp	00113$
   057F                    1660 00102$:
                           1661 ;demo.c:204: tick = 0;
   057F 21rC2s8E           1662 	ld	hl,#_tick + 0
   0582 36 00              1663 	ld	(hl), #0x00
   0584 21rC3s8E           1664 	ld	hl,#_tick + 1
   0587 36 00              1665 	ld	(hl), #0x00
                           1666 ;demo.c:206: for(i = 0; i < 32; i+=2) {
   0589 0E 00              1667 	ld	c,#0x00
   058B                    1668 00109$:
   058B 79                 1669 	ld	a,c
   058C D6 20              1670 	sub	a,#0x20
   058E D2r25s06           1671 	jp	NC,00112$
                           1672 ;demo.c:207: uint8_t r = scratch[i] >> 4;
   0591 3ErA0              1673 	ld	a,#<_scratch
   0593 81                 1674 	add	a,c
   0594 5F                 1675 	ld	e,a
   0595 3Es8D              1676 	ld	a,#>_scratch
   0597 CE 00              1677 	adc	a,#0x00
   0599 57                 1678 	ld	d,a
   059A 1A                 1679 	ld	a,(de)
   059B 47                 1680 	ld	b,a
   059C 58                 1681 	ld	e,b
   059D CB 3B              1682 	srl	e
   059F CB 3B              1683 	srl	e
   05A1 CB 3B              1684 	srl	e
   05A3 CB 3B              1685 	srl	e
                           1686 ;demo.c:208: uint8_t b = scratch[i] & 0xf;
   05A5 78                 1687 	ld	a,b
   05A6 E6 0F              1688 	and	a,#0x0F
   05A8 DD 77 FF           1689 	ld	-1 (ix),a
                           1690 ;demo.c:209: uint8_t g = scratch[i+1];
   05AB 51                 1691 	ld	d,c
   05AC 14                 1692 	inc	d
   05AD 3ErA0              1693 	ld	a,#<_scratch
   05AF 82                 1694 	add	a,d
   05B0 6F                 1695 	ld	l,a
   05B1 3Es8D              1696 	ld	a,#>_scratch
   05B3 CE 00              1697 	adc	a,#0x00
   05B5 67                 1698 	ld	h,a
   05B6 56                 1699 	ld	d,(hl)
   05B7 DD 72 FE           1700 	ld	-2 (ix),d
                           1701 ;demo.c:211: if (r < (cur_palette[i] >> 4)) r++;
   05BA 3Er20              1702 	ld	a,#<_cur_palette
   05BC 81                 1703 	add	a,c
   05BD 6F                 1704 	ld	l,a
   05BE 3Es8E              1705 	ld	a,#>_cur_palette
   05C0 CE 00              1706 	adc	a,#0x00
   05C2 67                 1707 	ld	h,a
   05C3 56                 1708 	ld	d,(hl)
   05C4 CB 3A              1709 	srl	d
   05C6 CB 3A              1710 	srl	d
   05C8 CB 3A              1711 	srl	d
   05CA CB 3A              1712 	srl	d
   05CC 7B                 1713 	ld	a,e
   05CD 92                 1714 	sub	a,d
   05CE 30 01              1715 	jr	NC,00104$
   05D0 1C                 1716 	inc	e
   05D1                    1717 00104$:
                           1718 ;demo.c:212: if (b < (cur_palette[i] & 0xf)) b++;
   05D1 3Er20              1719 	ld	a,#<_cur_palette
   05D3 81                 1720 	add	a,c
   05D4 6F                 1721 	ld	l,a
   05D5 3Es8E              1722 	ld	a,#>_cur_palette
   05D7 CE 00              1723 	adc	a,#0x00
   05D9 67                 1724 	ld	h,a
   05DA 7E                 1725 	ld	a,(hl)
   05DB E6 0F              1726 	and	a,#0x0F
   05DD 47                 1727 	ld	b,a
   05DE DD 7E FF           1728 	ld	a,-1 (ix)
   05E1 90                 1729 	sub	a,b
   05E2 30 03              1730 	jr	NC,00106$
   05E4 DD 34 FF           1731 	inc	-1 (ix)
   05E7                    1732 00106$:
                           1733 ;demo.c:214: scratch[i] = (r << 4) | b;
   05E7 3ErA0              1734 	ld	a,#<_scratch
   05E9 81                 1735 	add	a,c
   05EA 47                 1736 	ld	b,a
   05EB 3Es8D              1737 	ld	a,#>_scratch
   05ED CE 00              1738 	adc	a,#0x00
   05EF 57                 1739 	ld	d,a
   05F0 7B                 1740 	ld	a,e
   05F1 07                 1741 	rlca
   05F2 07                 1742 	rlca
   05F3 07                 1743 	rlca
   05F4 07                 1744 	rlca
   05F5 E6 F0              1745 	and	a,#0xF0
   05F7 DD B6 FF           1746 	or	a,-1 (ix)
   05FA 68                 1747 	ld	l,b
   05FB 62                 1748 	ld	h,d
   05FC 77                 1749 	ld	(hl),a
                           1750 ;demo.c:215: if (g < cur_palette[i+1]) scratch[i+1]++;
   05FD 41                 1751 	ld	b,c
   05FE 04                 1752 	inc	b
   05FF 3Er20              1753 	ld	a,#<_cur_palette
   0601 80                 1754 	add	a,b
   0602 5F                 1755 	ld	e,a
   0603 3Es8E              1756 	ld	a,#>_cur_palette
   0605 CE 00              1757 	adc	a,#0x00
   0607 57                 1758 	ld	d,a
   0608 1A                 1759 	ld	a,(de)
   0609 5F                 1760 	ld	e,a
   060A DD 7E FE           1761 	ld	a,-2 (ix)
   060D 93                 1762 	sub	a,e
   060E 30 10              1763 	jr	NC,00111$
   0610 3ErA0              1764 	ld	a,#<_scratch
   0612 80                 1765 	add	a,b
   0613 47                 1766 	ld	b,a
   0614 3Es8D              1767 	ld	a,#>_scratch
   0616 CE 00              1768 	adc	a,#0x00
   0618 5F                 1769 	ld	e,a
   0619 68                 1770 	ld	l,b
   061A 67                 1771 	ld	h,a
   061B 7E                 1772 	ld	a,(hl)
   061C 3C                 1773 	inc	a
   061D 68                 1774 	ld	l,b
   061E 63                 1775 	ld	h,e
   061F 77                 1776 	ld	(hl),a
   0620                    1777 00111$:
                           1778 ;demo.c:206: for(i = 0; i < 32; i+=2) {
   0620 0C                 1779 	inc	c
   0621 0C                 1780 	inc	c
   0622 C3r8Bs05           1781 	jp	00109$
   0625                    1782 00112$:
                           1783 ;demo.c:219: vdp_load_palette(scratch);
   0625 21rA0s8D           1784 	ld	hl,#_scratch
   0628 E5                 1785 	push	hl
   0629 CDr00s00           1786 	call	_vdp_load_palette
   062C F1                 1787 	pop	af
   062D                    1788 00113$:
   062D DD F9              1789 	ld	sp,ix
   062F DD E1              1790 	pop	ix
   0631 C9                 1791 	ret
   0632                    1792 _fadein_end::
                           1793 ;demo.c:231: void do_ymmm() {
                           1794 ;	---------------------------------
                           1795 ; Function do_ymmm
                           1796 ; ---------------------------------
   0632                    1797 _do_ymmm_start::
   0632                    1798 _do_ymmm:
   0632 DD E5              1799 	push	ix
   0634 DD 21 00 00        1800 	ld	ix,#0
   0638 DD 39              1801 	add	ix,sp
   063A F5                 1802 	push	af
                           1803 ;demo.c:235: if (tick > 32) { tick = 0; flipper++;}
   063B 3E 20              1804 	ld	a,#0x20
   063D FD 21rC2s8E        1805 	ld	iy,#_tick
   0641 FD 96 00           1806 	sub	a,0 (iy)
   0644 3E 00              1807 	ld	a,#0x00
   0646 FD 21rC2s8E        1808 	ld	iy,#_tick
   064A FD 9E 01           1809 	sbc	a,1 (iy)
   064D F2r6As06           1810 	jp	P,00102$
   0650 21rC2s8E           1811 	ld	hl,#_tick + 0
   0653 36 00              1812 	ld	(hl), #0x00
   0655 21rC3s8E           1813 	ld	hl,#_tick + 1
   0658 36 00              1814 	ld	(hl), #0x00
   065A FD 21rDDs8E        1815 	ld	iy,#_flipper
   065E FD 34 00           1816 	inc	0 (iy)
   0661 20 07              1817 	jr	NZ,00115$
   0663 FD 21rDDs8E        1818 	ld	iy,#_flipper
   0667 FD 34 01           1819 	inc	1 (iy)
   066A                    1820 00115$:
   066A                    1821 00102$:
                           1822 ;demo.c:236: if (flipper > 10) { flipper = 0;}
   066A 3E 0A              1823 	ld	a,#0x0A
   066C FD 21rDDs8E        1824 	ld	iy,#_flipper
   0670 FD 96 00           1825 	sub	a,0 (iy)
   0673 3E 00              1826 	ld	a,#0x00
   0675 FD 21rDDs8E        1827 	ld	iy,#_flipper
   0679 FD 9E 01           1828 	sbc	a,1 (iy)
   067C F2r89s06           1829 	jp	P,00104$
   067F 21rDDs8E           1830 	ld	hl,#_flipper + 0
   0682 36 00              1831 	ld	(hl), #0x00
   0684 21rDEs8E           1832 	ld	hl,#_flipper + 1
   0687 36 00              1833 	ld	(hl), #0x00
   0689                    1834 00104$:
                           1835 ;demo.c:238: ymmmf++;
   0689 FD 21rDFs8E        1836 	ld	iy,#_ymmmf
   068D FD 34 00           1837 	inc	0 (iy)
   0690 20 07              1838 	jr	NZ,00116$
   0692 FD 21rDFs8E        1839 	ld	iy,#_ymmmf
   0696 FD 34 01           1840 	inc	1 (iy)
   0699                    1841 00116$:
                           1842 ;demo.c:239: for (yofff = 0; yofff<212-step;yofff+=step) {
   0699 21rDBs8E           1843 	ld	hl,#_yofff + 0
   069C 36 00              1844 	ld	(hl), #0x00
   069E                    1845 00105$:
   069E 21rDBs8E           1846 	ld	hl,#_yofff + 0
   06A1 4E                 1847 	ld	c,(hl)
   06A2 06 00              1848 	ld	b,#0x00
   06A4 79                 1849 	ld	a,c
   06A5 D6 D2              1850 	sub	a,#0xD2
   06A7 78                 1851 	ld	a,b
   06A8 DE 00              1852 	sbc	a,#0x00
   06AA F2r23s07           1853 	jp	P,00109$
                           1854 ;demo.c:240: xo = (sintabx[(yofff+ymmmf) & 255]);
   06AD 21rDFs8E           1855 	ld	hl,#_ymmmf
   06B0 79                 1856 	ld	a,c
   06B1 86                 1857 	add	a,(hl)
   06B2 5F                 1858 	ld	e,a
   06B3 78                 1859 	ld	a,b
   06B4 23                 1860 	inc	hl
   06B5 8E                 1861 	adc	a,(hl)
   06B6 16 00              1862 	ld	d,#0x00
   06B8 CB 23              1863 	sla	e
   06BA CB 12              1864 	rl	d
   06BC 21r2Cs00           1865 	ld	hl,#_sintabx
   06BF 19                 1866 	add	hl,de
   06C0 5E                 1867 	ld	e,(hl)
   06C1 23                 1868 	inc	hl
   06C2 56                 1869 	ld	d,(hl)
   06C3 DD 73 FE           1870 	ld	-2 (ix),e
   06C6 DD 72 FF           1871 	ld	-1 (ix),d
                           1872 ;demo.c:243: cmd.source_x = 0;
   06C9 21rC4s8E           1873 	ld	hl,#_cmd
   06CC 36 00              1874 	ld	(hl),#0x00
   06CE 23                 1875 	inc	hl
   06CF 36 00              1876 	ld	(hl),#0x00
                           1877 ;demo.c:244: cmd.source_y = 0+yofff;
   06D1 11rC6s8E           1878 	ld	de,#_cmd + 2
   06D4 EB                 1879 	ex	de,hl
   06D5 71                 1880 	ld	(hl),c
   06D6 23                 1881 	inc	hl
   06D7 70                 1882 	ld	(hl),b
                           1883 ;demo.c:245: cmd.dest_x = xo;
   06D8 11rC8s8E           1884 	ld	de,#_cmd + 4
   06DB EB                 1885 	ex	de,hl
   06DC DD 7E FE           1886 	ld	a,-2 (ix)
   06DF 77                 1887 	ld	(hl),a
   06E0 23                 1888 	inc	hl
   06E1 DD 7E FF           1889 	ld	a,-1 (ix)
   06E4 77                 1890 	ld	(hl),a
                           1891 ;demo.c:246: cmd.dest_y = 3+yofff;
   06E5 11rCAs8E           1892 	ld	de,#_cmd + 6
   06E8 03                 1893 	inc	bc
   06E9 03                 1894 	inc	bc
   06EA 03                 1895 	inc	bc
   06EB 6B                 1896 	ld	l,e
   06EC 62                 1897 	ld	h,d
   06ED 71                 1898 	ld	(hl),c
   06EE 23                 1899 	inc	hl
   06EF 70                 1900 	ld	(hl),b
                           1901 ;demo.c:247: cmd.size_x = 256;
   06F0 21rCCs8E           1902 	ld	hl, #_cmd + 8
   06F3 36 00              1903 	ld	(hl),#0x00
   06F5 23                 1904 	inc	hl
   06F6 36 01              1905 	ld	(hl),#0x01
                           1906 ;demo.c:248: cmd.size_y = 1;
   06F8 21rCEs8E           1907 	ld	hl, #_cmd + 10
   06FB 36 01              1908 	ld	(hl),#0x01
   06FD 23                 1909 	inc	hl
   06FE 36 00              1910 	ld	(hl),#0x00
                           1911 ;demo.c:249: cmd.data = 0;
                           1912 ;demo.c:250: cmd.argument = 0;
   0700 3E 00              1913 	ld	a,#0x00
   0702 32rD0s8E           1914 	ld	(#_cmd + 12),a
   0705 32rD1s8E           1915 	ld	(#_cmd + 13),a
                           1916 ;demo.c:251: cmd.command = 0xD0;
   0708 3E D0              1917 	ld	a,#0xD0
   070A 32rD2s8E           1918 	ld	(#_cmd + 14),a
                           1919 ;demo.c:254: vdp_copier(&cmd);
   070D 21rC4s8E           1920 	ld	hl,#_cmd
   0710 E5                 1921 	push	hl
   0711 CDr00s00           1922 	call	_vdp_copier
   0714 F1                 1923 	pop	af
                           1924 ;demo.c:239: for (yofff = 0; yofff<212-step;yofff+=step) {
   0715 21rDBs8E           1925 	ld	hl,#_yofff + 0
   0718 4E                 1926 	ld	c,(hl)
   0719 21rDBs8E           1927 	ld	hl,#_yofff
   071C 79                 1928 	ld	a,c
   071D C6 02              1929 	add	a,#0x02
   071F 77                 1930 	ld	(hl),a
   0720 C3r9Es06           1931 	jp	00105$
   0723                    1932 00109$:
   0723 DD F9              1933 	ld	sp,ix
   0725 DD E1              1934 	pop	ix
   0727 C9                 1935 	ret
   0728                    1936 _do_ymmm_end::
                           1937 ;demo.c:271: void do_blocks() {
                           1938 ;	---------------------------------
                           1939 ; Function do_blocks
                           1940 ; ---------------------------------
   0728                    1941 _do_blocks_start::
   0728                    1942 _do_blocks:
   0728 DD E5              1943 	push	ix
   072A DD 21 00 00        1944 	ld	ix,#0
   072E DD 39              1945 	add	ix,sp
   0730 21 FA FF           1946 	ld	hl,#-6
   0733 39                 1947 	add	hl,sp
   0734 F9                 1948 	ld	sp,hl
                           1949 ;demo.c:273: int ys = 0;
   0735 DD 36 FC 00        1950 	ld	-4 (ix),#0x00
   0739 DD 36 FD 00        1951 	ld	-3 (ix),#0x00
                           1952 ;demo.c:274: int ye = 0;
   073D DD 36 FA 00        1953 	ld	-6 (ix),#0x00
   0741 DD 36 FB 00        1954 	ld	-5 (ix),#0x00
                           1955 ;demo.c:276: vdp_register(VDP_VOFFSET,0);
   0745 21 17 00           1956 	ld	hl,#0x0017
   0748 E5                 1957 	push	hl
   0749 CDr00s00           1958 	call	_vdp_register
   074C F1                 1959 	pop	af
                           1960 ;demo.c:278: if (block_init == 0) {
   074D AF                 1961 	xor	a,a
   074E FD 21rE1s8E        1962 	ld	iy,#_block_init
   0752 FD B6 00           1963 	or	a,0 (iy)
   0755 C2rBDs07           1964 	jp	NZ,00108$
                           1965 ;demo.c:280: vdp_set_screen5();
   0758 CDr00s00           1966 	call	_vdp_set_screen5
                           1967 ;demo.c:282: vdp_register(2, 0x5F);
   075B 21 02 5F           1968 	ld	hl,#0x5F02
   075E E5                 1969 	push	hl
   075F CDr00s00           1970 	call	_vdp_register
   0762 F1                 1971 	pop	af
                           1972 ;demo.c:284: for(i=0;i<16;i++) btab[i] = i*16;
   0763 DD 36 FE 00        1973 	ld	-2 (ix),#0x00
   0767 DD 36 FF 00        1974 	ld	-1 (ix),#0x00
   076B                    1975 00110$:
   076B DD 7E FE           1976 	ld	a,-2 (ix)
   076E D6 10              1977 	sub	a,#0x10
   0770 DD 7E FF           1978 	ld	a,-1 (ix)
   0773 DE 00              1979 	sbc	a,#0x00
   0775 F2rADs07           1980 	jp	P,00113$
   0778 DD 4E FE           1981 	ld	c,-2 (ix)
   077B DD 46 FF           1982 	ld	b,-1 (ix)
   077E CB 21              1983 	sla	c
   0780 CB 10              1984 	rl	b
   0782 21rEAs8E           1985 	ld	hl,#_btab
   0785 09                 1986 	add	hl,bc
   0786 4D                 1987 	ld	c,l
   0787 44                 1988 	ld	b,h
   0788 DD 5E FE           1989 	ld	e,-2 (ix)
   078B DD 56 FF           1990 	ld	d,-1 (ix)
   078E CB 23              1991 	sla	e
   0790 CB 12              1992 	rl	d
   0792 CB 23              1993 	sla	e
   0794 CB 12              1994 	rl	d
   0796 CB 23              1995 	sla	e
   0798 CB 12              1996 	rl	d
   079A CB 23              1997 	sla	e
   079C CB 12              1998 	rl	d
   079E 69                 1999 	ld	l,c
   079F 60                 2000 	ld	h,b
   07A0 73                 2001 	ld	(hl),e
   07A1 23                 2002 	inc	hl
   07A2 72                 2003 	ld	(hl),d
   07A3 DD 34 FE           2004 	inc	-2 (ix)
   07A6 20 03              2005 	jr	NZ,00139$
   07A8 DD 34 FF           2006 	inc	-1 (ix)
   07AB                    2007 00139$:
   07AB 18 BE              2008 	jr	00110$
   07AD                    2009 00113$:
                           2010 ;demo.c:285: vdp_load_palette(block_palette);
   07AD 21r40s8E           2011 	ld	hl,#_block_palette
   07B0 E5                 2012 	push	hl
   07B1 CDr00s00           2013 	call	_vdp_load_palette
   07B4 F1                 2014 	pop	af
                           2015 ;demo.c:287: block_init = 1;
   07B5 21rE1s8E           2016 	ld	hl,#_block_init + 0
   07B8 36 01              2017 	ld	(hl), #0x01
   07BA C3r46s09           2018 	jp	00122$
   07BD                    2019 00108$:
                           2020 ;demo.c:291: if (flof == 0) { ys = 0; ye = 8; }
   07BD 3Ar0As8F           2021 	ld	a,(#_flof+0)
   07C0 FD 21r0As8F        2022 	ld	iy,#_flof
   07C4 FD B6 01           2023 	or	a,1 (iy)
   07C7 20 10              2024 	jr	NZ,00102$
   07C9 DD 36 FC 00        2025 	ld	-4 (ix),#0x00
   07CD DD 36 FD 00        2026 	ld	-3 (ix),#0x00
   07D1 DD 36 FA 08        2027 	ld	-6 (ix),#0x08
   07D5 DD 36 FB 00        2028 	ld	-5 (ix),#0x00
   07D9                    2029 00102$:
                           2030 ;demo.c:292: if (flof == 1) { ys = 8; ye = 16; }
   07D9 3Ar0As8F           2031 	ld	a,(#_flof+0)
   07DC D6 01              2032 	sub	a,#0x01
   07DE 20 06              2033 	jr	NZ,00140$
   07E0 3Ar0Bs8F           2034 	ld	a,(#_flof+1)
   07E3 B7                 2035 	or	a,a
   07E4 28 02              2036 	jr	Z,00141$
   07E6                    2037 00140$:
   07E6 18 10              2038 	jr	00104$
   07E8                    2039 00141$:
   07E8 DD 36 FC 08        2040 	ld	-4 (ix),#0x08
   07EC DD 36 FD 00        2041 	ld	-3 (ix),#0x00
   07F0 DD 36 FA 10        2042 	ld	-6 (ix),#0x10
   07F4 DD 36 FB 00        2043 	ld	-5 (ix),#0x00
   07F8                    2044 00104$:
                           2045 ;demo.c:294: for(bty=3;bty<11;bty++) {
   07F8 FD 21rE8s8E        2046 	ld	iy,#_bty
   07FC FD 36 00 03        2047 	ld	0 (iy),#0x03
   0800 FD 21rE8s8E        2048 	ld	iy,#_bty
   0804 FD 36 01 00        2049 	ld	1 (iy),#0x00
   0808                    2050 00118$:
   0808 3ArE8s8E           2051 	ld	a,(#_bty+0)
   080B D6 0B              2052 	sub	a,#0x0B
   080D 3ArE9s8E           2053 	ld	a,(#_bty+1)
   0810 DE 00              2054 	sbc	a,#0x00
   0812 F2r1Ds09           2055 	jp	P,00121$
                           2056 ;demo.c:295: for(btx=ys;btx<ye;btx++) {
   0815 DD 7E FC           2057 	ld	a,-4 (ix)
   0818 FD 21rE6s8E        2058 	ld	iy,#_btx
   081C FD 77 00           2059 	ld	0 (iy),a
   081F DD 7E FD           2060 	ld	a,-3 (ix)
   0822 FD 21rE6s8E        2061 	ld	iy,#_btx
   0826 FD 77 01           2062 	ld	1 (iy),a
   0829                    2063 00114$:
   0829 3ArE6s8E           2064 	ld	a,(#_btx+0)
   082C DD 96 FA           2065 	sub	a,-6 (ix)
   082F 3ArE7s8E           2066 	ld	a,(#_btx+1)
   0832 DD 9E FB           2067 	sbc	a,-5 (ix)
   0835 F2r0As09           2068 	jp	P,00120$
                           2069 ;demo.c:296: bsx = (PLY_PSGReg8 & PLY_PSGReg9 | PLY_PSGReg10)>>1;
   0838 3Ar00s00           2070 	ld	a,(#_PLY_PSGReg8+0)
   083B FD 21r00s00        2071 	ld	iy,#_PLY_PSGReg9
   083F FD A6 00           2072 	and	a,0 (iy)
   0842 21r00s00           2073 	ld	hl,#_PLY_PSGReg10 + 0
   0845 B6                 2074 	or	a,(hl)
   0846 4F                 2075 	ld	c,a
   0847 CB 39              2076 	srl	c
   0849 21rE2s8E           2077 	ld	hl,#_bsx + 0
   084C 71                 2078 	ld	(hl), c
   084D 21rE3s8E           2079 	ld	hl,#_bsx + 1
   0850 36 00              2080 	ld	(hl), #0x00
                           2081 ;demo.c:297: bsy = PLY_PSGReg10;
   0852 3Ar00s00           2082 	ld	a,(#_PLY_PSGReg10+0)
   0855 21rE4s8E           2083 	ld	hl,#_bsy + 0
   0858 77                 2084 	ld	(hl), a
   0859 21rE5s8E           2085 	ld	hl,#_bsy + 1
   085C 36 00              2086 	ld	(hl), #0x00
                           2087 ;demo.c:298: cmd.source_x = btab[bsx];
   085E 21rE2s8E           2088 	ld	hl,#_bsx + 0
   0861 4E                 2089 	ld	c,(hl)
   0862 21rE3s8E           2090 	ld	hl,#_bsx + 1
   0865 46                 2091 	ld	b,(hl)
   0866 CB 21              2092 	sla	c
   0868 CB 10              2093 	rl	b
   086A 21rEAs8E           2094 	ld	hl,#_btab
   086D 09                 2095 	add	hl,bc
   086E 4E                 2096 	ld	c,(hl)
   086F 23                 2097 	inc	hl
   0870 46                 2098 	ld	b,(hl)
   0871 21rC4s8E           2099 	ld	hl,#_cmd
   0874 71                 2100 	ld	(hl),c
   0875 23                 2101 	inc	hl
   0876 70                 2102 	ld	(hl),b
                           2103 ;demo.c:299: cmd.source_y = 768+btab[bsy];
   0877 01rC6s8E           2104 	ld	bc,#_cmd + 2
   087A 21rE4s8E           2105 	ld	hl,#_bsy + 0
   087D 5E                 2106 	ld	e,(hl)
   087E 21rE5s8E           2107 	ld	hl,#_bsy + 1
   0881 56                 2108 	ld	d,(hl)
   0882 CB 23              2109 	sla	e
   0884 CB 12              2110 	rl	d
   0886 21rEAs8E           2111 	ld	hl,#_btab
   0889 19                 2112 	add	hl,de
   088A 5E                 2113 	ld	e,(hl)
   088B 23                 2114 	inc	hl
   088C 56                 2115 	ld	d,(hl)
   088D 21 00 03           2116 	ld	hl,#0x0300
   0890 19                 2117 	add	hl,de
   0891 EB                 2118 	ex	de,hl
   0892 69                 2119 	ld	l,c
   0893 60                 2120 	ld	h,b
   0894 73                 2121 	ld	(hl),e
   0895 23                 2122 	inc	hl
   0896 72                 2123 	ld	(hl),d
                           2124 ;demo.c:300: cmd.dest_x = btab[btx];
   0897 01rC8s8E           2125 	ld	bc,#_cmd + 4
   089A 21rE6s8E           2126 	ld	hl,#_btx + 0
   089D 5E                 2127 	ld	e,(hl)
   089E 21rE7s8E           2128 	ld	hl,#_btx + 1
   08A1 56                 2129 	ld	d,(hl)
   08A2 CB 23              2130 	sla	e
   08A4 CB 12              2131 	rl	d
   08A6 21rEAs8E           2132 	ld	hl,#_btab
   08A9 19                 2133 	add	hl,de
   08AA 5E                 2134 	ld	e,(hl)
   08AB 23                 2135 	inc	hl
   08AC 56                 2136 	ld	d,(hl)
   08AD 69                 2137 	ld	l,c
   08AE 60                 2138 	ld	h,b
   08AF 73                 2139 	ld	(hl),e
   08B0 23                 2140 	inc	hl
   08B1 72                 2141 	ld	(hl),d
                           2142 ;demo.c:301: cmd.dest_y = 512+btab[bty];
   08B2 01rCAs8E           2143 	ld	bc,#_cmd + 6
   08B5 21rE8s8E           2144 	ld	hl,#_bty + 0
   08B8 5E                 2145 	ld	e,(hl)
   08B9 21rE9s8E           2146 	ld	hl,#_bty + 1
   08BC 56                 2147 	ld	d,(hl)
   08BD CB 23              2148 	sla	e
   08BF CB 12              2149 	rl	d
   08C1 21rEAs8E           2150 	ld	hl,#_btab
   08C4 19                 2151 	add	hl,de
   08C5 5E                 2152 	ld	e,(hl)
   08C6 23                 2153 	inc	hl
   08C7 56                 2154 	ld	d,(hl)
   08C8 21 00 02           2155 	ld	hl,#0x0200
   08CB 19                 2156 	add	hl,de
   08CC EB                 2157 	ex	de,hl
   08CD 69                 2158 	ld	l,c
   08CE 60                 2159 	ld	h,b
   08CF 73                 2160 	ld	(hl),e
   08D0 23                 2161 	inc	hl
   08D1 72                 2162 	ld	(hl),d
                           2163 ;demo.c:302: cmd.size_x = 16;
   08D2 21rCCs8E           2164 	ld	hl, #_cmd + 8
   08D5 36 10              2165 	ld	(hl),#0x10
   08D7 23                 2166 	inc	hl
   08D8 36 00              2167 	ld	(hl),#0x00
                           2168 ;demo.c:303: cmd.size_y = 16;
   08DA 21rCEs8E           2169 	ld	hl, #_cmd + 10
   08DD 36 10              2170 	ld	(hl),#0x10
   08DF 23                 2171 	inc	hl
   08E0 36 00              2172 	ld	(hl),#0x00
                           2173 ;demo.c:304: cmd.data = 0;
                           2174 ;demo.c:305: cmd.argument = 0x00;
   08E2 3E 00              2175 	ld	a,#0x00
   08E4 32rD0s8E           2176 	ld	(#_cmd + 12),a
   08E7 32rD1s8E           2177 	ld	(#_cmd + 13),a
                           2178 ;demo.c:306: cmd.command = 0xD0;
   08EA 3E D0              2179 	ld	a,#0xD0
   08EC 32rD2s8E           2180 	ld	(#_cmd + 14),a
                           2181 ;demo.c:307: vdp_copier(&cmd);
   08EF 21rC4s8E           2182 	ld	hl,#_cmd
   08F2 E5                 2183 	push	hl
   08F3 CDr00s00           2184 	call	_vdp_copier
   08F6 F1                 2185 	pop	af
                           2186 ;demo.c:295: for(btx=ys;btx<ye;btx++) {
   08F7 FD 21rE6s8E        2187 	ld	iy,#_btx
   08FB FD 34 00           2188 	inc	0 (iy)
   08FE 20 07              2189 	jr	NZ,00150$
   0900 FD 21rE6s8E        2190 	ld	iy,#_btx
   0904 FD 34 01           2191 	inc	1 (iy)
   0907                    2192 00150$:
   0907 C3r29s08           2193 	jp	00114$
   090A                    2194 00120$:
                           2195 ;demo.c:294: for(bty=3;bty<11;bty++) {
   090A FD 21rE8s8E        2196 	ld	iy,#_bty
   090E FD 34 00           2197 	inc	0 (iy)
   0911 20 07              2198 	jr	NZ,00151$
   0913 FD 21rE8s8E        2199 	ld	iy,#_bty
   0917 FD 34 01           2200 	inc	1 (iy)
   091A                    2201 00151$:
   091A C3r08s08           2202 	jp	00118$
   091D                    2203 00121$:
                           2204 ;demo.c:311: flof++;
   091D FD 21r0As8F        2205 	ld	iy,#_flof
   0921 FD 34 00           2206 	inc	0 (iy)
   0924 20 07              2207 	jr	NZ,00152$
   0926 FD 21r0As8F        2208 	ld	iy,#_flof
   092A FD 34 01           2209 	inc	1 (iy)
   092D                    2210 00152$:
                           2211 ;demo.c:312: if (flof == 2) flof = 0;
   092D 3Ar0As8F           2212 	ld	a,(#_flof+0)
   0930 D6 02              2213 	sub	a,#0x02
   0932 20 06              2214 	jr	NZ,00153$
   0934 3Ar0Bs8F           2215 	ld	a,(#_flof+1)
   0937 B7                 2216 	or	a,a
   0938 28 02              2217 	jr	Z,00154$
   093A                    2218 00153$:
   093A 18 0A              2219 	jr	00122$
   093C                    2220 00154$:
   093C 21r0As8F           2221 	ld	hl,#_flof + 0
   093F 36 00              2222 	ld	(hl), #0x00
   0941 21r0Bs8F           2223 	ld	hl,#_flof + 1
   0944 36 00              2224 	ld	(hl), #0x00
   0946                    2225 00122$:
   0946 DD F9              2226 	ld	sp,ix
   0948 DD E1              2227 	pop	ix
   094A C9                 2228 	ret
   094B                    2229 _do_blocks_end::
                           2230 ;demo.c:320: void raster_effu() {
                           2231 ;	---------------------------------
                           2232 ; Function raster_effu
                           2233 ; ---------------------------------
   094B                    2234 _raster_effu_start::
   094B                    2235 _raster_effu:
                           2236 ;demo.c:321: vdp_register(VDP_VOFFSET,0);
   094B 21 17 00           2237 	ld	hl,#0x0017
   094E E5                 2238 	push	hl
   094F CDr00s00           2239 	call	_vdp_register
   0952 F1                 2240 	pop	af
                           2241 ;demo.c:322: waitVB();
   0953 76                 2242 		halt 
                           2243 ;demo.c:324: vdp_register(1,0x40); // disable vblank
   0954 21 01 40           2244 	ld	hl,#0x4001
   0957 E5                 2245 	push	hl
   0958 CDr00s00           2246 	call	_vdp_register
                           2247 ;demo.c:326: for (linenum = 40; linenum < 212; linenum+=4) {
   095B 3E 28              2248 	ld	a,#0x28
   095D 32r0Cs8F           2249 	ld	(#_linenum + 0),a
   0960 F1                 2250 	pop	af
   0961 FD 21r0Cs8F        2251 	ld	iy,#_linenum
   0965 FD 36 01 00        2252 	ld	1 (iy),#0x00
   0969                    2253 00101$:
   0969 3Ar0Cs8F           2254 	ld	a,(#_linenum+0)
   096C D6 D4              2255 	sub	a,#0xD4
   096E 3Ar0Ds8F           2256 	ld	a,(#_linenum+1)
   0971 DE 00              2257 	sbc	a,#0x00
   0973 F2rA4s09           2258 	jp	P,00104$
                           2259 ;demo.c:327: vdp_register(19,linenum); // interrupt on line
   0976 3Ar0Cs8F           2260 	ld	a,(#_linenum+0)
   0979 F5                 2261 	push	af
   097A 33                 2262 	inc	sp
   097B 3E 13              2263 	ld	a,#0x13
   097D F5                 2264 	push	af
   097E 33                 2265 	inc	sp
   097F CDr00s00           2266 	call	_vdp_register
   0982 F1                 2267 	pop	af
                           2268 ;demo.c:328: vdp_register(0,0x16); // mode SC5, IE1 interrupts on
   0983 21 00 16           2269 	ld	hl,#0x1600
   0986 E5                 2270 	push	hl
   0987 CDr00s00           2271 	call	_vdp_register
   098A F1                 2272 	pop	af
                           2273 ;demo.c:330: waitVB();
   098B 76                 2274 		halt 
                           2275 ;demo.c:326: for (linenum = 40; linenum < 212; linenum+=4) {
   098C 21r0Cs8F           2276 	ld	hl,#_linenum
   098F 7E                 2277 	ld	a,(hl)
   0990 C6 04              2278 	add	a,#0x04
   0992 23                 2279 	inc	hl
   0993 2B                 2280 	dec	hl
   0994 C5                 2281 	push	bc
   0995 4F                 2282 	ld	c, a
   0996 23                 2283 	inc	hl
   0997 7E                 2284 	ld	a, (hl)
   0998 47                 2285 	ld	b, a
   0999 79                 2286 	ld	a, c
   099A 2B                 2287 	dec	hl
   099B 77                 2288 	ld	(hl), a
   099C 78                 2289 	ld	a, b
   099D C1                 2290 	pop	bc
   099E CE 00              2291 	adc	a,#0x00
   09A0 23                 2292 	inc	hl
   09A1 77                 2293 	ld	(hl),a
   09A2 18 C5              2294 	jr	00101$
   09A4                    2295 00104$:
                           2296 ;demo.c:333: vdp_register(VDP_VOFFSET,0);
   09A4 21 17 00           2297 	ld	hl,#0x0017
   09A7 E5                 2298 	push	hl
   09A8 CDr00s00           2299 	call	_vdp_register
   09AB F1                 2300 	pop	af
                           2301 ;demo.c:347: vdp_register(0,0x6); // mode SC5, IE1 interrupts off
   09AC 21 00 06           2302 	ld	hl,#0x0600
   09AF E5                 2303 	push	hl
   09B0 CDr00s00           2304 	call	_vdp_register
   09B3 F1                 2305 	pop	af
                           2306 ;demo.c:348: vdp_register(1,0x60); // enable vblank
   09B4 21 01 60           2307 	ld	hl,#0x6001
   09B7 E5                 2308 	push	hl
   09B8 CDr00s00           2309 	call	_vdp_register
   09BB F1                 2310 	pop	af
   09BC C9                 2311 	ret
   09BD                    2312 _raster_effu_end::
                           2313 ;demo.c:379: void do_letter(char cc) {
                           2314 ;	---------------------------------
                           2315 ; Function do_letter
                           2316 ; ---------------------------------
   09BD                    2317 _do_letter_start::
   09BD                    2318 _do_letter:
   09BD DD E5              2319 	push	ix
   09BF DD 21 00 00        2320 	ld	ix,#0
   09C3 DD 39              2321 	add	ix,sp
   09C5 F5                 2322 	push	af
                           2323 ;demo.c:380: int cidx = cc - 65;
   09C6 DD 4E 04           2324 	ld	c,4 (ix)
   09C9 DD 7E 04           2325 	ld	a,4 (ix)
   09CC 17                 2326 	rla	
   09CD 9F                 2327 	sbc	a,a
   09CE 47                 2328 	ld	b,a
   09CF 79                 2329 	ld	a,c
   09D0 C6 BF              2330 	add	a,#0xBF
   09D2 DD 77 FE           2331 	ld	-2 (ix),a
   09D5 78                 2332 	ld	a,b
   09D6 CE FF              2333 	adc	a,#0xFF
   09D8 DD 77 FF           2334 	ld	-1 (ix),a
                           2335 ;demo.c:381: cmd.source_x = 127+font_x[cidx];
   09DB 3Er7B              2336 	ld	a,#<_font_x
   09DD DD 86 FE           2337 	add	a,-2 (ix)
   09E0 5F                 2338 	ld	e,a
   09E1 3Es0A              2339 	ld	a,#>_font_x
   09E3 DD 8E FF           2340 	adc	a,-1 (ix)
   09E6 57                 2341 	ld	d,a
   09E7 1A                 2342 	ld	a,(de)
   09E8 5F                 2343 	ld	e,a
   09E9 16 00              2344 	ld	d,#0x00
   09EB 21 7F 00           2345 	ld	hl,#0x007F
   09EE 19                 2346 	add	hl,de
   09EF EB                 2347 	ex	de,hl
   09F0 21rC4s8E           2348 	ld	hl,#_cmd
   09F3 73                 2349 	ld	(hl),e
   09F4 23                 2350 	inc	hl
   09F5 72                 2351 	ld	(hl),d
                           2352 ;demo.c:382: cmd.source_y = 512+font_y[cidx];
   09F6 11rC6s8E           2353 	ld	de,#_cmd + 2
   09F9 3ErBB              2354 	ld	a,#<_font_y
   09FB DD 86 FE           2355 	add	a,-2 (ix)
   09FE 4F                 2356 	ld	c,a
   09FF 3Es0A              2357 	ld	a,#>_font_y
   0A01 DD 8E FF           2358 	adc	a,-1 (ix)
   0A04 47                 2359 	ld	b,a
   0A05 0A                 2360 	ld	a,(bc)
   0A06 4F                 2361 	ld	c,a
   0A07 06 00              2362 	ld	b,#0x00
   0A09 21 00 02           2363 	ld	hl,#0x0200
   0A0C 09                 2364 	add	hl,bc
   0A0D 4D                 2365 	ld	c,l
   0A0E 44                 2366 	ld	b,h
   0A0F EB                 2367 	ex	de,hl
   0A10 71                 2368 	ld	(hl),c
   0A11 23                 2369 	inc	hl
   0A12 70                 2370 	ld	(hl),b
                           2371 ;demo.c:383: cmd.dest_x = lx;
   0A13 01rC8s8E           2372 	ld	bc,#_cmd + 4
   0A16 21r0Es8F           2373 	ld	hl,#_lx + 0
   0A19 5E                 2374 	ld	e,(hl)
   0A1A 16 00              2375 	ld	d,#0x00
   0A1C 69                 2376 	ld	l,c
   0A1D 60                 2377 	ld	h,b
   0A1E 73                 2378 	ld	(hl),e
   0A1F 23                 2379 	inc	hl
   0A20 72                 2380 	ld	(hl),d
                           2381 ;demo.c:384: cmd.dest_y = ly;
   0A21 01rCAs8E           2382 	ld	bc,#_cmd + 6
   0A24 21r0Fs8F           2383 	ld	hl,#_ly + 0
   0A27 5E                 2384 	ld	e,(hl)
   0A28 16 00              2385 	ld	d,#0x00
   0A2A 69                 2386 	ld	l,c
   0A2B 60                 2387 	ld	h,b
   0A2C 73                 2388 	ld	(hl),e
   0A2D 23                 2389 	inc	hl
   0A2E 72                 2390 	ld	(hl),d
                           2391 ;demo.c:385: cmd.size_x = font_w[cidx];
   0A2F 01rCCs8E           2392 	ld	bc,#_cmd + 8
   0A32 3ErFB              2393 	ld	a,#<_font_w
   0A34 DD 86 FE           2394 	add	a,-2 (ix)
   0A37 5F                 2395 	ld	e,a
   0A38 3Es0A              2396 	ld	a,#>_font_w
   0A3A DD 8E FF           2397 	adc	a,-1 (ix)
   0A3D 57                 2398 	ld	d,a
   0A3E 1A                 2399 	ld	a,(de)
   0A3F 5F                 2400 	ld	e,a
   0A40 16 00              2401 	ld	d,#0x00
   0A42 69                 2402 	ld	l,c
   0A43 60                 2403 	ld	h,b
   0A44 73                 2404 	ld	(hl),e
   0A45 23                 2405 	inc	hl
   0A46 72                 2406 	ld	(hl),d
                           2407 ;demo.c:386: cmd.size_y = 8;
   0A47 21rCEs8E           2408 	ld	hl, #_cmd + 10
   0A4A 36 08              2409 	ld	(hl),#0x08
   0A4C 23                 2410 	inc	hl
   0A4D 36 00              2411 	ld	(hl),#0x00
                           2412 ;demo.c:387: cmd.argument = 0x00;
   0A4F 3E 00              2413 	ld	a,#0x00
   0A51 32rD1s8E           2414 	ld	(#_cmd + 13),a
                           2415 ;demo.c:388: cmd.command = 0x90; // logical vram to vram
   0A54 3E 90              2416 	ld	a,#0x90
   0A56 32rD2s8E           2417 	ld	(#_cmd + 14),a
                           2418 ;demo.c:389: vdp_copier(&cmd);
   0A59 21rC4s8E           2419 	ld	hl,#_cmd
   0A5C E5                 2420 	push	hl
   0A5D CDr00s00           2421 	call	_vdp_copier
   0A60 F1                 2422 	pop	af
                           2423 ;demo.c:390: lx+=font_w[cidx]-1;
   0A61 3ErFB              2424 	ld	a,#<_font_w
   0A63 DD 86 FE           2425 	add	a,-2 (ix)
   0A66 4F                 2426 	ld	c,a
   0A67 3Es0A              2427 	ld	a,#>_font_w
   0A69 DD 8E FF           2428 	adc	a,-1 (ix)
   0A6C 47                 2429 	ld	b,a
   0A6D 0A                 2430 	ld	a,(bc)
   0A6E 4F                 2431 	ld	c,a
   0A6F 0D                 2432 	dec	c
   0A70 21r0Es8F           2433 	ld	hl,#_lx
   0A73 7E                 2434 	ld	a,(hl)
   0A74 81                 2435 	add	a,c
   0A75 77                 2436 	ld	(hl),a
   0A76 DD F9              2437 	ld	sp,ix
   0A78 DD E1              2438 	pop	ix
   0A7A C9                 2439 	ret
   0A7B                    2440 _do_letter_end::
   0A7B                    2441 _font_x:
   0A7B 01                 2442 	.db #0x01
   0A7C 09                 2443 	.db #0x09
   0A7D 11                 2444 	.db #0x11
   0A7E 19                 2445 	.db #0x19
   0A7F 21                 2446 	.db #0x21
   0A80 29                 2447 	.db #0x29
   0A81 31                 2448 	.db #0x31
   0A82 39                 2449 	.db #0x39
   0A83 41                 2450 	.db #0x41
   0A84 46                 2451 	.db #0x46
   0A85 4E                 2452 	.db #0x4E
   0A86 56                 2453 	.db #0x56
   0A87 5E                 2454 	.db #0x5E
   0A88 01                 2455 	.db #0x01
   0A89 0A                 2456 	.db #0x0A
   0A8A 12                 2457 	.db #0x12
   0A8B 1A                 2458 	.db #0x1A
   0A8C 23                 2459 	.db #0x23
   0A8D 2B                 2460 	.db #0x2B
   0A8E 33                 2461 	.db #0x33
   0A8F 3C                 2462 	.db #0x3C
   0A90 44                 2463 	.db #0x44
   0A91 4C                 2464 	.db #0x4C
   0A92 56                 2465 	.db #0x56
   0A93 5E                 2466 	.db #0x5E
   0A94 67                 2467 	.db #0x67
   0A95 00                 2468 	.db #0x00
   0A96 00                 2469 	.db #0x00
   0A97 00                 2470 	.db #0x00
   0A98 00                 2471 	.db #0x00
   0A99 00                 2472 	.db #0x00
   0A9A 00                 2473 	.db #0x00
   0A9B 01                 2474 	.db #0x01
   0A9C 09                 2475 	.db #0x09
   0A9D 11                 2476 	.db #0x11
   0A9E 18                 2477 	.db #0x18
   0A9F 20                 2478 	.db #0x20
   0AA0 28                 2479 	.db #0x28
   0AA1 2F                 2480 	.db #0x2F
   0AA2 37                 2481 	.db #0x37
   0AA3 3F                 2482 	.db #0x3F
   0AA4 45                 2483 	.db #0x45
   0AA5 4C                 2484 	.db #0x4C
   0AA6 54                 2485 	.db #0x54
   0AA7 5A                 2486 	.db #0x5A
   0AA8 64                 2487 	.db #0x64
   0AA9 01                 2488 	.db #0x01
   0AAA 09                 2489 	.db #0x09
   0AAB 11                 2490 	.db #0x11
   0AAC 19                 2491 	.db #0x19
   0AAD 21                 2492 	.db #0x21
   0AAE 29                 2493 	.db #0x29
   0AAF 30                 2494 	.db #0x30
   0AB0 38                 2495 	.db #0x38
   0AB1 40                 2496 	.db #0x40
   0AB2 4A                 2497 	.db #0x4A
   0AB3 52                 2498 	.db #0x52
   0AB4 5A                 2499 	.db #0x5A
   0AB5 00                 2500 	.db 0x00
   0AB6 00                 2501 	.db 0x00
   0AB7 00                 2502 	.db 0x00
   0AB8 00                 2503 	.db 0x00
   0AB9 00                 2504 	.db 0x00
   0ABA 00                 2505 	.db 0x00
   0ABB                    2506 _font_y:
   0ABB 1C                 2507 	.db #0x1C
   0ABC 1C                 2508 	.db #0x1C
   0ABD 1C                 2509 	.db #0x1C
   0ABE 1C                 2510 	.db #0x1C
   0ABF 1C                 2511 	.db #0x1C
   0AC0 1C                 2512 	.db #0x1C
   0AC1 1C                 2513 	.db #0x1C
   0AC2 1C                 2514 	.db #0x1C
   0AC3 1C                 2515 	.db #0x1C
   0AC4 1C                 2516 	.db #0x1C
   0AC5 1C                 2517 	.db #0x1C
   0AC6 1C                 2518 	.db #0x1C
   0AC7 1C                 2519 	.db #0x1C
   0AC8 25                 2520 	.db #0x25
   0AC9 25                 2521 	.db #0x25
   0ACA 25                 2522 	.db #0x25
   0ACB 25                 2523 	.db #0x25
   0ACC 25                 2524 	.db #0x25
   0ACD 25                 2525 	.db #0x25
   0ACE 25                 2526 	.db #0x25
   0ACF 25                 2527 	.db #0x25
   0AD0 25                 2528 	.db #0x25
   0AD1 25                 2529 	.db #0x25
   0AD2 25                 2530 	.db #0x25
   0AD3 25                 2531 	.db #0x25
   0AD4 25                 2532 	.db #0x25
   0AD5 00                 2533 	.db #0x00
   0AD6 00                 2534 	.db #0x00
   0AD7 00                 2535 	.db #0x00
   0AD8 00                 2536 	.db #0x00
   0AD9 00                 2537 	.db #0x00
   0ADA 00                 2538 	.db #0x00
   0ADB 37                 2539 	.db #0x37
   0ADC 37                 2540 	.db #0x37
   0ADD 37                 2541 	.db #0x37
   0ADE 37                 2542 	.db #0x37
   0ADF 37                 2543 	.db #0x37
   0AE0 37                 2544 	.db #0x37
   0AE1 37                 2545 	.db #0x37
   0AE2 37                 2546 	.db #0x37
   0AE3 37                 2547 	.db #0x37
   0AE4 37                 2548 	.db #0x37
   0AE5 37                 2549 	.db #0x37
   0AE6 37                 2550 	.db #0x37
   0AE7 37                 2551 	.db #0x37
   0AE8 37                 2552 	.db #0x37
   0AE9 40                 2553 	.db #0x40
   0AEA 40                 2554 	.db #0x40
   0AEB 40                 2555 	.db #0x40
   0AEC 40                 2556 	.db #0x40
   0AED 40                 2557 	.db #0x40
   0AEE 40                 2558 	.db #0x40
   0AEF 40                 2559 	.db #0x40
   0AF0 40                 2560 	.db #0x40
   0AF1 40                 2561 	.db #0x40
   0AF2 40                 2562 	.db #0x40
   0AF3 40                 2563 	.db #0x40
   0AF4 40                 2564 	.db #0x40
   0AF5 00                 2565 	.db 0x00
   0AF6 00                 2566 	.db 0x00
   0AF7 00                 2567 	.db 0x00
   0AF8 00                 2568 	.db 0x00
   0AF9 00                 2569 	.db 0x00
   0AFA 00                 2570 	.db 0x00
   0AFB                    2571 _font_w:
   0AFB 07                 2572 	.db #0x07
   0AFC 07                 2573 	.db #0x07
   0AFD 07                 2574 	.db #0x07
   0AFE 07                 2575 	.db #0x07
   0AFF 07                 2576 	.db #0x07
   0B00 07                 2577 	.db #0x07
   0B01 07                 2578 	.db #0x07
   0B02 07                 2579 	.db #0x07
   0B03 04                 2580 	.db #0x04
   0B04 07                 2581 	.db #0x07
   0B05 07                 2582 	.db #0x07
   0B06 07                 2583 	.db #0x07
   0B07 09                 2584 	.db #0x09
   0B08 08                 2585 	.db #0x08
   0B09 07                 2586 	.db #0x07
   0B0A 07                 2587 	.db #0x07
   0B0B 08                 2588 	.db #0x08
   0B0C 07                 2589 	.db #0x07
   0B0D 07                 2590 	.db #0x07
   0B0E 08                 2591 	.db #0x08
   0B0F 07                 2592 	.db #0x07
   0B10 07                 2593 	.db #0x07
   0B11 09                 2594 	.db #0x09
   0B12 07                 2595 	.db #0x07
   0B13 08                 2596 	.db #0x08
   0B14 07                 2597 	.db #0x07
   0B15 00                 2598 	.db #0x00
   0B16 00                 2599 	.db #0x00
   0B17 00                 2600 	.db #0x00
   0B18 00                 2601 	.db #0x00
   0B19 00                 2602 	.db #0x00
   0B1A 00                 2603 	.db #0x00
   0B1B 07                 2604 	.db #0x07
   0B1C 07                 2605 	.db #0x07
   0B1D 06                 2606 	.db #0x06
   0B1E 07                 2607 	.db #0x07
   0B1F 07                 2608 	.db #0x07
   0B20 07                 2609 	.db #0x07
   0B21 07                 2610 	.db #0x07
   0B22 07                 2611 	.db #0x07
   0B23 05                 2612 	.db #0x05
   0B24 06                 2613 	.db #0x06
   0B25 07                 2614 	.db #0x07
   0B26 05                 2615 	.db #0x05
   0B27 09                 2616 	.db #0x09
   0B28 07                 2617 	.db #0x07
   0B29 07                 2618 	.db #0x07
   0B2A 07                 2619 	.db #0x07
   0B2B 07                 2620 	.db #0x07
   0B2C 07                 2621 	.db #0x07
   0B2D 07                 2622 	.db #0x07
   0B2E 06                 2623 	.db #0x06
   0B2F 07                 2624 	.db #0x07
   0B30 07                 2625 	.db #0x07
   0B31 09                 2626 	.db #0x09
   0B32 07                 2627 	.db #0x07
   0B33 07                 2628 	.db #0x07
   0B34 07                 2629 	.db #0x07
   0B35 00                 2630 	.db 0x00
   0B36 00                 2631 	.db 0x00
   0B37 00                 2632 	.db 0x00
   0B38 00                 2633 	.db 0x00
   0B39 00                 2634 	.db 0x00
   0B3A 00                 2635 	.db 0x00
                           2636 ;demo.c:394: void do_letter_tall(char cc) {
                           2637 ;	---------------------------------
                           2638 ; Function do_letter_tall
                           2639 ; ---------------------------------
   0B3B                    2640 _do_letter_tall_start::
   0B3B                    2641 _do_letter_tall:
   0B3B DD E5              2642 	push	ix
   0B3D DD 21 00 00        2643 	ld	ix,#0
   0B41 DD 39              2644 	add	ix,sp
   0B43 F5                 2645 	push	af
                           2646 ;demo.c:395: int cidx = cc - 65;
   0B44 DD 4E 04           2647 	ld	c,4 (ix)
   0B47 DD 7E 04           2648 	ld	a,4 (ix)
   0B4A 17                 2649 	rla	
   0B4B 9F                 2650 	sbc	a,a
   0B4C 47                 2651 	ld	b,a
   0B4D 79                 2652 	ld	a,c
   0B4E C6 BF              2653 	add	a,#0xBF
   0B50 DD 77 FE           2654 	ld	-2 (ix),a
   0B53 78                 2655 	ld	a,b
   0B54 CE FF              2656 	adc	a,#0xFF
   0B56 DD 77 FF           2657 	ld	-1 (ix),a
                           2658 ;demo.c:396: cmd.source_x = 127+font_x[cidx];
   0B59 3Er7B              2659 	ld	a,#<_font_x
   0B5B DD 86 FE           2660 	add	a,-2 (ix)
   0B5E 5F                 2661 	ld	e,a
   0B5F 3Es0A              2662 	ld	a,#>_font_x
   0B61 DD 8E FF           2663 	adc	a,-1 (ix)
   0B64 57                 2664 	ld	d,a
   0B65 1A                 2665 	ld	a,(de)
   0B66 5F                 2666 	ld	e,a
   0B67 16 00              2667 	ld	d,#0x00
   0B69 21 7F 00           2668 	ld	hl,#0x007F
   0B6C 19                 2669 	add	hl,de
   0B6D EB                 2670 	ex	de,hl
   0B6E 21rC4s8E           2671 	ld	hl,#_cmd
   0B71 73                 2672 	ld	(hl),e
   0B72 23                 2673 	inc	hl
   0B73 72                 2674 	ld	(hl),d
                           2675 ;demo.c:397: cmd.source_y = 512+font_y[cidx]-1;
   0B74 11rC6s8E           2676 	ld	de,#_cmd + 2
   0B77 3ErBB              2677 	ld	a,#<_font_y
   0B79 DD 86 FE           2678 	add	a,-2 (ix)
   0B7C 4F                 2679 	ld	c,a
   0B7D 3Es0A              2680 	ld	a,#>_font_y
   0B7F DD 8E FF           2681 	adc	a,-1 (ix)
   0B82 47                 2682 	ld	b,a
   0B83 0A                 2683 	ld	a,(bc)
   0B84 4F                 2684 	ld	c,a
   0B85 06 00              2685 	ld	b,#0x00
   0B87 21 FF 01           2686 	ld	hl,#0x01FF
   0B8A 09                 2687 	add	hl,bc
   0B8B 4D                 2688 	ld	c,l
   0B8C 44                 2689 	ld	b,h
   0B8D EB                 2690 	ex	de,hl
   0B8E 71                 2691 	ld	(hl),c
   0B8F 23                 2692 	inc	hl
   0B90 70                 2693 	ld	(hl),b
                           2694 ;demo.c:398: cmd.dest_x = lx;
   0B91 01rC8s8E           2695 	ld	bc,#_cmd + 4
   0B94 21r0Es8F           2696 	ld	hl,#_lx + 0
   0B97 5E                 2697 	ld	e,(hl)
   0B98 16 00              2698 	ld	d,#0x00
   0B9A 69                 2699 	ld	l,c
   0B9B 60                 2700 	ld	h,b
   0B9C 73                 2701 	ld	(hl),e
   0B9D 23                 2702 	inc	hl
   0B9E 72                 2703 	ld	(hl),d
                           2704 ;demo.c:399: cmd.dest_y = ly;
   0B9F 01rCAs8E           2705 	ld	bc,#_cmd + 6
   0BA2 21r0Fs8F           2706 	ld	hl,#_ly + 0
   0BA5 5E                 2707 	ld	e,(hl)
   0BA6 16 00              2708 	ld	d,#0x00
   0BA8 69                 2709 	ld	l,c
   0BA9 60                 2710 	ld	h,b
   0BAA 73                 2711 	ld	(hl),e
   0BAB 23                 2712 	inc	hl
   0BAC 72                 2713 	ld	(hl),d
                           2714 ;demo.c:400: cmd.size_x = font_w[cidx];
   0BAD 01rCCs8E           2715 	ld	bc,#_cmd + 8
   0BB0 3ErFB              2716 	ld	a,#<_font_w
   0BB2 DD 86 FE           2717 	add	a,-2 (ix)
   0BB5 5F                 2718 	ld	e,a
   0BB6 3Es0A              2719 	ld	a,#>_font_w
   0BB8 DD 8E FF           2720 	adc	a,-1 (ix)
   0BBB 57                 2721 	ld	d,a
   0BBC 1A                 2722 	ld	a,(de)
   0BBD 5F                 2723 	ld	e,a
   0BBE 16 00              2724 	ld	d,#0x00
   0BC0 69                 2725 	ld	l,c
   0BC1 60                 2726 	ld	h,b
   0BC2 73                 2727 	ld	(hl),e
   0BC3 23                 2728 	inc	hl
   0BC4 72                 2729 	ld	(hl),d
                           2730 ;demo.c:401: cmd.size_y = 10;
   0BC5 21rCEs8E           2731 	ld	hl, #_cmd + 10
   0BC8 36 0A              2732 	ld	(hl),#0x0A
   0BCA 23                 2733 	inc	hl
   0BCB 36 00              2734 	ld	(hl),#0x00
                           2735 ;demo.c:402: cmd.argument = 0x00;
   0BCD 3E 00              2736 	ld	a,#0x00
   0BCF 32rD1s8E           2737 	ld	(#_cmd + 13),a
                           2738 ;demo.c:403: cmd.command = 0x90; // logical vram to vram
   0BD2 3E 90              2739 	ld	a,#0x90
   0BD4 32rD2s8E           2740 	ld	(#_cmd + 14),a
                           2741 ;demo.c:404: vdp_copier(&cmd);
   0BD7 21rC4s8E           2742 	ld	hl,#_cmd
   0BDA E5                 2743 	push	hl
   0BDB CDr00s00           2744 	call	_vdp_copier
   0BDE F1                 2745 	pop	af
                           2746 ;demo.c:405: lx+=font_w[cidx]-1;
   0BDF 3ErFB              2747 	ld	a,#<_font_w
   0BE1 DD 86 FE           2748 	add	a,-2 (ix)
   0BE4 4F                 2749 	ld	c,a
   0BE5 3Es0A              2750 	ld	a,#>_font_w
   0BE7 DD 8E FF           2751 	adc	a,-1 (ix)
   0BEA 47                 2752 	ld	b,a
   0BEB 0A                 2753 	ld	a,(bc)
   0BEC 4F                 2754 	ld	c,a
   0BED 0D                 2755 	dec	c
   0BEE 21r0Es8F           2756 	ld	hl,#_lx
   0BF1 7E                 2757 	ld	a,(hl)
   0BF2 81                 2758 	add	a,c
   0BF3 77                 2759 	ld	(hl),a
   0BF4 DD F9              2760 	ld	sp,ix
   0BF6 DD E1              2761 	pop	ix
   0BF8 C9                 2762 	ret
   0BF9                    2763 _do_letter_tall_end::
                           2764 ;demo.c:408: void drawstr(char* str, uint8_t x, uint8_t y) {
                           2765 ;	---------------------------------
                           2766 ; Function drawstr
                           2767 ; ---------------------------------
   0BF9                    2768 _drawstr_start::
   0BF9                    2769 _drawstr:
   0BF9 DD E5              2770 	push	ix
   0BFB DD 21 00 00        2771 	ld	ix,#0
   0BFF DD 39              2772 	add	ix,sp
                           2773 ;demo.c:409: char* c = str;
   0C01 DD 4E 04           2774 	ld	c,4 (ix)
   0C04 DD 46 05           2775 	ld	b,5 (ix)
                           2776 ;demo.c:410: lx = x;
   0C07 DD 5E 06           2777 	ld	e,6 (ix)
   0C0A 21r0Es8F           2778 	ld	hl,#_lx + 0
   0C0D 73                 2779 	ld	(hl), e
                           2780 ;demo.c:411: ly = y;
   0C0E DD 7E 07           2781 	ld	a,7 (ix)
   0C11 21r0Fs8F           2782 	ld	hl,#_ly + 0
   0C14 77                 2783 	ld	(hl), a
                           2784 ;demo.c:412: while (*c) {
   0C15                    2785 00107$:
   0C15 0A                 2786 	ld	a,(bc)
   0C16 57                 2787 	ld	d,a
   0C17 B7                 2788 	or	a,a
   0C18 28 42              2789 	jr	Z,00110$
                           2790 ;demo.c:413: char ltr = *c++; 
   0C1A 03                 2791 	inc	bc
                           2792 ;demo.c:414: if (ltr == ' ') lx+=4;
   0C1B 7A                 2793 	ld	a,d
   0C1C D6 20              2794 	sub	a,#0x20
   0C1E 20 1E              2795 	jr	NZ,00105$
   0C20 FD 21r0Es8F        2796 	ld	iy,#_lx
   0C24 FD 34 00           2797 	inc	0 (iy)
   0C27 FD 21r0Es8F        2798 	ld	iy,#_lx
   0C2B FD 34 00           2799 	inc	0 (iy)
   0C2E FD 21r0Es8F        2800 	ld	iy,#_lx
   0C32 FD 34 00           2801 	inc	0 (iy)
   0C35 FD 21r0Es8F        2802 	ld	iy,#_lx
   0C39 FD 34 00           2803 	inc	0 (iy)
   0C3C 18 D7              2804 	jr	00107$
   0C3E                    2805 00105$:
                           2806 ;demo.c:415: else if (ltr == '_') { ly+=9; lx = x; }
   0C3E 7A                 2807 	ld	a,d
   0C3F D6 5F              2808 	sub	a,#0x5F
   0C41 20 0D              2809 	jr	NZ,00102$
   0C43 21r0Fs8F           2810 	ld	hl,#_ly
   0C46 7E                 2811 	ld	a,(hl)
   0C47 C6 09              2812 	add	a,#0x09
   0C49 77                 2813 	ld	(hl),a
   0C4A 21r0Es8F           2814 	ld	hl,#_lx + 0
   0C4D 73                 2815 	ld	(hl), e
   0C4E 18 C5              2816 	jr	00107$
   0C50                    2817 00102$:
                           2818 ;demo.c:416: else do_letter(ltr);
   0C50 C5                 2819 	push	bc
   0C51 D5                 2820 	push	de
   0C52 D5                 2821 	push	de
   0C53 33                 2822 	inc	sp
   0C54 CDrBDs09           2823 	call	_do_letter
   0C57 33                 2824 	inc	sp
   0C58 D1                 2825 	pop	de
   0C59 C1                 2826 	pop	bc
   0C5A 18 B9              2827 	jr	00107$
   0C5C                    2828 00110$:
   0C5C DD E1              2829 	pop	ix
   0C5E C9                 2830 	ret
   0C5F                    2831 _drawstr_end::
                           2832 ;demo.c:420: void drawsine(char* str, uint8_t x, uint8_t y) {
                           2833 ;	---------------------------------
                           2834 ; Function drawsine
                           2835 ; ---------------------------------
   0C5F                    2836 _drawsine_start::
   0C5F                    2837 _drawsine:
   0C5F DD E5              2838 	push	ix
   0C61 DD 21 00 00        2839 	ld	ix,#0
   0C65 DD 39              2840 	add	ix,sp
   0C67 3B                 2841 	dec	sp
                           2842 ;demo.c:421: char* c = str;
   0C68 DD 4E 04           2843 	ld	c,4 (ix)
   0C6B DD 46 05           2844 	ld	b,5 (ix)
                           2845 ;demo.c:422: lx = x;
   0C6E DD 7E 06           2846 	ld	a,6 (ix)
   0C71 21r0Es8F           2847 	ld	hl,#_lx + 0
   0C74 77                 2848 	ld	(hl), a
                           2849 ;demo.c:424: while (*c) {
   0C75                    2850 00104$:
   0C75 0A                 2851 	ld	a,(bc)
   0C76 5F                 2852 	ld	e,a
   0C77 B7                 2853 	or	a,a
   0C78 CArECs0C           2854 	jp	Z,00107$
                           2855 ;demo.c:425: char ltr = *c++; 
   0C7B 03                 2856 	inc	bc
   0C7C DD 73 FF           2857 	ld	-1 (ix),e
                           2858 ;demo.c:426: ly = y+(sintabx[(lx+vbicount>>1) & 255]>>4);
   0C7F 21r0Es8F           2859 	ld	hl,#_lx + 0
   0C82 5E                 2860 	ld	e,(hl)
   0C83 16 00              2861 	ld	d,#0x00
   0C85 21rC0s8E           2862 	ld	hl,#_vbicount
   0C88 7B                 2863 	ld	a,e
   0C89 86                 2864 	add	a,(hl)
   0C8A 5F                 2865 	ld	e,a
   0C8B 7A                 2866 	ld	a,d
   0C8C 23                 2867 	inc	hl
   0C8D 8E                 2868 	adc	a,(hl)
   0C8E 57                 2869 	ld	d,a
   0C8F CB 2A              2870 	sra	d
   0C91 CB 1B              2871 	rr	e
   0C93 16 00              2872 	ld	d,#0x00
   0C95 CB 23              2873 	sla	e
   0C97 CB 12              2874 	rl	d
   0C99 21r2Cs00           2875 	ld	hl,#_sintabx
   0C9C 19                 2876 	add	hl,de
   0C9D 5E                 2877 	ld	e,(hl)
   0C9E 23                 2878 	inc	hl
   0C9F 56                 2879 	ld	d,(hl)
   0CA0 CB 3A              2880 	srl	d
   0CA2 CB 1B              2881 	rr	e
   0CA4 CB 3A              2882 	srl	d
   0CA6 CB 1B              2883 	rr	e
   0CA8 CB 3A              2884 	srl	d
   0CAA CB 1B              2885 	rr	e
   0CAC CB 3A              2886 	srl	d
   0CAE CB 1B              2887 	rr	e
   0CB0 21r0Fs8F           2888 	ld	hl,#_ly
   0CB3 DD 7E 07           2889 	ld	a,7 (ix)
   0CB6 83                 2890 	add	a,e
   0CB7 77                 2891 	ld	(hl),a
                           2892 ;demo.c:427: if (ltr == ' ') lx+=4;
   0CB8 DD 7E FF           2893 	ld	a,-1 (ix)
   0CBB D6 20              2894 	sub	a,#0x20
   0CBD 20 1F              2895 	jr	NZ,00102$
   0CBF FD 21r0Es8F        2896 	ld	iy,#_lx
   0CC3 FD 34 00           2897 	inc	0 (iy)
   0CC6 FD 21r0Es8F        2898 	ld	iy,#_lx
   0CCA FD 34 00           2899 	inc	0 (iy)
   0CCD FD 21r0Es8F        2900 	ld	iy,#_lx
   0CD1 FD 34 00           2901 	inc	0 (iy)
   0CD4 FD 21r0Es8F        2902 	ld	iy,#_lx
   0CD8 FD 34 00           2903 	inc	0 (iy)
   0CDB C3r75s0C           2904 	jp	00104$
   0CDE                    2905 00102$:
                           2906 ;demo.c:428: else do_letter_tall(ltr);
   0CDE C5                 2907 	push	bc
   0CDF DD 7E FF           2908 	ld	a,-1 (ix)
   0CE2 F5                 2909 	push	af
   0CE3 33                 2910 	inc	sp
   0CE4 CDr3Bs0B           2911 	call	_do_letter_tall
   0CE7 33                 2912 	inc	sp
   0CE8 C1                 2913 	pop	bc
   0CE9 C3r75s0C           2914 	jp	00104$
   0CEC                    2915 00107$:
   0CEC DD F9              2916 	ld	sp,ix
   0CEE DD E1              2917 	pop	ix
   0CF0 C9                 2918 	ret
   0CF1                    2919 _drawsine_end::
                           2920 ;demo.c:432: void font() {
                           2921 ;	---------------------------------
                           2922 ; Function font
                           2923 ; ---------------------------------
   0CF1                    2924 _font_start::
   0CF1                    2925 _font:
                           2926 ;demo.c:434: drawstr("DIGITAL SOUNDS SYSTEM__ IN THE HOUSE__  ON MSX__   AT REVISION__    OLDSKOOL_     DEMO_      COMPO",74,60);
   0CF1 21 4A 3C           2927 	ld	hl,#0x3C4A
   0CF4 E5                 2928 	push	hl
   0CF5 21rFFs0C           2929 	ld	hl,#__str_0
   0CF8 E5                 2930 	push	hl
   0CF9 CDrF9s0B           2931 	call	_drawstr
   0CFC F1                 2932 	pop	af
   0CFD F1                 2933 	pop	af
   0CFE C9                 2934 	ret
   0CFF                    2935 _font_end::
   0CFF                    2936 __str_0:
   0CFF 44 49 47 49 54 41  2937 	.ascii "DIGITAL SOUNDS SYSTEM__ IN THE HOUSE__  ON MSX__   AT REVISI"
        4C 20 53 4F 55 4E
        44 53 20 53 59 53
        54 45 4D 5F 5F 20
        49 4E 20 54 48 45
        20 48 4F 55 53 45
        5F 5F 20 20 4F 4E
        20 4D 53 58 5F 5F
        20 20 20 41 54 20
        52 45 56 49 53 49
   0D3B 4F 4E 5F 5F 20 20  2938 	.ascii "ON__    OLDSKOOL_     DEMO_      COMPO"
        20 20 4F 4C 44 53
        4B 4F 4F 4C 5F 20
        20 20 20 20 44 45
        4D 4F 5F 20 20 20
        20 20 20 43 4F 4D
        50 4F
   0D61 00                 2939 	.db 0x00
                           2940 ;demo.c:443: void twister() {
                           2941 ;	---------------------------------
                           2942 ; Function twister
                           2943 ; ---------------------------------
   0D62                    2944 _twister_start::
   0D62                    2945 _twister:
   0D62 DD E5              2946 	push	ix
   0D64 DD 21 00 00        2947 	ld	ix,#0
   0D68 DD 39              2948 	add	ix,sp
   0D6A F5                 2949 	push	af
                           2950 ;demo.c:447: if (twinited == 0) {
   0D6B 3Ar12s8F           2951 	ld	a,(#_twinited+0)
   0D6E FD 21r12s8F        2952 	ld	iy,#_twinited
   0D72 FD B6 01           2953 	or	a,1 (iy)
   0D75 C2rEFs0D           2954 	jp	NZ,00102$
                           2955 ;demo.c:448: cmd.size_x = 256;
   0D78 21rCCs8E           2956 	ld	hl, #_cmd + 8
   0D7B 36 00              2957 	ld	(hl),#0x00
   0D7D 23                 2958 	inc	hl
   0D7E 36 01              2959 	ld	(hl),#0x01
                           2960 ;demo.c:449: cmd.size_y = 1;
   0D80 21rCEs8E           2961 	ld	hl, #_cmd + 10
   0D83 36 01              2962 	ld	(hl),#0x01
   0D85 23                 2963 	inc	hl
   0D86 36 00              2964 	ld	(hl),#0x00
                           2965 ;demo.c:450: cmd.data = 0;
   0D88 3E 00              2966 	ld	a,#0x00
   0D8A 32rD0s8E           2967 	ld	(#_cmd + 12),a
                           2968 ;demo.c:451: cmd.argument = 0x04; // from 70xY to left
   0D8D 3E 04              2969 	ld	a,#0x04
   0D8F 32rD1s8E           2970 	ld	(#_cmd + 13),a
                           2971 ;demo.c:452: cmd.command = 0xe0; // vram to vram, y only
   0D92 01rD2s8E           2972 	ld	bc,#_cmd + 14
   0D95 3E E0              2973 	ld	a,#0xE0
   0D97 02                 2974 	ld	(bc),a
                           2975 ;demo.c:453: cmd.source_x = 256;
   0D98 21rC4s8E           2976 	ld	hl,#_cmd
   0D9B 36 00              2977 	ld	(hl),#0x00
   0D9D 23                 2978 	inc	hl
   0D9E 36 01              2979 	ld	(hl),#0x01
                           2980 ;demo.c:454: cmd.dest_x = 256;
   0DA0 21rC8s8E           2981 	ld	hl, #_cmd + 4
   0DA3 36 00              2982 	ld	(hl),#0x00
   0DA5 23                 2983 	inc	hl
   0DA6 36 01              2984 	ld	(hl),#0x01
                           2985 ;demo.c:456: for (y = 0; y < 212; y+=1) {
   0DA8 01 00 00           2986 	ld	bc,#0x0000
   0DAB                    2987 00103$:
   0DAB 79                 2988 	ld	a,c
   0DAC D6 D4              2989 	sub	a,#0xD4
   0DAE 78                 2990 	ld	a,b
   0DAF DE 00              2991 	sbc	a,#0x00
   0DB1 F2rD2s0D           2992 	jp	P,00106$
                           2993 ;demo.c:457: waitVB();
   0DB4 76                 2994 		halt 
                           2995 ;demo.c:458: cmd.source_y = 0;
   0DB5 11rC6s8E           2996 	ld	de,#_cmd + 2
   0DB8 EB                 2997 	ex	de,hl
   0DB9 36 00              2998 	ld	(hl),#0x00
   0DBB 23                 2999 	inc	hl
   0DBC 36 00              3000 	ld	(hl),#0x00
                           3001 ;demo.c:459: cmd.dest_y = y;
   0DBE 11rCAs8E           3002 	ld	de,#_cmd + 6
   0DC1 EB                 3003 	ex	de,hl
   0DC2 71                 3004 	ld	(hl),c
   0DC3 23                 3005 	inc	hl
   0DC4 70                 3006 	ld	(hl),b
                           3007 ;demo.c:460: vdp_copier(&cmd);
   0DC5 C5                 3008 	push	bc
   0DC6 21rC4s8E           3009 	ld	hl,#_cmd
   0DC9 E5                 3010 	push	hl
   0DCA CDr00s00           3011 	call	_vdp_copier
   0DCD F1                 3012 	pop	af
   0DCE C1                 3013 	pop	bc
                           3014 ;demo.c:456: for (y = 0; y < 212; y+=1) {
   0DCF 03                 3015 	inc	bc
   0DD0 18 D9              3016 	jr	00103$
   0DD2                    3017 00106$:
                           3018 ;demo.c:464: twinited = 1;
   0DD2 21r12s8F           3019 	ld	hl,#_twinited + 0
   0DD5 36 01              3020 	ld	(hl), #0x01
   0DD7 21r13s8F           3021 	ld	hl,#_twinited + 1
   0DDA 36 00              3022 	ld	(hl), #0x00
                           3023 ;demo.c:465: vdp_register(8,0x2); // no sprites
   0DDC 21 08 02           3024 	ld	hl,#0x0208
   0DDF E5                 3025 	push	hl
   0DE0 CDr00s00           3026 	call	_vdp_register
   0DE3 F1                 3027 	pop	af
                           3028 ;demo.c:466: vdp_load_palette(twister_palette);
   0DE4 21r60s8E           3029 	ld	hl,#_twister_palette
   0DE7 E5                 3030 	push	hl
   0DE8 CDr00s00           3031 	call	_vdp_load_palette
   0DEB F1                 3032 	pop	af
                           3033 ;demo.c:467: font();
   0DEC CDrF1s0C           3034 	call	_font
   0DEF                    3035 00102$:
                           3036 ;demo.c:470: cmd.size_x = 70;
   0DEF 21rCCs8E           3037 	ld	hl, #_cmd + 8
   0DF2 36 46              3038 	ld	(hl),#0x46
   0DF4 23                 3039 	inc	hl
   0DF5 36 00              3040 	ld	(hl),#0x00
                           3041 ;demo.c:471: cmd.size_y = 2;
   0DF7 21rCEs8E           3042 	ld	hl, #_cmd + 10
   0DFA 36 02              3043 	ld	(hl),#0x02
   0DFC 23                 3044 	inc	hl
   0DFD 36 00              3045 	ld	(hl),#0x00
                           3046 ;demo.c:472: cmd.data = 0;
   0DFF 3E 00              3047 	ld	a,#0x00
   0E01 32rD0s8E           3048 	ld	(#_cmd + 12),a
                           3049 ;demo.c:473: cmd.argument = 0x04; // from 70xY to left
   0E04 3E 04              3050 	ld	a,#0x04
   0E06 32rD1s8E           3051 	ld	(#_cmd + 13),a
                           3052 ;demo.c:474: cmd.command = 0xe0; // vram to vram, y only
   0E09 01rD2s8E           3053 	ld	bc,#_cmd + 14
   0E0C 3E E0              3054 	ld	a,#0xE0
   0E0E 02                 3055 	ld	(bc),a
                           3056 ;demo.c:475: cmd.source_x = 70;
   0E0F 21rC4s8E           3057 	ld	hl,#_cmd
   0E12 36 46              3058 	ld	(hl),#0x46
   0E14 23                 3059 	inc	hl
   0E15 36 00              3060 	ld	(hl),#0x00
                           3061 ;demo.c:476: cmd.dest_x = 70;
   0E17 21rC8s8E           3062 	ld	hl, #_cmd + 4
   0E1A 36 46              3063 	ld	(hl),#0x46
   0E1C 23                 3064 	inc	hl
   0E1D 36 00              3065 	ld	(hl),#0x00
                           3066 ;demo.c:478: for (y = 0; y < 212; y+=2) {
   0E1F DD 36 FE 00        3067 	ld	-2 (ix),#0x00
   0E23 DD 36 FF 00        3068 	ld	-1 (ix),#0x00
   0E27                    3069 00107$:
   0E27 DD 7E FE           3070 	ld	a,-2 (ix)
   0E2A D6 D4              3071 	sub	a,#0xD4
   0E2C DD 7E FF           3072 	ld	a,-1 (ix)
   0E2F DE 00              3073 	sbc	a,#0x00
   0E31 F2r8As0E           3074 	jp	P,00110$
                           3075 ;demo.c:479: cmd.source_y = ((sintab[(ff+(y>>1)) & 255])>>1)+512+64;
   0E34 11rC6s8E           3076 	ld	de,#_cmd + 2
   0E37 DD 4E FE           3077 	ld	c,-2 (ix)
   0E3A DD 46 FF           3078 	ld	b,-1 (ix)
   0E3D CB 28              3079 	sra	b
   0E3F CB 19              3080 	rr	c
   0E41 3Ar10s8F           3081 	ld	a,(#_ff+0)
   0E44 81                 3082 	add	a,c
   0E45 4F                 3083 	ld	c,a
   0E46 3Ar11s8F           3084 	ld	a,(#_ff+1)
   0E49 88                 3085 	adc	a,b
   0E4A 06 00              3086 	ld	b,#0x00
   0E4C 21r00s00           3087 	ld	hl,#_sintab
   0E4F 09                 3088 	add	hl,bc
   0E50 7E                 3089 	ld	a,(hl)
   0E51 4F                 3090 	ld	c,a
   0E52 CB 29              3091 	sra	c
   0E54 79                 3092 	ld	a,c
   0E55 17                 3093 	rla	
   0E56 9F                 3094 	sbc	a,a
   0E57 47                 3095 	ld	b,a
   0E58 21 40 02           3096 	ld	hl,#0x0240
   0E5B 09                 3097 	add	hl,bc
   0E5C 4D                 3098 	ld	c,l
   0E5D 44                 3099 	ld	b,h
   0E5E 6B                 3100 	ld	l,e
   0E5F 62                 3101 	ld	h,d
   0E60 71                 3102 	ld	(hl),c
   0E61 23                 3103 	inc	hl
   0E62 70                 3104 	ld	(hl),b
                           3105 ;demo.c:480: cmd.dest_y = y;
   0E63 21rCAs8E           3106 	ld	hl, #_cmd + 6
   0E66 DD 7E FE           3107 	ld	a,-2 (ix)
   0E69 77                 3108 	ld	(hl),a
   0E6A 23                 3109 	inc	hl
   0E6B DD 7E FF           3110 	ld	a,-1 (ix)
   0E6E 77                 3111 	ld	(hl),a
                           3112 ;demo.c:481: vdp_copier(&cmd);
   0E6F 21rC4s8E           3113 	ld	hl,#_cmd
   0E72 E5                 3114 	push	hl
   0E73 CDr00s00           3115 	call	_vdp_copier
   0E76 F1                 3116 	pop	af
                           3117 ;demo.c:478: for (y = 0; y < 212; y+=2) {
   0E77 DD 7E FE           3118 	ld	a,-2 (ix)
   0E7A C6 02              3119 	add	a,#0x02
   0E7C DD 77 FE           3120 	ld	-2 (ix),a
   0E7F DD 7E FF           3121 	ld	a,-1 (ix)
   0E82 CE 00              3122 	adc	a,#0x00
   0E84 DD 77 FF           3123 	ld	-1 (ix),a
   0E87 C3r27s0E           3124 	jp	00107$
   0E8A                    3125 00110$:
                           3126 ;demo.c:485: msx2_palette(4,ff>>2,ff>>3,ff>>2);
   0E8A 21r10s8F           3127 	ld	hl,#_ff + 0
   0E8D 4E                 3128 	ld	c,(hl)
   0E8E 21r11s8F           3129 	ld	hl,#_ff + 1
   0E91 46                 3130 	ld	b,(hl)
   0E92 CB 28              3131 	sra	b
   0E94 CB 19              3132 	rr	c
   0E96 CB 28              3133 	sra	b
   0E98 CB 19              3134 	rr	c
   0E9A 21r10s8F           3135 	ld	hl,#_ff + 0
   0E9D 5E                 3136 	ld	e,(hl)
   0E9E 21r11s8F           3137 	ld	hl,#_ff + 1
   0EA1 56                 3138 	ld	d,(hl)
   0EA2 CB 2A              3139 	sra	d
   0EA4 CB 1B              3140 	rr	e
   0EA6 CB 2A              3141 	sra	d
   0EA8 CB 1B              3142 	rr	e
   0EAA CB 2A              3143 	sra	d
   0EAC CB 1B              3144 	rr	e
   0EAE 43                 3145 	ld	b,e
   0EAF 79                 3146 	ld	a,c
   0EB0 F5                 3147 	push	af
   0EB1 33                 3148 	inc	sp
   0EB2 C5                 3149 	push	bc
   0EB3 33                 3150 	inc	sp
   0EB4 41                 3151 	ld	b,c
   0EB5 0E 04              3152 	ld	c,#0x04
   0EB7 C5                 3153 	push	bc
   0EB8 CDr00s00           3154 	call	_msx2_palette
   0EBB F1                 3155 	pop	af
   0EBC F1                 3156 	pop	af
                           3157 ;demo.c:487: ff+=4;
   0EBD 21r10s8F           3158 	ld	hl,#_ff
   0EC0 7E                 3159 	ld	a,(hl)
   0EC1 C6 04              3160 	add	a,#0x04
   0EC3 23                 3161 	inc	hl
   0EC4 2B                 3162 	dec	hl
   0EC5 C5                 3163 	push	bc
   0EC6 4F                 3164 	ld	c, a
   0EC7 23                 3165 	inc	hl
   0EC8 7E                 3166 	ld	a, (hl)
   0EC9 47                 3167 	ld	b, a
   0ECA 79                 3168 	ld	a, c
   0ECB 2B                 3169 	dec	hl
   0ECC 77                 3170 	ld	(hl), a
   0ECD 78                 3171 	ld	a, b
   0ECE C1                 3172 	pop	bc
   0ECF CE 00              3173 	adc	a,#0x00
   0ED1 23                 3174 	inc	hl
   0ED2 77                 3175 	ld	(hl),a
   0ED3 DD F9              3176 	ld	sp,ix
   0ED5 DD E1              3177 	pop	ix
   0ED7 C9                 3178 	ret
   0ED8                    3179 _twister_end::
                           3180 ;demo.c:497: void bulbs() {
                           3181 ;	---------------------------------
                           3182 ; Function bulbs
                           3183 ; ---------------------------------
   0ED8                    3184 _bulbs_start::
   0ED8                    3185 _bulbs:
   0ED8 DD E5              3186 	push	ix
   0EDA DD 21 00 00        3187 	ld	ix,#0
   0EDE DD 39              3188 	add	ix,sp
   0EE0 F5                 3189 	push	af
   0EE1 F5                 3190 	push	af
                           3191 ;demo.c:501: ender+=enderdir;
   0EE2 21r1Cs8F           3192 	ld	hl,#_enderdir
   0EE5 D5                 3193 	push	de
   0EE6 FD 21r1As8F        3194 	ld	iy,#_ender
   0EEA FD E5              3195 	push	iy
   0EEC D1                 3196 	pop	de
   0EED 1A                 3197 	ld	a,(de)
   0EEE 86                 3198 	add	a,(hl)
   0EEF 13                 3199 	inc	de
   0EF0 1B                 3200 	dec	de
   0EF1 C5                 3201 	push	bc
   0EF2 4F                 3202 	ld	c, a
   0EF3 13                 3203 	inc	de
   0EF4 1A                 3204 	ld	a, (de)
   0EF5 47                 3205 	ld	b, a
   0EF6 79                 3206 	ld	a, c
   0EF7 1B                 3207 	dec	de
   0EF8 12                 3208 	ld	(de), a
   0EF9 78                 3209 	ld	a, b
   0EFA C1                 3210 	pop	bc
   0EFB 23                 3211 	inc	hl
   0EFC 8E                 3212 	adc	a,(hl)
   0EFD 13                 3213 	inc	de
   0EFE 12                 3214 	ld	(de),a
   0EFF D1                 3215 	pop	de
                           3216 ;demo.c:502: if (ender < 2) enderdir = -enderdir;
   0F00 3Ar1As8F           3217 	ld	a,(#_ender+0)
   0F03 D6 02              3218 	sub	a,#0x02
   0F05 3Ar1Bs8F           3219 	ld	a,(#_ender+1)
   0F08 DE 00              3220 	sbc	a,#0x00
   0F0A F2r2Es0F           3221 	jp	P,00102$
   0F0D AF                 3222 	xor	a,a
   0F0E FD 21r1Cs8F        3223 	ld	iy,#_enderdir
   0F12 3E 00              3224 	ld	a,#0x00
   0F14 FD 9E 00           3225 	sbc	a,0 (iy)
   0F17 FD 21r1Cs8F        3226 	ld	iy,#_enderdir
   0F1B FD 77 00           3227 	ld	0 (iy),a
   0F1E FD 21r1Cs8F        3228 	ld	iy,#_enderdir
   0F22 3E 00              3229 	ld	a,#0x00
   0F24 FD 9E 01           3230 	sbc	a,1 (iy)
   0F27 FD 21r1Cs8F        3231 	ld	iy,#_enderdir
   0F2B FD 77 01           3232 	ld	1 (iy),a
   0F2E                    3233 00102$:
                           3234 ;demo.c:503: if (ender >= 212) enderdir = -enderdir;
   0F2E 3Ar1As8F           3235 	ld	a,(#_ender+0)
   0F31 D6 D4              3236 	sub	a,#0xD4
   0F33 3Ar1Bs8F           3237 	ld	a,(#_ender+1)
   0F36 DE 00              3238 	sbc	a,#0x00
   0F38 FAr5Cs0F           3239 	jp	M,00104$
   0F3B AF                 3240 	xor	a,a
   0F3C FD 21r1Cs8F        3241 	ld	iy,#_enderdir
   0F40 3E 00              3242 	ld	a,#0x00
   0F42 FD 9E 00           3243 	sbc	a,0 (iy)
   0F45 FD 21r1Cs8F        3244 	ld	iy,#_enderdir
   0F49 FD 77 00           3245 	ld	0 (iy),a
   0F4C FD 21r1Cs8F        3246 	ld	iy,#_enderdir
   0F50 3E 00              3247 	ld	a,#0x00
   0F52 FD 9E 01           3248 	sbc	a,1 (iy)
   0F55 FD 21r1Cs8F        3249 	ld	iy,#_enderdir
   0F59 FD 77 01           3250 	ld	1 (iy),a
   0F5C                    3251 00104$:
                           3252 ;demo.c:505: enderend = ender + 92;
   0F5C 3Ar1As8F           3253 	ld	a,(#_ender+0)
   0F5F C6 5C              3254 	add	a,#0x5C
   0F61 DD 77 FE           3255 	ld	-2 (ix),a
   0F64 3Ar1Bs8F           3256 	ld	a,(#_ender+1)
   0F67 CE 00              3257 	adc	a,#0x00
   0F69 DD 77 FF           3258 	ld	-1 (ix),a
                           3259 ;demo.c:507: if (enderend > 212) enderend = 212;
   0F6C 3E D4              3260 	ld	a,#0xD4
   0F6E DD 96 FE           3261 	sub	a,-2 (ix)
   0F71 3E 00              3262 	ld	a,#0x00
   0F73 DD 9E FF           3263 	sbc	a,-1 (ix)
   0F76 F2r81s0F           3264 	jp	P,00106$
   0F79 DD 36 FE D4        3265 	ld	-2 (ix),#0xD4
   0F7D DD 36 FF 00        3266 	ld	-1 (ix),#0x00
   0F81                    3267 00106$:
                           3268 ;demo.c:509: if(bulbflipper == 1) {
   0F81 3Ar14s8F           3269 	ld	a,(#_bulbflipper+0)
   0F84 D6 01              3270 	sub	a,#0x01
   0F86 20 06              3271 	jr	NZ,00130$
   0F88 3Ar15s8F           3272 	ld	a,(#_bulbflipper+1)
   0F8B B7                 3273 	or	a,a
   0F8C 28 03              3274 	jr	Z,00131$
   0F8E                    3275 00130$:
   0F8E C3r38s10           3276 	jp	00108$
   0F91                    3277 00131$:
                           3278 ;demo.c:510: cmd.size_x = 72;
   0F91 11rCCs8E           3279 	ld	de,#_cmd + 8
   0F94 EB                 3280 	ex	de,hl
   0F95 36 48              3281 	ld	(hl),#0x48
   0F97 23                 3282 	inc	hl
   0F98 36 00              3283 	ld	(hl),#0x00
                           3284 ;demo.c:511: cmd.size_y = 16;
   0F9A 11rCEs8E           3285 	ld	de,#_cmd + 10
   0F9D EB                 3286 	ex	de,hl
   0F9E 36 10              3287 	ld	(hl),#0x10
   0FA0 23                 3288 	inc	hl
   0FA1 36 00              3289 	ld	(hl),#0x00
                           3290 ;demo.c:512: cmd.data = 0;
   0FA3 11rD0s8E           3291 	ld	de,#_cmd + 12
   0FA6 3E 00              3292 	ld	a,#0x00
   0FA8 12                 3293 	ld	(de),a
                           3294 ;demo.c:513: cmd.argument = 0x04; // from 72xY to left
   0FA9 11rD1s8E           3295 	ld	de,#_cmd + 13
   0FAC 3E 04              3296 	ld	a,#0x04
   0FAE 12                 3297 	ld	(de),a
                           3298 ;demo.c:514: cmd.command = 0xe0; // vram to vram, y only
   0FAF 11rD2s8E           3299 	ld	de,#_cmd + 14
   0FB2 3E E0              3300 	ld	a,#0xE0
   0FB4 12                 3301 	ld	(de),a
                           3302 ;demo.c:515: cmd.source_x = 72;
   0FB5 21rC4s8E           3303 	ld	hl,#_cmd
   0FB8 36 48              3304 	ld	(hl),#0x48
   0FBA 23                 3305 	inc	hl
   0FBB 36 00              3306 	ld	(hl),#0x00
                           3307 ;demo.c:516: cmd.dest_x = 72;
   0FBD 11rC8s8E           3308 	ld	de,#_cmd + 4
   0FC0 6B                 3309 	ld	l,e
   0FC1 62                 3310 	ld	h,d
   0FC2 36 48              3311 	ld	(hl),#0x48
   0FC4 23                 3312 	inc	hl
   0FC5 36 00              3313 	ld	(hl),#0x00
                           3314 ;demo.c:518: for (y = ender; y < enderend; y+=16) {
   0FC7 ED 4Br1As8F        3315 	ld	bc,(_ender)
   0FCB 59                 3316 	ld	e,c
   0FCC 50                 3317 	ld	d,b
   0FCD                    3318 00110$:
   0FCD 7B                 3319 	ld	a,e
   0FCE DD 96 FE           3320 	sub	a,-2 (ix)
   0FD1 7A                 3321 	ld	a,d
   0FD2 DD 9E FF           3322 	sbc	a,-1 (ix)
   0FD5 F2r1Fs10           3323 	jp	P,00113$
                           3324 ;demo.c:519: cmd.source_y = ((sintab[(ff1+(y)) & 255])>>1)+320;
   0FD8 21rC6s8E           3325 	ld	hl,#_cmd + 2
   0FDB DD 75 FC           3326 	ld	-4 (ix),l
   0FDE DD 74 FD           3327 	ld	-3 (ix),h
   0FE1 3Ar16s8F           3328 	ld	a,(#_ff1+0)
   0FE4 83                 3329 	add	a,e
   0FE5 4F                 3330 	ld	c,a
   0FE6 3Ar17s8F           3331 	ld	a,(#_ff1+1)
   0FE9 8A                 3332 	adc	a,d
   0FEA 06 00              3333 	ld	b,#0x00
   0FEC 21r00s00           3334 	ld	hl,#_sintab
   0FEF 09                 3335 	add	hl,bc
   0FF0 7E                 3336 	ld	a,(hl)
   0FF1 4F                 3337 	ld	c,a
   0FF2 CB 29              3338 	sra	c
   0FF4 79                 3339 	ld	a,c
   0FF5 17                 3340 	rla	
   0FF6 9F                 3341 	sbc	a,a
   0FF7 47                 3342 	ld	b,a
   0FF8 21 40 01           3343 	ld	hl,#0x0140
   0FFB 09                 3344 	add	hl,bc
   0FFC 4D                 3345 	ld	c,l
   0FFD 44                 3346 	ld	b,h
   0FFE DD 6E FC           3347 	ld	l,-4 (ix)
   1001 DD 66 FD           3348 	ld	h,-3 (ix)
   1004 71                 3349 	ld	(hl),c
   1005 23                 3350 	inc	hl
   1006 70                 3351 	ld	(hl),b
                           3352 ;demo.c:520: cmd.dest_y = y;
   1007 21rCAs8E           3353 	ld	hl, #_cmd + 6
   100A 73                 3354 	ld	(hl),e
   100B 23                 3355 	inc	hl
   100C 72                 3356 	ld	(hl),d
                           3357 ;demo.c:521: vdp_copier(&cmd);
   100D D5                 3358 	push	de
   100E 21rC4s8E           3359 	ld	hl,#_cmd
   1011 E5                 3360 	push	hl
   1012 CDr00s00           3361 	call	_vdp_copier
   1015 F1                 3362 	pop	af
   1016 D1                 3363 	pop	de
                           3364 ;demo.c:518: for (y = ender; y < enderend; y+=16) {
   1017 21 10 00           3365 	ld	hl,#0x0010
   101A 19                 3366 	add	hl,de
   101B EB                 3367 	ex	de,hl
   101C C3rCDs0F           3368 	jp	00110$
   101F                    3369 00113$:
                           3370 ;demo.c:523: ff1+=4;
   101F 21r16s8F           3371 	ld	hl,#_ff1
   1022 7E                 3372 	ld	a,(hl)
   1023 C6 04              3373 	add	a,#0x04
   1025 23                 3374 	inc	hl
   1026 2B                 3375 	dec	hl
   1027 C5                 3376 	push	bc
   1028 4F                 3377 	ld	c, a
   1029 23                 3378 	inc	hl
   102A 7E                 3379 	ld	a, (hl)
   102B 47                 3380 	ld	b, a
   102C 79                 3381 	ld	a, c
   102D 2B                 3382 	dec	hl
   102E 77                 3383 	ld	(hl), a
   102F 78                 3384 	ld	a, b
   1030 C1                 3385 	pop	bc
   1031 CE 00              3386 	adc	a,#0x00
   1033 23                 3387 	inc	hl
   1034 77                 3388 	ld	(hl),a
   1035 C3rD2s10           3389 	jp	00109$
   1038                    3390 00108$:
                           3391 ;demo.c:527: cmd.size_x = 72;
   1038 21rCCs8E           3392 	ld	hl, #_cmd + 8
   103B 36 48              3393 	ld	(hl),#0x48
   103D 23                 3394 	inc	hl
   103E 36 00              3395 	ld	(hl),#0x00
                           3396 ;demo.c:528: cmd.size_y = 16;
   1040 21rCEs8E           3397 	ld	hl, #_cmd + 10
   1043 36 10              3398 	ld	(hl),#0x10
   1045 23                 3399 	inc	hl
   1046 36 00              3400 	ld	(hl),#0x00
                           3401 ;demo.c:529: cmd.data = 0;
                           3402 ;demo.c:530: cmd.argument = 0x00; // from 182xY to right
   1048 3E 00              3403 	ld	a,#0x00
   104A 32rD0s8E           3404 	ld	(#_cmd + 12),a
   104D 32rD1s8E           3405 	ld	(#_cmd + 13),a
                           3406 ;demo.c:531: cmd.command = 0xe0; // vram to vram, y only
   1050 01rD2s8E           3407 	ld	bc,#_cmd + 14
   1053 3E E0              3408 	ld	a,#0xE0
   1055 02                 3409 	ld	(bc),a
                           3410 ;demo.c:532: cmd.source_x = 182;
   1056 21rC4s8E           3411 	ld	hl,#_cmd
   1059 36 B6              3412 	ld	(hl),#0xB6
   105B 23                 3413 	inc	hl
   105C 36 00              3414 	ld	(hl),#0x00
                           3415 ;demo.c:533: cmd.dest_x = 182;
   105E 21rC8s8E           3416 	ld	hl, #_cmd + 4
   1061 36 B6              3417 	ld	(hl),#0xB6
   1063 23                 3418 	inc	hl
   1064 36 00              3419 	ld	(hl),#0x00
                           3420 ;demo.c:535: for (y = ender; y < enderend; y+=16) {
   1066 ED 4Br1As8F        3421 	ld	bc,(_ender)
   106A                    3422 00114$:
   106A 79                 3423 	ld	a,c
   106B DD 96 FE           3424 	sub	a,-2 (ix)
   106E 78                 3425 	ld	a,b
   106F DD 9E FF           3426 	sbc	a,-1 (ix)
   1072 F2rBCs10           3427 	jp	P,00117$
                           3428 ;demo.c:536: cmd.source_y = ((sintab[(ff2+(y)) & 255])>>1)+320;
   1075 21rC6s8E           3429 	ld	hl,#_cmd + 2
   1078 DD 75 FC           3430 	ld	-4 (ix),l
   107B DD 74 FD           3431 	ld	-3 (ix),h
   107E 3Ar18s8F           3432 	ld	a,(#_ff2+0)
   1081 81                 3433 	add	a,c
   1082 5F                 3434 	ld	e,a
   1083 3Ar19s8F           3435 	ld	a,(#_ff2+1)
   1086 88                 3436 	adc	a,b
   1087 16 00              3437 	ld	d,#0x00
   1089 21r00s00           3438 	ld	hl,#_sintab
   108C 19                 3439 	add	hl,de
   108D 5E                 3440 	ld	e,(hl)
   108E CB 2B              3441 	sra	e
   1090 7B                 3442 	ld	a,e
   1091 17                 3443 	rla	
   1092 9F                 3444 	sbc	a,a
   1093 57                 3445 	ld	d,a
   1094 21 40 01           3446 	ld	hl,#0x0140
   1097 19                 3447 	add	hl,de
   1098 EB                 3448 	ex	de,hl
   1099 DD 6E FC           3449 	ld	l,-4 (ix)
   109C DD 66 FD           3450 	ld	h,-3 (ix)
   109F 73                 3451 	ld	(hl),e
   10A0 23                 3452 	inc	hl
   10A1 72                 3453 	ld	(hl),d
                           3454 ;demo.c:537: cmd.dest_y = y;
   10A2 11rCAs8E           3455 	ld	de,#_cmd + 6
   10A5 EB                 3456 	ex	de,hl
   10A6 71                 3457 	ld	(hl),c
   10A7 23                 3458 	inc	hl
   10A8 70                 3459 	ld	(hl),b
                           3460 ;demo.c:538: vdp_copier(&cmd);
   10A9 C5                 3461 	push	bc
   10AA 21rC4s8E           3462 	ld	hl,#_cmd
   10AD E5                 3463 	push	hl
   10AE CDr00s00           3464 	call	_vdp_copier
   10B1 F1                 3465 	pop	af
   10B2 C1                 3466 	pop	bc
                           3467 ;demo.c:535: for (y = ender; y < enderend; y+=16) {
   10B3 21 10 00           3468 	ld	hl,#0x0010
   10B6 09                 3469 	add	hl,bc
   10B7 4D                 3470 	ld	c,l
   10B8 44                 3471 	ld	b,h
   10B9 C3r6As10           3472 	jp	00114$
   10BC                    3473 00117$:
                           3474 ;demo.c:540: ff2+=4;
   10BC 21r18s8F           3475 	ld	hl,#_ff2
   10BF 7E                 3476 	ld	a,(hl)
   10C0 C6 04              3477 	add	a,#0x04
   10C2 23                 3478 	inc	hl
   10C3 2B                 3479 	dec	hl
   10C4 C5                 3480 	push	bc
   10C5 4F                 3481 	ld	c, a
   10C6 23                 3482 	inc	hl
   10C7 7E                 3483 	ld	a, (hl)
   10C8 47                 3484 	ld	b, a
   10C9 79                 3485 	ld	a, c
   10CA 2B                 3486 	dec	hl
   10CB 77                 3487 	ld	(hl), a
   10CC 78                 3488 	ld	a, b
   10CD C1                 3489 	pop	bc
   10CE CE 00              3490 	adc	a,#0x00
   10D0 23                 3491 	inc	hl
   10D1 77                 3492 	ld	(hl),a
   10D2                    3493 00109$:
                           3494 ;demo.c:543: bulbflipper = -bulbflipper;
   10D2 AF                 3495 	xor	a,a
   10D3 FD 21r14s8F        3496 	ld	iy,#_bulbflipper
   10D7 3E 00              3497 	ld	a,#0x00
   10D9 FD 9E 00           3498 	sbc	a,0 (iy)
   10DC 21r14s8F           3499 	ld	hl,#_bulbflipper + 0
   10DF 77                 3500 	ld	(hl), a
   10E0 FD 21r14s8F        3501 	ld	iy,#_bulbflipper
   10E4 3E 00              3502 	ld	a,#0x00
   10E6 FD 9E 01           3503 	sbc	a,1 (iy)
   10E9 21r15s8F           3504 	ld	hl,#_bulbflipper + 1
   10EC 77                 3505 	ld	(hl), a
   10ED DD F9              3506 	ld	sp,ix
   10EF DD E1              3507 	pop	ix
   10F1 C9                 3508 	ret
   10F2                    3509 _bulbs_end::
                           3510 ;demo.c:557: void animplay() {
                           3511 ;	---------------------------------
                           3512 ; Function animplay
                           3513 ; ---------------------------------
   10F2                    3514 _animplay_start::
   10F2                    3515 _animplay:
   10F2 DD E5              3516 	push	ix
   10F4 DD 21 00 00        3517 	ld	ix,#0
   10F8 DD 39              3518 	add	ix,sp
   10FA F5                 3519 	push	af
   10FB 3B                 3520 	dec	sp
                           3521 ;demo.c:562: if (anim_init == 0) {
   10FC 3Ar26s8F           3522 	ld	a,(#_anim_init+0)
   10FF 21r27s8F           3523 	ld	hl,#_anim_init + 1
   1102 B6                 3524 	or	a,(hl)
   1103 C2r5Fs11           3525 	jp	NZ,00117$
                           3526 ;demo.c:564: vdp_register(0,0);
   1106 21 00 00           3527 	ld	hl,#0x0000
   1109 E5                 3528 	push	hl
   110A CDr00s00           3529 	call	_vdp_register
   110D F1                 3530 	pop	af
                           3531 ;demo.c:565: vdp_register(1,0);
   110E 21 01 00           3532 	ld	hl,#0x0001
   1111 E5                 3533 	push	hl
   1112 CDr00s00           3534 	call	_vdp_register
   1115 F1                 3535 	pop	af
                           3536 ;demo.c:567: bitbuster(tf1,0x8000,VRAM_0);
   1116 3E 01              3537 	ld	a,#0x01
   1118 F5                 3538 	push	af
   1119 33                 3539 	inc	sp
   111A 21 00 80           3540 	ld	hl,#0x8000
   111D E5                 3541 	push	hl
   111E 21rE0s2F           3542 	ld	hl,#_tf1
   1121 E5                 3543 	push	hl
   1122 CDr00s00           3544 	call	_bitbuster
   1125 F1                 3545 	pop	af
   1126 F1                 3546 	pop	af
   1127 33                 3547 	inc	sp
                           3548 ;demo.c:568: bitbuster(tf2,0x0000,VRAM_1);
   1128 3E 00              3549 	ld	a,#0x00
   112A F5                 3550 	push	af
   112B 33                 3551 	inc	sp
   112C 21 00 00           3552 	ld	hl,#0x0000
   112F E5                 3553 	push	hl
   1130 21rC0s5E           3554 	ld	hl,#_tf2
   1133 E5                 3555 	push	hl
   1134 CDr00s00           3556 	call	_bitbuster
   1137 F1                 3557 	pop	af
   1138 F1                 3558 	pop	af
   1139 33                 3559 	inc	sp
                           3560 ;demo.c:570: vdp_set_screen5();
   113A CDr00s00           3561 	call	_vdp_set_screen5
                           3562 ;demo.c:571: vdp_register(1,0x60);
   113D 21 01 60           3563 	ld	hl,#0x6001
   1140 E5                 3564 	push	hl
   1141 CDr00s00           3565 	call	_vdp_register
   1144 F1                 3566 	pop	af
                           3567 ;demo.c:572: vdp_register(9,2); // 192 lines
   1145 21 09 02           3568 	ld	hl,#0x0209
   1148 E5                 3569 	push	hl
   1149 CDr00s00           3570 	call	_vdp_register
   114C F1                 3571 	pop	af
                           3572 ;demo.c:575: anim_init = 1;
   114D 21r26s8F           3573 	ld	hl,#_anim_init + 0
   1150 36 01              3574 	ld	(hl), #0x01
   1152 21r27s8F           3575 	ld	hl,#_anim_init + 1
   1155 36 00              3576 	ld	(hl), #0x00
                           3577 ;demo.c:576: vdp_load_palette(tf_palette);
   1157 21r80s8E           3578 	ld	hl,#_tf_palette
   115A E5                 3579 	push	hl
   115B CDr00s00           3580 	call	_vdp_load_palette
   115E F1                 3581 	pop	af
                           3582 ;demo.c:579: for (y = 0; y < 96; y+=1) {
   115F                    3583 00117$:
   115F DD 36 FF 00        3584 	ld	-1 (ix),#0x00
   1163                    3585 00109$:
   1163 DD 7E FF           3586 	ld	a,-1 (ix)
   1166 D6 60              3587 	sub	a,#0x60
   1168 D2rEAs11           3588 	jp	NC,00112$
                           3589 ;demo.c:580: cmd.source_x = xo;
   116B ED 5Br1Es8F        3590 	ld	de,(_xo)
   116F 21rC4s8E           3591 	ld	hl,#_cmd
   1172 73                 3592 	ld	(hl),e
   1173 23                 3593 	inc	hl
   1174 72                 3594 	ld	(hl),d
                           3595 ;demo.c:581: cmd.source_y = 256+po+yo+(y>>1);
   1175 11rC6s8E           3596 	ld	de,#_cmd + 2
   1178 3Ar22s8F           3597 	ld	a,(#_po+0)
   117B 4F                 3598 	ld	c,a
   117C 3Ar23s8F           3599 	ld	a,(#_po+1)
   117F C6 01              3600 	add	a,#0x01
   1181 47                 3601 	ld	b,a
   1182 21r20s8F           3602 	ld	hl,#_yo
   1185 79                 3603 	ld	a,c
   1186 86                 3604 	add	a,(hl)
   1187 DD 77 FD           3605 	ld	-3 (ix),a
   118A 78                 3606 	ld	a,b
   118B 23                 3607 	inc	hl
   118C 8E                 3608 	adc	a,(hl)
   118D DD 77 FE           3609 	ld	-2 (ix),a
   1190 DD 4E FF           3610 	ld	c,-1 (ix)
   1193 CB 39              3611 	srl	c
   1195 06 00              3612 	ld	b,#0x00
   1197 DD 7E FD           3613 	ld	a,-3 (ix)
   119A 81                 3614 	add	a,c
   119B 4F                 3615 	ld	c,a
   119C DD 7E FE           3616 	ld	a,-2 (ix)
   119F 88                 3617 	adc	a,b
   11A0 47                 3618 	ld	b,a
   11A1 6B                 3619 	ld	l,e
   11A2 62                 3620 	ld	h,d
   11A3 71                 3621 	ld	(hl),c
   11A4 23                 3622 	inc	hl
   11A5 70                 3623 	ld	(hl),b
                           3624 ;demo.c:582: cmd.dest_x = 0;
   11A6 21rC8s8E           3625 	ld	hl, #_cmd + 4
   11A9 36 00              3626 	ld	(hl),#0x00
   11AB 23                 3627 	inc	hl
   11AC 36 00              3628 	ld	(hl),#0x00
                           3629 ;demo.c:583: cmd.dest_y = (y<<1);
   11AE 01rCAs8E           3630 	ld	bc,#_cmd + 6
   11B1 DD 5E FF           3631 	ld	e,-1 (ix)
   11B4 16 00              3632 	ld	d,#0x00
   11B6 CB 23              3633 	sla	e
   11B8 CB 12              3634 	rl	d
   11BA 69                 3635 	ld	l,c
   11BB 60                 3636 	ld	h,b
   11BC 73                 3637 	ld	(hl),e
   11BD 23                 3638 	inc	hl
   11BE 72                 3639 	ld	(hl),d
                           3640 ;demo.c:584: cmd.size_x = 128;
   11BF 21rCCs8E           3641 	ld	hl, #_cmd + 8
   11C2 36 80              3642 	ld	(hl),#0x80
   11C4 23                 3643 	inc	hl
   11C5 36 00              3644 	ld	(hl),#0x00
                           3645 ;demo.c:585: cmd.size_y = 1;
   11C7 21rCEs8E           3646 	ld	hl, #_cmd + 10
   11CA 36 01              3647 	ld	(hl),#0x01
   11CC 23                 3648 	inc	hl
   11CD 36 00              3649 	ld	(hl),#0x00
                           3650 ;demo.c:586: cmd.data = 0;
                           3651 ;demo.c:587: cmd.argument = 0x00;
   11CF 3E 00              3652 	ld	a,#0x00
   11D1 32rD0s8E           3653 	ld	(#_cmd + 12),a
   11D4 32rD1s8E           3654 	ld	(#_cmd + 13),a
                           3655 ;demo.c:588: cmd.command = 0xD0;
   11D7 3E D0              3656 	ld	a,#0xD0
   11D9 32rD2s8E           3657 	ld	(#_cmd + 14),a
                           3658 ;demo.c:589: vdp_copier(&cmd);
   11DC 21rC4s8E           3659 	ld	hl,#_cmd
   11DF E5                 3660 	push	hl
   11E0 CDr00s00           3661 	call	_vdp_copier
   11E3 F1                 3662 	pop	af
                           3663 ;demo.c:579: for (y = 0; y < 96; y+=1) {
   11E4 DD 34 FF           3664 	inc	-1 (ix)
   11E7 C3r63s11           3665 	jp	00109$
   11EA                    3666 00112$:
                           3667 ;demo.c:592: xo+=128;
   11EA 21r1Es8F           3668 	ld	hl,#_xo
   11ED 7E                 3669 	ld	a,(hl)
   11EE C6 80              3670 	add	a,#0x80
   11F0 23                 3671 	inc	hl
   11F1 2B                 3672 	dec	hl
   11F2 C5                 3673 	push	bc
   11F3 4F                 3674 	ld	c, a
   11F4 23                 3675 	inc	hl
   11F5 7E                 3676 	ld	a, (hl)
   11F6 47                 3677 	ld	b, a
   11F7 79                 3678 	ld	a, c
   11F8 2B                 3679 	dec	hl
   11F9 77                 3680 	ld	(hl), a
   11FA 78                 3681 	ld	a, b
   11FB C1                 3682 	pop	bc
   11FC CE 00              3683 	adc	a,#0x00
   11FE 23                 3684 	inc	hl
   11FF 77                 3685 	ld	(hl),a
                           3686 ;demo.c:593: if (xo >= 256) {
   1200 3Ar1Es8F           3687 	ld	a,(#_xo+0)
   1203 D6 00              3688 	sub	a,#0x00
   1205 3Ar1Fs8F           3689 	ld	a,(#_xo+1)
   1208 DE 01              3690 	sbc	a,#0x01
   120A FAr71s12           3691 	jp	M,00108$
                           3692 ;demo.c:594: xo = 0;
   120D 21r1Es8F           3693 	ld	hl,#_xo + 0
   1210 36 00              3694 	ld	(hl), #0x00
   1212 21r1Fs8F           3695 	ld	hl,#_xo + 1
   1215 36 00              3696 	ld	(hl), #0x00
                           3697 ;demo.c:595: yo+=48;
   1217 21r20s8F           3698 	ld	hl,#_yo
   121A 7E                 3699 	ld	a,(hl)
   121B C6 30              3700 	add	a,#0x30
   121D 23                 3701 	inc	hl
   121E 2B                 3702 	dec	hl
   121F C5                 3703 	push	bc
   1220 4F                 3704 	ld	c, a
   1221 23                 3705 	inc	hl
   1222 7E                 3706 	ld	a, (hl)
   1223 47                 3707 	ld	b, a
   1224 79                 3708 	ld	a, c
   1225 2B                 3709 	dec	hl
   1226 77                 3710 	ld	(hl), a
   1227 78                 3711 	ld	a, b
   1228 C1                 3712 	pop	bc
   1229 CE 00              3713 	adc	a,#0x00
   122B 23                 3714 	inc	hl
   122C 77                 3715 	ld	(hl),a
                           3716 ;demo.c:596: if (yo >= 192) { yo = 0; po+=256; }
   122D 3Ar20s8F           3717 	ld	a,(#_yo+0)
   1230 D6 C0              3718 	sub	a,#0xC0
   1232 3Ar21s8F           3719 	ld	a,(#_yo+1)
   1235 DE 00              3720 	sbc	a,#0x00
   1237 FAr5As12           3721 	jp	M,00104$
   123A 21r20s8F           3722 	ld	hl,#_yo + 0
   123D 36 00              3723 	ld	(hl), #0x00
   123F 21r21s8F           3724 	ld	hl,#_yo + 1
   1242 36 00              3725 	ld	(hl), #0x00
   1244 21r22s8F           3726 	ld	hl,#_po
   1247 7E                 3727 	ld	a,(hl)
   1248 C6 00              3728 	add	a,#0x00
   124A 23                 3729 	inc	hl
   124B 2B                 3730 	dec	hl
   124C C5                 3731 	push	bc
   124D 4F                 3732 	ld	c, a
   124E 23                 3733 	inc	hl
   124F 7E                 3734 	ld	a, (hl)
   1250 47                 3735 	ld	b, a
   1251 79                 3736 	ld	a, c
   1252 2B                 3737 	dec	hl
   1253 77                 3738 	ld	(hl), a
   1254 78                 3739 	ld	a, b
   1255 C1                 3740 	pop	bc
   1256 CE 01              3741 	adc	a,#0x01
   1258 23                 3742 	inc	hl
   1259 77                 3743 	ld	(hl),a
   125A                    3744 00104$:
                           3745 ;demo.c:597: if (po >= 768) {
   125A 3Ar22s8F           3746 	ld	a,(#_po+0)
   125D D6 00              3747 	sub	a,#0x00
   125F 3Ar23s8F           3748 	ld	a,(#_po+1)
   1262 DE 03              3749 	sbc	a,#0x03
   1264 FAr71s12           3750 	jp	M,00108$
                           3751 ;demo.c:598: po = 0;
   1267 21r22s8F           3752 	ld	hl,#_po + 0
   126A 36 00              3753 	ld	(hl), #0x00
   126C 21r23s8F           3754 	ld	hl,#_po + 1
   126F 36 00              3755 	ld	(hl), #0x00
   1271                    3756 00108$:
                           3757 ;demo.c:605: fffaaa++;
   1271 FD 21r24s8F        3758 	ld	iy,#_fffaaa
   1275 FD 34 00           3759 	inc	0 (iy)
   1278 20 07              3760 	jr	NZ,00124$
   127A FD 21r24s8F        3761 	ld	iy,#_fffaaa
   127E FD 34 01           3762 	inc	1 (iy)
   1281                    3763 00124$:
   1281 DD F9              3764 	ld	sp,ix
   1283 DD E1              3765 	pop	ix
   1285 C9                 3766 	ret
   1286                    3767 _animplay_end::
                           3768 ;demo.c:614: void drawbox(int box_x, int box_y, uint8_t x, uint8_t y) {
                           3769 ;	---------------------------------
                           3770 ; Function drawbox
                           3771 ; ---------------------------------
   1286                    3772 _drawbox_start::
   1286                    3773 _drawbox:
   1286 DD E5              3774 	push	ix
   1288 DD 21 00 00        3775 	ld	ix,#0
   128C DD 39              3776 	add	ix,sp
   128E 21 F8 FF           3777 	ld	hl,#-8
   1291 39                 3778 	add	hl,sp
   1292 F9                 3779 	ld	sp,hl
                           3780 ;demo.c:615: dbly = 0;
   1293 21r2Bs8F           3781 	ld	hl,#_dbly + 0
   1296 36 00              3782 	ld	(hl), #0x00
   1298 21r2Cs8F           3783 	ld	hl,#_dbly + 1
   129B 36 00              3784 	ld	(hl), #0x00
                           3785 ;demo.c:617: cmd.source_x = box_x * 42;
   129D DD 5E 04           3786 	ld	e,4 (ix)
   12A0 DD 56 05           3787 	ld	d,5 (ix)
   12A3 6B                 3788 	ld	l,e
   12A4 62                 3789 	ld	h,d
   12A5 29                 3790 	add	hl,hl
   12A6 29                 3791 	add	hl,hl
   12A7 19                 3792 	add	hl,de
   12A8 29                 3793 	add	hl,hl
   12A9 29                 3794 	add	hl,hl
   12AA 19                 3795 	add	hl,de
   12AB 29                 3796 	add	hl,hl
   12AC 4D                 3797 	ld	c,l
   12AD 44                 3798 	ld	b,h
   12AE 21rC4s8E           3799 	ld	hl,#_cmd
   12B1 71                 3800 	ld	(hl),c
   12B2 23                 3801 	inc	hl
   12B3 70                 3802 	ld	(hl),b
                           3803 ;demo.c:618: cmd.source_y = 768+box_y * 42;
   12B4 23                 3804 	inc	hl
   12B5 DD 75 FE           3805 	ld	-2 (ix),l
   12B8 DD 74 FF           3806 	ld	-1 (ix),h
   12BB DD 5E 06           3807 	ld	e,6 (ix)
   12BE DD 56 07           3808 	ld	d,7 (ix)
   12C1 6B                 3809 	ld	l,e
   12C2 62                 3810 	ld	h,d
   12C3 29                 3811 	add	hl,hl
   12C4 29                 3812 	add	hl,hl
   12C5 19                 3813 	add	hl,de
   12C6 29                 3814 	add	hl,hl
   12C7 29                 3815 	add	hl,hl
   12C8 19                 3816 	add	hl,de
   12C9 29                 3817 	add	hl,hl
   12CA 11 00 03           3818 	ld	de, #0x0300
   12CD 19                 3819 	add	hl, de
   12CE DD 75 FC           3820 	ld	-4 (ix),l
   12D1 DD 74 FD           3821 	ld	-3 (ix),h
   12D4 DD 6E FE           3822 	ld	l,-2 (ix)
   12D7 DD 66 FF           3823 	ld	h,-1 (ix)
   12DA DD 7E FC           3824 	ld	a,-4 (ix)
   12DD 77                 3825 	ld	(hl),a
   12DE 23                 3826 	inc	hl
   12DF DD 7E FD           3827 	ld	a,-3 (ix)
   12E2 77                 3828 	ld	(hl),a
                           3829 ;demo.c:619: cmd.dest_x = x;
   12E3 11rC8s8E           3830 	ld	de,#_cmd + 4
   12E6 DD 7E 08           3831 	ld	a,8 (ix)
   12E9 DD 77 FA           3832 	ld	-6 (ix),a
   12EC DD 36 FB 00        3833 	ld	-5 (ix),#0x00
   12F0 EB                 3834 	ex	de,hl
   12F1 DD 7E FA           3835 	ld	a,-6 (ix)
   12F4 77                 3836 	ld	(hl),a
   12F5 23                 3837 	inc	hl
   12F6 DD 7E FB           3838 	ld	a,-5 (ix)
   12F9 77                 3839 	ld	(hl),a
                           3840 ;demo.c:620: cmd.dest_y = dbly+y;
   12FA 11rCAs8E           3841 	ld	de,#_cmd + 6
   12FD DD 7E 09           3842 	ld	a,9 (ix)
   1300 DD 77 F8           3843 	ld	-8 (ix),a
   1303 DD 36 F9 00        3844 	ld	-7 (ix),#0x00
   1307 EB                 3845 	ex	de,hl
   1308 DD 7E F8           3846 	ld	a,-8 (ix)
   130B 77                 3847 	ld	(hl),a
   130C 23                 3848 	inc	hl
   130D DD 7E F9           3849 	ld	a,-7 (ix)
   1310 77                 3850 	ld	(hl),a
                           3851 ;demo.c:621: cmd.size_x = 42;
   1311 11rCCs8E           3852 	ld	de,#_cmd + 8
   1314 EB                 3853 	ex	de,hl
   1315 36 2A              3854 	ld	(hl),#0x2A
   1317 23                 3855 	inc	hl
   1318 36 00              3856 	ld	(hl),#0x00
                           3857 ;demo.c:622: cmd.size_y = 42;
   131A 11rCEs8E           3858 	ld	de,#_cmd + 10
   131D EB                 3859 	ex	de,hl
   131E 36 2A              3860 	ld	(hl),#0x2A
   1320 23                 3861 	inc	hl
   1321 36 00              3862 	ld	(hl),#0x00
                           3863 ;demo.c:623: cmd.data = 0;
   1323 11rD0s8E           3864 	ld	de,#_cmd + 12
   1326 3E 00              3865 	ld	a,#0x00
   1328 12                 3866 	ld	(de),a
                           3867 ;demo.c:624: cmd.argument = 0x00;
   1329 11rD1s8E           3868 	ld	de,#_cmd + 13
   132C 3E 00              3869 	ld	a,#0x00
   132E 12                 3870 	ld	(de),a
                           3871 ;demo.c:625: cmd.command = 0x99; // mask AND
   132F 11rD2s8E           3872 	ld	de,#_cmd + 14
   1332 3E 99              3873 	ld	a,#0x99
   1334 12                 3874 	ld	(de),a
                           3875 ;demo.c:626: vdp_copier(&cmd);
   1335 C5                 3876 	push	bc
   1336 21rC4s8E           3877 	ld	hl,#_cmd
   1339 E5                 3878 	push	hl
   133A CDr00s00           3879 	call	_vdp_copier
   133D F1                 3880 	pop	af
   133E C1                 3881 	pop	bc
                           3882 ;demo.c:628: cmd.source_x = box_x * 42;
   133F 21rC4s8E           3883 	ld	hl,#_cmd
   1342 71                 3884 	ld	(hl),c
   1343 23                 3885 	inc	hl
   1344 70                 3886 	ld	(hl),b
                           3887 ;demo.c:629: cmd.source_y = 768+box_y * 42;
   1345 21rC6s8E           3888 	ld	hl, #_cmd + 2
   1348 DD 7E FC           3889 	ld	a,-4 (ix)
   134B 77                 3890 	ld	(hl),a
   134C 23                 3891 	inc	hl
   134D DD 7E FD           3892 	ld	a,-3 (ix)
   1350 77                 3893 	ld	(hl),a
                           3894 ;demo.c:630: cmd.dest_x = x;
   1351 21rC8s8E           3895 	ld	hl, #_cmd + 4
   1354 DD 7E FA           3896 	ld	a,-6 (ix)
   1357 77                 3897 	ld	(hl),a
   1358 23                 3898 	inc	hl
   1359 DD 7E FB           3899 	ld	a,-5 (ix)
   135C 77                 3900 	ld	(hl),a
                           3901 ;demo.c:631: cmd.dest_y = dbly+y;
   135D 01rCAs8E           3902 	ld	bc,#_cmd + 6
   1360 3Ar2Bs8F           3903 	ld	a,(#_dbly+0)
   1363 DD 86 F8           3904 	add	a,-8 (ix)
   1366 5F                 3905 	ld	e,a
   1367 3Ar2Cs8F           3906 	ld	a,(#_dbly+1)
   136A DD 8E F9           3907 	adc	a,-7 (ix)
   136D 57                 3908 	ld	d,a
   136E 69                 3909 	ld	l,c
   136F 60                 3910 	ld	h,b
   1370 73                 3911 	ld	(hl),e
   1371 23                 3912 	inc	hl
   1372 72                 3913 	ld	(hl),d
                           3914 ;demo.c:632: cmd.size_x = 42;
   1373 21rCCs8E           3915 	ld	hl, #_cmd + 8
   1376 36 2A              3916 	ld	(hl),#0x2A
   1378 23                 3917 	inc	hl
   1379 36 00              3918 	ld	(hl),#0x00
                           3919 ;demo.c:633: cmd.size_y = 42;
   137B 21rCEs8E           3920 	ld	hl, #_cmd + 10
   137E 36 2A              3921 	ld	(hl),#0x2A
   1380 23                 3922 	inc	hl
   1381 36 00              3923 	ld	(hl),#0x00
                           3924 ;demo.c:634: cmd.data = 0;
                           3925 ;demo.c:635: cmd.argument = 0x00;
   1383 3E 00              3926 	ld	a,#0x00
   1385 32rD0s8E           3927 	ld	(#_cmd + 12),a
   1388 32rD1s8E           3928 	ld	(#_cmd + 13),a
                           3929 ;demo.c:636: cmd.command = 0x9A; // IMAGE OR
   138B 3E 9A              3930 	ld	a,#0x9A
   138D 32rD2s8E           3931 	ld	(#_cmd + 14),a
                           3932 ;demo.c:637: vdp_copier(&cmd);
   1390 21rC4s8E           3933 	ld	hl,#_cmd
   1393 E5                 3934 	push	hl
   1394 CDr00s00           3935 	call	_vdp_copier
   1397 F1                 3936 	pop	af
   1398 DD F9              3937 	ld	sp,ix
   139A DD E1              3938 	pop	ix
   139C C9                 3939 	ret
   139D                    3940 _drawbox_end::
                           3941 ;demo.c:648: void boxes() {
                           3942 ;	---------------------------------
                           3943 ; Function boxes
                           3944 ; ---------------------------------
   139D                    3945 _boxes_start::
   139D                    3946 _boxes:
                           3947 ;demo.c:651: if (buffer == 1) vdp_register(2,31);
   139D 3Ar29s8F           3948 	ld	a,(#_buffer+0)
   13A0 D6 01              3949 	sub	a,#0x01
   13A2 20 06              3950 	jr	NZ,00135$
   13A4 3Ar2As8F           3951 	ld	a,(#_buffer+1)
   13A7 B7                 3952 	or	a,a
   13A8 28 02              3953 	jr	Z,00136$
   13AA                    3954 00135$:
   13AA 18 08              3955 	jr	00102$
   13AC                    3956 00136$:
   13AC 21 02 1F           3957 	ld	hl,#0x1F02
   13AF E5                 3958 	push	hl
   13B0 CDr00s00           3959 	call	_vdp_register
   13B3 F1                 3960 	pop	af
   13B4                    3961 00102$:
                           3962 ;demo.c:654: if (boxes_init == 0) {
   13B4 AF                 3963 	xor	a,a
   13B5 21r28s8F           3964 	ld	hl,#_boxes_init + 0
   13B8 B6                 3965 	or	a,(hl)
   13B9 C2r42s14           3966 	jp	NZ,00104$
                           3967 ;demo.c:655: boxes_init = 1;
   13BC FD 21r28s8F        3968 	ld	iy,#_boxes_init
   13C0 FD 36 00 01        3969 	ld	0 (iy),#0x01
                           3970 ;demo.c:657: cmd.size_x = 8;
   13C4 21rCCs8E           3971 	ld	hl, #_cmd + 8
   13C7 36 08              3972 	ld	(hl),#0x08
   13C9 23                 3973 	inc	hl
   13CA 36 00              3974 	ld	(hl),#0x00
                           3975 ;demo.c:658: cmd.size_y = 212;
   13CC 21rCEs8E           3976 	ld	hl, #_cmd + 10
   13CF 36 D4              3977 	ld	(hl),#0xD4
   13D1 23                 3978 	inc	hl
   13D2 36 00              3979 	ld	(hl),#0x00
                           3980 ;demo.c:659: cmd.data = 0;
                           3981 ;demo.c:660: cmd.argument = 0x00; // from 70xY to left
   13D4 3E 00              3982 	ld	a,#0x00
   13D6 32rD0s8E           3983 	ld	(#_cmd + 12),a
   13D9 32rD1s8E           3984 	ld	(#_cmd + 13),a
                           3985 ;demo.c:661: cmd.command = 0xd0; // vram to vram, y only
   13DC 01rD2s8E           3986 	ld	bc,#_cmd + 14
   13DF 3E D0              3987 	ld	a,#0xD0
   13E1 02                 3988 	ld	(bc),a
                           3989 ;demo.c:662: cmd.source_x = 248;
   13E2 21rC4s8E           3990 	ld	hl,#_cmd
   13E5 36 F8              3991 	ld	(hl),#0xF8
   13E7 23                 3992 	inc	hl
   13E8 36 00              3993 	ld	(hl),#0x00
                           3994 ;demo.c:663: cmd.source_y = 0;
   13EA 21rC6s8E           3995 	ld	hl, #_cmd + 2
   13ED 36 00              3996 	ld	(hl),#0x00
   13EF 23                 3997 	inc	hl
   13F0 36 00              3998 	ld	(hl),#0x00
                           3999 ;demo.c:664: cmd.dest_y = 0;
   13F2 21rCAs8E           4000 	ld	hl, #_cmd + 6
   13F5 36 00              4001 	ld	(hl),#0x00
   13F7 23                 4002 	inc	hl
   13F8 36 00              4003 	ld	(hl),#0x00
                           4004 ;demo.c:666: for (x = 248; x >= 0; x-=8) {
   13FA 01 F8 00           4005 	ld	bc,#0x00F8
   13FD                    4006 00118$:
   13FD 78                 4007 	ld	a,b
   13FE CB 7F              4008 	bit	7,a
   1400 20 38              4009 	jr	NZ,00121$
                           4010 ;demo.c:667: waitVB();
   1402 76                 4011 		halt 
                           4012 ;demo.c:668: cmd.dest_x = x;
   1403 11rC8s8E           4013 	ld	de,#_cmd + 4
   1406 EB                 4014 	ex	de,hl
   1407 71                 4015 	ld	(hl),c
   1408 23                 4016 	inc	hl
   1409 70                 4017 	ld	(hl),b
                           4018 ;demo.c:669: cmd.dest_y = 0;
   140A 11rCAs8E           4019 	ld	de,#_cmd + 6
   140D EB                 4020 	ex	de,hl
   140E 36 00              4021 	ld	(hl),#0x00
   1410 23                 4022 	inc	hl
   1411 36 00              4023 	ld	(hl),#0x00
                           4024 ;demo.c:670: vdp_copier(&cmd);
   1413 C5                 4025 	push	bc
   1414 21rC4s8E           4026 	ld	hl,#_cmd
   1417 E5                 4027 	push	hl
   1418 CDr00s00           4028 	call	_vdp_copier
   141B F1                 4029 	pop	af
   141C C1                 4030 	pop	bc
                           4031 ;demo.c:671: cmd.dest_y = 256;
   141D 11rCAs8E           4032 	ld	de,#_cmd + 6
   1420 EB                 4033 	ex	de,hl
   1421 36 00              4034 	ld	(hl),#0x00
   1423 23                 4035 	inc	hl
   1424 36 01              4036 	ld	(hl),#0x01
                           4037 ;demo.c:672: vdp_copier(&cmd);
   1426 C5                 4038 	push	bc
   1427 21rC4s8E           4039 	ld	hl,#_cmd
   142A E5                 4040 	push	hl
   142B CDr00s00           4041 	call	_vdp_copier
   142E F1                 4042 	pop	af
   142F C1                 4043 	pop	bc
                           4044 ;demo.c:666: for (x = 248; x >= 0; x-=8) {
   1430 79                 4045 	ld	a,c
   1431 C6 F8              4046 	add	a,#0xF8
   1433 4F                 4047 	ld	c,a
   1434 78                 4048 	ld	a,b
   1435 CE FF              4049 	adc	a,#0xFF
   1437 47                 4050 	ld	b,a
   1438 18 C3              4051 	jr	00118$
   143A                    4052 00121$:
                           4053 ;demo.c:675: vdp_load_palette(boxes_palette);
   143A 21rA0s8E           4054 	ld	hl,#_boxes_palette
   143D E5                 4055 	push	hl
   143E CDr00s00           4056 	call	_vdp_load_palette
   1441 F1                 4057 	pop	af
   1442                    4058 00104$:
                           4059 ;demo.c:678: bt++;
   1442 FD 21r31s8F        4060 	ld	iy,#_bt
   1446 FD 34 00           4061 	inc	0 (iy)
   1449 20 07              4062 	jr	NZ,00137$
   144B FD 21r31s8F        4063 	ld	iy,#_bt
   144F FD 34 01           4064 	inc	1 (iy)
   1452                    4065 00137$:
                           4066 ;demo.c:679: if (bt > 8) {
   1452 3E 08              4067 	ld	a,#0x08
   1454 FD 21r31s8F        4068 	ld	iy,#_bt
   1458 FD 96 00           4069 	sub	a,0 (iy)
   145B 3E 00              4070 	ld	a,#0x00
   145D FD 21r31s8F        4071 	ld	iy,#_bt
   1461 FD 9E 01           4072 	sbc	a,1 (iy)
   1464 F0                 4073 	ret	P
                           4074 ;demo.c:680: bt = 0;
   1465 21r31s8F           4075 	ld	hl,#_bt + 0
   1468 36 00              4076 	ld	(hl), #0x00
   146A 21r32s8F           4077 	ld	hl,#_bt + 1
   146D 36 00              4078 	ld	(hl), #0x00
                           4079 ;demo.c:681: if (by > 0) {
   146F 3E 00              4080 	ld	a,#0x00
   1471 FD 21r2Fs8F        4081 	ld	iy,#_by
   1475 FD 96 00           4082 	sub	a,0 (iy)
   1478 3E 00              4083 	ld	a,#0x00
   147A FD 21r2Fs8F        4084 	ld	iy,#_by
   147E FD 9E 01           4085 	sbc	a,1 (iy)
   1481 F2r05s15           4086 	jp	P,00114$
                           4087 ;demo.c:682: by-=16;
   1484 21r2Fs8F           4088 	ld	hl,#_by
   1487 7E                 4089 	ld	a,(hl)
   1488 C6 F0              4090 	add	a,#0xF0
   148A 77                 4091 	ld	(hl),a
   148B 23                 4092 	inc	hl
   148C 7E                 4093 	ld	a,(hl)
   148D CE FF              4094 	adc	a,#0xFF
   148F 77                 4095 	ld	(hl),a
                           4096 ;demo.c:683: if (by < 212-42) drawbox(bxx,byy,bx,by);
   1490 3Ar2Fs8F           4097 	ld	a,(#_by+0)
   1493 D6 AA              4098 	sub	a,#0xAA
   1495 3Ar30s8F           4099 	ld	a,(#_by+1)
   1498 DE 00              4100 	sbc	a,#0x00
   149A F2rB8s14           4101 	jp	P,00106$
   149D 21r2Fs8F           4102 	ld	hl,#_by + 0
   14A0 4E                 4103 	ld	c,(hl)
   14A1 21r2Ds8F           4104 	ld	hl,#_bx + 0
   14A4 46                 4105 	ld	b,(hl)
   14A5 79                 4106 	ld	a,c
   14A6 F5                 4107 	push	af
   14A7 33                 4108 	inc	sp
   14A8 C5                 4109 	push	bc
   14A9 33                 4110 	inc	sp
   14AA 2Ar35s8F           4111 	ld	hl,(_byy)
   14AD E5                 4112 	push	hl
   14AE 2Ar33s8F           4113 	ld	hl,(_bxx)
   14B1 E5                 4114 	push	hl
   14B2 CDr86s12           4115 	call	_drawbox
   14B5 F1                 4116 	pop	af
   14B6 F1                 4117 	pop	af
   14B7 F1                 4118 	pop	af
   14B8                    4119 00106$:
                           4120 ;demo.c:684: bxx++;
   14B8 FD 21r33s8F        4121 	ld	iy,#_bxx
   14BC FD 34 00           4122 	inc	0 (iy)
   14BF 20 07              4123 	jr	NZ,00138$
   14C1 FD 21r33s8F        4124 	ld	iy,#_bxx
   14C5 FD 34 01           4125 	inc	1 (iy)
   14C8                    4126 00138$:
                           4127 ;demo.c:685: if (bxx >= 4) { bxx = 0; byy++; }
   14C8 3Ar33s8F           4128 	ld	a,(#_bxx+0)
   14CB D6 04              4129 	sub	a,#0x04
   14CD 3Ar34s8F           4130 	ld	a,(#_bxx+1)
   14D0 DE 00              4131 	sbc	a,#0x00
   14D2 FArEFs14           4132 	jp	M,00108$
   14D5 21r33s8F           4133 	ld	hl,#_bxx + 0
   14D8 36 00              4134 	ld	(hl), #0x00
   14DA 21r34s8F           4135 	ld	hl,#_bxx + 1
   14DD 36 00              4136 	ld	(hl), #0x00
   14DF FD 21r35s8F        4137 	ld	iy,#_byy
   14E3 FD 34 00           4138 	inc	0 (iy)
   14E6 20 07              4139 	jr	NZ,00139$
   14E8 FD 21r35s8F        4140 	ld	iy,#_byy
   14EC FD 34 01           4141 	inc	1 (iy)
   14EF                    4142 00139$:
   14EF                    4143 00108$:
                           4144 ;demo.c:686: if (byy >= 2) { byy = 0; }
   14EF 3Ar35s8F           4145 	ld	a,(#_byy+0)
   14F2 D6 02              4146 	sub	a,#0x02
   14F4 3Ar36s8F           4147 	ld	a,(#_byy+1)
   14F7 DE 00              4148 	sbc	a,#0x00
   14F9 F8                 4149 	ret	M
   14FA 21r35s8F           4150 	ld	hl,#_byy + 0
   14FD 36 00              4151 	ld	(hl), #0x00
   14FF 21r36s8F           4152 	ld	hl,#_byy + 1
   1502 36 00              4153 	ld	(hl), #0x00
   1504 C9                 4154 	ret
   1505                    4155 00114$:
                           4156 ;demo.c:688: bx-=21;
   1505 21r2Ds8F           4157 	ld	hl,#_bx
   1508 7E                 4158 	ld	a,(hl)
   1509 C6 EB              4159 	add	a,#0xEB
   150B 77                 4160 	ld	(hl),a
   150C 23                 4161 	inc	hl
   150D 7E                 4162 	ld	a,(hl)
   150E CE FF              4163 	adc	a,#0xFF
   1510 77                 4164 	ld	(hl),a
                           4165 ;demo.c:689: bo+=11;
   1511 21r37s8F           4166 	ld	hl,#_bo
   1514 7E                 4167 	ld	a,(hl)
   1515 C6 0B              4168 	add	a,#0x0B
   1517 23                 4169 	inc	hl
   1518 2B                 4170 	dec	hl
   1519 C5                 4171 	push	bc
   151A 4F                 4172 	ld	c, a
   151B 23                 4173 	inc	hl
   151C 7E                 4174 	ld	a, (hl)
   151D 47                 4175 	ld	b, a
   151E 79                 4176 	ld	a, c
   151F 2B                 4177 	dec	hl
   1520 77                 4178 	ld	(hl), a
   1521 78                 4179 	ld	a, b
   1522 C1                 4180 	pop	bc
   1523 CE 00              4181 	adc	a,#0x00
   1525 23                 4182 	inc	hl
   1526 77                 4183 	ld	(hl),a
                           4184 ;demo.c:690: if (bo > 192) bo = 0;
   1527 3E C0              4185 	ld	a,#0xC0
   1529 FD 21r37s8F        4186 	ld	iy,#_bo
   152D FD 96 00           4187 	sub	a,0 (iy)
   1530 3E 00              4188 	ld	a,#0x00
   1532 FD 21r37s8F        4189 	ld	iy,#_bo
   1536 FD 9E 01           4190 	sbc	a,1 (iy)
   1539 F2r46s15           4191 	jp	P,00112$
   153C 21r37s8F           4192 	ld	hl,#_bo + 0
   153F 36 00              4193 	ld	(hl), #0x00
   1541 21r38s8F           4194 	ld	hl,#_bo + 1
   1544 36 00              4195 	ld	(hl), #0x00
   1546                    4196 00112$:
                           4197 ;demo.c:691: by=192-42+bo;
   1546 21r2Fs8F           4198 	ld	hl,#_by
   1549 3Ar37s8F           4199 	ld	a,(#_bo+0)
   154C C6 96              4200 	add	a,#0x96
   154E 77                 4201 	ld	(hl),a
   154F 3Ar38s8F           4202 	ld	a,(#_bo+1)
   1552 CE 00              4203 	adc	a,#0x00
   1554 23                 4204 	inc	hl
   1555 77                 4205 	ld	(hl),a
   1556 C9                 4206 	ret
   1557                    4207 _boxes_end::
                           4208 ;demo.c:703: void main() {
                           4209 ;	---------------------------------
                           4210 ; Function main
                           4211 ; ---------------------------------
   1557                    4212 _main_start::
   1557                    4213 _main:
                           4214 ;demo.c:704: unsigned char quit=0;
   1557 0E 00              4215 	ld	c,#0x00
                           4216 ;demo.c:705: int modes = 128; // interlace bit on
   1559 11 80 00           4217 	ld	de,#0x0080
                           4218 ;demo.c:709: spindown();
   155C C5                 4219 	push	bc
   155D D5                 4220 	push	de
   155E CDr00s00           4221 	call	_spindown
   1561 D1                 4222 	pop	de
   1562 C1                 4223 	pop	bc
                           4224 ;demo.c:711: puts("demo init\r\n\r\n");
   1563 C5                 4225 	push	bc
   1564 D5                 4226 	push	de
   1565 21r25s17           4227 	ld	hl,#__str_1
   1568 E5                 4228 	push	hl
   1569 CDr00s00           4229 	call	_puts
   156C F1                 4230 	pop	af
   156D D1                 4231 	pop	de
   156E C1                 4232 	pop	bc
                           4233 ;demo.c:724: puts("music init...");
   156F C5                 4234 	push	bc
   1570 D5                 4235 	push	de
   1571 21r33s17           4236 	ld	hl,#__str_2
   1574 E5                 4237 	push	hl
   1575 CDr00s00           4238 	call	_puts
   1578 F1                 4239 	pop	af
   1579 D1                 4240 	pop	de
   157A C1                 4241 	pop	bc
                           4242 ;demo.c:726: PLY_SongPtr = (char *)0x0103;
   157B 21r00s00           4243 	ld	hl,#_PLY_SongPtr + 0
   157E 36 03              4244 	ld	(hl), #0x03
   1580 21r01s00           4245 	ld	hl,#_PLY_SongPtr + 1
   1583 36 01              4246 	ld	(hl), #0x01
                           4247 ;demo.c:727: PLY_Init();
   1585 C5                 4248 	push	bc
   1586 D5                 4249 	push	de
   1587 CDr00s00           4250 	call	_PLY_Init
   158A D1                 4251 	pop	de
   158B C1                 4252 	pop	bc
                           4253 ;demo.c:728: puts("done.\n\n");
   158C C5                 4254 	push	bc
   158D D5                 4255 	push	de
   158E 21r41s17           4256 	ld	hl,#__str_3
   1591 E5                 4257 	push	hl
   1592 CDr00s00           4258 	call	_puts
   1595 F1                 4259 	pop	af
   1596 D1                 4260 	pop	de
   1597 C1                 4261 	pop	bc
                           4262 ;demo.c:730: if(isvdp2())
   1598 C5                 4263 	push	bc
   1599 D5                 4264 	push	de
   159A CDr00s00           4265 	call	_isvdp2
   159D 45                 4266 	ld	b,l
   159E D1                 4267 	pop	de
   159F 78                 4268 	ld	a,b
   15A0 C1                 4269 	pop	bc
   15A1 47                 4270 	ld	b,a
   15A2 B7                 4271 	or	a,a
   15A3 28 03              4272 	jr	Z,00102$
                           4273 ;demo.c:732: modes+=2; // pal
   15A5 11 82 00           4274 	ld	de,#0x0082
   15A8                    4275 00102$:
                           4276 ;demo.c:736: vdp_set_screen5();
   15A8 C5                 4277 	push	bc
   15A9 D5                 4278 	push	de
   15AA CDr00s00           4279 	call	_vdp_set_screen5
   15AD D1                 4280 	pop	de
   15AE C1                 4281 	pop	bc
                           4282 ;demo.c:738: vdp_register(VDP_MODE3,modes); // interlace on, screen mode pal or ntsc
   15AF 43                 4283 	ld	b,e
   15B0 C5                 4284 	push	bc
   15B1 C5                 4285 	push	bc
   15B2 33                 4286 	inc	sp
   15B3 3E 09              4287 	ld	a,#0x09
   15B5 F5                 4288 	push	af
   15B6 33                 4289 	inc	sp
   15B7 CDr00s00           4290 	call	_vdp_register
   15BA F1                 4291 	pop	af
   15BB C1                 4292 	pop	bc
                           4293 ;demo.c:740: puts("demo start\r\n");
   15BC C5                 4294 	push	bc
   15BD 21r49s17           4295 	ld	hl,#__str_4
   15C0 E5                 4296 	push	hl
   15C1 CDr00s00           4297 	call	_puts
   15C4 F1                 4298 	pop	af
   15C5 C1                 4299 	pop	bc
                           4300 ;demo.c:742: scratch_clear();
   15C6 C5                 4301 	push	bc
   15C7 CDr91s03           4302 	call	_scratch_clear
   15CA C1                 4303 	pop	bc
                           4304 ;demo.c:743: vdp_load_palette(scratch);
   15CB C5                 4305 	push	bc
   15CC 21rA0s8D           4306 	ld	hl,#_scratch
   15CF E5                 4307 	push	hl
   15D0 CDr00s00           4308 	call	_vdp_load_palette
   15D3 F1                 4309 	pop	af
   15D4 C1                 4310 	pop	bc
                           4311 ;demo.c:745: vdp_register(VDP_VOFFSET,0);
   15D5 C5                 4312 	push	bc
   15D6 21 17 00           4313 	ld	hl,#0x0017
   15D9 E5                 4314 	push	hl
   15DA CDr00s00           4315 	call	_vdp_register
   15DD F1                 4316 	pop	af
   15DE C1                 4317 	pop	bc
                           4318 ;demo.c:747: pal_load("TWISTER PL5",32);
   15DF C5                 4319 	push	bc
   15E0 3E 20              4320 	ld	a,#0x20
   15E2 F5                 4321 	push	af
   15E3 33                 4322 	inc	sp
   15E4 21r56s17           4323 	ld	hl,#__str_5
   15E7 E5                 4324 	push	hl
   15E8 CDrA4s03           4325 	call	_pal_load
   15EB F1                 4326 	pop	af
   15EC 33                 4327 	inc	sp
   15ED C1                 4328 	pop	bc
                           4329 ;demo.c:748: memcpy(twister_palette, cur_palette, 32);
   15EE C5                 4330 	push	bc
   15EF 21 20 00           4331 	ld	hl,#0x0020
   15F2 E5                 4332 	push	hl
   15F3 21r20s8E           4333 	ld	hl,#_cur_palette
   15F6 E5                 4334 	push	hl
   15F7 21r60s8E           4335 	ld	hl,#_twister_palette
   15FA E5                 4336 	push	hl
   15FB CDr00s00           4337 	call	_memcpy
   15FE F1                 4338 	pop	af
   15FF F1                 4339 	pop	af
   1600 F1                 4340 	pop	af
   1601 C1                 4341 	pop	bc
                           4342 ;demo.c:749: pal_load("TF1     PL5",32);
   1602 C5                 4343 	push	bc
   1603 3E 20              4344 	ld	a,#0x20
   1605 F5                 4345 	push	af
   1606 33                 4346 	inc	sp
   1607 21r62s17           4347 	ld	hl,#__str_6
   160A E5                 4348 	push	hl
   160B CDrA4s03           4349 	call	_pal_load
   160E F1                 4350 	pop	af
   160F 33                 4351 	inc	sp
   1610 C1                 4352 	pop	bc
                           4353 ;demo.c:750: memcpy(tf_palette, cur_palette, 32);
   1611 C5                 4354 	push	bc
   1612 21 20 00           4355 	ld	hl,#0x0020
   1615 E5                 4356 	push	hl
   1616 21r20s8E           4357 	ld	hl,#_cur_palette
   1619 E5                 4358 	push	hl
   161A 21r80s8E           4359 	ld	hl,#_tf_palette
   161D E5                 4360 	push	hl
   161E CDr00s00           4361 	call	_memcpy
   1621 F1                 4362 	pop	af
   1622 F1                 4363 	pop	af
   1623 F1                 4364 	pop	af
   1624 C1                 4365 	pop	bc
                           4366 ;demo.c:751: pal_load("BOXES   PL5",32);
   1625 C5                 4367 	push	bc
   1626 3E 20              4368 	ld	a,#0x20
   1628 F5                 4369 	push	af
   1629 33                 4370 	inc	sp
   162A 21r6Es17           4371 	ld	hl,#__str_7
   162D E5                 4372 	push	hl
   162E CDrA4s03           4373 	call	_pal_load
   1631 F1                 4374 	pop	af
   1632 33                 4375 	inc	sp
   1633 C1                 4376 	pop	bc
                           4377 ;demo.c:752: memcpy(boxes_palette, cur_palette, 32);
   1634 C5                 4378 	push	bc
   1635 21 20 00           4379 	ld	hl,#0x0020
   1638 E5                 4380 	push	hl
   1639 21r20s8E           4381 	ld	hl,#_cur_palette
   163C E5                 4382 	push	hl
   163D 21rA0s8E           4383 	ld	hl,#_boxes_palette
   1640 E5                 4384 	push	hl
   1641 CDr00s00           4385 	call	_memcpy
   1644 F1                 4386 	pop	af
   1645 F1                 4387 	pop	af
   1646 F1                 4388 	pop	af
   1647 C1                 4389 	pop	bc
                           4390 ;demo.c:755: pal_load("BULBS   PL5",32);
   1648 C5                 4391 	push	bc
   1649 3E 20              4392 	ld	a,#0x20
   164B F5                 4393 	push	af
   164C 33                 4394 	inc	sp
   164D 21r7As17           4395 	ld	hl,#__str_8
   1650 E5                 4396 	push	hl
   1651 CDrA4s03           4397 	call	_pal_load
   1654 F1                 4398 	pop	af
   1655 33                 4399 	inc	sp
   1656 C1                 4400 	pop	bc
                           4401 ;demo.c:757: pck_load("DSSLOGO PCK",2154,0x0000,VRAM_0);
   1657 C5                 4402 	push	bc
   1658 21 01 00           4403 	ld	hl,#0x0001
   165B E5                 4404 	push	hl
   165C 2E 00              4405 	ld	l, #0x00
   165E E5                 4406 	push	hl
   165F 21 6A 08           4407 	ld	hl,#0x086A
   1662 E5                 4408 	push	hl
   1663 21r86s17           4409 	ld	hl,#__str_9
   1666 E5                 4410 	push	hl
   1667 CDr1Cs05           4411 	call	_pck_load
   166A F1                 4412 	pop	af
   166B F1                 4413 	pop	af
   166C F1                 4414 	pop	af
   166D F1                 4415 	pop	af
   166E C1                 4416 	pop	bc
                           4417 ;demo.c:758: pck_load("BULBS   PCK",2431,0x8000,VRAM_0);
   166F C5                 4418 	push	bc
   1670 21 01 00           4419 	ld	hl,#0x0001
   1673 E5                 4420 	push	hl
   1674 21 00 80           4421 	ld	hl,#0x8000
   1677 E5                 4422 	push	hl
   1678 21 7F 09           4423 	ld	hl,#0x097F
   167B E5                 4424 	push	hl
   167C 21r92s17           4425 	ld	hl,#__str_10
   167F E5                 4426 	push	hl
   1680 CDr1Cs05           4427 	call	_pck_load
   1683 F1                 4428 	pop	af
   1684 F1                 4429 	pop	af
   1685 F1                 4430 	pop	af
   1686 F1                 4431 	pop	af
   1687 C1                 4432 	pop	bc
                           4433 ;demo.c:760: pck_load("TWISTER PCK",4032,0x0000,VRAM_1);
   1688 C5                 4434 	push	bc
   1689 21 00 00           4435 	ld	hl,#0x0000
   168C E5                 4436 	push	hl
   168D 2E 00              4437 	ld	l, #0x00
   168F E5                 4438 	push	hl
   1690 21 C0 0F           4439 	ld	hl,#0x0FC0
   1693 E5                 4440 	push	hl
   1694 21r9Es17           4441 	ld	hl,#__str_11
   1697 E5                 4442 	push	hl
   1698 CDr1Cs05           4443 	call	_pck_load
   169B F1                 4444 	pop	af
   169C F1                 4445 	pop	af
   169D F1                 4446 	pop	af
   169E F1                 4447 	pop	af
   169F C1                 4448 	pop	bc
                           4449 ;demo.c:761: pck_load("BOXES   PCK",3667,0x8000,VRAM_1);
   16A0 C5                 4450 	push	bc
   16A1 21 00 00           4451 	ld	hl,#0x0000
   16A4 E5                 4452 	push	hl
   16A5 26 80              4453 	ld	h, #0x80
   16A7 E5                 4454 	push	hl
   16A8 21 53 0E           4455 	ld	hl,#0x0E53
   16AB E5                 4456 	push	hl
   16AC 21rAAs17           4457 	ld	hl,#__str_12
   16AF E5                 4458 	push	hl
   16B0 CDr1Cs05           4459 	call	_pck_load
   16B3 F1                 4460 	pop	af
   16B4 F1                 4461 	pop	af
   16B5 F1                 4462 	pop	af
   16B6 F1                 4463 	pop	af
   16B7 C1                 4464 	pop	bc
                           4465 ;demo.c:773: scratch_clear();
   16B8 C5                 4466 	push	bc
   16B9 CDr91s03           4467 	call	_scratch_clear
   16BC C1                 4468 	pop	bc
                           4469 ;demo.c:774: vdp_load_palette(scratch);
   16BD C5                 4470 	push	bc
   16BE 21rA0s8D           4471 	ld	hl,#_scratch
   16C1 E5                 4472 	push	hl
   16C2 CDr00s00           4473 	call	_vdp_load_palette
   16C5 F1                 4474 	pop	af
   16C6 C1                 4475 	pop	bc
                           4476 ;demo.c:776: install_isr(my_isr);
   16C7 C5                 4477 	push	bc
   16C8 21r2Cs02           4478 	ld	hl,#_my_isr
   16CB E5                 4479 	push	hl
   16CC CDr00s00           4480 	call	_install_isr
   16CF F1                 4481 	pop	af
   16D0 C1                 4482 	pop	bc
                           4483 ;demo.c:778: while (!quit) {
   16D1                    4484 00108$:
   16D1 AF                 4485 	xor	a,a
   16D2 B1                 4486 	or	a,c
   16D3 20 2D              4487 	jr	NZ,00110$
                           4488 ;demo.c:779: waitVB();
   16D5 76                 4489 		halt 
                           4490 ;demo.c:782: if (vbicount < 64) { 
   16D6 3ArC0s8E           4491 	ld	a,(#_vbicount+0)
   16D9 D6 40              4492 	sub	a,#0x40
   16DB 3ArC1s8E           4493 	ld	a,(#_vbicount+1)
   16DE DE 00              4494 	sbc	a,#0x00
   16E0 F2rEAs16           4495 	jp	P,00104$
                           4496 ;demo.c:783: fadein(); 
   16E3 C5                 4497 	push	bc
   16E4 CDr66s05           4498 	call	_fadein
   16E7 C1                 4499 	pop	bc
   16E8 18 05              4500 	jr	00105$
   16EA                    4501 00104$:
                           4502 ;demo.c:785: boxes();
   16EA C5                 4503 	push	bc
   16EB CDr9Ds13           4504 	call	_boxes
   16EE C1                 4505 	pop	bc
   16EF                    4506 00105$:
                           4507 ;demo.c:804: if (vbicount >= 1500) {
                           4508 ;demo.c:809: if(space())
   16EF C5                 4509 	push	bc
   16F0 21 08 01           4510 	ld	hl,#0x0108
   16F3 E5                 4511 	push	hl
   16F4 CDr00s00           4512 	call	_ispressed
   16F7 F1                 4513 	pop	af
   16F8 7D                 4514 	ld	a,l
   16F9 C1                 4515 	pop	bc
   16FA 47                 4516 	ld	b,a
   16FB B7                 4517 	or	a,a
   16FC 28 D3              4518 	jr	Z,00108$
                           4519 ;demo.c:810: quit=1;
   16FE 0E 01              4520 	ld	c,#0x01
   1700 18 CF              4521 	jr	00108$
   1702                    4522 00110$:
                           4523 ;demo.c:813: waitVB();
   1702 76                 4524 		halt 
                           4525 ;demo.c:814: uninstall_isr();
   1703 CDr00s00           4526 	call	_uninstall_isr
                           4527 ;demo.c:815: PLY_Stop();
   1706 CDr00s00           4528 	call	_PLY_Stop
                           4529 ;demo.c:816: PLY_SendRegisters();
   1709 CDr00s00           4530 	call	_PLY_SendRegisters
                           4531 ;demo.c:818: screen(0);
   170C 3E 00              4532 	ld	a,#0x00
   170E F5                 4533 	push	af
   170F 33                 4534 	inc	sp
   1710 CDr00s00           4535 	call	_screen
   1713 33                 4536 	inc	sp
                           4537 ;demo.c:820: puts("demo exit\r\n\r\n");
   1714 21rB6s17           4538 	ld	hl,#__str_13
   1717 E5                 4539 	push	hl
   1718 CDr00s00           4540 	call	_puts
   171B F1                 4541 	pop	af
                           4542 ;demo.c:822: exit(0);
   171C 3E 00              4543 	ld	a,#0x00
   171E F5                 4544 	push	af
   171F 33                 4545 	inc	sp
   1720 CDr00s00           4546 	call	_exit
   1723 33                 4547 	inc	sp
   1724 C9                 4548 	ret
   1725                    4549 _main_end::
   1725                    4550 __str_1:
   1725 64 65 6D 6F 20 69  4551 	.ascii "demo init"
        6E 69 74
   172E 0D                 4552 	.db 0x0D
   172F 0A                 4553 	.db 0x0A
   1730 0D                 4554 	.db 0x0D
   1731 0A                 4555 	.db 0x0A
   1732 00                 4556 	.db 0x00
   1733                    4557 __str_2:
   1733 6D 75 73 69 63 20  4558 	.ascii "music init..."
        69 6E 69 74 2E 2E
        2E
   1740 00                 4559 	.db 0x00
   1741                    4560 __str_3:
   1741 64 6F 6E 65 2E     4561 	.ascii "done."
   1746 0A                 4562 	.db 0x0A
   1747 0A                 4563 	.db 0x0A
   1748 00                 4564 	.db 0x00
   1749                    4565 __str_4:
   1749 64 65 6D 6F 20 73  4566 	.ascii "demo start"
        74 61 72 74
   1753 0D                 4567 	.db 0x0D
   1754 0A                 4568 	.db 0x0A
   1755 00                 4569 	.db 0x00
   1756                    4570 __str_5:
   1756 54 57 49 53 54 45  4571 	.ascii "TWISTER PL5"
        52 20 50 4C 35
   1761 00                 4572 	.db 0x00
   1762                    4573 __str_6:
   1762 54 46 31 20 20 20  4574 	.ascii "TF1     PL5"
        20 20 50 4C 35
   176D 00                 4575 	.db 0x00
   176E                    4576 __str_7:
   176E 42 4F 58 45 53 20  4577 	.ascii "BOXES   PL5"
        20 20 50 4C 35
   1779 00                 4578 	.db 0x00
   177A                    4579 __str_8:
   177A 42 55 4C 42 53 20  4580 	.ascii "BULBS   PL5"
        20 20 50 4C 35
   1785 00                 4581 	.db 0x00
   1786                    4582 __str_9:
   1786 44 53 53 4C 4F 47  4583 	.ascii "DSSLOGO PCK"
        4F 20 50 43 4B
   1791 00                 4584 	.db 0x00
   1792                    4585 __str_10:
   1792 42 55 4C 42 53 20  4586 	.ascii "BULBS   PCK"
        20 20 50 43 4B
   179D 00                 4587 	.db 0x00
   179E                    4588 __str_11:
   179E 54 57 49 53 54 45  4589 	.ascii "TWISTER PCK"
        52 20 50 43 4B
   17A9 00                 4590 	.db 0x00
   17AA                    4591 __str_12:
   17AA 42 4F 58 45 53 20  4592 	.ascii "BOXES   PCK"
        20 20 50 43 4B
   17B5 00                 4593 	.db 0x00
   17B6                    4594 __str_13:
   17B6 64 65 6D 6F 20 65  4595 	.ascii "demo exit"
        78 69 74
   17BF 0D                 4596 	.db 0x0D
   17C0 0A                 4597 	.db 0x0A
   17C1 0D                 4598 	.db 0x0D
   17C2 0A                 4599 	.db 0x0A
   17C3 00                 4600 	.db 0x00
                           4601 	.area _CODE
                           4602 	.area _CABS
