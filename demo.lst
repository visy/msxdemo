                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Mar 22 2009) (Mac OS X i386)
                              4 ; This file was generated Tue Feb 13 20:39:37 2018
                              5 ;--------------------------------------------------------
                              6 	.module demo
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _do_animplay
                             14 	.globl _raster_effu
                             15 	.globl _do_blocks
                             16 	.globl _do_ymmm
                             17 	.globl _fadein
                             18 	.globl _raw_load
                             19 	.globl _pause
                             20 	.globl _pal_load
                             21 	.globl _scratch_clear
                             22 	.globl _ge5_load
                             23 	.globl _color_isr
                             24 	.globl _my_isr
                             25 	.globl _isNthBitSet
                             26 	.globl _linenum
                             27 	.globl _flof
                             28 	.globl _btab
                             29 	.globl _bty
                             30 	.globl _btx
                             31 	.globl _bsy
                             32 	.globl _bsx
                             33 	.globl _block_init
                             34 	.globl _cc
                             35 	.globl _yofff
                             36 	.globl _tick
                             37 	.globl _vbicount
                             38 	.globl _block_palette
                             39 	.globl _cur_palette
                             40 	.globl _scratch
                             41 	.globl _packbuffer
                             42 	.globl _sintab
                             43 	.globl _sintabx
                             44 ;--------------------------------------------------------
                             45 ; special function registers
                             46 ;--------------------------------------------------------
                             47 ;--------------------------------------------------------
                             48 ;  ram data
                             49 ;--------------------------------------------------------
                             50 	.area _DATA
   0000                      51 _sintab::
   0000                      52 	.ds 256
   0100                      53 _packbuffer::
   0100                      54 	.ds 16000
   3F80                      55 _scratch::
   3F80                      56 	.ds 128
   4000                      57 _cur_palette::
   4000                      58 	.ds 32
   4020                      59 _block_palette::
   4020                      60 	.ds 32
   4040                      61 _vbicount::
   4040                      62 	.ds 2
   4042                      63 _tick::
   4042                      64 	.ds 2
   4044                      65 _isNthBitSet_mask_1_1:
   4044                      66 	.ds 8
   404C                      67 _yofff::
   404C                      68 	.ds 1
   404D                      69 _cc::
   404D                      70 	.ds 1
   404E                      71 _flipper:
   404E                      72 	.ds 2
   4050                      73 _ymmmf:
   4050                      74 	.ds 2
   4052                      75 _block_init::
   4052                      76 	.ds 1
   4053                      77 _bsx::
   4053                      78 	.ds 2
   4055                      79 _bsy::
   4055                      80 	.ds 2
   4057                      81 _btx::
   4057                      82 	.ds 2
   4059                      83 _bty::
   4059                      84 	.ds 2
   405B                      85 _btab::
   405B                      86 	.ds 32
   407B                      87 _flof::
   407B                      88 	.ds 2
   407D                      89 _linenum::
   407D                      90 	.ds 2
   407F                      91 _xo:
   407F                      92 	.ds 2
   4081                      93 _yo:
   4081                      94 	.ds 2
   4083                      95 _po:
   4083                      96 	.ds 2
   4085                      97 _fffaaa:
   4085                      98 	.ds 2
                             99 ;--------------------------------------------------------
                            100 ; overlayable items in  ram 
                            101 ;--------------------------------------------------------
                            102 	.area _OVERLAY
                            103 ;--------------------------------------------------------
                            104 ; external initialized ram data
                            105 ;--------------------------------------------------------
                            106 ;--------------------------------------------------------
                            107 ; global & static initialisations
                            108 ;--------------------------------------------------------
                            109 	.area _HOME
                            110 	.area _GSINIT
                            111 	.area _GSFINAL
                            112 	.area _GSINIT
                            113 ;demo.c:47: static unsigned char mask[] = {1, 2, 4, 8, 16, 32, 64, 128};
   0000 21r44s40            114 	ld	hl,#_isNthBitSet_mask_1_1
   0003 CDr00s00            115 	call	__initrleblock
   0006 08                  116 	.db	8
   0007 01 02 04 08 10 20   117 	.db	0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80
        40 80
   000F 00                  118 	.db	0
                            119 ;types.h:27: signed char sintab[256]={
   0010 21r00s00            120 	ld	hl,#_sintab
   0013 CDr00s00            121 	call	__initrleblock
   0016 3B                  122 	.db	59
   0017 00 03 06 09 0C 0F   123 	.db	0x00, 0x03, 0x06, 0x09, 0x0C, 0x0F, 0x12, 0x15
        12 15
   001F 18 1B 1E 21 24 27   124 	.db	0x18, 0x1B, 0x1E, 0x21, 0x24, 0x27, 0x2A, 0x2D
        2A 2D
   0027 30 33 36 39 3B 3E   125 	.db	0x30, 0x33, 0x36, 0x39, 0x3B, 0x3E, 0x41, 0x43
        41 43
   002F 46 49 4B 4E 50 52   126 	.db	0x46, 0x49, 0x4B, 0x4E, 0x50, 0x52, 0x55, 0x57
        55 57
   0037 59 5B 5E 60 62 64   127 	.db	0x59, 0x5B, 0x5E, 0x60, 0x62, 0x64, 0x66, 0x67
        66 67
   003F 69 6B 6C 6E 70 71   128 	.db	0x69, 0x6B, 0x6C, 0x6E, 0x70, 0x71, 0x72, 0x74
        72 74
   0047 75 76 77 78 79 7A   129 	.db	0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7B
        7B 7B
   004F 7C 7D 7D            130 	.db	0x7C, 0x7D, 0x7D
   0052 FB 7E               131 	.db	#-5,#0x7E
   0054 01                  132 	.db	1
   0055 7F                  133 	.db	0x7F
   0056 FB 7E               134 	.db	#-5,#0x7E
   0058 75                  135 	.db	117
   0059 7D 7D 7C 7B 7B 7A   136 	.db	0x7D, 0x7D, 0x7C, 0x7B, 0x7B, 0x7A, 0x79, 0x78
        79 78
   0061 77 76 75 74 72 71   137 	.db	0x77, 0x76, 0x75, 0x74, 0x72, 0x71, 0x70, 0x6E
        70 6E
   0069 6C 6B 69 67 66 64   138 	.db	0x6C, 0x6B, 0x69, 0x67, 0x66, 0x64, 0x62, 0x60
        62 60
   0071 5E 5B 59 57 55 52   139 	.db	0x5E, 0x5B, 0x59, 0x57, 0x55, 0x52, 0x50, 0x4E
        50 4E
   0079 4B 49 46 43 41 3E   140 	.db	0x4B, 0x49, 0x46, 0x43, 0x41, 0x3E, 0x3B, 0x39
        3B 39
   0081 36 33 30 2D 2A 27   141 	.db	0x36, 0x33, 0x30, 0x2D, 0x2A, 0x27, 0x24, 0x21
        24 21
   0089 1E 1B 18 15 12 0F   142 	.db	0x1E, 0x1B, 0x18, 0x15, 0x12, 0x0F, 0x0C, 0x09
        0C 09
   0091 06 03 00 FD FA F7   143 	.db	0x06, 0x03, 0x00, 0xFD, 0xFA, 0xF7, 0xF4, 0xF1
        F4 F1
   0099 EE EB E8 E5 E2 DF   144 	.db	0xEE, 0xEB, 0xE8, 0xE5, 0xE2, 0xDF, 0xDC, 0xD9
        DC D9
   00A1 D6 D3 D0 CD CA C7   145 	.db	0xD6, 0xD3, 0xD0, 0xCD, 0xCA, 0xC7, 0xC5, 0xC2
        C5 C2
   00A9 BF BD BA B7 B5 B2   146 	.db	0xBF, 0xBD, 0xBA, 0xB7, 0xB5, 0xB2, 0xB0, 0xAE
        B0 AE
   00B1 AB A9 A7 A5 A2 A0   147 	.db	0xAB, 0xA9, 0xA7, 0xA5, 0xA2, 0xA0, 0x9E, 0x9C
        9E 9C
   00B9 9A 99 97 95 94 92   148 	.db	0x9A, 0x99, 0x97, 0x95, 0x94, 0x92, 0x90, 0x8F
        90 8F
   00C1 8E 8C 8B 8A 89 88   149 	.db	0x8E, 0x8C, 0x8B, 0x8A, 0x89, 0x88, 0x87, 0x86
        87 86
   00C9 85 85 84 83 83      150 	.db	0x85, 0x85, 0x84, 0x83, 0x83
   00CE FB 82               151 	.db	#-5,#0x82
   00D0 01                  152 	.db	1
   00D1 81                  153 	.db	0x81
   00D2 FB 82               154 	.db	#-5,#0x82
   00D4 3A                  155 	.db	58
   00D5 83 83 84 85 85 86   156 	.db	0x83, 0x83, 0x84, 0x85, 0x85, 0x86, 0x87, 0x88
        87 88
   00DD 89 8A 8B 8C 8E 8F   157 	.db	0x89, 0x8A, 0x8B, 0x8C, 0x8E, 0x8F, 0x90, 0x92
        90 92
   00E5 94 95 97 99 9A 9C   158 	.db	0x94, 0x95, 0x97, 0x99, 0x9A, 0x9C, 0x9E, 0xA0
        9E A0
   00ED A2 A5 A7 A9 AB AE   159 	.db	0xA2, 0xA5, 0xA7, 0xA9, 0xAB, 0xAE, 0xB0, 0xB2
        B0 B2
   00F5 B5 B7 BA BD BF C2   160 	.db	0xB5, 0xB7, 0xBA, 0xBD, 0xBF, 0xC2, 0xC5, 0xC7
        C5 C7
   00FD CA CD D0 D3 D6 D9   161 	.db	0xCA, 0xCD, 0xD0, 0xD3, 0xD6, 0xD9, 0xDC, 0xDF
        DC DF
   0105 E2 E5 E8 EB EE F1   162 	.db	0xE2, 0xE5, 0xE8, 0xEB, 0xEE, 0xF1, 0xF4, 0xF7
        F4 F7
   010D FA FD               163 	.db	0xFA, 0xFD
   010F 00                  164 	.db	0
                            165 ;demo.c:36: uint8_t packbuffer[16000] = {0};
   0110 21r00s01            166 	ld	hl,#_packbuffer
   0113 CDr00s00            167 	call	__initrleblock
   0116 81 00               168 	.db	#-127,#0x00
   0118 81 00               169 	.db	#-127,#0x00
   011A 81 00               170 	.db	#-127,#0x00
   011C 81 00               171 	.db	#-127,#0x00
   011E 81 00               172 	.db	#-127,#0x00
   0120 81 00               173 	.db	#-127,#0x00
   0122 81 00               174 	.db	#-127,#0x00
   0124 81 00               175 	.db	#-127,#0x00
   0126 81 00               176 	.db	#-127,#0x00
   0128 81 00               177 	.db	#-127,#0x00
   012A 81 00               178 	.db	#-127,#0x00
   012C 81 00               179 	.db	#-127,#0x00
   012E 81 00               180 	.db	#-127,#0x00
   0130 81 00               181 	.db	#-127,#0x00
   0132 81 00               182 	.db	#-127,#0x00
   0134 81 00               183 	.db	#-127,#0x00
   0136 81 00               184 	.db	#-127,#0x00
   0138 81 00               185 	.db	#-127,#0x00
   013A 81 00               186 	.db	#-127,#0x00
   013C 81 00               187 	.db	#-127,#0x00
   013E 81 00               188 	.db	#-127,#0x00
   0140 81 00               189 	.db	#-127,#0x00
   0142 81 00               190 	.db	#-127,#0x00
   0144 81 00               191 	.db	#-127,#0x00
   0146 81 00               192 	.db	#-127,#0x00
   0148 81 00               193 	.db	#-127,#0x00
   014A 81 00               194 	.db	#-127,#0x00
   014C 81 00               195 	.db	#-127,#0x00
   014E 81 00               196 	.db	#-127,#0x00
   0150 81 00               197 	.db	#-127,#0x00
   0152 81 00               198 	.db	#-127,#0x00
   0154 81 00               199 	.db	#-127,#0x00
   0156 81 00               200 	.db	#-127,#0x00
   0158 81 00               201 	.db	#-127,#0x00
   015A 81 00               202 	.db	#-127,#0x00
   015C 81 00               203 	.db	#-127,#0x00
   015E 81 00               204 	.db	#-127,#0x00
   0160 81 00               205 	.db	#-127,#0x00
   0162 81 00               206 	.db	#-127,#0x00
   0164 81 00               207 	.db	#-127,#0x00
   0166 81 00               208 	.db	#-127,#0x00
   0168 81 00               209 	.db	#-127,#0x00
   016A 81 00               210 	.db	#-127,#0x00
   016C 81 00               211 	.db	#-127,#0x00
   016E 81 00               212 	.db	#-127,#0x00
   0170 81 00               213 	.db	#-127,#0x00
   0172 81 00               214 	.db	#-127,#0x00
   0174 81 00               215 	.db	#-127,#0x00
   0176 81 00               216 	.db	#-127,#0x00
   0178 81 00               217 	.db	#-127,#0x00
   017A 81 00               218 	.db	#-127,#0x00
   017C 81 00               219 	.db	#-127,#0x00
   017E 81 00               220 	.db	#-127,#0x00
   0180 81 00               221 	.db	#-127,#0x00
   0182 81 00               222 	.db	#-127,#0x00
   0184 81 00               223 	.db	#-127,#0x00
   0186 81 00               224 	.db	#-127,#0x00
   0188 81 00               225 	.db	#-127,#0x00
   018A 81 00               226 	.db	#-127,#0x00
   018C 81 00               227 	.db	#-127,#0x00
   018E 81 00               228 	.db	#-127,#0x00
   0190 81 00               229 	.db	#-127,#0x00
   0192 81 00               230 	.db	#-127,#0x00
   0194 81 00               231 	.db	#-127,#0x00
   0196 81 00               232 	.db	#-127,#0x00
   0198 81 00               233 	.db	#-127,#0x00
   019A 81 00               234 	.db	#-127,#0x00
   019C 81 00               235 	.db	#-127,#0x00
   019E 81 00               236 	.db	#-127,#0x00
   01A0 81 00               237 	.db	#-127,#0x00
   01A2 81 00               238 	.db	#-127,#0x00
   01A4 81 00               239 	.db	#-127,#0x00
   01A6 81 00               240 	.db	#-127,#0x00
   01A8 81 00               241 	.db	#-127,#0x00
   01AA 81 00               242 	.db	#-127,#0x00
   01AC 81 00               243 	.db	#-127,#0x00
   01AE 81 00               244 	.db	#-127,#0x00
   01B0 81 00               245 	.db	#-127,#0x00
   01B2 81 00               246 	.db	#-127,#0x00
   01B4 81 00               247 	.db	#-127,#0x00
   01B6 81 00               248 	.db	#-127,#0x00
   01B8 81 00               249 	.db	#-127,#0x00
   01BA 81 00               250 	.db	#-127,#0x00
   01BC 81 00               251 	.db	#-127,#0x00
   01BE 81 00               252 	.db	#-127,#0x00
   01C0 81 00               253 	.db	#-127,#0x00
   01C2 81 00               254 	.db	#-127,#0x00
   01C4 81 00               255 	.db	#-127,#0x00
   01C6 81 00               256 	.db	#-127,#0x00
   01C8 81 00               257 	.db	#-127,#0x00
   01CA 81 00               258 	.db	#-127,#0x00
   01CC 81 00               259 	.db	#-127,#0x00
   01CE 81 00               260 	.db	#-127,#0x00
   01D0 81 00               261 	.db	#-127,#0x00
   01D2 81 00               262 	.db	#-127,#0x00
   01D4 81 00               263 	.db	#-127,#0x00
   01D6 81 00               264 	.db	#-127,#0x00
   01D8 81 00               265 	.db	#-127,#0x00
   01DA 81 00               266 	.db	#-127,#0x00
   01DC 81 00               267 	.db	#-127,#0x00
   01DE 81 00               268 	.db	#-127,#0x00
   01E0 81 00               269 	.db	#-127,#0x00
   01E2 81 00               270 	.db	#-127,#0x00
   01E4 81 00               271 	.db	#-127,#0x00
   01E6 81 00               272 	.db	#-127,#0x00
   01E8 81 00               273 	.db	#-127,#0x00
   01EA 81 00               274 	.db	#-127,#0x00
   01EC 81 00               275 	.db	#-127,#0x00
   01EE 81 00               276 	.db	#-127,#0x00
   01F0 81 00               277 	.db	#-127,#0x00
   01F2 81 00               278 	.db	#-127,#0x00
   01F4 81 00               279 	.db	#-127,#0x00
   01F6 81 00               280 	.db	#-127,#0x00
   01F8 81 00               281 	.db	#-127,#0x00
   01FA 81 00               282 	.db	#-127,#0x00
   01FC 81 00               283 	.db	#-127,#0x00
   01FE 81 00               284 	.db	#-127,#0x00
   0200 81 00               285 	.db	#-127,#0x00
   0202 81 00               286 	.db	#-127,#0x00
   0204 81 00               287 	.db	#-127,#0x00
   0206 81 00               288 	.db	#-127,#0x00
   0208 81 00               289 	.db	#-127,#0x00
   020A 81 00               290 	.db	#-127,#0x00
   020C 81 00               291 	.db	#-127,#0x00
   020E 81 00               292 	.db	#-127,#0x00
   0210 83 00               293 	.db	#-125,#0x00
   0212 00                  294 	.db	0
                            295 ;demo.c:42: volatile int vbicount=0;
   0213 FD 21r40s40         296 	ld	iy,#_vbicount
   0217 FD 36 00 00         297 	ld	0 (iy),#0x00
   021B FD 21r40s40         298 	ld	iy,#_vbicount
   021F FD 36 01 00         299 	ld	1 (iy),#0x00
                            300 ;demo.c:43: volatile int tick=0;
   0223 FD 21r42s40         301 	ld	iy,#_tick
   0227 FD 36 00 00         302 	ld	0 (iy),#0x00
   022B FD 21r42s40         303 	ld	iy,#_tick
   022F FD 36 01 00         304 	ld	1 (iy),#0x00
                            305 ;demo.c:212: uint8_t yofff = 0;
   0233 FD 21r4Cs40         306 	ld	iy,#_yofff
   0237 FD 36 00 00         307 	ld	0 (iy),#0x00
                            308 ;demo.c:213: uint8_t cc = 0;
   023B FD 21r4Ds40         309 	ld	iy,#_cc
   023F FD 36 00 00         310 	ld	0 (iy),#0x00
                            311 ;demo.c:214: static int flipper = 0;
   0243 FD 21r4Es40         312 	ld	iy,#_flipper
   0247 FD 36 00 00         313 	ld	0 (iy),#0x00
   024B FD 21r4Es40         314 	ld	iy,#_flipper
   024F FD 36 01 00         315 	ld	1 (iy),#0x00
                            316 ;demo.c:215: static int ymmmf = 0;
   0253 FD 21r50s40         317 	ld	iy,#_ymmmf
   0257 FD 36 00 00         318 	ld	0 (iy),#0x00
   025B FD 21r50s40         319 	ld	iy,#_ymmmf
   025F FD 36 01 00         320 	ld	1 (iy),#0x00
                            321 ;demo.c:247: char block_init = 0;
   0263 FD 21r52s40         322 	ld	iy,#_block_init
   0267 FD 36 00 00         323 	ld	0 (iy),#0x00
                            324 ;demo.c:249: int bsx = 0;
   026B FD 21r53s40         325 	ld	iy,#_bsx
   026F FD 36 00 00         326 	ld	0 (iy),#0x00
   0273 FD 21r53s40         327 	ld	iy,#_bsx
   0277 FD 36 01 00         328 	ld	1 (iy),#0x00
                            329 ;demo.c:250: int bsy = 0;
   027B FD 21r55s40         330 	ld	iy,#_bsy
   027F FD 36 00 00         331 	ld	0 (iy),#0x00
   0283 FD 21r55s40         332 	ld	iy,#_bsy
   0287 FD 36 01 00         333 	ld	1 (iy),#0x00
                            334 ;demo.c:251: int btx = 0;
   028B FD 21r57s40         335 	ld	iy,#_btx
   028F FD 36 00 00         336 	ld	0 (iy),#0x00
   0293 FD 21r57s40         337 	ld	iy,#_btx
   0297 FD 36 01 00         338 	ld	1 (iy),#0x00
                            339 ;demo.c:252: int bty = 0;
   029B FD 21r59s40         340 	ld	iy,#_bty
   029F FD 36 00 00         341 	ld	0 (iy),#0x00
   02A3 FD 21r59s40         342 	ld	iy,#_bty
   02A7 FD 36 01 00         343 	ld	1 (iy),#0x00
                            344 ;demo.c:254: int btab[16] = {0};
   02AB 21r5Bs40            345 	ld	hl,#_btab
   02AE CDr00s00            346 	call	__initrleblock
   02B1 E0 00               347 	.db	#-32,#0x00
   02B3 00                  348 	.db	0
                            349 ;demo.c:256: int flof = 0;
   02B4 FD 21r7Bs40         350 	ld	iy,#_flof
   02B8 FD 36 00 00         351 	ld	0 (iy),#0x00
   02BC FD 21r7Bs40         352 	ld	iy,#_flof
   02C0 FD 36 01 00         353 	ld	1 (iy),#0x00
                            354 ;demo.c:306: volatile int linenum = 10;
   02C4 FD 21r7Ds40         355 	ld	iy,#_linenum
   02C8 FD 36 00 0A         356 	ld	0 (iy),#0x0A
   02CC FD 21r7Ds40         357 	ld	iy,#_linenum
   02D0 FD 36 01 00         358 	ld	1 (iy),#0x00
                            359 ;demo.c:341: static int xo = 0;
   02D4 FD 21r7Fs40         360 	ld	iy,#_xo
   02D8 FD 36 00 00         361 	ld	0 (iy),#0x00
   02DC FD 21r7Fs40         362 	ld	iy,#_xo
   02E0 FD 36 01 00         363 	ld	1 (iy),#0x00
                            364 ;demo.c:342: static int yo = 0;
   02E4 FD 21r81s40         365 	ld	iy,#_yo
   02E8 FD 36 00 00         366 	ld	0 (iy),#0x00
   02EC FD 21r81s40         367 	ld	iy,#_yo
   02F0 FD 36 01 00         368 	ld	1 (iy),#0x00
                            369 ;demo.c:343: static int po = 0;
   02F4 FD 21r83s40         370 	ld	iy,#_po
   02F8 FD 36 00 00         371 	ld	0 (iy),#0x00
   02FC FD 21r83s40         372 	ld	iy,#_po
   0300 FD 36 01 00         373 	ld	1 (iy),#0x00
                            374 ;demo.c:344: static int fffaaa = 0;
   0304 FD 21r85s40         375 	ld	iy,#_fffaaa
   0308 FD 36 00 00         376 	ld	0 (iy),#0x00
   030C FD 21r85s40         377 	ld	iy,#_fffaaa
   0310 FD 36 01 00         378 	ld	1 (iy),#0x00
                            379 ;--------------------------------------------------------
                            380 ; Home
                            381 ;--------------------------------------------------------
                            382 	.area _HOME
                            383 	.area _HOME
                            384 ;--------------------------------------------------------
                            385 ; code
                            386 ;--------------------------------------------------------
                            387 	.area _CODE
                            388 ;demo.c:46: int isNthBitSet (unsigned char c, int n) {
                            389 ;	---------------------------------
                            390 ; Function isNthBitSet
                            391 ; ---------------------------------
   0000                     392 _isNthBitSet_start::
   0000                     393 _isNthBitSet:
   0000 DD E5               394 	push	ix
   0002 DD 21 00 00         395 	ld	ix,#0
   0006 DD 39               396 	add	ix,sp
                            397 ;demo.c:48: return ((c & mask[n]) != 0);
   0008 3Er44               398 	ld	a,#<_isNthBitSet_mask_1_1
   000A DD 86 05            399 	add	a,5 (ix)
   000D 4F                  400 	ld	c,a
   000E 3Es40               401 	ld	a,#>_isNthBitSet_mask_1_1
   0010 DD 8E 06            402 	adc	a,6 (ix)
   0013 47                  403 	ld	b,a
   0014 0A                  404 	ld	a,(bc)
   0015 DD A6 04            405 	and	a,4 (ix)
   0018 20 04               406 	jr	NZ,00103$
   001A 3E 01               407 	ld	a,#0x01
   001C 18 01               408 	jr	00104$
   001E                     409 00103$:
   001E AF                  410 	xor	a,a
   001F                     411 00104$:
   001F B7                  412 	or	a,a
   0020 D6 01               413 	sub	a,#0x01
   0022 3E 00               414 	ld	a,#0x00
   0024 17                  415 	rla
   0025 4F                  416 	ld	c,a
   0026 69                  417 	ld	l,c
   0027 26 00               418 	ld	h,#0x00
   0029 DD E1               419 	pop	ix
   002B C9                  420 	ret
   002C                     421 _isNthBitSet_end::
   002C                     422 _sintabx:
   002C 78 00               423 	.dw #0x0078
   002E 7A 00               424 	.dw #0x007A
   0030 7D 00               425 	.dw #0x007D
   0032 80 00               426 	.dw #0x0080
   0034 83 00               427 	.dw #0x0083
   0036 86 00               428 	.dw #0x0086
   0038 89 00               429 	.dw #0x0089
   003A 8C 00               430 	.dw #0x008C
   003C 8F 00               431 	.dw #0x008F
   003E 92 00               432 	.dw #0x0092
   0040 95 00               433 	.dw #0x0095
   0042 98 00               434 	.dw #0x0098
   0044 9A 00               435 	.dw #0x009A
   0046 9D 00               436 	.dw #0x009D
   0048 A0 00               437 	.dw #0x00A0
   004A A3 00               438 	.dw #0x00A3
   004C A5 00               439 	.dw #0x00A5
   004E A8 00               440 	.dw #0x00A8
   0050 AB 00               441 	.dw #0x00AB
   0052 AD 00               442 	.dw #0x00AD
   0054 B0 00               443 	.dw #0x00B0
   0056 B3 00               444 	.dw #0x00B3
   0058 B5 00               445 	.dw #0x00B5
   005A B8 00               446 	.dw #0x00B8
   005C BA 00               447 	.dw #0x00BA
   005E BD 00               448 	.dw #0x00BD
   0060 BF 00               449 	.dw #0x00BF
   0062 C1 00               450 	.dw #0x00C1
   0064 C4 00               451 	.dw #0x00C4
   0066 C6 00               452 	.dw #0x00C6
   0068 C8 00               453 	.dw #0x00C8
   006A CA 00               454 	.dw #0x00CA
   006C CC 00               455 	.dw #0x00CC
   006E CE 00               456 	.dw #0x00CE
   0070 D0 00               457 	.dw #0x00D0
   0072 D2 00               458 	.dw #0x00D2
   0074 D4 00               459 	.dw #0x00D4
   0076 D6 00               460 	.dw #0x00D6
   0078 D8 00               461 	.dw #0x00D8
   007A DA 00               462 	.dw #0x00DA
   007C DB 00               463 	.dw #0x00DB
   007E DD 00               464 	.dw #0x00DD
   0080 DE 00               465 	.dw #0x00DE
   0082 E0 00               466 	.dw #0x00E0
   0084 E1 00               467 	.dw #0x00E1
   0086 E3 00               468 	.dw #0x00E3
   0088 E4 00               469 	.dw #0x00E4
   008A E5 00               470 	.dw #0x00E5
   008C E6 00               471 	.dw #0x00E6
   008E E7 00               472 	.dw #0x00E7
   0090 E8 00               473 	.dw #0x00E8
   0092 E9 00               474 	.dw #0x00E9
   0094 EA 00               475 	.dw #0x00EA
   0096 EB 00               476 	.dw #0x00EB
   0098 EC 00               477 	.dw #0x00EC
   009A ED 00               478 	.dw #0x00ED
   009C ED 00               479 	.dw #0x00ED
   009E EE 00               480 	.dw #0x00EE
   00A0 EE 00               481 	.dw #0x00EE
   00A2 EF 00               482 	.dw #0x00EF
   00A4 EF 00               483 	.dw #0x00EF
   00A6 EF 00               484 	.dw #0x00EF
   00A8 EF 00               485 	.dw #0x00EF
   00AA EF 00               486 	.dw #0x00EF
   00AC F0 00               487 	.dw #0x00F0
   00AE EF 00               488 	.dw #0x00EF
   00B0 EF 00               489 	.dw #0x00EF
   00B2 EF 00               490 	.dw #0x00EF
   00B4 EF 00               491 	.dw #0x00EF
   00B6 EF 00               492 	.dw #0x00EF
   00B8 EE 00               493 	.dw #0x00EE
   00BA EE 00               494 	.dw #0x00EE
   00BC ED 00               495 	.dw #0x00ED
   00BE ED 00               496 	.dw #0x00ED
   00C0 EC 00               497 	.dw #0x00EC
   00C2 EB 00               498 	.dw #0x00EB
   00C4 EA 00               499 	.dw #0x00EA
   00C6 E9 00               500 	.dw #0x00E9
   00C8 E8 00               501 	.dw #0x00E8
   00CA E7 00               502 	.dw #0x00E7
   00CC E6 00               503 	.dw #0x00E6
   00CE E5 00               504 	.dw #0x00E5
   00D0 E4 00               505 	.dw #0x00E4
   00D2 E3 00               506 	.dw #0x00E3
   00D4 E1 00               507 	.dw #0x00E1
   00D6 E0 00               508 	.dw #0x00E0
   00D8 DE 00               509 	.dw #0x00DE
   00DA DD 00               510 	.dw #0x00DD
   00DC DB 00               511 	.dw #0x00DB
   00DE DA 00               512 	.dw #0x00DA
   00E0 D8 00               513 	.dw #0x00D8
   00E2 D6 00               514 	.dw #0x00D6
   00E4 D4 00               515 	.dw #0x00D4
   00E6 D2 00               516 	.dw #0x00D2
   00E8 D0 00               517 	.dw #0x00D0
   00EA CE 00               518 	.dw #0x00CE
   00EC CC 00               519 	.dw #0x00CC
   00EE CA 00               520 	.dw #0x00CA
   00F0 C8 00               521 	.dw #0x00C8
   00F2 C6 00               522 	.dw #0x00C6
   00F4 C4 00               523 	.dw #0x00C4
   00F6 C1 00               524 	.dw #0x00C1
   00F8 BF 00               525 	.dw #0x00BF
   00FA BD 00               526 	.dw #0x00BD
   00FC BA 00               527 	.dw #0x00BA
   00FE B8 00               528 	.dw #0x00B8
   0100 B5 00               529 	.dw #0x00B5
   0102 B3 00               530 	.dw #0x00B3
   0104 B0 00               531 	.dw #0x00B0
   0106 AD 00               532 	.dw #0x00AD
   0108 AB 00               533 	.dw #0x00AB
   010A A8 00               534 	.dw #0x00A8
   010C A5 00               535 	.dw #0x00A5
   010E A3 00               536 	.dw #0x00A3
   0110 A0 00               537 	.dw #0x00A0
   0112 9D 00               538 	.dw #0x009D
   0114 9A 00               539 	.dw #0x009A
   0116 98 00               540 	.dw #0x0098
   0118 95 00               541 	.dw #0x0095
   011A 92 00               542 	.dw #0x0092
   011C 8F 00               543 	.dw #0x008F
   011E 8C 00               544 	.dw #0x008C
   0120 89 00               545 	.dw #0x0089
   0122 86 00               546 	.dw #0x0086
   0124 83 00               547 	.dw #0x0083
   0126 80 00               548 	.dw #0x0080
   0128 7D 00               549 	.dw #0x007D
   012A 7A 00               550 	.dw #0x007A
   012C 78 00               551 	.dw #0x0078
   012E 75 00               552 	.dw #0x0075
   0130 72 00               553 	.dw #0x0072
   0132 6F 00               554 	.dw #0x006F
   0134 6C 00               555 	.dw #0x006C
   0136 69 00               556 	.dw #0x0069
   0138 66 00               557 	.dw #0x0066
   013A 63 00               558 	.dw #0x0063
   013C 60 00               559 	.dw #0x0060
   013E 5D 00               560 	.dw #0x005D
   0140 5A 00               561 	.dw #0x005A
   0142 57 00               562 	.dw #0x0057
   0144 55 00               563 	.dw #0x0055
   0146 52 00               564 	.dw #0x0052
   0148 4F 00               565 	.dw #0x004F
   014A 4C 00               566 	.dw #0x004C
   014C 4A 00               567 	.dw #0x004A
   014E 47 00               568 	.dw #0x0047
   0150 44 00               569 	.dw #0x0044
   0152 42 00               570 	.dw #0x0042
   0154 3F 00               571 	.dw #0x003F
   0156 3C 00               572 	.dw #0x003C
   0158 3A 00               573 	.dw #0x003A
   015A 37 00               574 	.dw #0x0037
   015C 35 00               575 	.dw #0x0035
   015E 32 00               576 	.dw #0x0032
   0160 30 00               577 	.dw #0x0030
   0162 2E 00               578 	.dw #0x002E
   0164 2B 00               579 	.dw #0x002B
   0166 29 00               580 	.dw #0x0029
   0168 27 00               581 	.dw #0x0027
   016A 25 00               582 	.dw #0x0025
   016C 23 00               583 	.dw #0x0023
   016E 21 00               584 	.dw #0x0021
   0170 1F 00               585 	.dw #0x001F
   0172 1D 00               586 	.dw #0x001D
   0174 1B 00               587 	.dw #0x001B
   0176 19 00               588 	.dw #0x0019
   0178 17 00               589 	.dw #0x0017
   017A 15 00               590 	.dw #0x0015
   017C 14 00               591 	.dw #0x0014
   017E 12 00               592 	.dw #0x0012
   0180 11 00               593 	.dw #0x0011
   0182 0F 00               594 	.dw #0x000F
   0184 0E 00               595 	.dw #0x000E
   0186 0C 00               596 	.dw #0x000C
   0188 0B 00               597 	.dw #0x000B
   018A 0A 00               598 	.dw #0x000A
   018C 09 00               599 	.dw #0x0009
   018E 08 00               600 	.dw #0x0008
   0190 07 00               601 	.dw #0x0007
   0192 06 00               602 	.dw #0x0006
   0194 05 00               603 	.dw #0x0005
   0196 04 00               604 	.dw #0x0004
   0198 03 00               605 	.dw #0x0003
   019A 02 00               606 	.dw #0x0002
   019C 02 00               607 	.dw #0x0002
   019E 01 00               608 	.dw #0x0001
   01A0 01 00               609 	.dw #0x0001
   01A2 00 00               610 	.dw #0x0000
   01A4 00 00               611 	.dw #0x0000
   01A6 00 00               612 	.dw #0x0000
   01A8 00 00               613 	.dw #0x0000
   01AA 00 00               614 	.dw #0x0000
   01AC 00 00               615 	.dw #0x0000
   01AE 00 00               616 	.dw #0x0000
   01B0 00 00               617 	.dw #0x0000
   01B2 00 00               618 	.dw #0x0000
   01B4 00 00               619 	.dw #0x0000
   01B6 00 00               620 	.dw #0x0000
   01B8 01 00               621 	.dw #0x0001
   01BA 01 00               622 	.dw #0x0001
   01BC 02 00               623 	.dw #0x0002
   01BE 02 00               624 	.dw #0x0002
   01C0 03 00               625 	.dw #0x0003
   01C2 04 00               626 	.dw #0x0004
   01C4 05 00               627 	.dw #0x0005
   01C6 06 00               628 	.dw #0x0006
   01C8 07 00               629 	.dw #0x0007
   01CA 08 00               630 	.dw #0x0008
   01CC 09 00               631 	.dw #0x0009
   01CE 0A 00               632 	.dw #0x000A
   01D0 0B 00               633 	.dw #0x000B
   01D2 0C 00               634 	.dw #0x000C
   01D4 0E 00               635 	.dw #0x000E
   01D6 0F 00               636 	.dw #0x000F
   01D8 11 00               637 	.dw #0x0011
   01DA 12 00               638 	.dw #0x0012
   01DC 14 00               639 	.dw #0x0014
   01DE 15 00               640 	.dw #0x0015
   01E0 17 00               641 	.dw #0x0017
   01E2 19 00               642 	.dw #0x0019
   01E4 1B 00               643 	.dw #0x001B
   01E6 1D 00               644 	.dw #0x001D
   01E8 1F 00               645 	.dw #0x001F
   01EA 21 00               646 	.dw #0x0021
   01EC 23 00               647 	.dw #0x0023
   01EE 25 00               648 	.dw #0x0025
   01F0 27 00               649 	.dw #0x0027
   01F2 29 00               650 	.dw #0x0029
   01F4 2B 00               651 	.dw #0x002B
   01F6 2E 00               652 	.dw #0x002E
   01F8 30 00               653 	.dw #0x0030
   01FA 32 00               654 	.dw #0x0032
   01FC 35 00               655 	.dw #0x0035
   01FE 37 00               656 	.dw #0x0037
   0200 3A 00               657 	.dw #0x003A
   0202 3C 00               658 	.dw #0x003C
   0204 3F 00               659 	.dw #0x003F
   0206 42 00               660 	.dw #0x0042
   0208 44 00               661 	.dw #0x0044
   020A 47 00               662 	.dw #0x0047
   020C 4A 00               663 	.dw #0x004A
   020E 4C 00               664 	.dw #0x004C
   0210 4F 00               665 	.dw #0x004F
   0212 52 00               666 	.dw #0x0052
   0214 55 00               667 	.dw #0x0055
   0216 57 00               668 	.dw #0x0057
   0218 5A 00               669 	.dw #0x005A
   021A 5D 00               670 	.dw #0x005D
   021C 60 00               671 	.dw #0x0060
   021E 63 00               672 	.dw #0x0063
   0220 66 00               673 	.dw #0x0066
   0222 69 00               674 	.dw #0x0069
   0224 6C 00               675 	.dw #0x006C
   0226 6F 00               676 	.dw #0x006F
   0228 72 00               677 	.dw #0x0072
   022A 75 00               678 	.dw #0x0075
                            679 ;demo.c:55: void my_isr(void) interrupt
                            680 ;	---------------------------------
                            681 ; Function my_isr
                            682 ; ---------------------------------
   022C                     683 _my_isr_start::
   022C                     684 _my_isr:
   022C F5                  685 	push	af
   022D C5                  686 	push	bc
   022E D5                  687 	push	de
   022F E5                  688 	push	hl
   0230 FD E5               689 	push	iy
                            690 ;demo.c:57: DI;
   0232 F3                  691 		di 
                            692 ;demo.c:59: READ_VDP_STATUS;
   0233 DB 99               693 		in a,(#0x99) 
                            694 ;demo.c:61: PLY_Play();
   0235 CDr00s00            695 	call	_PLY_Play
                            696 ;demo.c:62: PLY_SendRegisters();
   0238 CDr00s00            697 	call	_PLY_SendRegisters
                            698 ;demo.c:64: vbicount++;
   023B FD 21r40s40         699 	ld	iy,#_vbicount
   023F FD 34 00            700 	inc	0 (iy)
   0242 20 07               701 	jr	NZ,00103$
   0244 FD 21r40s40         702 	ld	iy,#_vbicount
   0248 FD 34 01            703 	inc	1 (iy)
   024B                     704 00103$:
                            705 ;demo.c:65: tick++;
   024B FD 21r42s40         706 	ld	iy,#_tick
   024F FD 34 00            707 	inc	0 (iy)
   0252 20 07               708 	jr	NZ,00104$
   0254 FD 21r42s40         709 	ld	iy,#_tick
   0258 FD 34 01            710 	inc	1 (iy)
   025B                     711 00104$:
                            712 ;demo.c:67: EI;
   025B FB                  713 		ei 
   025C FD E1               714 	pop	iy
   025E E1                  715 	pop	hl
   025F D1                  716 	pop	de
   0260 C1                  717 	pop	bc
   0261 F1                  718 	pop	af
   0262 ED 4D               719 	reti
   0264                     720 _my_isr_end::
                            721 ;demo.c:70: void color_isr(void) interrupt
                            722 ;	---------------------------------
                            723 ; Function color_isr
                            724 ; ---------------------------------
   0264                     725 _color_isr_start::
   0264                     726 _color_isr:
   0264 F5                  727 	push	af
   0265 C5                  728 	push	bc
   0266 D5                  729 	push	de
   0267 E5                  730 	push	hl
   0268 FD E5               731 	push	iy
                            732 ;demo.c:72: DI;
   026A F3                  733 		di 
                            734 ;demo.c:74: if(isNthBitSet(vdp2_status(1),0)) {
   026B 3E 01               735 	ld	a,#0x01
   026D F5                  736 	push	af
   026E 33                  737 	inc	sp
   026F CDr00s00            738 	call	_vdp2_status
   0272 33                  739 	inc	sp
   0273 4D                  740 	ld	c,l
   0274 21 00 00            741 	ld	hl,#0x0000
   0277 E5                  742 	push	hl
   0278 79                  743 	ld	a,c
   0279 F5                  744 	push	af
   027A 33                  745 	inc	sp
   027B CDr00s00            746 	call	_isNthBitSet
   027E F1                  747 	pop	af
   027F 33                  748 	inc	sp
   0280 44                  749 	ld	b,h
   0281 4D                  750 	ld	c,l
   0282 79                  751 	ld	a,c
   0283 B0                  752 	or	a,b
   0284 28 11               753 	jr	Z,00102$
                            754 ;demo.c:75: READ_VDP_STATUS;
   0286 DB 99               755 		in a,(#0x99) 
                            756 ;demo.c:76: msx2_palette(0,4,5,6);
   0288 21 05 06            757 	ld	hl,#0x0605
   028B E5                  758 	push	hl
   028C 21 00 04            759 	ld	hl,#0x0400
   028F E5                  760 	push	hl
   0290 CDr00s00            761 	call	_msx2_palette
   0293 F1                  762 	pop	af
   0294 F1                  763 	pop	af
   0295 18 24               764 	jr	00103$
   0297                     765 00102$:
                            766 ;demo.c:78: READ_VDP_STATUS;
   0297 DB 99               767 		in a,(#0x99) 
                            768 ;demo.c:79: msx2_palette(0,0,0,0);
   0299 21 00 00            769 	ld	hl,#0x0000
   029C E5                  770 	push	hl
   029D 2E 00               771 	ld	l, #0x00
   029F E5                  772 	push	hl
   02A0 CDr00s00            773 	call	_msx2_palette
   02A3 F1                  774 	pop	af
   02A4 F1                  775 	pop	af
                            776 ;demo.c:81: PLY_Play();
   02A5 CDr00s00            777 	call	_PLY_Play
                            778 ;demo.c:82: PLY_SendRegisters();
   02A8 CDr00s00            779 	call	_PLY_SendRegisters
                            780 ;demo.c:83: vbicount++;
   02AB FD 21r40s40         781 	ld	iy,#_vbicount
   02AF FD 34 00            782 	inc	0 (iy)
   02B2 20 07               783 	jr	NZ,00107$
   02B4 FD 21r40s40         784 	ld	iy,#_vbicount
   02B8 FD 34 01            785 	inc	1 (iy)
   02BB                     786 00107$:
   02BB                     787 00103$:
                            788 ;demo.c:86: EI;
   02BB FB                  789 		ei 
   02BC FD E1               790 	pop	iy
   02BE E1                  791 	pop	hl
   02BF D1                  792 	pop	de
   02C0 C1                  793 	pop	bc
   02C1 F1                  794 	pop	af
   02C2 ED 4D               795 	reti
   02C4                     796 _color_isr_end::
                            797 ;demo.c:93: uint8_t ge5_load(char *file_name, uint8_t vramh, uint16_t vraml) {
                            798 ;	---------------------------------
                            799 ; Function ge5_load
                            800 ; ---------------------------------
   02C4                     801 _ge5_load_start::
   02C4                     802 _ge5_load:
   02C4 DD E5               803 	push	ix
   02C6 DD 21 00 00         804 	ld	ix,#0
   02CA DD 39               805 	add	ix,sp
   02CC 21 D2 FF            806 	ld	hl,#-46
   02CF 39                  807 	add	hl,sp
   02D0 F9                  808 	ld	sp,hl
                            809 ;demo.c:97: memset((uint8_t *) &f, 0, sizeof(fcb));
   02D1 21 00 00            810 	ld	hl,#0x0000
   02D4 39                  811 	add	hl,sp
   02D5 4D                  812 	ld	c,l
   02D6 44                  813 	ld	b,h
   02D7 21 2E 00            814 	ld	hl,#0x002E
   02DA E5                  815 	push	hl
   02DB 3E 00               816 	ld	a,#0x00
   02DD F5                  817 	push	af
   02DE 33                  818 	inc	sp
   02DF C5                  819 	push	bc
   02E0 CDr00s00            820 	call	_memset
   02E3 F1                  821 	pop	af
   02E4 F1                  822 	pop	af
   02E5 33                  823 	inc	sp
                            824 ;demo.c:99: f.record_size = 128;
   02E6 21 00 00            825 	ld	hl,#0x0000
   02E9 39                  826 	add	hl,sp
   02EA 4D                  827 	ld	c,l
   02EB 44                  828 	ld	b,h
   02EC 21 0F 00            829 	ld	hl,#0x000F
   02EF 09                  830 	add	hl,bc
   02F0 EB                  831 	ex	de,hl
   02F1 3E 80               832 	ld	a,#0x80
   02F3 12                  833 	ld	(de),a
                            834 ;demo.c:100: f.drive = 0;
   02F4 3E 00               835 	ld	a,#0x00
   02F6 02                  836 	ld	(bc),a
                            837 ;demo.c:102: memcpy(f.name, file_name, 11);
   02F7 DD 5E 04            838 	ld	e,4 (ix)
   02FA DD 56 05            839 	ld	d,5 (ix)
   02FD 03                  840 	inc	bc
   02FE 21 0B 00            841 	ld	hl,#0x000B
   0301 E5                  842 	push	hl
   0302 D5                  843 	push	de
   0303 C5                  844 	push	bc
   0304 CDr00s00            845 	call	_memcpy
   0307 F1                  846 	pop	af
   0308 F1                  847 	pop	af
   0309 F1                  848 	pop	af
                            849 ;demo.c:104: if (open(&f) != 0) return 0;
   030A 21 00 00            850 	ld	hl,#0x0000
   030D 39                  851 	add	hl,sp
   030E E5                  852 	push	hl
   030F CDr00s00            853 	call	_open
   0312 F1                  854 	pop	af
   0313 AF                  855 	xor	a,a
   0314 B5                  856 	or	a,l
   0315 28 05               857 	jr	Z,00102$
   0317 2E 00               858 	ld	l,#0x00
   0319 C3r90s03            859 	jp	00114$
   031C                     860 00102$:
                            861 ;demo.c:105: vdp_set_write_address(vramh, vraml);
   031C DD 6E 07            862 	ld	l,7 (ix)
   031F DD 66 08            863 	ld	h,8 (ix)
   0322 E5                  864 	push	hl
   0323 DD 7E 06            865 	ld	a,6 (ix)
   0326 F5                  866 	push	af
   0327 33                  867 	inc	sp
   0328 CDr00s00            868 	call	_vdp_set_write_address
   032B F1                  869 	pop	af
   032C 33                  870 	inc	sp
                            871 ;demo.c:107: for (i = 0; i < 213; i++) {
   032D 0E 00               872 	ld	c,#0x00
   032F                     873 00110$:
   032F 79                  874 	ld	a,c
   0330 D6 D5               875 	sub	a,#0xD5
   0332 D2r85s03            876 	jp	NC,00113$
                            877 ;demo.c:108: if (block_set_data_ptr(scratch) != 0) return 0;
   0335 C5                  878 	push	bc
   0336 21r80s3F            879 	ld	hl,#_scratch
   0339 E5                  880 	push	hl
   033A CDr00s00            881 	call	_block_set_data_ptr
   033D F1                  882 	pop	af
   033E 7D                  883 	ld	a,l
   033F C1                  884 	pop	bc
   0340 47                  885 	ld	b,a
   0341 B7                  886 	or	a,a
   0342 28 05               887 	jr	Z,00104$
   0344 2E 00               888 	ld	l,#0x00
   0346 C3r90s03            889 	jp	00114$
   0349                     890 00104$:
                            891 ;demo.c:109: if (block_read(&f) != 0) return 0;
   0349 21 00 00            892 	ld	hl,#0x0000
   034C 39                  893 	add	hl,sp
   034D C5                  894 	push	bc
   034E E5                  895 	push	hl
   034F CDr00s00            896 	call	_block_read
   0352 F1                  897 	pop	af
   0353 7D                  898 	ld	a,l
   0354 C1                  899 	pop	bc
   0355 47                  900 	ld	b,a
   0356 B7                  901 	or	a,a
   0357 28 04               902 	jr	Z,00106$
   0359 2E 00               903 	ld	l,#0x00
   035B 18 33               904 	jr	00114$
   035D                     905 00106$:
                            906 ;demo.c:111: if (i == 0) vdp_load_screen(scratch + 7, 121);   // to skip GE5 header
   035D AF                  907 	xor	a,a
   035E B1                  908 	or	a,c
   035F 20 11               909 	jr	NZ,00108$
   0361 11r87s3F            910 	ld	de,#_scratch + 7
   0364 C5                  911 	push	bc
   0365 3E 79               912 	ld	a,#0x79
   0367 F5                  913 	push	af
   0368 33                  914 	inc	sp
   0369 D5                  915 	push	de
   036A CDr00s00            916 	call	_vdp_load_screen
   036D F1                  917 	pop	af
   036E 33                  918 	inc	sp
   036F C1                  919 	pop	bc
   0370 18 0F               920 	jr	00112$
   0372                     921 00108$:
                            922 ;demo.c:112: else vdp_load_screen(scratch, 128);
   0372 C5                  923 	push	bc
   0373 3E 80               924 	ld	a,#0x80
   0375 F5                  925 	push	af
   0376 33                  926 	inc	sp
   0377 21r80s3F            927 	ld	hl,#_scratch
   037A E5                  928 	push	hl
   037B CDr00s00            929 	call	_vdp_load_screen
   037E F1                  930 	pop	af
   037F 33                  931 	inc	sp
   0380 C1                  932 	pop	bc
   0381                     933 00112$:
                            934 ;demo.c:107: for (i = 0; i < 213; i++) {
   0381 0C                  935 	inc	c
   0382 C3r2Fs03            936 	jp	00110$
   0385                     937 00113$:
                            938 ;demo.c:115: close(&f);
   0385 21 00 00            939 	ld	hl,#0x0000
   0388 39                  940 	add	hl,sp
   0389 E5                  941 	push	hl
   038A CDr00s00            942 	call	_close
   038D F1                  943 	pop	af
                            944 ;demo.c:117: return 1;
   038E 2E 01               945 	ld	l,#0x01
   0390                     946 00114$:
   0390 DD F9               947 	ld	sp,ix
   0392 DD E1               948 	pop	ix
   0394 C9                  949 	ret
   0395                     950 _ge5_load_end::
                            951 ;demo.c:120: void scratch_clear() {
                            952 ;	---------------------------------
                            953 ; Function scratch_clear
                            954 ; ---------------------------------
   0395                     955 _scratch_clear_start::
   0395                     956 _scratch_clear:
                            957 ;demo.c:121: memset((uint8_t *) &scratch, 0, 128);
   0395 21 80 00            958 	ld	hl,#0x0080
   0398 E5                  959 	push	hl
   0399 3E 00               960 	ld	a,#0x00
   039B F5                  961 	push	af
   039C 33                  962 	inc	sp
   039D 21r80s3F            963 	ld	hl,#_scratch
   03A0 E5                  964 	push	hl
   03A1 CDr00s00            965 	call	_memset
   03A4 F1                  966 	pop	af
   03A5 F1                  967 	pop	af
   03A6 33                  968 	inc	sp
   03A7 C9                  969 	ret
   03A8                     970 _scratch_clear_end::
                            971 ;demo.c:124: uint8_t pal_load(char *file_name, uint8_t ss) {
                            972 ;	---------------------------------
                            973 ; Function pal_load
                            974 ; ---------------------------------
   03A8                     975 _pal_load_start::
   03A8                     976 _pal_load:
   03A8 DD E5               977 	push	ix
   03AA DD 21 00 00         978 	ld	ix,#0
   03AE DD 39               979 	add	ix,sp
   03B0 21 D2 FF            980 	ld	hl,#-46
   03B3 39                  981 	add	hl,sp
   03B4 F9                  982 	ld	sp,hl
                            983 ;demo.c:127: memset((uint8_t *) &f, 0, sizeof(fcb));
   03B5 21 00 00            984 	ld	hl,#0x0000
   03B8 39                  985 	add	hl,sp
   03B9 4D                  986 	ld	c,l
   03BA 44                  987 	ld	b,h
   03BB 21 2E 00            988 	ld	hl,#0x002E
   03BE E5                  989 	push	hl
   03BF 3E 00               990 	ld	a,#0x00
   03C1 F5                  991 	push	af
   03C2 33                  992 	inc	sp
   03C3 C5                  993 	push	bc
   03C4 CDr00s00            994 	call	_memset
   03C7 F1                  995 	pop	af
   03C8 F1                  996 	pop	af
   03C9 33                  997 	inc	sp
                            998 ;demo.c:128: scratch_clear();
   03CA CDr95s03            999 	call	_scratch_clear
                           1000 ;demo.c:130: f.record_size = ss;
   03CD 21 00 00           1001 	ld	hl,#0x0000
   03D0 39                 1002 	add	hl,sp
   03D1 4D                 1003 	ld	c,l
   03D2 44                 1004 	ld	b,h
   03D3 21 0F 00           1005 	ld	hl,#0x000F
   03D6 09                 1006 	add	hl,bc
   03D7 EB                 1007 	ex	de,hl
   03D8 DD 7E 06           1008 	ld	a,6 (ix)
   03DB 12                 1009 	ld	(de),a
                           1010 ;demo.c:131: f.drive = 0;
   03DC 3E 00              1011 	ld	a,#0x00
   03DE 02                 1012 	ld	(bc),a
                           1013 ;demo.c:133: memcpy(f.name, file_name, 11);
   03DF DD 5E 04           1014 	ld	e,4 (ix)
   03E2 DD 56 05           1015 	ld	d,5 (ix)
   03E5 03                 1016 	inc	bc
   03E6 21 0B 00           1017 	ld	hl,#0x000B
   03E9 E5                 1018 	push	hl
   03EA D5                 1019 	push	de
   03EB C5                 1020 	push	bc
   03EC CDr00s00           1021 	call	_memcpy
   03EF F1                 1022 	pop	af
   03F0 F1                 1023 	pop	af
   03F1 F1                 1024 	pop	af
                           1025 ;demo.c:135: if (open(&f) != 0) return 0;
   03F2 21 00 00           1026 	ld	hl,#0x0000
   03F5 39                 1027 	add	hl,sp
   03F6 E5                 1028 	push	hl
   03F7 CDr00s00           1029 	call	_open
   03FA F1                 1030 	pop	af
   03FB AF                 1031 	xor	a,a
   03FC B5                 1032 	or	a,l
   03FD 28 04              1033 	jr	Z,00102$
   03FF 2E 00              1034 	ld	l,#0x00
   0401 18 40              1035 	jr	00107$
   0403                    1036 00102$:
                           1037 ;demo.c:136: if (block_set_data_ptr(scratch) != 0) return 0;
   0403 21r80s3F           1038 	ld	hl,#_scratch
   0406 E5                 1039 	push	hl
   0407 CDr00s00           1040 	call	_block_set_data_ptr
   040A F1                 1041 	pop	af
   040B AF                 1042 	xor	a,a
   040C B5                 1043 	or	a,l
   040D 28 04              1044 	jr	Z,00104$
   040F 2E 00              1045 	ld	l,#0x00
   0411 18 30              1046 	jr	00107$
   0413                    1047 00104$:
                           1048 ;demo.c:137: if (block_read(&f) != 0) return 0;
   0413 21 00 00           1049 	ld	hl,#0x0000
   0416 39                 1050 	add	hl,sp
   0417 E5                 1051 	push	hl
   0418 CDr00s00           1052 	call	_block_read
   041B F1                 1053 	pop	af
   041C AF                 1054 	xor	a,a
   041D B5                 1055 	or	a,l
   041E 28 04              1056 	jr	Z,00106$
   0420 2E 00              1057 	ld	l,#0x00
   0422 18 1F              1058 	jr	00107$
   0424                    1059 00106$:
                           1060 ;demo.c:139: memcpy(cur_palette, scratch+7, ss);
   0424 DD 4E 06           1061 	ld	c,6 (ix)
   0427 06 00              1062 	ld	b,#0x00
   0429 11r87s3F           1063 	ld	de,#_scratch + 7
   042C C5                 1064 	push	bc
   042D D5                 1065 	push	de
   042E 21r00s40           1066 	ld	hl,#_cur_palette
   0431 E5                 1067 	push	hl
   0432 CDr00s00           1068 	call	_memcpy
   0435 F1                 1069 	pop	af
   0436 F1                 1070 	pop	af
   0437 F1                 1071 	pop	af
                           1072 ;demo.c:141: close(&f);
   0438 21 00 00           1073 	ld	hl,#0x0000
   043B 39                 1074 	add	hl,sp
   043C E5                 1075 	push	hl
   043D CDr00s00           1076 	call	_close
   0440 F1                 1077 	pop	af
                           1078 ;demo.c:142: return 1;
   0441 2E 01              1079 	ld	l,#0x01
   0443                    1080 00107$:
   0443 DD F9              1081 	ld	sp,ix
   0445 DD E1              1082 	pop	ix
   0447 C9                 1083 	ret
   0448                    1084 _pal_load_end::
                           1085 ;demo.c:146: void pause() {
                           1086 ;	---------------------------------
                           1087 ; Function pause
                           1088 ; ---------------------------------
   0448                    1089 _pause_start::
   0448                    1090 _pause:
                           1091 ;demo.c:147: uint8_t i,j,k = 0;
                           1092 ;demo.c:148: for (i = 0; i < 255; i++) {	
   0448 01 00 00           1093 	ld	bc,#0x0000
   044B                    1094 00104$:
   044B 78                 1095 	ld	a,b
   044C D6 FF              1096 	sub	a,#0xFF
   044E D0                 1097 	ret	NC
                           1098 ;demo.c:149: for (j = 0; j < 255; j++) {
   044F 59                 1099 	ld	e,c
   0450 16 FF              1100 	ld	d,#0xFF
   0452                    1101 00103$:
                           1102 ;demo.c:150: k++;
   0452 1C                 1103 	inc	e
   0453 15                 1104 	dec	d
                           1105 ;demo.c:149: for (j = 0; j < 255; j++) {
   0454 AF                 1106 	xor	a,a
   0455 B2                 1107 	or	a,d
   0456 20 FA              1108 	jr	NZ,00103$
                           1109 ;demo.c:148: for (i = 0; i < 255; i++) {	
   0458 4B                 1110 	ld	c,e
   0459 04                 1111 	inc	b
   045A 18 EF              1112 	jr	00104$
   045C                    1113 _pause_end::
                           1114 ;demo.c:156: uint8_t raw_load(char *file_name, int size, char* buffer) {
                           1115 ;	---------------------------------
                           1116 ; Function raw_load
                           1117 ; ---------------------------------
   045C                    1118 _raw_load_start::
   045C                    1119 _raw_load:
   045C DD E5              1120 	push	ix
   045E DD 21 00 00        1121 	ld	ix,#0
   0462 DD 39              1122 	add	ix,sp
   0464 21 D2 FF           1123 	ld	hl,#-46
   0467 39                 1124 	add	hl,sp
   0468 F9                 1125 	ld	sp,hl
                           1126 ;demo.c:161: memset((uint8_t *) &f, 0, sizeof(fcb));
   0469 21 00 00           1127 	ld	hl,#0x0000
   046C 39                 1128 	add	hl,sp
   046D 4D                 1129 	ld	c,l
   046E 44                 1130 	ld	b,h
   046F 21 2E 00           1131 	ld	hl,#0x002E
   0472 E5                 1132 	push	hl
   0473 3E 00              1133 	ld	a,#0x00
   0475 F5                 1134 	push	af
   0476 33                 1135 	inc	sp
   0477 C5                 1136 	push	bc
   0478 CDr00s00           1137 	call	_memset
   047B F1                 1138 	pop	af
   047C F1                 1139 	pop	af
   047D 33                 1140 	inc	sp
                           1141 ;demo.c:162: scratch_clear();
   047E CDr95s03           1142 	call	_scratch_clear
                           1143 ;demo.c:164: f.record_size = 128;
   0481 21 00 00           1144 	ld	hl,#0x0000
   0484 39                 1145 	add	hl,sp
   0485 4D                 1146 	ld	c,l
   0486 44                 1147 	ld	b,h
   0487 21 0F 00           1148 	ld	hl,#0x000F
   048A 09                 1149 	add	hl,bc
   048B EB                 1150 	ex	de,hl
   048C 3E 80              1151 	ld	a,#0x80
   048E 12                 1152 	ld	(de),a
                           1153 ;demo.c:165: f.drive = 0;
   048F 3E 00              1154 	ld	a,#0x00
   0491 02                 1155 	ld	(bc),a
                           1156 ;demo.c:167: memcpy(f.name, file_name, 11);
   0492 DD 5E 04           1157 	ld	e,4 (ix)
   0495 DD 56 05           1158 	ld	d,5 (ix)
   0498 03                 1159 	inc	bc
   0499 21 0B 00           1160 	ld	hl,#0x000B
   049C E5                 1161 	push	hl
   049D D5                 1162 	push	de
   049E C5                 1163 	push	bc
   049F CDr00s00           1164 	call	_memcpy
   04A2 F1                 1165 	pop	af
   04A3 F1                 1166 	pop	af
   04A4 F1                 1167 	pop	af
                           1168 ;demo.c:169: if (open(&f) != 0) return 0;
   04A5 21 00 00           1169 	ld	hl,#0x0000
   04A8 39                 1170 	add	hl,sp
   04A9 E5                 1171 	push	hl
   04AA CDr00s00           1172 	call	_open
   04AD F1                 1173 	pop	af
   04AE AF                 1174 	xor	a,a
   04AF B5                 1175 	or	a,l
   04B0 28 05              1176 	jr	Z,00116$
   04B2 2E 00              1177 	ld	l,#0x00
   04B4 C3r1Bs05           1178 	jp	00110$
                           1179 ;demo.c:171: while(total < size) {
   04B7                    1180 00116$:
   04B7 01 00 00           1181 	ld	bc,#0x0000
   04BA                    1182 00107$:
   04BA 79                 1183 	ld	a,c
   04BB DD 96 06           1184 	sub	a,6 (ix)
   04BE 78                 1185 	ld	a,b
   04BF DD 9E 07           1186 	sbc	a,7 (ix)
   04C2 F2r10s05           1187 	jp	P,00109$
                           1188 ;demo.c:172: if (block_set_data_ptr(scratch) != 0) return 0;
   04C5 C5                 1189 	push	bc
   04C6 21r80s3F           1190 	ld	hl,#_scratch
   04C9 E5                 1191 	push	hl
   04CA CDr00s00           1192 	call	_block_set_data_ptr
   04CD F1                 1193 	pop	af
   04CE 5D                 1194 	ld	e,l
   04CF C1                 1195 	pop	bc
   04D0 AF                 1196 	xor	a,a
   04D1 B3                 1197 	or	a,e
   04D2 28 04              1198 	jr	Z,00104$
   04D4 2E 00              1199 	ld	l,#0x00
   04D6 18 43              1200 	jr	00110$
   04D8                    1201 00104$:
                           1202 ;demo.c:173: if (block_read(&f) != 0) return 0;
   04D8 21 00 00           1203 	ld	hl,#0x0000
   04DB 39                 1204 	add	hl,sp
   04DC C5                 1205 	push	bc
   04DD E5                 1206 	push	hl
   04DE CDr00s00           1207 	call	_block_read
   04E1 F1                 1208 	pop	af
   04E2 5D                 1209 	ld	e,l
   04E3 C1                 1210 	pop	bc
   04E4 AF                 1211 	xor	a,a
   04E5 B3                 1212 	or	a,e
   04E6 28 04              1213 	jr	Z,00106$
   04E8 2E 00              1214 	ld	l,#0x00
   04EA 18 2F              1215 	jr	00110$
   04EC                    1216 00106$:
                           1217 ;demo.c:175: memcpy(buffer+total,scratch,incr);
   04EC DD 7E 08           1218 	ld	a,8 (ix)
   04EF 81                 1219 	add	a,c
   04F0 5F                 1220 	ld	e,a
   04F1 DD 7E 09           1221 	ld	a,9 (ix)
   04F4 88                 1222 	adc	a,b
   04F5 57                 1223 	ld	d,a
   04F6 C5                 1224 	push	bc
   04F7 21 80 00           1225 	ld	hl,#0x0080
   04FA E5                 1226 	push	hl
   04FB 21r80s3F           1227 	ld	hl,#_scratch
   04FE E5                 1228 	push	hl
   04FF D5                 1229 	push	de
   0500 CDr00s00           1230 	call	_memcpy
   0503 F1                 1231 	pop	af
   0504 F1                 1232 	pop	af
   0505 F1                 1233 	pop	af
   0506 C1                 1234 	pop	bc
                           1235 ;demo.c:177: total+=incr;
   0507 21 80 00           1236 	ld	hl,#0x0080
   050A 09                 1237 	add	hl,bc
   050B 4D                 1238 	ld	c,l
   050C 44                 1239 	ld	b,h
   050D C3rBAs04           1240 	jp	00107$
   0510                    1241 00109$:
                           1242 ;demo.c:180: close(&f);
   0510 21 00 00           1243 	ld	hl,#0x0000
   0513 39                 1244 	add	hl,sp
   0514 E5                 1245 	push	hl
   0515 CDr00s00           1246 	call	_close
   0518 F1                 1247 	pop	af
                           1248 ;demo.c:182: return 1;
   0519 2E 01              1249 	ld	l,#0x01
   051B                    1250 00110$:
   051B DD F9              1251 	ld	sp,ix
   051D DD E1              1252 	pop	ix
   051F C9                 1253 	ret
   0520                    1254 _raw_load_end::
                           1255 ;demo.c:185: void fadein() {
                           1256 ;	---------------------------------
                           1257 ; Function fadein
                           1258 ; ---------------------------------
   0520                    1259 _fadein_start::
   0520                    1260 _fadein:
   0520 DD E5              1261 	push	ix
   0522 DD 21 00 00        1262 	ld	ix,#0
   0526 DD 39              1263 	add	ix,sp
   0528 F5                 1264 	push	af
                           1265 ;demo.c:188: if (tick < 4) return;
   0529 3Ar42s40           1266 	ld	a,(#_tick+0)
   052C D6 04              1267 	sub	a,#0x04
   052E 3Ar43s40           1268 	ld	a,(#_tick+1)
   0531 DE 00              1269 	sbc	a,#0x00
   0533 F2r39s05           1270 	jp	P,00102$
   0536 C3rE7s05           1271 	jp	00113$
   0539                    1272 00102$:
                           1273 ;demo.c:190: tick = 0;
   0539 21r42s40           1274 	ld	hl,#_tick + 0
   053C 36 00              1275 	ld	(hl), #0x00
   053E 21r43s40           1276 	ld	hl,#_tick + 1
   0541 36 00              1277 	ld	(hl), #0x00
                           1278 ;demo.c:192: for(i = 0; i < 32; i+=2) {
   0543 0E 00              1279 	ld	c,#0x00
   0545                    1280 00109$:
   0545 79                 1281 	ld	a,c
   0546 D6 20              1282 	sub	a,#0x20
   0548 D2rDFs05           1283 	jp	NC,00112$
                           1284 ;demo.c:193: uint8_t r = scratch[i] >> 4;
   054B 3Er80              1285 	ld	a,#<_scratch
   054D 81                 1286 	add	a,c
   054E 5F                 1287 	ld	e,a
   054F 3Es3F              1288 	ld	a,#>_scratch
   0551 CE 00              1289 	adc	a,#0x00
   0553 57                 1290 	ld	d,a
   0554 1A                 1291 	ld	a,(de)
   0555 47                 1292 	ld	b,a
   0556 58                 1293 	ld	e,b
   0557 CB 3B              1294 	srl	e
   0559 CB 3B              1295 	srl	e
   055B CB 3B              1296 	srl	e
   055D CB 3B              1297 	srl	e
                           1298 ;demo.c:194: uint8_t b = scratch[i] & 0xf;
   055F 78                 1299 	ld	a,b
   0560 E6 0F              1300 	and	a,#0x0F
   0562 DD 77 FF           1301 	ld	-1 (ix),a
                           1302 ;demo.c:195: uint8_t g = scratch[i+1];
   0565 51                 1303 	ld	d,c
   0566 14                 1304 	inc	d
   0567 3Er80              1305 	ld	a,#<_scratch
   0569 82                 1306 	add	a,d
   056A 6F                 1307 	ld	l,a
   056B 3Es3F              1308 	ld	a,#>_scratch
   056D CE 00              1309 	adc	a,#0x00
   056F 67                 1310 	ld	h,a
   0570 56                 1311 	ld	d,(hl)
   0571 DD 72 FE           1312 	ld	-2 (ix),d
                           1313 ;demo.c:197: if (r < (cur_palette[i] >> 4)) r++;
   0574 3Er00              1314 	ld	a,#<_cur_palette
   0576 81                 1315 	add	a,c
   0577 6F                 1316 	ld	l,a
   0578 3Es40              1317 	ld	a,#>_cur_palette
   057A CE 00              1318 	adc	a,#0x00
   057C 67                 1319 	ld	h,a
   057D 56                 1320 	ld	d,(hl)
   057E CB 3A              1321 	srl	d
   0580 CB 3A              1322 	srl	d
   0582 CB 3A              1323 	srl	d
   0584 CB 3A              1324 	srl	d
   0586 7B                 1325 	ld	a,e
   0587 92                 1326 	sub	a,d
   0588 30 01              1327 	jr	NC,00104$
   058A 1C                 1328 	inc	e
   058B                    1329 00104$:
                           1330 ;demo.c:198: if (b < (cur_palette[i] & 0xf)) b++;
   058B 3Er00              1331 	ld	a,#<_cur_palette
   058D 81                 1332 	add	a,c
   058E 6F                 1333 	ld	l,a
   058F 3Es40              1334 	ld	a,#>_cur_palette
   0591 CE 00              1335 	adc	a,#0x00
   0593 67                 1336 	ld	h,a
   0594 7E                 1337 	ld	a,(hl)
   0595 E6 0F              1338 	and	a,#0x0F
   0597 47                 1339 	ld	b,a
   0598 DD 7E FF           1340 	ld	a,-1 (ix)
   059B 90                 1341 	sub	a,b
   059C 30 03              1342 	jr	NC,00106$
   059E DD 34 FF           1343 	inc	-1 (ix)
   05A1                    1344 00106$:
                           1345 ;demo.c:200: scratch[i] = (r << 4) | b;
   05A1 3Er80              1346 	ld	a,#<_scratch
   05A3 81                 1347 	add	a,c
   05A4 47                 1348 	ld	b,a
   05A5 3Es3F              1349 	ld	a,#>_scratch
   05A7 CE 00              1350 	adc	a,#0x00
   05A9 57                 1351 	ld	d,a
   05AA 7B                 1352 	ld	a,e
   05AB 07                 1353 	rlca
   05AC 07                 1354 	rlca
   05AD 07                 1355 	rlca
   05AE 07                 1356 	rlca
   05AF E6 F0              1357 	and	a,#0xF0
   05B1 DD B6 FF           1358 	or	a,-1 (ix)
   05B4 68                 1359 	ld	l,b
   05B5 62                 1360 	ld	h,d
   05B6 77                 1361 	ld	(hl),a
                           1362 ;demo.c:201: if (g < cur_palette[i+1]) scratch[i+1]++;
   05B7 41                 1363 	ld	b,c
   05B8 04                 1364 	inc	b
   05B9 3Er00              1365 	ld	a,#<_cur_palette
   05BB 80                 1366 	add	a,b
   05BC 5F                 1367 	ld	e,a
   05BD 3Es40              1368 	ld	a,#>_cur_palette
   05BF CE 00              1369 	adc	a,#0x00
   05C1 57                 1370 	ld	d,a
   05C2 1A                 1371 	ld	a,(de)
   05C3 5F                 1372 	ld	e,a
   05C4 DD 7E FE           1373 	ld	a,-2 (ix)
   05C7 93                 1374 	sub	a,e
   05C8 30 10              1375 	jr	NC,00111$
   05CA 3Er80              1376 	ld	a,#<_scratch
   05CC 80                 1377 	add	a,b
   05CD 47                 1378 	ld	b,a
   05CE 3Es3F              1379 	ld	a,#>_scratch
   05D0 CE 00              1380 	adc	a,#0x00
   05D2 5F                 1381 	ld	e,a
   05D3 68                 1382 	ld	l,b
   05D4 67                 1383 	ld	h,a
   05D5 7E                 1384 	ld	a,(hl)
   05D6 3C                 1385 	inc	a
   05D7 68                 1386 	ld	l,b
   05D8 63                 1387 	ld	h,e
   05D9 77                 1388 	ld	(hl),a
   05DA                    1389 00111$:
                           1390 ;demo.c:192: for(i = 0; i < 32; i+=2) {
   05DA 0C                 1391 	inc	c
   05DB 0C                 1392 	inc	c
   05DC C3r45s05           1393 	jp	00109$
   05DF                    1394 00112$:
                           1395 ;demo.c:205: vdp_load_palette(scratch);
   05DF 21r80s3F           1396 	ld	hl,#_scratch
   05E2 E5                 1397 	push	hl
   05E3 CDr00s00           1398 	call	_vdp_load_palette
   05E6 F1                 1399 	pop	af
   05E7                    1400 00113$:
   05E7 DD F9              1401 	ld	sp,ix
   05E9 DD E1              1402 	pop	ix
   05EB C9                 1403 	ret
   05EC                    1404 _fadein_end::
                           1405 ;demo.c:217: void do_ymmm() {
                           1406 ;	---------------------------------
                           1407 ; Function do_ymmm
                           1408 ; ---------------------------------
   05EC                    1409 _do_ymmm_start::
   05EC                    1410 _do_ymmm:
   05EC DD E5              1411 	push	ix
   05EE DD 21 00 00        1412 	ld	ix,#0
   05F2 DD 39              1413 	add	ix,sp
   05F4 21 EB FF           1414 	ld	hl,#-21
   05F7 39                 1415 	add	hl,sp
   05F8 F9                 1416 	ld	sp,hl
                           1417 ;demo.c:222: if (tick > 32) { tick = 0; flipper++;}
   05F9 3E 20              1418 	ld	a,#0x20
   05FB FD 21r42s40        1419 	ld	iy,#_tick
   05FF FD 96 00           1420 	sub	a,0 (iy)
   0602 3E 00              1421 	ld	a,#0x00
   0604 FD 21r42s40        1422 	ld	iy,#_tick
   0608 FD 9E 01           1423 	sbc	a,1 (iy)
   060B F2r28s06           1424 	jp	P,00102$
   060E 21r42s40           1425 	ld	hl,#_tick + 0
   0611 36 00              1426 	ld	(hl), #0x00
   0613 21r43s40           1427 	ld	hl,#_tick + 1
   0616 36 00              1428 	ld	(hl), #0x00
   0618 FD 21r4Es40        1429 	ld	iy,#_flipper
   061C FD 34 00           1430 	inc	0 (iy)
   061F 20 07              1431 	jr	NZ,00115$
   0621 FD 21r4Es40        1432 	ld	iy,#_flipper
   0625 FD 34 01           1433 	inc	1 (iy)
   0628                    1434 00115$:
   0628                    1435 00102$:
                           1436 ;demo.c:223: if (flipper > 10) { flipper = 0;}
   0628 3E 0A              1437 	ld	a,#0x0A
   062A FD 21r4Es40        1438 	ld	iy,#_flipper
   062E FD 96 00           1439 	sub	a,0 (iy)
   0631 3E 00              1440 	ld	a,#0x00
   0633 FD 21r4Es40        1441 	ld	iy,#_flipper
   0637 FD 9E 01           1442 	sbc	a,1 (iy)
   063A F2r47s06           1443 	jp	P,00104$
   063D 21r4Es40           1444 	ld	hl,#_flipper + 0
   0640 36 00              1445 	ld	(hl), #0x00
   0642 21r4Fs40           1446 	ld	hl,#_flipper + 1
   0645 36 00              1447 	ld	(hl), #0x00
   0647                    1448 00104$:
                           1449 ;demo.c:225: ymmmf++;
   0647 FD 21r50s40        1450 	ld	iy,#_ymmmf
   064B FD 34 00           1451 	inc	0 (iy)
   064E 20 07              1452 	jr	NZ,00116$
   0650 FD 21r50s40        1453 	ld	iy,#_ymmmf
   0654 FD 34 01           1454 	inc	1 (iy)
   0657                    1455 00116$:
                           1456 ;demo.c:226: for (yofff = 0; yofff<212-step;yofff+=step) {
   0657 21r4Cs40           1457 	ld	hl,#_yofff + 0
   065A 36 00              1458 	ld	(hl), #0x00
   065C                    1459 00105$:
   065C 3Ar4Cs40           1460 	ld	a,(#_yofff+0)
   065F DD 77 ED           1461 	ld	-19 (ix),a
   0662 DD 36 EE 00        1462 	ld	-18 (ix),#0x00
   0666 DD 7E ED           1463 	ld	a,-19 (ix)
   0669 D6 D2              1464 	sub	a,#0xD2
   066B DD 7E EE           1465 	ld	a,-18 (ix)
   066E DE 00              1466 	sbc	a,#0x00
   0670 F2r1Cs07           1467 	jp	P,00109$
                           1468 ;demo.c:227: xo = (sintabx[(yofff+ymmmf) & 255]);
   0673 21r50s40           1469 	ld	hl,#_ymmmf
   0676 DD 7E ED           1470 	ld	a,-19 (ix)
   0679 86                 1471 	add	a,(hl)
   067A 5F                 1472 	ld	e,a
   067B DD 7E EE           1473 	ld	a,-18 (ix)
   067E 23                 1474 	inc	hl
   067F 8E                 1475 	adc	a,(hl)
   0680 16 00              1476 	ld	d,#0x00
   0682 CB 23              1477 	sla	e
   0684 CB 12              1478 	rl	d
   0686 21r2Cs00           1479 	ld	hl,#_sintabx
   0689 19                 1480 	add	hl,de
   068A 5E                 1481 	ld	e,(hl)
   068B 23                 1482 	inc	hl
   068C 56                 1483 	ld	d,(hl)
   068D DD 73 EF           1484 	ld	-17 (ix),e
   0690 DD 72 F0           1485 	ld	-16 (ix),d
                           1486 ;demo.c:230: cmd.source_x = 0;
   0693 21 06 00           1487 	ld	hl,#0x0006
   0696 39                 1488 	add	hl,sp
   0697 36 00              1489 	ld	(hl),#0x00
   0699 23                 1490 	inc	hl
   069A 36 00              1491 	ld	(hl),#0x00
                           1492 ;demo.c:231: cmd.source_y = 0+yofff;
   069C 21 06 00           1493 	ld	hl,#0x0006
   069F 39                 1494 	add	hl,sp
   06A0 EB                 1495 	ex	de,hl
   06A1 4B                 1496 	ld	c,e
   06A2 42                 1497 	ld	b,d
   06A3 69                 1498 	ld	l,c
   06A4 60                 1499 	ld	h,b
   06A5 23                 1500 	inc	hl
   06A6 23                 1501 	inc	hl
   06A7 DD 7E ED           1502 	ld	a,-19 (ix)
   06AA 77                 1503 	ld	(hl),a
   06AB 23                 1504 	inc	hl
   06AC DD 7E EE           1505 	ld	a,-18 (ix)
   06AF 77                 1506 	ld	(hl),a
                           1507 ;demo.c:232: cmd.dest_x = xo;
   06B0 21 04 00           1508 	ld	hl,#0x0004
   06B3 19                 1509 	add	hl,de
   06B4 DD 7E EF           1510 	ld	a,-17 (ix)
   06B7 77                 1511 	ld	(hl),a
   06B8 23                 1512 	inc	hl
   06B9 DD 7E F0           1513 	ld	a,-16 (ix)
   06BC 77                 1514 	ld	(hl),a
                           1515 ;demo.c:233: cmd.dest_y = 3+yofff;
   06BD 21 06 00           1516 	ld	hl,#0x0006
   06C0 19                 1517 	add	hl,de
   06C1 DD 75 EB           1518 	ld	-21 (ix),l
   06C4 DD 74 EC           1519 	ld	-20 (ix),h
   06C7 DD 7E ED           1520 	ld	a,-19 (ix)
   06CA C6 03              1521 	add	a,#0x03
   06CC 4F                 1522 	ld	c,a
   06CD DD 7E EE           1523 	ld	a,-18 (ix)
   06D0 CE 00              1524 	adc	a,#0x00
   06D2 47                 1525 	ld	b,a
   06D3 DD 6E EB           1526 	ld	l,-21 (ix)
   06D6 DD 66 EC           1527 	ld	h,-20 (ix)
   06D9 71                 1528 	ld	(hl),c
   06DA 23                 1529 	inc	hl
   06DB 70                 1530 	ld	(hl),b
                           1531 ;demo.c:234: cmd.size_x = 256;
   06DC 21 08 00           1532 	ld	hl,#0x0008
   06DF 19                 1533 	add	hl,de
   06E0 36 00              1534 	ld	(hl),#0x00
   06E2 23                 1535 	inc	hl
   06E3 36 01              1536 	ld	(hl),#0x01
                           1537 ;demo.c:235: cmd.size_y = 1;
   06E5 21 0A 00           1538 	ld	hl,#0x000A
   06E8 19                 1539 	add	hl,de
   06E9 36 01              1540 	ld	(hl),#0x01
   06EB 23                 1541 	inc	hl
   06EC 36 00              1542 	ld	(hl),#0x00
                           1543 ;demo.c:236: cmd.data = 0;
   06EE 21 0C 00           1544 	ld	hl,#0x000C
   06F1 19                 1545 	add	hl,de
   06F2 4D                 1546 	ld	c,l
   06F3 44                 1547 	ld	b,h
   06F4 3E 00              1548 	ld	a,#0x00
   06F6 02                 1549 	ld	(bc),a
                           1550 ;demo.c:237: cmd.argument = 0;
   06F7 21 0D 00           1551 	ld	hl,#0x000D
   06FA 19                 1552 	add	hl,de
   06FB 4D                 1553 	ld	c,l
   06FC 44                 1554 	ld	b,h
   06FD 3E 00              1555 	ld	a,#0x00
   06FF 02                 1556 	ld	(bc),a
                           1557 ;demo.c:238: cmd.command = 0xD0;
   0700 21 0E 00           1558 	ld	hl,#0x000E
   0703 19                 1559 	add	hl,de
   0704 4D                 1560 	ld	c,l
   0705 44                 1561 	ld	b,h
   0706 3E D0              1562 	ld	a,#0xD0
   0708 02                 1563 	ld	(bc),a
                           1564 ;demo.c:241: vdp_copier(&cmd);
   0709 D5                 1565 	push	de
   070A CDr00s00           1566 	call	_vdp_copier
   070D F1                 1567 	pop	af
                           1568 ;demo.c:226: for (yofff = 0; yofff<212-step;yofff+=step) {
   070E 21r4Cs40           1569 	ld	hl,#_yofff + 0
   0711 4E                 1570 	ld	c,(hl)
   0712 21r4Cs40           1571 	ld	hl,#_yofff
   0715 79                 1572 	ld	a,c
   0716 C6 02              1573 	add	a,#0x02
   0718 77                 1574 	ld	(hl),a
   0719 C3r5Cs06           1575 	jp	00105$
   071C                    1576 00109$:
   071C DD F9              1577 	ld	sp,ix
   071E DD E1              1578 	pop	ix
   0720 C9                 1579 	ret
   0721                    1580 _do_ymmm_end::
                           1581 ;demo.c:258: void do_blocks() {
                           1582 ;	---------------------------------
                           1583 ; Function do_blocks
                           1584 ; ---------------------------------
   0721                    1585 _do_blocks_start::
   0721                    1586 _do_blocks:
   0721 DD E5              1587 	push	ix
   0723 DD 21 00 00        1588 	ld	ix,#0
   0727 DD 39              1589 	add	ix,sp
   0729 21 E9 FF           1590 	ld	hl,#-23
   072C 39                 1591 	add	hl,sp
   072D F9                 1592 	ld	sp,hl
                           1593 ;demo.c:261: int ys = 0;
   072E DD 36 ED 00        1594 	ld	-19 (ix),#0x00
   0732 DD 36 EE 00        1595 	ld	-18 (ix),#0x00
                           1596 ;demo.c:262: int ye = 0;
   0736 DD 36 EB 00        1597 	ld	-21 (ix),#0x00
   073A DD 36 EC 00        1598 	ld	-20 (ix),#0x00
                           1599 ;demo.c:264: vdp_register(VDP_VOFFSET,0);
   073E 21 17 00           1600 	ld	hl,#0x0017
   0741 E5                 1601 	push	hl
   0742 CDr00s00           1602 	call	_vdp_register
   0745 F1                 1603 	pop	af
                           1604 ;demo.c:266: if (block_init == 0) {
   0746 AF                 1605 	xor	a,a
   0747 FD 21r52s40        1606 	ld	iy,#_block_init
   074B FD B6 00           1607 	or	a,0 (iy)
   074E C2rB6s07           1608 	jp	NZ,00108$
                           1609 ;demo.c:268: vdp_set_screen5();
   0751 CDr00s00           1610 	call	_vdp_set_screen5
                           1611 ;demo.c:270: vdp_register(2, 0x5F);
   0754 21 02 5F           1612 	ld	hl,#0x5F02
   0757 E5                 1613 	push	hl
   0758 CDr00s00           1614 	call	_vdp_register
   075B F1                 1615 	pop	af
                           1616 ;demo.c:272: for(i=0;i<16;i++) btab[i] = i*16;
   075C DD 36 EF 00        1617 	ld	-17 (ix),#0x00
   0760 DD 36 F0 00        1618 	ld	-16 (ix),#0x00
   0764                    1619 00110$:
   0764 DD 7E EF           1620 	ld	a,-17 (ix)
   0767 D6 10              1621 	sub	a,#0x10
   0769 DD 7E F0           1622 	ld	a,-16 (ix)
   076C DE 00              1623 	sbc	a,#0x00
   076E F2rA6s07           1624 	jp	P,00113$
   0771 DD 4E EF           1625 	ld	c,-17 (ix)
   0774 DD 46 F0           1626 	ld	b,-16 (ix)
   0777 CB 21              1627 	sla	c
   0779 CB 10              1628 	rl	b
   077B 21r5Bs40           1629 	ld	hl,#_btab
   077E 09                 1630 	add	hl,bc
   077F 4D                 1631 	ld	c,l
   0780 44                 1632 	ld	b,h
   0781 DD 5E EF           1633 	ld	e,-17 (ix)
   0784 DD 56 F0           1634 	ld	d,-16 (ix)
   0787 CB 23              1635 	sla	e
   0789 CB 12              1636 	rl	d
   078B CB 23              1637 	sla	e
   078D CB 12              1638 	rl	d
   078F CB 23              1639 	sla	e
   0791 CB 12              1640 	rl	d
   0793 CB 23              1641 	sla	e
   0795 CB 12              1642 	rl	d
   0797 69                 1643 	ld	l,c
   0798 60                 1644 	ld	h,b
   0799 73                 1645 	ld	(hl),e
   079A 23                 1646 	inc	hl
   079B 72                 1647 	ld	(hl),d
   079C DD 34 EF           1648 	inc	-17 (ix)
   079F 20 03              1649 	jr	NZ,00139$
   07A1 DD 34 F0           1650 	inc	-16 (ix)
   07A4                    1651 00139$:
   07A4 18 BE              1652 	jr	00110$
   07A6                    1653 00113$:
                           1654 ;demo.c:273: vdp_load_palette(block_palette);
   07A6 21r20s40           1655 	ld	hl,#_block_palette
   07A9 E5                 1656 	push	hl
   07AA CDr00s00           1657 	call	_vdp_load_palette
   07AD F1                 1658 	pop	af
                           1659 ;demo.c:275: block_init = 1;
   07AE 21r52s40           1660 	ld	hl,#_block_init + 0
   07B1 36 01              1661 	ld	(hl), #0x01
   07B3 C3r75s09           1662 	jp	00122$
   07B6                    1663 00108$:
                           1664 ;demo.c:279: if (flof == 0) { ys = 0; ye = 8; }
   07B6 3Ar7Bs40           1665 	ld	a,(#_flof+0)
   07B9 FD 21r7Bs40        1666 	ld	iy,#_flof
   07BD FD B6 01           1667 	or	a,1 (iy)
   07C0 20 10              1668 	jr	NZ,00102$
   07C2 DD 36 ED 00        1669 	ld	-19 (ix),#0x00
   07C6 DD 36 EE 00        1670 	ld	-18 (ix),#0x00
   07CA DD 36 EB 08        1671 	ld	-21 (ix),#0x08
   07CE DD 36 EC 00        1672 	ld	-20 (ix),#0x00
   07D2                    1673 00102$:
                           1674 ;demo.c:280: if (flof == 1) { ys = 8; ye = 16; }
   07D2 3Ar7Bs40           1675 	ld	a,(#_flof+0)
   07D5 D6 01              1676 	sub	a,#0x01
   07D7 20 06              1677 	jr	NZ,00140$
   07D9 3Ar7Cs40           1678 	ld	a,(#_flof+1)
   07DC B7                 1679 	or	a,a
   07DD 28 02              1680 	jr	Z,00141$
   07DF                    1681 00140$:
   07DF 18 10              1682 	jr	00104$
   07E1                    1683 00141$:
   07E1 DD 36 ED 08        1684 	ld	-19 (ix),#0x08
   07E5 DD 36 EE 00        1685 	ld	-18 (ix),#0x00
   07E9 DD 36 EB 10        1686 	ld	-21 (ix),#0x10
   07ED DD 36 EC 00        1687 	ld	-20 (ix),#0x00
   07F1                    1688 00104$:
                           1689 ;demo.c:282: for(bty=3;bty<11;bty++) {
   07F1 FD 21r59s40        1690 	ld	iy,#_bty
   07F5 FD 36 00 03        1691 	ld	0 (iy),#0x03
   07F9 FD 21r59s40        1692 	ld	iy,#_bty
   07FD FD 36 01 00        1693 	ld	1 (iy),#0x00
   0801                    1694 00118$:
   0801 3Ar59s40           1695 	ld	a,(#_bty+0)
   0804 D6 0B              1696 	sub	a,#0x0B
   0806 3Ar5As40           1697 	ld	a,(#_bty+1)
   0809 DE 00              1698 	sbc	a,#0x00
   080B F2r4Cs09           1699 	jp	P,00121$
                           1700 ;demo.c:283: for(btx=ys;btx<ye;btx++) {
   080E DD 7E ED           1701 	ld	a,-19 (ix)
   0811 FD 21r57s40        1702 	ld	iy,#_btx
   0815 FD 77 00           1703 	ld	0 (iy),a
   0818 DD 7E EE           1704 	ld	a,-18 (ix)
   081B FD 21r57s40        1705 	ld	iy,#_btx
   081F FD 77 01           1706 	ld	1 (iy),a
   0822                    1707 00114$:
   0822 3Ar57s40           1708 	ld	a,(#_btx+0)
   0825 DD 96 EB           1709 	sub	a,-21 (ix)
   0828 3Ar58s40           1710 	ld	a,(#_btx+1)
   082B DD 9E EC           1711 	sbc	a,-20 (ix)
   082E F2r39s09           1712 	jp	P,00120$
                           1713 ;demo.c:284: bsx = (PLY_PSGReg8 & PLY_PSGReg9 | PLY_PSGReg10)>>1;
   0831 3Ar00s00           1714 	ld	a,(#_PLY_PSGReg8+0)
   0834 FD 21r00s00        1715 	ld	iy,#_PLY_PSGReg9
   0838 FD A6 00           1716 	and	a,0 (iy)
   083B 21r00s00           1717 	ld	hl,#_PLY_PSGReg10 + 0
   083E B6                 1718 	or	a,(hl)
   083F 4F                 1719 	ld	c,a
   0840 CB 39              1720 	srl	c
   0842 21r53s40           1721 	ld	hl,#_bsx + 0
   0845 71                 1722 	ld	(hl), c
   0846 21r54s40           1723 	ld	hl,#_bsx + 1
   0849 36 00              1724 	ld	(hl), #0x00
                           1725 ;demo.c:285: bsy = PLY_PSGReg10;
   084B 3Ar00s00           1726 	ld	a,(#_PLY_PSGReg10+0)
   084E 21r55s40           1727 	ld	hl,#_bsy + 0
   0851 77                 1728 	ld	(hl), a
   0852 21r56s40           1729 	ld	hl,#_bsy + 1
   0855 36 00              1730 	ld	(hl), #0x00
                           1731 ;demo.c:286: cmd.source_x = btab[bsx];
   0857 21 08 00           1732 	ld	hl,#0x0008
   085A 39                 1733 	add	hl,sp
   085B 4D                 1734 	ld	c,l
   085C 44                 1735 	ld	b,h
   085D 21r53s40           1736 	ld	hl,#_bsx + 0
   0860 5E                 1737 	ld	e,(hl)
   0861 21r54s40           1738 	ld	hl,#_bsx + 1
   0864 56                 1739 	ld	d,(hl)
   0865 CB 23              1740 	sla	e
   0867 CB 12              1741 	rl	d
   0869 21r5Bs40           1742 	ld	hl,#_btab
   086C 19                 1743 	add	hl,de
   086D 5E                 1744 	ld	e,(hl)
   086E 23                 1745 	inc	hl
   086F 56                 1746 	ld	d,(hl)
   0870 69                 1747 	ld	l,c
   0871 60                 1748 	ld	h,b
   0872 73                 1749 	ld	(hl),e
   0873 23                 1750 	inc	hl
   0874 72                 1751 	ld	(hl),d
                           1752 ;demo.c:287: cmd.source_y = 768+btab[bsy];
   0875 21 08 00           1753 	ld	hl,#0x0008
   0878 39                 1754 	add	hl,sp
   0879 4D                 1755 	ld	c,l
   087A 44                 1756 	ld	b,h
   087B 21 02 00           1757 	ld	hl,#0x0002
   087E 09                 1758 	add	hl,bc
   087F DD 75 E9           1759 	ld	-23 (ix),l
   0882 DD 74 EA           1760 	ld	-22 (ix),h
   0885 21r55s40           1761 	ld	hl,#_bsy + 0
   0888 5E                 1762 	ld	e,(hl)
   0889 21r56s40           1763 	ld	hl,#_bsy + 1
   088C 56                 1764 	ld	d,(hl)
   088D CB 23              1765 	sla	e
   088F CB 12              1766 	rl	d
   0891 21r5Bs40           1767 	ld	hl,#_btab
   0894 19                 1768 	add	hl,de
   0895 5E                 1769 	ld	e,(hl)
   0896 23                 1770 	inc	hl
   0897 56                 1771 	ld	d,(hl)
   0898 21 00 03           1772 	ld	hl,#0x0300
   089B 19                 1773 	add	hl,de
   089C EB                 1774 	ex	de,hl
   089D DD 6E E9           1775 	ld	l,-23 (ix)
   08A0 DD 66 EA           1776 	ld	h,-22 (ix)
   08A3 73                 1777 	ld	(hl),e
   08A4 23                 1778 	inc	hl
   08A5 72                 1779 	ld	(hl),d
                           1780 ;demo.c:288: cmd.dest_x = btab[btx];
   08A6 21 04 00           1781 	ld	hl,#0x0004
   08A9 09                 1782 	add	hl,bc
   08AA DD 75 E9           1783 	ld	-23 (ix),l
   08AD DD 74 EA           1784 	ld	-22 (ix),h
   08B0 21r57s40           1785 	ld	hl,#_btx + 0
   08B3 5E                 1786 	ld	e,(hl)
   08B4 21r58s40           1787 	ld	hl,#_btx + 1
   08B7 56                 1788 	ld	d,(hl)
   08B8 CB 23              1789 	sla	e
   08BA CB 12              1790 	rl	d
   08BC 21r5Bs40           1791 	ld	hl,#_btab
   08BF 19                 1792 	add	hl,de
   08C0 5E                 1793 	ld	e,(hl)
   08C1 23                 1794 	inc	hl
   08C2 56                 1795 	ld	d,(hl)
   08C3 DD 6E E9           1796 	ld	l,-23 (ix)
   08C6 DD 66 EA           1797 	ld	h,-22 (ix)
   08C9 73                 1798 	ld	(hl),e
   08CA 23                 1799 	inc	hl
   08CB 72                 1800 	ld	(hl),d
                           1801 ;demo.c:289: cmd.dest_y = 512+btab[bty];
   08CC 21 06 00           1802 	ld	hl,#0x0006
   08CF 09                 1803 	add	hl,bc
   08D0 DD 75 E9           1804 	ld	-23 (ix),l
   08D3 DD 74 EA           1805 	ld	-22 (ix),h
   08D6 21r59s40           1806 	ld	hl,#_bty + 0
   08D9 5E                 1807 	ld	e,(hl)
   08DA 21r5As40           1808 	ld	hl,#_bty + 1
   08DD 56                 1809 	ld	d,(hl)
   08DE CB 23              1810 	sla	e
   08E0 CB 12              1811 	rl	d
   08E2 21r5Bs40           1812 	ld	hl,#_btab
   08E5 19                 1813 	add	hl,de
   08E6 5E                 1814 	ld	e,(hl)
   08E7 23                 1815 	inc	hl
   08E8 56                 1816 	ld	d,(hl)
   08E9 21 00 02           1817 	ld	hl,#0x0200
   08EC 19                 1818 	add	hl,de
   08ED EB                 1819 	ex	de,hl
   08EE DD 6E E9           1820 	ld	l,-23 (ix)
   08F1 DD 66 EA           1821 	ld	h,-22 (ix)
   08F4 73                 1822 	ld	(hl),e
   08F5 23                 1823 	inc	hl
   08F6 72                 1824 	ld	(hl),d
                           1825 ;demo.c:290: cmd.size_x = 16;
   08F7 21 08 00           1826 	ld	hl,#0x0008
   08FA 09                 1827 	add	hl,bc
   08FB 36 10              1828 	ld	(hl),#0x10
   08FD 23                 1829 	inc	hl
   08FE 36 00              1830 	ld	(hl),#0x00
                           1831 ;demo.c:291: cmd.size_y = 16;
   0900 21 0A 00           1832 	ld	hl,#0x000A
   0903 09                 1833 	add	hl,bc
   0904 36 10              1834 	ld	(hl),#0x10
   0906 23                 1835 	inc	hl
   0907 36 00              1836 	ld	(hl),#0x00
                           1837 ;demo.c:292: cmd.data = 0;
   0909 21 0C 00           1838 	ld	hl,#0x000C
   090C 09                 1839 	add	hl,bc
   090D EB                 1840 	ex	de,hl
   090E 3E 00              1841 	ld	a,#0x00
   0910 12                 1842 	ld	(de),a
                           1843 ;demo.c:293: cmd.argument = 0x00;
   0911 21 0D 00           1844 	ld	hl,#0x000D
   0914 09                 1845 	add	hl,bc
   0915 EB                 1846 	ex	de,hl
   0916 3E 00              1847 	ld	a,#0x00
   0918 12                 1848 	ld	(de),a
                           1849 ;demo.c:294: cmd.command = 0xD0;
   0919 21 0E 00           1850 	ld	hl,#0x000E
   091C 09                 1851 	add	hl,bc
   091D EB                 1852 	ex	de,hl
   091E 3E D0              1853 	ld	a,#0xD0
   0920 12                 1854 	ld	(de),a
                           1855 ;demo.c:295: vdp_copier(&cmd);
   0921 C5                 1856 	push	bc
   0922 CDr00s00           1857 	call	_vdp_copier
   0925 F1                 1858 	pop	af
                           1859 ;demo.c:283: for(btx=ys;btx<ye;btx++) {
   0926 FD 21r57s40        1860 	ld	iy,#_btx
   092A FD 34 00           1861 	inc	0 (iy)
   092D 20 07              1862 	jr	NZ,00150$
   092F FD 21r57s40        1863 	ld	iy,#_btx
   0933 FD 34 01           1864 	inc	1 (iy)
   0936                    1865 00150$:
   0936 C3r22s08           1866 	jp	00114$
   0939                    1867 00120$:
                           1868 ;demo.c:282: for(bty=3;bty<11;bty++) {
   0939 FD 21r59s40        1869 	ld	iy,#_bty
   093D FD 34 00           1870 	inc	0 (iy)
   0940 20 07              1871 	jr	NZ,00151$
   0942 FD 21r59s40        1872 	ld	iy,#_bty
   0946 FD 34 01           1873 	inc	1 (iy)
   0949                    1874 00151$:
   0949 C3r01s08           1875 	jp	00118$
   094C                    1876 00121$:
                           1877 ;demo.c:299: flof++;
   094C FD 21r7Bs40        1878 	ld	iy,#_flof
   0950 FD 34 00           1879 	inc	0 (iy)
   0953 20 07              1880 	jr	NZ,00152$
   0955 FD 21r7Bs40        1881 	ld	iy,#_flof
   0959 FD 34 01           1882 	inc	1 (iy)
   095C                    1883 00152$:
                           1884 ;demo.c:300: if (flof == 2) flof = 0;
   095C 3Ar7Bs40           1885 	ld	a,(#_flof+0)
   095F D6 02              1886 	sub	a,#0x02
   0961 20 06              1887 	jr	NZ,00153$
   0963 3Ar7Cs40           1888 	ld	a,(#_flof+1)
   0966 B7                 1889 	or	a,a
   0967 28 02              1890 	jr	Z,00154$
   0969                    1891 00153$:
   0969 18 0A              1892 	jr	00122$
   096B                    1893 00154$:
   096B 21r7Bs40           1894 	ld	hl,#_flof + 0
   096E 36 00              1895 	ld	(hl), #0x00
   0970 21r7Cs40           1896 	ld	hl,#_flof + 1
   0973 36 00              1897 	ld	(hl), #0x00
   0975                    1898 00122$:
   0975 DD F9              1899 	ld	sp,ix
   0977 DD E1              1900 	pop	ix
   0979 C9                 1901 	ret
   097A                    1902 _do_blocks_end::
                           1903 ;demo.c:308: void raster_effu() {
                           1904 ;	---------------------------------
                           1905 ; Function raster_effu
                           1906 ; ---------------------------------
   097A                    1907 _raster_effu_start::
   097A                    1908 _raster_effu:
                           1909 ;demo.c:309: vbicount = 0;
   097A FD 21r40s40        1910 	ld	iy,#_vbicount
   097E FD 36 00 00        1911 	ld	0 (iy),#0x00
   0982 FD 21r40s40        1912 	ld	iy,#_vbicount
   0986 FD 36 01 00        1913 	ld	1 (iy),#0x00
                           1914 ;demo.c:311: waitVB();
   098A 76                 1915 		halt 
                           1916 ;demo.c:313: vdp_register(1,0x40); // disable vblank
   098B 21 01 40           1917 	ld	hl,#0x4001
   098E E5                 1918 	push	hl
   098F CDr00s00           1919 	call	_vdp_register
   0992 F1                 1920 	pop	af
                           1921 ;demo.c:315: vdp_register(19,linenum); // interrupt on line
   0993 3Ar7Ds40           1922 	ld	a,(#_linenum+0)
   0996 F5                 1923 	push	af
   0997 33                 1924 	inc	sp
   0998 3E 13              1925 	ld	a,#0x13
   099A F5                 1926 	push	af
   099B 33                 1927 	inc	sp
   099C CDr00s00           1928 	call	_vdp_register
   099F F1                 1929 	pop	af
                           1930 ;demo.c:316: vdp_register(0,0x16); // mode SC5, IE1 interrupts on
   09A0 21 00 16           1931 	ld	hl,#0x1600
   09A3 E5                 1932 	push	hl
   09A4 CDr00s00           1933 	call	_vdp_register
   09A7 F1                 1934 	pop	af
                           1935 ;demo.c:318: waitVB();
   09A8 76                 1936 		halt 
                           1937 ;demo.c:332: linenum++;
   09A9 FD 21r7Ds40        1938 	ld	iy,#_linenum
   09AD FD 34 00           1939 	inc	0 (iy)
   09B0 20 07              1940 	jr	NZ,00106$
   09B2 FD 21r7Ds40        1941 	ld	iy,#_linenum
   09B6 FD 34 01           1942 	inc	1 (iy)
   09B9                    1943 00106$:
                           1944 ;demo.c:333: if (linenum >= 212-60) linenum = 10;
   09B9 3Ar7Ds40           1945 	ld	a,(#_linenum+0)
   09BC D6 98              1946 	sub	a,#0x98
   09BE 3Ar7Es40           1947 	ld	a,(#_linenum+1)
   09C1 DE 00              1948 	sbc	a,#0x00
   09C3 FArD0s09           1949 	jp	M,00102$
   09C6 21r7Ds40           1950 	ld	hl,#_linenum + 0
   09C9 36 0A              1951 	ld	(hl), #0x0A
   09CB 21r7Es40           1952 	ld	hl,#_linenum + 1
   09CE 36 00              1953 	ld	(hl), #0x00
   09D0                    1954 00102$:
                           1955 ;demo.c:335: vdp_register(0,0x6); // mode SC5, IE1 interrupts off
   09D0 21 00 06           1956 	ld	hl,#0x0600
   09D3 E5                 1957 	push	hl
   09D4 CDr00s00           1958 	call	_vdp_register
   09D7 F1                 1959 	pop	af
                           1960 ;demo.c:336: vdp_register(1,0x60); // enable vblank
   09D8 21 01 60           1961 	ld	hl,#0x6001
   09DB E5                 1962 	push	hl
   09DC CDr00s00           1963 	call	_vdp_register
   09DF F1                 1964 	pop	af
   09E0 C9                 1965 	ret
   09E1                    1966 _raster_effu_end::
                           1967 ;demo.c:345: void do_animplay() {
                           1968 ;	---------------------------------
                           1969 ; Function do_animplay
                           1970 ; ---------------------------------
   09E1                    1971 _do_animplay_start::
   09E1                    1972 _do_animplay:
   09E1 DD E5              1973 	push	ix
   09E3 DD 21 00 00        1974 	ld	ix,#0
   09E7 DD 39              1975 	add	ix,sp
   09E9 21 EC FF           1976 	ld	hl,#-20
   09EC 39                 1977 	add	hl,sp
   09ED F9                 1978 	ld	sp,hl
                           1979 ;demo.c:351: for (y = 0; y < 106; y+=1) {
   09EE DD 36 FF 00        1980 	ld	-1 (ix),#0x00
   09F2                    1981 00107$:
   09F2 DD 7E FF           1982 	ld	a,-1 (ix)
   09F5 D6 6A              1983 	sub	a,#0x6A
   09F7 D2rA3s0A           1984 	jp	NC,00110$
                           1985 ;demo.c:352: cmd.source_x = xo;
   09FA 21 04 00           1986 	ld	hl,#0x0004
   09FD 39                 1987 	add	hl,sp
   09FE EB                 1988 	ex	de,hl
   09FF ED 4Br7Fs40        1989 	ld	bc,(_xo)
   0A03 EB                 1990 	ex	de,hl
   0A04 71                 1991 	ld	(hl),c
   0A05 23                 1992 	inc	hl
   0A06 70                 1993 	ld	(hl),b
                           1994 ;demo.c:353: cmd.source_y = 256+po+yo+(y>>1);
   0A07 21 04 00           1995 	ld	hl,#0x0004
   0A0A 39                 1996 	add	hl,sp
   0A0B 4D                 1997 	ld	c,l
   0A0C 44                 1998 	ld	b,h
   0A0D 21 02 00           1999 	ld	hl,#0x0002
   0A10 09                 2000 	add	hl,bc
   0A11 DD 75 EE           2001 	ld	-18 (ix),l
   0A14 DD 74 EF           2002 	ld	-17 (ix),h
   0A17 3Ar83s40           2003 	ld	a,(#_po+0)
   0A1A 5F                 2004 	ld	e,a
   0A1B 3Ar84s40           2005 	ld	a,(#_po+1)
   0A1E C6 01              2006 	add	a,#0x01
   0A20 57                 2007 	ld	d,a
   0A21 21r81s40           2008 	ld	hl,#_yo
   0A24 7B                 2009 	ld	a,e
   0A25 86                 2010 	add	a,(hl)
   0A26 DD 77 EC           2011 	ld	-20 (ix),a
   0A29 7A                 2012 	ld	a,d
   0A2A 23                 2013 	inc	hl
   0A2B 8E                 2014 	adc	a,(hl)
   0A2C DD 77 ED           2015 	ld	-19 (ix),a
   0A2F DD 5E FF           2016 	ld	e,-1 (ix)
   0A32 CB 3B              2017 	srl	e
   0A34 16 00              2018 	ld	d,#0x00
   0A36 DD 7E EC           2019 	ld	a,-20 (ix)
   0A39 83                 2020 	add	a,e
   0A3A 5F                 2021 	ld	e,a
   0A3B DD 7E ED           2022 	ld	a,-19 (ix)
   0A3E 8A                 2023 	adc	a,d
   0A3F 57                 2024 	ld	d,a
   0A40 DD 6E EE           2025 	ld	l,-18 (ix)
   0A43 DD 66 EF           2026 	ld	h,-17 (ix)
   0A46 73                 2027 	ld	(hl),e
   0A47 23                 2028 	inc	hl
   0A48 72                 2029 	ld	(hl),d
                           2030 ;demo.c:354: cmd.dest_x = 0;
   0A49 21 04 00           2031 	ld	hl,#0x0004
   0A4C 09                 2032 	add	hl,bc
   0A4D 36 00              2033 	ld	(hl),#0x00
   0A4F 23                 2034 	inc	hl
   0A50 36 00              2035 	ld	(hl),#0x00
                           2036 ;demo.c:355: cmd.dest_y = (y<<1);
   0A52 21 06 00           2037 	ld	hl,#0x0006
   0A55 09                 2038 	add	hl,bc
   0A56 DD 75 EC           2039 	ld	-20 (ix),l
   0A59 DD 74 ED           2040 	ld	-19 (ix),h
   0A5C DD 5E FF           2041 	ld	e,-1 (ix)
   0A5F 16 00              2042 	ld	d,#0x00
   0A61 CB 23              2043 	sla	e
   0A63 CB 12              2044 	rl	d
   0A65 DD 6E EC           2045 	ld	l,-20 (ix)
   0A68 DD 66 ED           2046 	ld	h,-19 (ix)
   0A6B 73                 2047 	ld	(hl),e
   0A6C 23                 2048 	inc	hl
   0A6D 72                 2049 	ld	(hl),d
                           2050 ;demo.c:356: cmd.size_x = 128;
   0A6E 21 08 00           2051 	ld	hl,#0x0008
   0A71 09                 2052 	add	hl,bc
   0A72 36 80              2053 	ld	(hl),#0x80
   0A74 23                 2054 	inc	hl
   0A75 36 00              2055 	ld	(hl),#0x00
                           2056 ;demo.c:357: cmd.size_y = 1;
   0A77 21 0A 00           2057 	ld	hl,#0x000A
   0A7A 09                 2058 	add	hl,bc
   0A7B 36 01              2059 	ld	(hl),#0x01
   0A7D 23                 2060 	inc	hl
   0A7E 36 00              2061 	ld	(hl),#0x00
                           2062 ;demo.c:358: cmd.data = 0;
   0A80 21 0C 00           2063 	ld	hl,#0x000C
   0A83 09                 2064 	add	hl,bc
   0A84 EB                 2065 	ex	de,hl
   0A85 3E 00              2066 	ld	a,#0x00
   0A87 12                 2067 	ld	(de),a
                           2068 ;demo.c:359: cmd.argument = 0x00;
   0A88 21 0D 00           2069 	ld	hl,#0x000D
   0A8B 09                 2070 	add	hl,bc
   0A8C EB                 2071 	ex	de,hl
   0A8D 3E 00              2072 	ld	a,#0x00
   0A8F 12                 2073 	ld	(de),a
                           2074 ;demo.c:360: cmd.command = 0xD0;
   0A90 21 0E 00           2075 	ld	hl,#0x000E
   0A93 09                 2076 	add	hl,bc
   0A94 EB                 2077 	ex	de,hl
   0A95 3E D0              2078 	ld	a,#0xD0
   0A97 12                 2079 	ld	(de),a
                           2080 ;demo.c:361: vdp_copier(&cmd);
   0A98 C5                 2081 	push	bc
   0A99 CDr00s00           2082 	call	_vdp_copier
   0A9C F1                 2083 	pop	af
                           2084 ;demo.c:351: for (y = 0; y < 106; y+=1) {
   0A9D DD 34 FF           2085 	inc	-1 (ix)
   0AA0 C3rF2s09           2086 	jp	00107$
   0AA3                    2087 00110$:
                           2088 ;demo.c:364: for (y = 0; y < 106; y+=1) {
   0AA3 DD 36 FF 00        2089 	ld	-1 (ix),#0x00
   0AA7                    2090 00111$:
   0AA7 DD 7E FF           2091 	ld	a,-1 (ix)
   0AAA D6 6A              2092 	sub	a,#0x6A
   0AAC D2r58s0B           2093 	jp	NC,00114$
                           2094 ;demo.c:365: cmd.source_x = xo;
   0AAF 21 04 00           2095 	ld	hl,#0x0004
   0AB2 39                 2096 	add	hl,sp
   0AB3 EB                 2097 	ex	de,hl
   0AB4 ED 4Br7Fs40        2098 	ld	bc,(_xo)
   0AB8 EB                 2099 	ex	de,hl
   0AB9 71                 2100 	ld	(hl),c
   0ABA 23                 2101 	inc	hl
   0ABB 70                 2102 	ld	(hl),b
                           2103 ;demo.c:366: cmd.source_y = 256+po+yo+(y>>1);
   0ABC 21 04 00           2104 	ld	hl,#0x0004
   0ABF 39                 2105 	add	hl,sp
   0AC0 4D                 2106 	ld	c,l
   0AC1 44                 2107 	ld	b,h
   0AC2 21 02 00           2108 	ld	hl,#0x0002
   0AC5 09                 2109 	add	hl,bc
   0AC6 DD 75 EC           2110 	ld	-20 (ix),l
   0AC9 DD 74 ED           2111 	ld	-19 (ix),h
   0ACC 3Ar83s40           2112 	ld	a,(#_po+0)
   0ACF 5F                 2113 	ld	e,a
   0AD0 3Ar84s40           2114 	ld	a,(#_po+1)
   0AD3 C6 01              2115 	add	a,#0x01
   0AD5 57                 2116 	ld	d,a
   0AD6 21r81s40           2117 	ld	hl,#_yo
   0AD9 7B                 2118 	ld	a,e
   0ADA 86                 2119 	add	a,(hl)
   0ADB DD 77 EE           2120 	ld	-18 (ix),a
   0ADE 7A                 2121 	ld	a,d
   0ADF 23                 2122 	inc	hl
   0AE0 8E                 2123 	adc	a,(hl)
   0AE1 DD 77 EF           2124 	ld	-17 (ix),a
   0AE4 DD 5E FF           2125 	ld	e,-1 (ix)
   0AE7 CB 3B              2126 	srl	e
   0AE9 16 00              2127 	ld	d,#0x00
   0AEB DD 7E EE           2128 	ld	a,-18 (ix)
   0AEE 83                 2129 	add	a,e
   0AEF 5F                 2130 	ld	e,a
   0AF0 DD 7E EF           2131 	ld	a,-17 (ix)
   0AF3 8A                 2132 	adc	a,d
   0AF4 57                 2133 	ld	d,a
   0AF5 DD 6E EC           2134 	ld	l,-20 (ix)
   0AF8 DD 66 ED           2135 	ld	h,-19 (ix)
   0AFB 73                 2136 	ld	(hl),e
   0AFC 23                 2137 	inc	hl
   0AFD 72                 2138 	ld	(hl),d
                           2139 ;demo.c:367: cmd.dest_x = 128;
   0AFE 21 04 00           2140 	ld	hl,#0x0004
   0B01 09                 2141 	add	hl,bc
   0B02 36 80              2142 	ld	(hl),#0x80
   0B04 23                 2143 	inc	hl
   0B05 36 00              2144 	ld	(hl),#0x00
                           2145 ;demo.c:368: cmd.dest_y = (y<<1);
   0B07 21 06 00           2146 	ld	hl,#0x0006
   0B0A 09                 2147 	add	hl,bc
   0B0B DD 75 EC           2148 	ld	-20 (ix),l
   0B0E DD 74 ED           2149 	ld	-19 (ix),h
   0B11 DD 5E FF           2150 	ld	e,-1 (ix)
   0B14 16 00              2151 	ld	d,#0x00
   0B16 CB 23              2152 	sla	e
   0B18 CB 12              2153 	rl	d
   0B1A DD 6E EC           2154 	ld	l,-20 (ix)
   0B1D DD 66 ED           2155 	ld	h,-19 (ix)
   0B20 73                 2156 	ld	(hl),e
   0B21 23                 2157 	inc	hl
   0B22 72                 2158 	ld	(hl),d
                           2159 ;demo.c:369: cmd.size_x = 128;
   0B23 21 08 00           2160 	ld	hl,#0x0008
   0B26 09                 2161 	add	hl,bc
   0B27 36 80              2162 	ld	(hl),#0x80
   0B29 23                 2163 	inc	hl
   0B2A 36 00              2164 	ld	(hl),#0x00
                           2165 ;demo.c:370: cmd.size_y = 1;
   0B2C 21 0A 00           2166 	ld	hl,#0x000A
   0B2F 09                 2167 	add	hl,bc
   0B30 36 01              2168 	ld	(hl),#0x01
   0B32 23                 2169 	inc	hl
   0B33 36 00              2170 	ld	(hl),#0x00
                           2171 ;demo.c:371: cmd.data = 0;
   0B35 21 0C 00           2172 	ld	hl,#0x000C
   0B38 09                 2173 	add	hl,bc
   0B39 EB                 2174 	ex	de,hl
   0B3A 3E 00              2175 	ld	a,#0x00
   0B3C 12                 2176 	ld	(de),a
                           2177 ;demo.c:372: cmd.argument = 0x00;
   0B3D 21 0D 00           2178 	ld	hl,#0x000D
   0B40 09                 2179 	add	hl,bc
   0B41 EB                 2180 	ex	de,hl
   0B42 3E 00              2181 	ld	a,#0x00
   0B44 12                 2182 	ld	(de),a
                           2183 ;demo.c:373: cmd.command = 0xd2; // logical vram to vram, xor
   0B45 21 0E 00           2184 	ld	hl,#0x000E
   0B48 09                 2185 	add	hl,bc
   0B49 EB                 2186 	ex	de,hl
   0B4A 3E D2              2187 	ld	a,#0xD2
   0B4C 12                 2188 	ld	(de),a
                           2189 ;demo.c:374: vdp_copier(&cmd);
   0B4D C5                 2190 	push	bc
   0B4E CDr00s00           2191 	call	_vdp_copier
   0B51 F1                 2192 	pop	af
                           2193 ;demo.c:364: for (y = 0; y < 106; y+=1) {
   0B52 DD 34 FF           2194 	inc	-1 (ix)
   0B55 C3rA7s0A           2195 	jp	00111$
   0B58                    2196 00114$:
                           2197 ;demo.c:378: xo+=128;
   0B58 21r7Fs40           2198 	ld	hl,#_xo
   0B5B 7E                 2199 	ld	a,(hl)
   0B5C C6 80              2200 	add	a,#0x80
   0B5E 23                 2201 	inc	hl
   0B5F 2B                 2202 	dec	hl
   0B60 C5                 2203 	push	bc
   0B61 4F                 2204 	ld	c, a
   0B62 23                 2205 	inc	hl
   0B63 7E                 2206 	ld	a, (hl)
   0B64 47                 2207 	ld	b, a
   0B65 79                 2208 	ld	a, c
   0B66 2B                 2209 	dec	hl
   0B67 77                 2210 	ld	(hl), a
   0B68 78                 2211 	ld	a, b
   0B69 C1                 2212 	pop	bc
   0B6A CE 00              2213 	adc	a,#0x00
   0B6C 23                 2214 	inc	hl
   0B6D 77                 2215 	ld	(hl),a
                           2216 ;demo.c:379: if (xo >= 256) {
   0B6E 3Ar7Fs40           2217 	ld	a,(#_xo+0)
   0B71 D6 00              2218 	sub	a,#0x00
   0B73 3Ar80s40           2219 	ld	a,(#_xo+1)
   0B76 DE 01              2220 	sbc	a,#0x01
   0B78 FArDFs0B           2221 	jp	M,00106$
                           2222 ;demo.c:380: xo = 0;
   0B7B 21r7Fs40           2223 	ld	hl,#_xo + 0
   0B7E 36 00              2224 	ld	(hl), #0x00
   0B80 21r80s40           2225 	ld	hl,#_xo + 1
   0B83 36 00              2226 	ld	(hl), #0x00
                           2227 ;demo.c:381: yo+=53;
   0B85 21r81s40           2228 	ld	hl,#_yo
   0B88 7E                 2229 	ld	a,(hl)
   0B89 C6 35              2230 	add	a,#0x35
   0B8B 23                 2231 	inc	hl
   0B8C 2B                 2232 	dec	hl
   0B8D C5                 2233 	push	bc
   0B8E 4F                 2234 	ld	c, a
   0B8F 23                 2235 	inc	hl
   0B90 7E                 2236 	ld	a, (hl)
   0B91 47                 2237 	ld	b, a
   0B92 79                 2238 	ld	a, c
   0B93 2B                 2239 	dec	hl
   0B94 77                 2240 	ld	(hl), a
   0B95 78                 2241 	ld	a, b
   0B96 C1                 2242 	pop	bc
   0B97 CE 00              2243 	adc	a,#0x00
   0B99 23                 2244 	inc	hl
   0B9A 77                 2245 	ld	(hl),a
                           2246 ;demo.c:382: if (yo >= 212) { yo = 0; po+=256; }
   0B9B 3Ar81s40           2247 	ld	a,(#_yo+0)
   0B9E D6 D4              2248 	sub	a,#0xD4
   0BA0 3Ar82s40           2249 	ld	a,(#_yo+1)
   0BA3 DE 00              2250 	sbc	a,#0x00
   0BA5 FArC8s0B           2251 	jp	M,00102$
   0BA8 21r81s40           2252 	ld	hl,#_yo + 0
   0BAB 36 00              2253 	ld	(hl), #0x00
   0BAD 21r82s40           2254 	ld	hl,#_yo + 1
   0BB0 36 00              2255 	ld	(hl), #0x00
   0BB2 21r83s40           2256 	ld	hl,#_po
   0BB5 7E                 2257 	ld	a,(hl)
   0BB6 C6 00              2258 	add	a,#0x00
   0BB8 23                 2259 	inc	hl
   0BB9 2B                 2260 	dec	hl
   0BBA C5                 2261 	push	bc
   0BBB 4F                 2262 	ld	c, a
   0BBC 23                 2263 	inc	hl
   0BBD 7E                 2264 	ld	a, (hl)
   0BBE 47                 2265 	ld	b, a
   0BBF 79                 2266 	ld	a, c
   0BC0 2B                 2267 	dec	hl
   0BC1 77                 2268 	ld	(hl), a
   0BC2 78                 2269 	ld	a, b
   0BC3 C1                 2270 	pop	bc
   0BC4 CE 01              2271 	adc	a,#0x01
   0BC6 23                 2272 	inc	hl
   0BC7 77                 2273 	ld	(hl),a
   0BC8                    2274 00102$:
                           2275 ;demo.c:383: if (po >= 768) {
   0BC8 3Ar83s40           2276 	ld	a,(#_po+0)
   0BCB D6 00              2277 	sub	a,#0x00
   0BCD 3Ar84s40           2278 	ld	a,(#_po+1)
   0BD0 DE 03              2279 	sbc	a,#0x03
   0BD2 FArDFs0B           2280 	jp	M,00106$
                           2281 ;demo.c:384: po = 0;
   0BD5 21r83s40           2282 	ld	hl,#_po + 0
   0BD8 36 00              2283 	ld	(hl), #0x00
   0BDA 21r84s40           2284 	ld	hl,#_po + 1
   0BDD 36 00              2285 	ld	(hl), #0x00
   0BDF                    2286 00106$:
                           2287 ;demo.c:389: msx2_palette(15,3+sintab[fffaaa & 255]>>5,3,4);
   0BDF 21r85s40           2288 	ld	hl,#_fffaaa + 0
   0BE2 4E                 2289 	ld	c,(hl)
   0BE3 06 00              2290 	ld	b,#0x00
   0BE5 21r00s00           2291 	ld	hl,#_sintab
   0BE8 09                 2292 	add	hl,bc
   0BE9 7E                 2293 	ld	a,(hl)
   0BEA 4F                 2294 	ld	c,a
   0BEB 17                 2295 	rla	
   0BEC 9F                 2296 	sbc	a,a
   0BED 47                 2297 	ld	b,a
   0BEE 03                 2298 	inc	bc
   0BEF 03                 2299 	inc	bc
   0BF0 03                 2300 	inc	bc
   0BF1 CB 28              2301 	sra	b
   0BF3 CB 19              2302 	rr	c
   0BF5 CB 28              2303 	sra	b
   0BF7 CB 19              2304 	rr	c
   0BF9 CB 28              2305 	sra	b
   0BFB CB 19              2306 	rr	c
   0BFD CB 28              2307 	sra	b
   0BFF CB 19              2308 	rr	c
   0C01 CB 28              2309 	sra	b
   0C03 CB 19              2310 	rr	c
   0C05 21 03 04           2311 	ld	hl,#0x0403
   0C08 E5                 2312 	push	hl
   0C09 41                 2313 	ld	b,c
   0C0A 0E 0F              2314 	ld	c,#0x0F
   0C0C C5                 2315 	push	bc
   0C0D CDr00s00           2316 	call	_msx2_palette
   0C10 F1                 2317 	pop	af
   0C11 F1                 2318 	pop	af
                           2319 ;demo.c:390: msx2_palette(3,2+sintab[fffaaa & 255]>>5,0,0);
   0C12 21r85s40           2320 	ld	hl,#_fffaaa + 0
   0C15 4E                 2321 	ld	c,(hl)
   0C16 06 00              2322 	ld	b,#0x00
   0C18 21r00s00           2323 	ld	hl,#_sintab
   0C1B 09                 2324 	add	hl,bc
   0C1C 7E                 2325 	ld	a,(hl)
   0C1D 4F                 2326 	ld	c,a
   0C1E 17                 2327 	rla	
   0C1F 9F                 2328 	sbc	a,a
   0C20 47                 2329 	ld	b,a
   0C21 03                 2330 	inc	bc
   0C22 03                 2331 	inc	bc
   0C23 CB 28              2332 	sra	b
   0C25 CB 19              2333 	rr	c
   0C27 CB 28              2334 	sra	b
   0C29 CB 19              2335 	rr	c
   0C2B CB 28              2336 	sra	b
   0C2D CB 19              2337 	rr	c
   0C2F CB 28              2338 	sra	b
   0C31 CB 19              2339 	rr	c
   0C33 CB 28              2340 	sra	b
   0C35 CB 19              2341 	rr	c
   0C37 21 00 00           2342 	ld	hl,#0x0000
   0C3A E5                 2343 	push	hl
   0C3B 41                 2344 	ld	b,c
   0C3C 0E 03              2345 	ld	c,#0x03
   0C3E C5                 2346 	push	bc
   0C3F CDr00s00           2347 	call	_msx2_palette
   0C42 F1                 2348 	pop	af
   0C43 F1                 2349 	pop	af
                           2350 ;demo.c:391: fffaaa++;
   0C44 FD 21r85s40        2351 	ld	iy,#_fffaaa
   0C48 FD 34 00           2352 	inc	0 (iy)
   0C4B 20 07              2353 	jr	NZ,00132$
   0C4D FD 21r85s40        2354 	ld	iy,#_fffaaa
   0C51 FD 34 01           2355 	inc	1 (iy)
   0C54                    2356 00132$:
   0C54 DD F9              2357 	ld	sp,ix
   0C56 DD E1              2358 	pop	ix
   0C58 C9                 2359 	ret
   0C59                    2360 _do_animplay_end::
                           2361 ;demo.c:400: void main() {
                           2362 ;	---------------------------------
                           2363 ; Function main
                           2364 ; ---------------------------------
   0C59                    2365 _main_start::
   0C59                    2366 _main:
                           2367 ;demo.c:401: unsigned char quit=0;
   0C59 0E 00              2368 	ld	c,#0x00
                           2369 ;demo.c:402: int modes = 128; // interlace bit on
   0C5B 11 80 00           2370 	ld	de,#0x0080
                           2371 ;demo.c:405: spindown();
   0C5E C5                 2372 	push	bc
   0C5F D5                 2373 	push	de
   0C60 CDr00s00           2374 	call	_spindown
   0C63 D1                 2375 	pop	de
   0C64 C1                 2376 	pop	bc
                           2377 ;demo.c:407: puts("demo init\r\n\r\n");
   0C65 C5                 2378 	push	bc
   0C66 D5                 2379 	push	de
   0C67 21rF7s0D           2380 	ld	hl,#__str_0
   0C6A E5                 2381 	push	hl
   0C6B CDr00s00           2382 	call	_puts
   0C6E F1                 2383 	pop	af
   0C6F D1                 2384 	pop	de
   0C70 C1                 2385 	pop	bc
                           2386 ;demo.c:420: puts("music init...");
   0C71 C5                 2387 	push	bc
   0C72 D5                 2388 	push	de
   0C73 21r05s0E           2389 	ld	hl,#__str_1
   0C76 E5                 2390 	push	hl
   0C77 CDr00s00           2391 	call	_puts
   0C7A F1                 2392 	pop	af
   0C7B D1                 2393 	pop	de
   0C7C C1                 2394 	pop	bc
                           2395 ;demo.c:422: PLY_SongPtr = (char *)0x0103;
   0C7D 21r00s00           2396 	ld	hl,#_PLY_SongPtr + 0
   0C80 36 03              2397 	ld	(hl), #0x03
   0C82 21r01s00           2398 	ld	hl,#_PLY_SongPtr + 1
   0C85 36 01              2399 	ld	(hl), #0x01
                           2400 ;demo.c:423: PLY_Init();
   0C87 C5                 2401 	push	bc
   0C88 D5                 2402 	push	de
   0C89 CDr00s00           2403 	call	_PLY_Init
   0C8C D1                 2404 	pop	de
   0C8D C1                 2405 	pop	bc
                           2406 ;demo.c:424: puts("done.\n\n");
   0C8E C5                 2407 	push	bc
   0C8F D5                 2408 	push	de
   0C90 21r13s0E           2409 	ld	hl,#__str_2
   0C93 E5                 2410 	push	hl
   0C94 CDr00s00           2411 	call	_puts
   0C97 F1                 2412 	pop	af
   0C98 D1                 2413 	pop	de
   0C99 C1                 2414 	pop	bc
                           2415 ;demo.c:426: if(isvdp2())
   0C9A C5                 2416 	push	bc
   0C9B D5                 2417 	push	de
   0C9C CDr00s00           2418 	call	_isvdp2
   0C9F 45                 2419 	ld	b,l
   0CA0 D1                 2420 	pop	de
   0CA1 78                 2421 	ld	a,b
   0CA2 C1                 2422 	pop	bc
   0CA3 47                 2423 	ld	b,a
   0CA4 B7                 2424 	or	a,a
   0CA5 28 03              2425 	jr	Z,00102$
                           2426 ;demo.c:428: modes+=2; // pal
   0CA7 11 82 00           2427 	ld	de,#0x0082
   0CAA                    2428 00102$:
                           2429 ;demo.c:432: vdp_set_screen5();
   0CAA C5                 2430 	push	bc
   0CAB D5                 2431 	push	de
   0CAC CDr00s00           2432 	call	_vdp_set_screen5
   0CAF D1                 2433 	pop	de
   0CB0 C1                 2434 	pop	bc
                           2435 ;demo.c:434: vdp_register(VDP_MODE3,modes); // interlace on, screen mode pal or ntsc
   0CB1 43                 2436 	ld	b,e
   0CB2 C5                 2437 	push	bc
   0CB3 C5                 2438 	push	bc
   0CB4 33                 2439 	inc	sp
   0CB5 3E 09              2440 	ld	a,#0x09
   0CB7 F5                 2441 	push	af
   0CB8 33                 2442 	inc	sp
   0CB9 CDr00s00           2443 	call	_vdp_register
   0CBC F1                 2444 	pop	af
   0CBD C1                 2445 	pop	bc
                           2446 ;demo.c:436: puts("demo start\r\n");
   0CBE C5                 2447 	push	bc
   0CBF 21r1Bs0E           2448 	ld	hl,#__str_3
   0CC2 E5                 2449 	push	hl
   0CC3 CDr00s00           2450 	call	_puts
   0CC6 F1                 2451 	pop	af
   0CC7 C1                 2452 	pop	bc
                           2453 ;demo.c:438: scratch_clear();
   0CC8 C5                 2454 	push	bc
   0CC9 CDr95s03           2455 	call	_scratch_clear
   0CCC C1                 2456 	pop	bc
                           2457 ;demo.c:439: vdp_load_palette(scratch);
   0CCD C5                 2458 	push	bc
   0CCE 21r80s3F           2459 	ld	hl,#_scratch
   0CD1 E5                 2460 	push	hl
   0CD2 CDr00s00           2461 	call	_vdp_load_palette
   0CD5 F1                 2462 	pop	af
   0CD6 C1                 2463 	pop	bc
                           2464 ;demo.c:441: vdp_register(VDP_VOFFSET,0);
   0CD7 C5                 2465 	push	bc
   0CD8 21 17 00           2466 	ld	hl,#0x0017
   0CDB E5                 2467 	push	hl
   0CDC CDr00s00           2468 	call	_vdp_register
   0CDF F1                 2469 	pop	af
   0CE0 C1                 2470 	pop	bc
                           2471 ;demo.c:443: pal_load("LF      PL5",32);
   0CE1 C5                 2472 	push	bc
   0CE2 3E 20              2473 	ld	a,#0x20
   0CE4 F5                 2474 	push	af
   0CE5 33                 2475 	inc	sp
   0CE6 21r28s0E           2476 	ld	hl,#__str_4
   0CE9 E5                 2477 	push	hl
   0CEA CDrA8s03           2478 	call	_pal_load
   0CED F1                 2479 	pop	af
   0CEE 33                 2480 	inc	sp
   0CEF C1                 2481 	pop	bc
                           2482 ;demo.c:444: vdp_load_palette(cur_palette);
   0CF0 C5                 2483 	push	bc
   0CF1 21r00s40           2484 	ld	hl,#_cur_palette
   0CF4 E5                 2485 	push	hl
   0CF5 CDr00s00           2486 	call	_vdp_load_palette
   0CF8 F1                 2487 	pop	af
   0CF9 C1                 2488 	pop	bc
                           2489 ;demo.c:446: memset((uint8_t *) &packbuffer, 0, 13428);
   0CFA C5                 2490 	push	bc
   0CFB 21 74 34           2491 	ld	hl,#0x3474
   0CFE E5                 2492 	push	hl
   0CFF 3E 00              2493 	ld	a,#0x00
   0D01 F5                 2494 	push	af
   0D02 33                 2495 	inc	sp
   0D03 21r00s01           2496 	ld	hl,#_packbuffer
   0D06 E5                 2497 	push	hl
   0D07 CDr00s00           2498 	call	_memset
   0D0A F1                 2499 	pop	af
   0D0B F1                 2500 	pop	af
   0D0C 33                 2501 	inc	sp
   0D0D C1                 2502 	pop	bc
                           2503 ;demo.c:447: raw_load("LF1     PCK", 13428, packbuffer);
   0D0E C5                 2504 	push	bc
   0D0F 21r00s01           2505 	ld	hl,#_packbuffer
   0D12 E5                 2506 	push	hl
   0D13 21 74 34           2507 	ld	hl,#0x3474
   0D16 E5                 2508 	push	hl
   0D17 21r34s0E           2509 	ld	hl,#__str_5
   0D1A E5                 2510 	push	hl
   0D1B CDr5Cs04           2511 	call	_raw_load
   0D1E F1                 2512 	pop	af
   0D1F F1                 2513 	pop	af
   0D20 F1                 2514 	pop	af
   0D21 C1                 2515 	pop	bc
                           2516 ;demo.c:448: bitbuster(packbuffer,0x8000,VRAM_0); // to page 1
   0D22 C5                 2517 	push	bc
   0D23 3E 01              2518 	ld	a,#0x01
   0D25 F5                 2519 	push	af
   0D26 33                 2520 	inc	sp
   0D27 21 00 80           2521 	ld	hl,#0x8000
   0D2A E5                 2522 	push	hl
   0D2B 21r00s01           2523 	ld	hl,#_packbuffer
   0D2E E5                 2524 	push	hl
   0D2F CDr00s00           2525 	call	_bitbuster
   0D32 F1                 2526 	pop	af
   0D33 F1                 2527 	pop	af
   0D34 33                 2528 	inc	sp
   0D35 C1                 2529 	pop	bc
                           2530 ;demo.c:450: memset((uint8_t *) &packbuffer, 0, 14505);
   0D36 C5                 2531 	push	bc
   0D37 21 A9 38           2532 	ld	hl,#0x38A9
   0D3A E5                 2533 	push	hl
   0D3B 3E 00              2534 	ld	a,#0x00
   0D3D F5                 2535 	push	af
   0D3E 33                 2536 	inc	sp
   0D3F 21r00s01           2537 	ld	hl,#_packbuffer
   0D42 E5                 2538 	push	hl
   0D43 CDr00s00           2539 	call	_memset
   0D46 F1                 2540 	pop	af
   0D47 F1                 2541 	pop	af
   0D48 33                 2542 	inc	sp
   0D49 C1                 2543 	pop	bc
                           2544 ;demo.c:451: raw_load("LF2     PCK", 14505, packbuffer);
   0D4A C5                 2545 	push	bc
   0D4B 21r00s01           2546 	ld	hl,#_packbuffer
   0D4E E5                 2547 	push	hl
   0D4F 21 A9 38           2548 	ld	hl,#0x38A9
   0D52 E5                 2549 	push	hl
   0D53 21r40s0E           2550 	ld	hl,#__str_6
   0D56 E5                 2551 	push	hl
   0D57 CDr5Cs04           2552 	call	_raw_load
   0D5A F1                 2553 	pop	af
   0D5B F1                 2554 	pop	af
   0D5C F1                 2555 	pop	af
   0D5D C1                 2556 	pop	bc
                           2557 ;demo.c:452: bitbuster(packbuffer,0x0000,VRAM_1); // to page 2
   0D5E C5                 2558 	push	bc
   0D5F 3E 00              2559 	ld	a,#0x00
   0D61 F5                 2560 	push	af
   0D62 33                 2561 	inc	sp
   0D63 21 00 00           2562 	ld	hl,#0x0000
   0D66 E5                 2563 	push	hl
   0D67 21r00s01           2564 	ld	hl,#_packbuffer
   0D6A E5                 2565 	push	hl
   0D6B CDr00s00           2566 	call	_bitbuster
   0D6E F1                 2567 	pop	af
   0D6F F1                 2568 	pop	af
   0D70 33                 2569 	inc	sp
   0D71 C1                 2570 	pop	bc
                           2571 ;demo.c:454: memset((uint8_t *) &packbuffer, 0, 14480);
   0D72 C5                 2572 	push	bc
   0D73 21 90 38           2573 	ld	hl,#0x3890
   0D76 E5                 2574 	push	hl
   0D77 3E 00              2575 	ld	a,#0x00
   0D79 F5                 2576 	push	af
   0D7A 33                 2577 	inc	sp
   0D7B 21r00s01           2578 	ld	hl,#_packbuffer
   0D7E E5                 2579 	push	hl
   0D7F CDr00s00           2580 	call	_memset
   0D82 F1                 2581 	pop	af
   0D83 F1                 2582 	pop	af
   0D84 33                 2583 	inc	sp
   0D85 C1                 2584 	pop	bc
                           2585 ;demo.c:455: raw_load("LF3     PCK", 14480, packbuffer);
   0D86 C5                 2586 	push	bc
   0D87 21r00s01           2587 	ld	hl,#_packbuffer
   0D8A E5                 2588 	push	hl
   0D8B 21 90 38           2589 	ld	hl,#0x3890
   0D8E E5                 2590 	push	hl
   0D8F 21r4Cs0E           2591 	ld	hl,#__str_7
   0D92 E5                 2592 	push	hl
   0D93 CDr5Cs04           2593 	call	_raw_load
   0D96 F1                 2594 	pop	af
   0D97 F1                 2595 	pop	af
   0D98 F1                 2596 	pop	af
   0D99 C1                 2597 	pop	bc
                           2598 ;demo.c:456: bitbuster(packbuffer,0x8000,VRAM_1); // to page 3
   0D9A C5                 2599 	push	bc
   0D9B 3E 00              2600 	ld	a,#0x00
   0D9D F5                 2601 	push	af
   0D9E 33                 2602 	inc	sp
   0D9F 21 00 80           2603 	ld	hl,#0x8000
   0DA2 E5                 2604 	push	hl
   0DA3 21r00s01           2605 	ld	hl,#_packbuffer
   0DA6 E5                 2606 	push	hl
   0DA7 CDr00s00           2607 	call	_bitbuster
   0DAA F1                 2608 	pop	af
   0DAB F1                 2609 	pop	af
   0DAC 33                 2610 	inc	sp
   0DAD C1                 2611 	pop	bc
                           2612 ;demo.c:469: install_isr(my_isr);
   0DAE C5                 2613 	push	bc
   0DAF 21r2Cs02           2614 	ld	hl,#_my_isr
   0DB2 E5                 2615 	push	hl
   0DB3 CDr00s00           2616 	call	_install_isr
   0DB6 F1                 2617 	pop	af
   0DB7 C1                 2618 	pop	bc
                           2619 ;demo.c:492: while (!quit) {
   0DB8                    2620 00105$:
   0DB8 AF                 2621 	xor	a,a
   0DB9 B1                 2622 	or	a,c
   0DBA 20 18              2623 	jr	NZ,00107$
                           2624 ;demo.c:495: do_animplay();
   0DBC C5                 2625 	push	bc
   0DBD CDrE1s09           2626 	call	_do_animplay
   0DC0 C1                 2627 	pop	bc
                           2628 ;demo.c:507: if(space())
   0DC1 C5                 2629 	push	bc
   0DC2 21 08 01           2630 	ld	hl,#0x0108
   0DC5 E5                 2631 	push	hl
   0DC6 CDr00s00           2632 	call	_ispressed
   0DC9 F1                 2633 	pop	af
   0DCA 7D                 2634 	ld	a,l
   0DCB C1                 2635 	pop	bc
   0DCC 47                 2636 	ld	b,a
   0DCD B7                 2637 	or	a,a
   0DCE 28 E8              2638 	jr	Z,00105$
                           2639 ;demo.c:508: quit=1;
   0DD0 0E 01              2640 	ld	c,#0x01
   0DD2 18 E4              2641 	jr	00105$
   0DD4                    2642 00107$:
                           2643 ;demo.c:511: waitVB();
   0DD4 76                 2644 		halt 
                           2645 ;demo.c:512: uninstall_isr();
   0DD5 CDr00s00           2646 	call	_uninstall_isr
                           2647 ;demo.c:513: PLY_Stop();
   0DD8 CDr00s00           2648 	call	_PLY_Stop
                           2649 ;demo.c:514: PLY_SendRegisters();
   0DDB CDr00s00           2650 	call	_PLY_SendRegisters
                           2651 ;demo.c:516: screen(0);
   0DDE 3E 00              2652 	ld	a,#0x00
   0DE0 F5                 2653 	push	af
   0DE1 33                 2654 	inc	sp
   0DE2 CDr00s00           2655 	call	_screen
   0DE5 33                 2656 	inc	sp
                           2657 ;demo.c:518: puts("demo exit\r\n\r\n");
   0DE6 21r58s0E           2658 	ld	hl,#__str_8
   0DE9 E5                 2659 	push	hl
   0DEA CDr00s00           2660 	call	_puts
   0DED F1                 2661 	pop	af
                           2662 ;demo.c:520: exit(0);
   0DEE 3E 00              2663 	ld	a,#0x00
   0DF0 F5                 2664 	push	af
   0DF1 33                 2665 	inc	sp
   0DF2 CDr00s00           2666 	call	_exit
   0DF5 33                 2667 	inc	sp
   0DF6 C9                 2668 	ret
   0DF7                    2669 _main_end::
   0DF7                    2670 __str_0:
   0DF7 64 65 6D 6F 20 69  2671 	.ascii "demo init"
        6E 69 74
   0E00 0D                 2672 	.db 0x0D
   0E01 0A                 2673 	.db 0x0A
   0E02 0D                 2674 	.db 0x0D
   0E03 0A                 2675 	.db 0x0A
   0E04 00                 2676 	.db 0x00
   0E05                    2677 __str_1:
   0E05 6D 75 73 69 63 20  2678 	.ascii "music init..."
        69 6E 69 74 2E 2E
        2E
   0E12 00                 2679 	.db 0x00
   0E13                    2680 __str_2:
   0E13 64 6F 6E 65 2E     2681 	.ascii "done."
   0E18 0A                 2682 	.db 0x0A
   0E19 0A                 2683 	.db 0x0A
   0E1A 00                 2684 	.db 0x00
   0E1B                    2685 __str_3:
   0E1B 64 65 6D 6F 20 73  2686 	.ascii "demo start"
        74 61 72 74
   0E25 0D                 2687 	.db 0x0D
   0E26 0A                 2688 	.db 0x0A
   0E27 00                 2689 	.db 0x00
   0E28                    2690 __str_4:
   0E28 4C 46 20 20 20 20  2691 	.ascii "LF      PL5"
        20 20 50 4C 35
   0E33 00                 2692 	.db 0x00
   0E34                    2693 __str_5:
   0E34 4C 46 31 20 20 20  2694 	.ascii "LF1     PCK"
        20 20 50 43 4B
   0E3F 00                 2695 	.db 0x00
   0E40                    2696 __str_6:
   0E40 4C 46 32 20 20 20  2697 	.ascii "LF2     PCK"
        20 20 50 43 4B
   0E4B 00                 2698 	.db 0x00
   0E4C                    2699 __str_7:
   0E4C 4C 46 33 20 20 20  2700 	.ascii "LF3     PCK"
        20 20 50 43 4B
   0E57 00                 2701 	.db 0x00
   0E58                    2702 __str_8:
   0E58 64 65 6D 6F 20 65  2703 	.ascii "demo exit"
        78 69 74
   0E61 0D                 2704 	.db 0x0D
   0E62 0A                 2705 	.db 0x0A
   0E63 0D                 2706 	.db 0x0D
   0E64 0A                 2707 	.db 0x0A
   0E65 00                 2708 	.db 0x00
                           2709 	.area _CODE
                           2710 	.area _CABS
