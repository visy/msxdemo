                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Mar 22 2009) (Mac OS X i386)
                              4 ; This file was generated Wed Feb  7 00:32:14 2018
                              5 ;--------------------------------------------------------
                              6 	.module demo
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _cls
                             14 	.globl _pause
                             15 	.globl _pal_load
                             16 	.globl _ge5_load
                             17 	.globl _my_isr
                             18 	.globl _strcat
                             19 	.globl _vbicount
                             20 	.globl _scratch
                             21 ;--------------------------------------------------------
                             22 ; special function registers
                             23 ;--------------------------------------------------------
                             24 ;--------------------------------------------------------
                             25 ;  ram data
                             26 ;--------------------------------------------------------
                             27 	.area _DATA
   0000                      28 _scratch::
   0000                      29 	.ds 128
   0080                      30 _vbicount::
   0080                      31 	.ds 2
                             32 ;--------------------------------------------------------
                             33 ; overlayable items in  ram 
                             34 ;--------------------------------------------------------
                             35 	.area _OVERLAY
                             36 ;--------------------------------------------------------
                             37 ; external initialized ram data
                             38 ;--------------------------------------------------------
                             39 ;--------------------------------------------------------
                             40 ; global & static initialisations
                             41 ;--------------------------------------------------------
                             42 	.area _HOME
                             43 	.area _GSINIT
                             44 	.area _GSFINAL
                             45 	.area _GSINIT
                             46 ;demo.c:22: volatile int vbicount=0;
   0000 FD 21r80s00          47 	ld	iy,#_vbicount
   0004 FD 36 00 00          48 	ld	0 (iy),#0x00
   0008 FD 21r80s00          49 	ld	iy,#_vbicount
   000C FD 36 01 00          50 	ld	1 (iy),#0x00
                             51 ;--------------------------------------------------------
                             52 ; Home
                             53 ;--------------------------------------------------------
                             54 	.area _HOME
                             55 	.area _HOME
                             56 ;--------------------------------------------------------
                             57 ; code
                             58 ;--------------------------------------------------------
                             59 	.area _CODE
                             60 ;demo.c:13: char *strcat(char *dest, char *src) {
                             61 ;	---------------------------------
                             62 ; Function strcat
                             63 ; ---------------------------------
   0000                      64 _strcat_start::
   0000                      65 _strcat:
   0000 DD E5                66 	push	ix
   0002 DD 21 00 00          67 	ld	ix,#0
   0006 DD 39                68 	add	ix,sp
   0008 F5                   69 	push	af
                             70 ;demo.c:14: char *rdest = dest;
   0009 DD 4E 04             71 	ld	c,4 (ix)
   000C DD 46 05             72 	ld	b,5 (ix)
                             73 ;demo.c:15: while (*dest)
   000F 59                   74 	ld	e,c
   0010 50                   75 	ld	d,b
   0011                      76 00101$:
   0011 1A                   77 	ld	a,(de)
   0012 B7                   78 	or	a,a
   0013 28 03                79 	jr	Z,00111$
                             80 ;demo.c:16: dest++;
   0015 13                   81 	inc	de
   0016 18 F9                82 	jr	00101$
                             83 ;demo.c:17: while (*dest++ = *src++)
   0018                      84 00111$:
   0018 DD 7E 06             85 	ld	a,6 (ix)
   001B DD 77 FE             86 	ld	-2 (ix),a
   001E DD 7E 07             87 	ld	a,7 (ix)
   0021 DD 77 FF             88 	ld	-1 (ix),a
   0024                      89 00104$:
   0024 DD 6E FE             90 	ld	l,-2 (ix)
   0027 DD 66 FF             91 	ld	h,-1 (ix)
   002A 7E                   92 	ld	a,(hl)
   002B DD 34 FE             93 	inc	-2 (ix)
   002E 20 03                94 	jr	NZ,00115$
   0030 DD 34 FF             95 	inc	-1 (ix)
   0033                      96 00115$:
   0033 12                   97 	ld	(de),a
   0034 13                   98 	inc	de
   0035 B7                   99 	or	a,a
   0036 20 EC               100 	jr	NZ,00104$
                            101 ;demo.c:19: return rdest;
   0038 69                  102 	ld	l,c
   0039 60                  103 	ld	h,b
   003A DD F9               104 	ld	sp,ix
   003C DD E1               105 	pop	ix
   003E C9                  106 	ret
   003F                     107 _strcat_end::
                            108 ;demo.c:24: void my_isr(void) interrupt
                            109 ;	---------------------------------
                            110 ; Function my_isr
                            111 ; ---------------------------------
   003F                     112 _my_isr_start::
   003F                     113 _my_isr:
   003F F5                  114 	push	af
   0040 C5                  115 	push	bc
   0041 D5                  116 	push	de
   0042 E5                  117 	push	hl
   0043 FD E5               118 	push	iy
                            119 ;demo.c:26: DI;
   0045 F3                  120 		di 
                            121 ;demo.c:27: READ_VDP_STATUS;
   0046 DB 99               122 		in a,(#0x99) 
                            123 ;demo.c:29: PLY_Play();
   0048 CDr00s00            124 	call	_PLY_Play
                            125 ;demo.c:30: PLY_SendRegisters();
   004B CDr00s00            126 	call	_PLY_SendRegisters
                            127 ;demo.c:32: vbicount++;
   004E FD 21r80s00         128 	ld	iy,#_vbicount
   0052 FD 34 00            129 	inc	0 (iy)
   0055 20 07               130 	jr	NZ,00103$
   0057 FD 21r80s00         131 	ld	iy,#_vbicount
   005B FD 34 01            132 	inc	1 (iy)
   005E                     133 00103$:
                            134 ;demo.c:34: EI;
   005E FB                  135 		ei 
   005F FD E1               136 	pop	iy
   0061 E1                  137 	pop	hl
   0062 D1                  138 	pop	de
   0063 C1                  139 	pop	bc
   0064 F1                  140 	pop	af
   0065 ED 4D               141 	reti
   0067                     142 _my_isr_end::
                            143 ;demo.c:37: uint8_t ge5_load(char *file_name, uint8_t vramh, uint16_t vraml) {
                            144 ;	---------------------------------
                            145 ; Function ge5_load
                            146 ; ---------------------------------
   0067                     147 _ge5_load_start::
   0067                     148 _ge5_load:
   0067 DD E5               149 	push	ix
   0069 DD 21 00 00         150 	ld	ix,#0
   006D DD 39               151 	add	ix,sp
   006F 21 D2 FF            152 	ld	hl,#-46
   0072 39                  153 	add	hl,sp
   0073 F9                  154 	ld	sp,hl
                            155 ;demo.c:41: memset((uint8_t *) &f, 0, sizeof(fcb));
   0074 21 00 00            156 	ld	hl,#0x0000
   0077 39                  157 	add	hl,sp
   0078 4D                  158 	ld	c,l
   0079 44                  159 	ld	b,h
   007A 21 2E 00            160 	ld	hl,#0x002E
   007D E5                  161 	push	hl
   007E 3E 00               162 	ld	a,#0x00
   0080 F5                  163 	push	af
   0081 33                  164 	inc	sp
   0082 C5                  165 	push	bc
   0083 CDr00s00            166 	call	_memset
   0086 F1                  167 	pop	af
   0087 F1                  168 	pop	af
   0088 33                  169 	inc	sp
                            170 ;demo.c:43: f.record_size = 128;
   0089 21 00 00            171 	ld	hl,#0x0000
   008C 39                  172 	add	hl,sp
   008D 4D                  173 	ld	c,l
   008E 44                  174 	ld	b,h
   008F 21 0F 00            175 	ld	hl,#0x000F
   0092 09                  176 	add	hl,bc
   0093 EB                  177 	ex	de,hl
   0094 3E 80               178 	ld	a,#0x80
   0096 12                  179 	ld	(de),a
                            180 ;demo.c:44: f.drive = 0;
   0097 3E 00               181 	ld	a,#0x00
   0099 02                  182 	ld	(bc),a
                            183 ;demo.c:46: memcpy(f.name, file_name, 11);
   009A DD 5E 04            184 	ld	e,4 (ix)
   009D DD 56 05            185 	ld	d,5 (ix)
   00A0 03                  186 	inc	bc
   00A1 21 0B 00            187 	ld	hl,#0x000B
   00A4 E5                  188 	push	hl
   00A5 D5                  189 	push	de
   00A6 C5                  190 	push	bc
   00A7 CDr00s00            191 	call	_memcpy
   00AA F1                  192 	pop	af
   00AB F1                  193 	pop	af
   00AC F1                  194 	pop	af
                            195 ;demo.c:48: if (open(&f) != 0) return 0;
   00AD 21 00 00            196 	ld	hl,#0x0000
   00B0 39                  197 	add	hl,sp
   00B1 E5                  198 	push	hl
   00B2 CDr00s00            199 	call	_open
   00B5 F1                  200 	pop	af
   00B6 AF                  201 	xor	a,a
   00B7 B5                  202 	or	a,l
   00B8 28 05               203 	jr	Z,00102$
   00BA 2E 00               204 	ld	l,#0x00
   00BC C3r33s01            205 	jp	00114$
   00BF                     206 00102$:
                            207 ;demo.c:49: vdp_set_write_address(vramh, vraml);
   00BF DD 6E 07            208 	ld	l,7 (ix)
   00C2 DD 66 08            209 	ld	h,8 (ix)
   00C5 E5                  210 	push	hl
   00C6 DD 7E 06            211 	ld	a,6 (ix)
   00C9 F5                  212 	push	af
   00CA 33                  213 	inc	sp
   00CB CDr00s00            214 	call	_vdp_set_write_address
   00CE F1                  215 	pop	af
   00CF 33                  216 	inc	sp
                            217 ;demo.c:51: for (i = 0; i < 213; i++) {
   00D0 0E 00               218 	ld	c,#0x00
   00D2                     219 00110$:
   00D2 79                  220 	ld	a,c
   00D3 D6 D5               221 	sub	a,#0xD5
   00D5 D2r28s01            222 	jp	NC,00113$
                            223 ;demo.c:52: if (block_set_data_ptr(scratch) != 0) return 0;
   00D8 C5                  224 	push	bc
   00D9 21r00s00            225 	ld	hl,#_scratch
   00DC E5                  226 	push	hl
   00DD CDr00s00            227 	call	_block_set_data_ptr
   00E0 F1                  228 	pop	af
   00E1 7D                  229 	ld	a,l
   00E2 C1                  230 	pop	bc
   00E3 47                  231 	ld	b,a
   00E4 B7                  232 	or	a,a
   00E5 28 05               233 	jr	Z,00104$
   00E7 2E 00               234 	ld	l,#0x00
   00E9 C3r33s01            235 	jp	00114$
   00EC                     236 00104$:
                            237 ;demo.c:53: if (block_read(&f) != 0) return 0;
   00EC 21 00 00            238 	ld	hl,#0x0000
   00EF 39                  239 	add	hl,sp
   00F0 C5                  240 	push	bc
   00F1 E5                  241 	push	hl
   00F2 CDr00s00            242 	call	_block_read
   00F5 F1                  243 	pop	af
   00F6 7D                  244 	ld	a,l
   00F7 C1                  245 	pop	bc
   00F8 47                  246 	ld	b,a
   00F9 B7                  247 	or	a,a
   00FA 28 04               248 	jr	Z,00106$
   00FC 2E 00               249 	ld	l,#0x00
   00FE 18 33               250 	jr	00114$
   0100                     251 00106$:
                            252 ;demo.c:55: if (i == 0) vdp_load_screen(scratch + 7, 121);   // to skip GE5 header
   0100 AF                  253 	xor	a,a
   0101 B1                  254 	or	a,c
   0102 20 11               255 	jr	NZ,00108$
   0104 11r07s00            256 	ld	de,#_scratch + 7
   0107 C5                  257 	push	bc
   0108 3E 79               258 	ld	a,#0x79
   010A F5                  259 	push	af
   010B 33                  260 	inc	sp
   010C D5                  261 	push	de
   010D CDr00s00            262 	call	_vdp_load_screen
   0110 F1                  263 	pop	af
   0111 33                  264 	inc	sp
   0112 C1                  265 	pop	bc
   0113 18 0F               266 	jr	00112$
   0115                     267 00108$:
                            268 ;demo.c:56: else vdp_load_screen(scratch, 128);
   0115 C5                  269 	push	bc
   0116 3E 80               270 	ld	a,#0x80
   0118 F5                  271 	push	af
   0119 33                  272 	inc	sp
   011A 21r00s00            273 	ld	hl,#_scratch
   011D E5                  274 	push	hl
   011E CDr00s00            275 	call	_vdp_load_screen
   0121 F1                  276 	pop	af
   0122 33                  277 	inc	sp
   0123 C1                  278 	pop	bc
   0124                     279 00112$:
                            280 ;demo.c:51: for (i = 0; i < 213; i++) {
   0124 0C                  281 	inc	c
   0125 C3rD2s00            282 	jp	00110$
   0128                     283 00113$:
                            284 ;demo.c:59: close(&f);
   0128 21 00 00            285 	ld	hl,#0x0000
   012B 39                  286 	add	hl,sp
   012C E5                  287 	push	hl
   012D CDr00s00            288 	call	_close
   0130 F1                  289 	pop	af
                            290 ;demo.c:61: return 1;
   0131 2E 01               291 	ld	l,#0x01
   0133                     292 00114$:
   0133 DD F9               293 	ld	sp,ix
   0135 DD E1               294 	pop	ix
   0137 C9                  295 	ret
   0138                     296 _ge5_load_end::
                            297 ;demo.c:64: uint8_t pal_load(char *file_name) {
                            298 ;	---------------------------------
                            299 ; Function pal_load
                            300 ; ---------------------------------
   0138                     301 _pal_load_start::
   0138                     302 _pal_load:
   0138 DD E5               303 	push	ix
   013A DD 21 00 00         304 	ld	ix,#0
   013E DD 39               305 	add	ix,sp
   0140 21 D2 FF            306 	ld	hl,#-46
   0143 39                  307 	add	hl,sp
   0144 F9                  308 	ld	sp,hl
                            309 ;demo.c:67: memset((uint8_t *) &f, 0, sizeof(fcb));
   0145 21 00 00            310 	ld	hl,#0x0000
   0148 39                  311 	add	hl,sp
   0149 4D                  312 	ld	c,l
   014A 44                  313 	ld	b,h
   014B 21 2E 00            314 	ld	hl,#0x002E
   014E E5                  315 	push	hl
   014F 3E 00               316 	ld	a,#0x00
   0151 F5                  317 	push	af
   0152 33                  318 	inc	sp
   0153 C5                  319 	push	bc
   0154 CDr00s00            320 	call	_memset
   0157 F1                  321 	pop	af
   0158 F1                  322 	pop	af
   0159 33                  323 	inc	sp
                            324 ;demo.c:68: memset((uint8_t *) &scratch, 0, 128);
   015A 21 80 00            325 	ld	hl,#0x0080
   015D E5                  326 	push	hl
   015E 3E 00               327 	ld	a,#0x00
   0160 F5                  328 	push	af
   0161 33                  329 	inc	sp
   0162 21r00s00            330 	ld	hl,#_scratch
   0165 E5                  331 	push	hl
   0166 CDr00s00            332 	call	_memset
   0169 F1                  333 	pop	af
   016A F1                  334 	pop	af
   016B 33                  335 	inc	sp
                            336 ;demo.c:70: f.record_size = 128;
   016C 21 00 00            337 	ld	hl,#0x0000
   016F 39                  338 	add	hl,sp
   0170 4D                  339 	ld	c,l
   0171 44                  340 	ld	b,h
   0172 21 0F 00            341 	ld	hl,#0x000F
   0175 09                  342 	add	hl,bc
   0176 EB                  343 	ex	de,hl
   0177 3E 80               344 	ld	a,#0x80
   0179 12                  345 	ld	(de),a
                            346 ;demo.c:71: f.drive = 0;
   017A 3E 00               347 	ld	a,#0x00
   017C 02                  348 	ld	(bc),a
                            349 ;demo.c:73: memcpy(f.name, file_name, 11);
   017D DD 5E 04            350 	ld	e,4 (ix)
   0180 DD 56 05            351 	ld	d,5 (ix)
   0183 03                  352 	inc	bc
   0184 21 0B 00            353 	ld	hl,#0x000B
   0187 E5                  354 	push	hl
   0188 D5                  355 	push	de
   0189 C5                  356 	push	bc
   018A CDr00s00            357 	call	_memcpy
   018D F1                  358 	pop	af
   018E F1                  359 	pop	af
   018F F1                  360 	pop	af
                            361 ;demo.c:75: if (open(&f) != 0) return 0;
   0190 21 00 00            362 	ld	hl,#0x0000
   0193 39                  363 	add	hl,sp
   0194 E5                  364 	push	hl
   0195 CDr00s00            365 	call	_open
   0198 F1                  366 	pop	af
   0199 AF                  367 	xor	a,a
   019A B5                  368 	or	a,l
   019B 28 04               369 	jr	Z,00102$
   019D 2E 00               370 	ld	l,#0x00
   019F 18 34               371 	jr	00107$
   01A1                     372 00102$:
                            373 ;demo.c:76: if (block_set_data_ptr(scratch) != 0) return 0;
   01A1 21r00s00            374 	ld	hl,#_scratch
   01A4 E5                  375 	push	hl
   01A5 CDr00s00            376 	call	_block_set_data_ptr
   01A8 F1                  377 	pop	af
   01A9 AF                  378 	xor	a,a
   01AA B5                  379 	or	a,l
   01AB 28 04               380 	jr	Z,00104$
   01AD 2E 00               381 	ld	l,#0x00
   01AF 18 24               382 	jr	00107$
   01B1                     383 00104$:
                            384 ;demo.c:77: if (block_read(&f) != 0) return 0;
   01B1 21 00 00            385 	ld	hl,#0x0000
   01B4 39                  386 	add	hl,sp
   01B5 E5                  387 	push	hl
   01B6 CDr00s00            388 	call	_block_read
   01B9 F1                  389 	pop	af
   01BA AF                  390 	xor	a,a
   01BB B5                  391 	or	a,l
   01BC 28 04               392 	jr	Z,00106$
   01BE 2E 00               393 	ld	l,#0x00
   01C0 18 13               394 	jr	00107$
   01C2                     395 00106$:
                            396 ;demo.c:79: vdp_load_palette(scratch+7);
   01C2 01r07s00            397 	ld	bc,#_scratch + 7
   01C5 C5                  398 	push	bc
   01C6 CDr00s00            399 	call	_vdp_load_palette
   01C9 F1                  400 	pop	af
                            401 ;demo.c:81: close(&f);
   01CA 21 00 00            402 	ld	hl,#0x0000
   01CD 39                  403 	add	hl,sp
   01CE E5                  404 	push	hl
   01CF CDr00s00            405 	call	_close
   01D2 F1                  406 	pop	af
                            407 ;demo.c:82: return 1;
   01D3 2E 01               408 	ld	l,#0x01
   01D5                     409 00107$:
   01D5 DD F9               410 	ld	sp,ix
   01D7 DD E1               411 	pop	ix
   01D9 C9                  412 	ret
   01DA                     413 _pal_load_end::
                            414 ;demo.c:85: void pause() {
                            415 ;	---------------------------------
                            416 ; Function pause
                            417 ; ---------------------------------
   01DA                     418 _pause_start::
   01DA                     419 _pause:
                            420 ;demo.c:86: uint8_t i,j,k = 0;
                            421 ;demo.c:87: for (i = 0; i < 255; i++) {	
   01DA 01 00 00            422 	ld	bc,#0x0000
   01DD                     423 00104$:
   01DD 78                  424 	ld	a,b
   01DE D6 FF               425 	sub	a,#0xFF
   01E0 D0                  426 	ret	NC
                            427 ;demo.c:88: for (j = 0; j < 255; j++) {
   01E1 59                  428 	ld	e,c
   01E2 16 FF               429 	ld	d,#0xFF
   01E4                     430 00103$:
                            431 ;demo.c:89: k++;
   01E4 1C                  432 	inc	e
   01E5 15                  433 	dec	d
                            434 ;demo.c:88: for (j = 0; j < 255; j++) {
   01E6 AF                  435 	xor	a,a
   01E7 B2                  436 	or	a,d
   01E8 20 FA               437 	jr	NZ,00103$
                            438 ;demo.c:87: for (i = 0; i < 255; i++) {	
   01EA 4B                  439 	ld	c,e
   01EB 04                  440 	inc	b
   01EC 18 EF               441 	jr	00104$
   01EE                     442 _pause_end::
                            443 ;demo.c:94: void cls(uint8_t vramh, uint16_t vraml) {
                            444 ;	---------------------------------
                            445 ; Function cls
                            446 ; ---------------------------------
   01EE                     447 _cls_start::
   01EE                     448 _cls:
   01EE DD E5               449 	push	ix
   01F0 DD 21 00 00         450 	ld	ix,#0
   01F4 DD 39               451 	add	ix,sp
                            452 ;demo.c:95: vdp_set_write_address(vramh, vraml);
   01F6 DD 6E 05            453 	ld	l,5 (ix)
   01F9 DD 66 06            454 	ld	h,6 (ix)
   01FC E5                  455 	push	hl
   01FD DD 7E 04            456 	ld	a,4 (ix)
   0200 F5                  457 	push	af
   0201 33                  458 	inc	sp
   0202 CDr00s00            459 	call	_vdp_set_write_address
   0205 F1                  460 	pop	af
   0206 33                  461 	inc	sp
                            462 ;demo.c:96: memset((uint8_t *) &scratch, 0, 128);
   0207 21 80 00            463 	ld	hl,#0x0080
   020A E5                  464 	push	hl
   020B 3E 00               465 	ld	a,#0x00
   020D F5                  466 	push	af
   020E 33                  467 	inc	sp
   020F 21r00s00            468 	ld	hl,#_scratch
   0212 E5                  469 	push	hl
   0213 CDr00s00            470 	call	_memset
   0216 F1                  471 	pop	af
   0217 F1                  472 	pop	af
   0218 33                  473 	inc	sp
                            474 ;demo.c:97: vdp_load_screen(scratch, 128);
   0219 3E 80               475 	ld	a,#0x80
   021B F5                  476 	push	af
   021C 33                  477 	inc	sp
   021D 21r00s00            478 	ld	hl,#_scratch
   0220 E5                  479 	push	hl
   0221 CDr00s00            480 	call	_vdp_load_screen
   0224 F1                  481 	pop	af
   0225 33                  482 	inc	sp
   0226 DD E1               483 	pop	ix
   0228 C9                  484 	ret
   0229                     485 _cls_end::
                            486 ;demo.c:100: void main() {
                            487 ;	---------------------------------
                            488 ; Function main
                            489 ; ---------------------------------
   0229                     490 _main_start::
   0229                     491 _main:
                            492 ;demo.c:102: unsigned char quit=0;
   0229 0E 00               493 	ld	c,#0x00
                            494 ;demo.c:104: spindown();
   022B C5                  495 	push	bc
   022C CDr00s00            496 	call	_spindown
   022F C1                  497 	pop	bc
                            498 ;demo.c:106: puts("demo init\r\n\r\n");
   0230 C5                  499 	push	bc
   0231 21rDCs02            500 	ld	hl,#__str_0
   0234 E5                  501 	push	hl
   0235 CDr00s00            502 	call	_puts
   0238 F1                  503 	pop	af
   0239 C1                  504 	pop	bc
                            505 ;demo.c:108: puts("music init...");
   023A C5                  506 	push	bc
   023B 21rEAs02            507 	ld	hl,#__str_1
   023E E5                  508 	push	hl
   023F CDr00s00            509 	call	_puts
   0242 F1                  510 	pop	af
   0243 C1                  511 	pop	bc
                            512 ;demo.c:110: PLY_SongPtr = (char *)0x0103;
   0244 21r00s00            513 	ld	hl,#_PLY_SongPtr + 0
   0247 36 03               514 	ld	(hl), #0x03
   0249 21r01s00            515 	ld	hl,#_PLY_SongPtr + 1
   024C 36 01               516 	ld	(hl), #0x01
                            517 ;demo.c:111: PLY_Init();
   024E C5                  518 	push	bc
   024F CDr00s00            519 	call	_PLY_Init
   0252 C1                  520 	pop	bc
                            521 ;demo.c:112: puts("done.\n\n");
   0253 C5                  522 	push	bc
   0254 21rF8s02            523 	ld	hl,#__str_2
   0257 E5                  524 	push	hl
   0258 CDr00s00            525 	call	_puts
   025B F1                  526 	pop	af
   025C C1                  527 	pop	bc
                            528 ;demo.c:114: if(isvdp2())
   025D C5                  529 	push	bc
   025E CDr00s00            530 	call	_isvdp2
   0261 7D                  531 	ld	a,l
   0262 C1                  532 	pop	bc
   0263 47                  533 	ld	b,a
   0264 B7                  534 	or	a,a
   0265 28 0A               535 	jr	Z,00102$
                            536 ;demo.c:116: msx2_sethz(50);
   0267 C5                  537 	push	bc
   0268 3E 32               538 	ld	a,#0x32
   026A F5                  539 	push	af
   026B 33                  540 	inc	sp
   026C CDr00s00            541 	call	_msx2_sethz
   026F 33                  542 	inc	sp
   0270 C1                  543 	pop	bc
   0271                     544 00102$:
                            545 ;demo.c:120: vdp_set_screen5();
   0271 C5                  546 	push	bc
   0272 CDr00s00            547 	call	_vdp_set_screen5
   0275 C1                  548 	pop	bc
                            549 ;demo.c:121: pal_load("KETTU16 PL5");
   0276 C5                  550 	push	bc
   0277 21r00s03            551 	ld	hl,#__str_3
   027A E5                  552 	push	hl
   027B CDr38s01            553 	call	_pal_load
   027E F1                  554 	pop	af
   027F C1                  555 	pop	bc
                            556 ;demo.c:122: ge5_load("KETTU16 SC5", 0, 0x0000);
   0280 C5                  557 	push	bc
   0281 21 00 00            558 	ld	hl,#0x0000
   0284 E5                  559 	push	hl
   0285 3E 00               560 	ld	a,#0x00
   0287 F5                  561 	push	af
   0288 33                  562 	inc	sp
   0289 21r0Cs03            563 	ld	hl,#__str_4
   028C E5                  564 	push	hl
   028D CDr67s00            565 	call	_ge5_load
   0290 F1                  566 	pop	af
   0291 F1                  567 	pop	af
   0292 33                  568 	inc	sp
   0293 C1                  569 	pop	bc
                            570 ;demo.c:124: install_isr(my_isr);
   0294 C5                  571 	push	bc
   0295 21r3Fs00            572 	ld	hl,#_my_isr
   0298 E5                  573 	push	hl
   0299 CDr00s00            574 	call	_install_isr
   029C F1                  575 	pop	af
   029D C1                  576 	pop	bc
                            577 ;demo.c:126: while (!quit) {
   029E                     578 00105$:
   029E AF                  579 	xor	a,a
   029F B1                  580 	or	a,c
   02A0 20 14               581 	jr	NZ,00107$
                            582 ;demo.c:127: waitVB();
   02A2 76                  583 		halt 
                            584 ;demo.c:128: if(space())
   02A3 C5                  585 	push	bc
   02A4 21 08 01            586 	ld	hl,#0x0108
   02A7 E5                  587 	push	hl
   02A8 CDr00s00            588 	call	_ispressed
   02AB F1                  589 	pop	af
   02AC 7D                  590 	ld	a,l
   02AD C1                  591 	pop	bc
   02AE 47                  592 	ld	b,a
   02AF B7                  593 	or	a,a
   02B0 28 EC               594 	jr	Z,00105$
                            595 ;demo.c:129: quit=1;
   02B2 0E 01               596 	ld	c,#0x01
   02B4 18 E8               597 	jr	00105$
   02B6                     598 00107$:
                            599 ;demo.c:132: getchar();
   02B6 CDr00s00            600 	call	_getchar
                            601 ;demo.c:134: waitVB();
   02B9 76                  602 		halt 
                            603 ;demo.c:135: uninstall_isr();
   02BA CDr00s00            604 	call	_uninstall_isr
                            605 ;demo.c:136: PLY_Stop();
   02BD CDr00s00            606 	call	_PLY_Stop
                            607 ;demo.c:137: PLY_SendRegisters();
   02C0 CDr00s00            608 	call	_PLY_SendRegisters
                            609 ;demo.c:139: screen(0);
   02C3 3E 00               610 	ld	a,#0x00
   02C5 F5                  611 	push	af
   02C6 33                  612 	inc	sp
   02C7 CDr00s00            613 	call	_screen
   02CA 33                  614 	inc	sp
                            615 ;demo.c:141: puts("demo exit\r\n\r\n");
   02CB 21r18s03            616 	ld	hl,#__str_5
   02CE E5                  617 	push	hl
   02CF CDr00s00            618 	call	_puts
   02D2 F1                  619 	pop	af
                            620 ;demo.c:143: exit(0);
   02D3 3E 00               621 	ld	a,#0x00
   02D5 F5                  622 	push	af
   02D6 33                  623 	inc	sp
   02D7 CDr00s00            624 	call	_exit
   02DA 33                  625 	inc	sp
   02DB C9                  626 	ret
   02DC                     627 _main_end::
   02DC                     628 __str_0:
   02DC 64 65 6D 6F 20 69   629 	.ascii "demo init"
        6E 69 74
   02E5 0D                  630 	.db 0x0D
   02E6 0A                  631 	.db 0x0A
   02E7 0D                  632 	.db 0x0D
   02E8 0A                  633 	.db 0x0A
   02E9 00                  634 	.db 0x00
   02EA                     635 __str_1:
   02EA 6D 75 73 69 63 20   636 	.ascii "music init..."
        69 6E 69 74 2E 2E
        2E
   02F7 00                  637 	.db 0x00
   02F8                     638 __str_2:
   02F8 64 6F 6E 65 2E      639 	.ascii "done."
   02FD 0A                  640 	.db 0x0A
   02FE 0A                  641 	.db 0x0A
   02FF 00                  642 	.db 0x00
   0300                     643 __str_3:
   0300 4B 45 54 54 55 31   644 	.ascii "KETTU16 PL5"
        36 20 50 4C 35
   030B 00                  645 	.db 0x00
   030C                     646 __str_4:
   030C 4B 45 54 54 55 31   647 	.ascii "KETTU16 SC5"
        36 20 53 43 35
   0317 00                  648 	.db 0x00
   0318                     649 __str_5:
   0318 64 65 6D 6F 20 65   650 	.ascii "demo exit"
        78 69 74
   0321 0D                  651 	.db 0x0D
   0322 0A                  652 	.db 0x0A
   0323 0D                  653 	.db 0x0D
   0324 0A                  654 	.db 0x0A
   0325 00                  655 	.db 0x00
                            656 	.area _CODE
                            657 	.area _CABS
