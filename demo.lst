                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Mar 22 2009) (Mac OS X i386)
                              4 ; This file was generated Thu Feb 15 02:14:05 2018
                              5 ;--------------------------------------------------------
                              6 	.module demo
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _do_animplay
                             14 	.globl _twister
                             15 	.globl _raster_effu
                             16 	.globl _do_blocks
                             17 	.globl _do_ymmm
                             18 	.globl _fadein
                             19 	.globl _raw_load
                             20 	.globl _pause
                             21 	.globl _pal_load
                             22 	.globl _scratch_clear
                             23 	.globl _ge5_load
                             24 	.globl _color_isr
                             25 	.globl _my_isr
                             26 	.globl _isNthBitSet
                             27 	.globl _linenum
                             28 	.globl _flof
                             29 	.globl _btab
                             30 	.globl _bty
                             31 	.globl _btx
                             32 	.globl _bsy
                             33 	.globl _bsx
                             34 	.globl _block_init
                             35 	.globl _cc
                             36 	.globl _yofff
                             37 	.globl _tick
                             38 	.globl _vbicount
                             39 	.globl _block_palette
                             40 	.globl _cur_palette
                             41 	.globl _scratch
                             42 	.globl _packbuffer
                             43 	.globl _sintab
                             44 	.globl _sintabx
                             45 ;--------------------------------------------------------
                             46 ; special function registers
                             47 ;--------------------------------------------------------
                             48 ;--------------------------------------------------------
                             49 ;  ram data
                             50 ;--------------------------------------------------------
                             51 	.area _DATA
   0000                      52 _sintab::
   0000                      53 	.ds 256
   0100                      54 _packbuffer::
   0100                      55 	.ds 16000
   3F80                      56 _scratch::
   3F80                      57 	.ds 128
   4000                      58 _cur_palette::
   4000                      59 	.ds 32
   4020                      60 _block_palette::
   4020                      61 	.ds 32
   4040                      62 _vbicount::
   4040                      63 	.ds 2
   4042                      64 _tick::
   4042                      65 	.ds 2
   4044                      66 _isNthBitSet_mask_1_1:
   4044                      67 	.ds 8
   404C                      68 _yofff::
   404C                      69 	.ds 1
   404D                      70 _cc::
   404D                      71 	.ds 1
   404E                      72 _flipper:
   404E                      73 	.ds 2
   4050                      74 _ymmmf:
   4050                      75 	.ds 2
   4052                      76 _block_init::
   4052                      77 	.ds 1
   4053                      78 _bsx::
   4053                      79 	.ds 2
   4055                      80 _bsy::
   4055                      81 	.ds 2
   4057                      82 _btx::
   4057                      83 	.ds 2
   4059                      84 _bty::
   4059                      85 	.ds 2
   405B                      86 _btab::
   405B                      87 	.ds 32
   407B                      88 _flof::
   407B                      89 	.ds 2
   407D                      90 _linenum::
   407D                      91 	.ds 2
   407F                      92 _xo:
   407F                      93 	.ds 2
   4081                      94 _yo:
   4081                      95 	.ds 2
   4083                      96 _po:
   4083                      97 	.ds 2
   4085                      98 _fffaaa:
   4085                      99 	.ds 2
                            100 ;--------------------------------------------------------
                            101 ; overlayable items in  ram 
                            102 ;--------------------------------------------------------
                            103 	.area _OVERLAY
                            104 ;--------------------------------------------------------
                            105 ; external initialized ram data
                            106 ;--------------------------------------------------------
                            107 ;--------------------------------------------------------
                            108 ; global & static initialisations
                            109 ;--------------------------------------------------------
                            110 	.area _HOME
                            111 	.area _GSINIT
                            112 	.area _GSFINAL
                            113 	.area _GSINIT
                            114 ;demo.c:47: static unsigned char mask[] = {1, 2, 4, 8, 16, 32, 64, 128};
   0000 21r44s40            115 	ld	hl,#_isNthBitSet_mask_1_1
   0003 CDr00s00            116 	call	__initrleblock
   0006 08                  117 	.db	8
   0007 01 02 04 08 10 20   118 	.db	0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80
        40 80
   000F 00                  119 	.db	0
                            120 ;types.h:27: signed char sintab[256]={
   0010 21r00s00            121 	ld	hl,#_sintab
   0013 CDr00s00            122 	call	__initrleblock
   0016 3B                  123 	.db	59
   0017 00 03 06 09 0C 0F   124 	.db	0x00, 0x03, 0x06, 0x09, 0x0C, 0x0F, 0x12, 0x15
        12 15
   001F 18 1B 1E 21 24 27   125 	.db	0x18, 0x1B, 0x1E, 0x21, 0x24, 0x27, 0x2A, 0x2D
        2A 2D
   0027 30 33 36 39 3B 3E   126 	.db	0x30, 0x33, 0x36, 0x39, 0x3B, 0x3E, 0x41, 0x43
        41 43
   002F 46 49 4B 4E 50 52   127 	.db	0x46, 0x49, 0x4B, 0x4E, 0x50, 0x52, 0x55, 0x57
        55 57
   0037 59 5B 5E 60 62 64   128 	.db	0x59, 0x5B, 0x5E, 0x60, 0x62, 0x64, 0x66, 0x67
        66 67
   003F 69 6B 6C 6E 70 71   129 	.db	0x69, 0x6B, 0x6C, 0x6E, 0x70, 0x71, 0x72, 0x74
        72 74
   0047 75 76 77 78 79 7A   130 	.db	0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7B
        7B 7B
   004F 7C 7D 7D            131 	.db	0x7C, 0x7D, 0x7D
   0052 FB 7E               132 	.db	#-5,#0x7E
   0054 01                  133 	.db	1
   0055 7F                  134 	.db	0x7F
   0056 FB 7E               135 	.db	#-5,#0x7E
   0058 75                  136 	.db	117
   0059 7D 7D 7C 7B 7B 7A   137 	.db	0x7D, 0x7D, 0x7C, 0x7B, 0x7B, 0x7A, 0x79, 0x78
        79 78
   0061 77 76 75 74 72 71   138 	.db	0x77, 0x76, 0x75, 0x74, 0x72, 0x71, 0x70, 0x6E
        70 6E
   0069 6C 6B 69 67 66 64   139 	.db	0x6C, 0x6B, 0x69, 0x67, 0x66, 0x64, 0x62, 0x60
        62 60
   0071 5E 5B 59 57 55 52   140 	.db	0x5E, 0x5B, 0x59, 0x57, 0x55, 0x52, 0x50, 0x4E
        50 4E
   0079 4B 49 46 43 41 3E   141 	.db	0x4B, 0x49, 0x46, 0x43, 0x41, 0x3E, 0x3B, 0x39
        3B 39
   0081 36 33 30 2D 2A 27   142 	.db	0x36, 0x33, 0x30, 0x2D, 0x2A, 0x27, 0x24, 0x21
        24 21
   0089 1E 1B 18 15 12 0F   143 	.db	0x1E, 0x1B, 0x18, 0x15, 0x12, 0x0F, 0x0C, 0x09
        0C 09
   0091 06 03 00 FD FA F7   144 	.db	0x06, 0x03, 0x00, 0xFD, 0xFA, 0xF7, 0xF4, 0xF1
        F4 F1
   0099 EE EB E8 E5 E2 DF   145 	.db	0xEE, 0xEB, 0xE8, 0xE5, 0xE2, 0xDF, 0xDC, 0xD9
        DC D9
   00A1 D6 D3 D0 CD CA C7   146 	.db	0xD6, 0xD3, 0xD0, 0xCD, 0xCA, 0xC7, 0xC5, 0xC2
        C5 C2
   00A9 BF BD BA B7 B5 B2   147 	.db	0xBF, 0xBD, 0xBA, 0xB7, 0xB5, 0xB2, 0xB0, 0xAE
        B0 AE
   00B1 AB A9 A7 A5 A2 A0   148 	.db	0xAB, 0xA9, 0xA7, 0xA5, 0xA2, 0xA0, 0x9E, 0x9C
        9E 9C
   00B9 9A 99 97 95 94 92   149 	.db	0x9A, 0x99, 0x97, 0x95, 0x94, 0x92, 0x90, 0x8F
        90 8F
   00C1 8E 8C 8B 8A 89 88   150 	.db	0x8E, 0x8C, 0x8B, 0x8A, 0x89, 0x88, 0x87, 0x86
        87 86
   00C9 85 85 84 83 83      151 	.db	0x85, 0x85, 0x84, 0x83, 0x83
   00CE FB 82               152 	.db	#-5,#0x82
   00D0 01                  153 	.db	1
   00D1 81                  154 	.db	0x81
   00D2 FB 82               155 	.db	#-5,#0x82
   00D4 3A                  156 	.db	58
   00D5 83 83 84 85 85 86   157 	.db	0x83, 0x83, 0x84, 0x85, 0x85, 0x86, 0x87, 0x88
        87 88
   00DD 89 8A 8B 8C 8E 8F   158 	.db	0x89, 0x8A, 0x8B, 0x8C, 0x8E, 0x8F, 0x90, 0x92
        90 92
   00E5 94 95 97 99 9A 9C   159 	.db	0x94, 0x95, 0x97, 0x99, 0x9A, 0x9C, 0x9E, 0xA0
        9E A0
   00ED A2 A5 A7 A9 AB AE   160 	.db	0xA2, 0xA5, 0xA7, 0xA9, 0xAB, 0xAE, 0xB0, 0xB2
        B0 B2
   00F5 B5 B7 BA BD BF C2   161 	.db	0xB5, 0xB7, 0xBA, 0xBD, 0xBF, 0xC2, 0xC5, 0xC7
        C5 C7
   00FD CA CD D0 D3 D6 D9   162 	.db	0xCA, 0xCD, 0xD0, 0xD3, 0xD6, 0xD9, 0xDC, 0xDF
        DC DF
   0105 E2 E5 E8 EB EE F1   163 	.db	0xE2, 0xE5, 0xE8, 0xEB, 0xEE, 0xF1, 0xF4, 0xF7
        F4 F7
   010D FA FD               164 	.db	0xFA, 0xFD
   010F 00                  165 	.db	0
                            166 ;demo.c:36: uint8_t packbuffer[16000] = {0};
   0110 21r00s01            167 	ld	hl,#_packbuffer
   0113 CDr00s00            168 	call	__initrleblock
   0116 81 00               169 	.db	#-127,#0x00
   0118 81 00               170 	.db	#-127,#0x00
   011A 81 00               171 	.db	#-127,#0x00
   011C 81 00               172 	.db	#-127,#0x00
   011E 81 00               173 	.db	#-127,#0x00
   0120 81 00               174 	.db	#-127,#0x00
   0122 81 00               175 	.db	#-127,#0x00
   0124 81 00               176 	.db	#-127,#0x00
   0126 81 00               177 	.db	#-127,#0x00
   0128 81 00               178 	.db	#-127,#0x00
   012A 81 00               179 	.db	#-127,#0x00
   012C 81 00               180 	.db	#-127,#0x00
   012E 81 00               181 	.db	#-127,#0x00
   0130 81 00               182 	.db	#-127,#0x00
   0132 81 00               183 	.db	#-127,#0x00
   0134 81 00               184 	.db	#-127,#0x00
   0136 81 00               185 	.db	#-127,#0x00
   0138 81 00               186 	.db	#-127,#0x00
   013A 81 00               187 	.db	#-127,#0x00
   013C 81 00               188 	.db	#-127,#0x00
   013E 81 00               189 	.db	#-127,#0x00
   0140 81 00               190 	.db	#-127,#0x00
   0142 81 00               191 	.db	#-127,#0x00
   0144 81 00               192 	.db	#-127,#0x00
   0146 81 00               193 	.db	#-127,#0x00
   0148 81 00               194 	.db	#-127,#0x00
   014A 81 00               195 	.db	#-127,#0x00
   014C 81 00               196 	.db	#-127,#0x00
   014E 81 00               197 	.db	#-127,#0x00
   0150 81 00               198 	.db	#-127,#0x00
   0152 81 00               199 	.db	#-127,#0x00
   0154 81 00               200 	.db	#-127,#0x00
   0156 81 00               201 	.db	#-127,#0x00
   0158 81 00               202 	.db	#-127,#0x00
   015A 81 00               203 	.db	#-127,#0x00
   015C 81 00               204 	.db	#-127,#0x00
   015E 81 00               205 	.db	#-127,#0x00
   0160 81 00               206 	.db	#-127,#0x00
   0162 81 00               207 	.db	#-127,#0x00
   0164 81 00               208 	.db	#-127,#0x00
   0166 81 00               209 	.db	#-127,#0x00
   0168 81 00               210 	.db	#-127,#0x00
   016A 81 00               211 	.db	#-127,#0x00
   016C 81 00               212 	.db	#-127,#0x00
   016E 81 00               213 	.db	#-127,#0x00
   0170 81 00               214 	.db	#-127,#0x00
   0172 81 00               215 	.db	#-127,#0x00
   0174 81 00               216 	.db	#-127,#0x00
   0176 81 00               217 	.db	#-127,#0x00
   0178 81 00               218 	.db	#-127,#0x00
   017A 81 00               219 	.db	#-127,#0x00
   017C 81 00               220 	.db	#-127,#0x00
   017E 81 00               221 	.db	#-127,#0x00
   0180 81 00               222 	.db	#-127,#0x00
   0182 81 00               223 	.db	#-127,#0x00
   0184 81 00               224 	.db	#-127,#0x00
   0186 81 00               225 	.db	#-127,#0x00
   0188 81 00               226 	.db	#-127,#0x00
   018A 81 00               227 	.db	#-127,#0x00
   018C 81 00               228 	.db	#-127,#0x00
   018E 81 00               229 	.db	#-127,#0x00
   0190 81 00               230 	.db	#-127,#0x00
   0192 81 00               231 	.db	#-127,#0x00
   0194 81 00               232 	.db	#-127,#0x00
   0196 81 00               233 	.db	#-127,#0x00
   0198 81 00               234 	.db	#-127,#0x00
   019A 81 00               235 	.db	#-127,#0x00
   019C 81 00               236 	.db	#-127,#0x00
   019E 81 00               237 	.db	#-127,#0x00
   01A0 81 00               238 	.db	#-127,#0x00
   01A2 81 00               239 	.db	#-127,#0x00
   01A4 81 00               240 	.db	#-127,#0x00
   01A6 81 00               241 	.db	#-127,#0x00
   01A8 81 00               242 	.db	#-127,#0x00
   01AA 81 00               243 	.db	#-127,#0x00
   01AC 81 00               244 	.db	#-127,#0x00
   01AE 81 00               245 	.db	#-127,#0x00
   01B0 81 00               246 	.db	#-127,#0x00
   01B2 81 00               247 	.db	#-127,#0x00
   01B4 81 00               248 	.db	#-127,#0x00
   01B6 81 00               249 	.db	#-127,#0x00
   01B8 81 00               250 	.db	#-127,#0x00
   01BA 81 00               251 	.db	#-127,#0x00
   01BC 81 00               252 	.db	#-127,#0x00
   01BE 81 00               253 	.db	#-127,#0x00
   01C0 81 00               254 	.db	#-127,#0x00
   01C2 81 00               255 	.db	#-127,#0x00
   01C4 81 00               256 	.db	#-127,#0x00
   01C6 81 00               257 	.db	#-127,#0x00
   01C8 81 00               258 	.db	#-127,#0x00
   01CA 81 00               259 	.db	#-127,#0x00
   01CC 81 00               260 	.db	#-127,#0x00
   01CE 81 00               261 	.db	#-127,#0x00
   01D0 81 00               262 	.db	#-127,#0x00
   01D2 81 00               263 	.db	#-127,#0x00
   01D4 81 00               264 	.db	#-127,#0x00
   01D6 81 00               265 	.db	#-127,#0x00
   01D8 81 00               266 	.db	#-127,#0x00
   01DA 81 00               267 	.db	#-127,#0x00
   01DC 81 00               268 	.db	#-127,#0x00
   01DE 81 00               269 	.db	#-127,#0x00
   01E0 81 00               270 	.db	#-127,#0x00
   01E2 81 00               271 	.db	#-127,#0x00
   01E4 81 00               272 	.db	#-127,#0x00
   01E6 81 00               273 	.db	#-127,#0x00
   01E8 81 00               274 	.db	#-127,#0x00
   01EA 81 00               275 	.db	#-127,#0x00
   01EC 81 00               276 	.db	#-127,#0x00
   01EE 81 00               277 	.db	#-127,#0x00
   01F0 81 00               278 	.db	#-127,#0x00
   01F2 81 00               279 	.db	#-127,#0x00
   01F4 81 00               280 	.db	#-127,#0x00
   01F6 81 00               281 	.db	#-127,#0x00
   01F8 81 00               282 	.db	#-127,#0x00
   01FA 81 00               283 	.db	#-127,#0x00
   01FC 81 00               284 	.db	#-127,#0x00
   01FE 81 00               285 	.db	#-127,#0x00
   0200 81 00               286 	.db	#-127,#0x00
   0202 81 00               287 	.db	#-127,#0x00
   0204 81 00               288 	.db	#-127,#0x00
   0206 81 00               289 	.db	#-127,#0x00
   0208 81 00               290 	.db	#-127,#0x00
   020A 81 00               291 	.db	#-127,#0x00
   020C 81 00               292 	.db	#-127,#0x00
   020E 81 00               293 	.db	#-127,#0x00
   0210 83 00               294 	.db	#-125,#0x00
   0212 00                  295 	.db	0
                            296 ;demo.c:42: volatile int vbicount=0;
   0213 FD 21r40s40         297 	ld	iy,#_vbicount
   0217 FD 36 00 00         298 	ld	0 (iy),#0x00
   021B FD 21r40s40         299 	ld	iy,#_vbicount
   021F FD 36 01 00         300 	ld	1 (iy),#0x00
                            301 ;demo.c:43: volatile int tick=0;
   0223 FD 21r42s40         302 	ld	iy,#_tick
   0227 FD 36 00 00         303 	ld	0 (iy),#0x00
   022B FD 21r42s40         304 	ld	iy,#_tick
   022F FD 36 01 00         305 	ld	1 (iy),#0x00
                            306 ;demo.c:213: uint8_t yofff = 0;
   0233 FD 21r4Cs40         307 	ld	iy,#_yofff
   0237 FD 36 00 00         308 	ld	0 (iy),#0x00
                            309 ;demo.c:214: uint8_t cc = 0;
   023B FD 21r4Ds40         310 	ld	iy,#_cc
   023F FD 36 00 00         311 	ld	0 (iy),#0x00
                            312 ;demo.c:215: static int flipper = 0;
   0243 FD 21r4Es40         313 	ld	iy,#_flipper
   0247 FD 36 00 00         314 	ld	0 (iy),#0x00
   024B FD 21r4Es40         315 	ld	iy,#_flipper
   024F FD 36 01 00         316 	ld	1 (iy),#0x00
                            317 ;demo.c:216: static int ymmmf = 0;
   0253 FD 21r50s40         318 	ld	iy,#_ymmmf
   0257 FD 36 00 00         319 	ld	0 (iy),#0x00
   025B FD 21r50s40         320 	ld	iy,#_ymmmf
   025F FD 36 01 00         321 	ld	1 (iy),#0x00
                            322 ;demo.c:248: char block_init = 0;
   0263 FD 21r52s40         323 	ld	iy,#_block_init
   0267 FD 36 00 00         324 	ld	0 (iy),#0x00
                            325 ;demo.c:250: int bsx = 0;
   026B FD 21r53s40         326 	ld	iy,#_bsx
   026F FD 36 00 00         327 	ld	0 (iy),#0x00
   0273 FD 21r53s40         328 	ld	iy,#_bsx
   0277 FD 36 01 00         329 	ld	1 (iy),#0x00
                            330 ;demo.c:251: int bsy = 0;
   027B FD 21r55s40         331 	ld	iy,#_bsy
   027F FD 36 00 00         332 	ld	0 (iy),#0x00
   0283 FD 21r55s40         333 	ld	iy,#_bsy
   0287 FD 36 01 00         334 	ld	1 (iy),#0x00
                            335 ;demo.c:252: int btx = 0;
   028B FD 21r57s40         336 	ld	iy,#_btx
   028F FD 36 00 00         337 	ld	0 (iy),#0x00
   0293 FD 21r57s40         338 	ld	iy,#_btx
   0297 FD 36 01 00         339 	ld	1 (iy),#0x00
                            340 ;demo.c:253: int bty = 0;
   029B FD 21r59s40         341 	ld	iy,#_bty
   029F FD 36 00 00         342 	ld	0 (iy),#0x00
   02A3 FD 21r59s40         343 	ld	iy,#_bty
   02A7 FD 36 01 00         344 	ld	1 (iy),#0x00
                            345 ;demo.c:255: int btab[16] = {0};
   02AB 21r5Bs40            346 	ld	hl,#_btab
   02AE CDr00s00            347 	call	__initrleblock
   02B1 E0 00               348 	.db	#-32,#0x00
   02B3 00                  349 	.db	0
                            350 ;demo.c:257: int flof = 0;
   02B4 FD 21r7Bs40         351 	ld	iy,#_flof
   02B8 FD 36 00 00         352 	ld	0 (iy),#0x00
   02BC FD 21r7Bs40         353 	ld	iy,#_flof
   02C0 FD 36 01 00         354 	ld	1 (iy),#0x00
                            355 ;demo.c:307: int linenum = 0;
   02C4 FD 21r7Ds40         356 	ld	iy,#_linenum
   02C8 FD 36 00 00         357 	ld	0 (iy),#0x00
   02CC FD 21r7Ds40         358 	ld	iy,#_linenum
   02D0 FD 36 01 00         359 	ld	1 (iy),#0x00
                            360 ;demo.c:361: static int xo = 0;
   02D4 FD 21r7Fs40         361 	ld	iy,#_xo
   02D8 FD 36 00 00         362 	ld	0 (iy),#0x00
   02DC FD 21r7Fs40         363 	ld	iy,#_xo
   02E0 FD 36 01 00         364 	ld	1 (iy),#0x00
                            365 ;demo.c:362: static int yo = 0;
   02E4 FD 21r81s40         366 	ld	iy,#_yo
   02E8 FD 36 00 00         367 	ld	0 (iy),#0x00
   02EC FD 21r81s40         368 	ld	iy,#_yo
   02F0 FD 36 01 00         369 	ld	1 (iy),#0x00
                            370 ;demo.c:363: static int po = 0;
   02F4 FD 21r83s40         371 	ld	iy,#_po
   02F8 FD 36 00 00         372 	ld	0 (iy),#0x00
   02FC FD 21r83s40         373 	ld	iy,#_po
   0300 FD 36 01 00         374 	ld	1 (iy),#0x00
                            375 ;demo.c:364: static int fffaaa = 0;
   0304 FD 21r85s40         376 	ld	iy,#_fffaaa
   0308 FD 36 00 00         377 	ld	0 (iy),#0x00
   030C FD 21r85s40         378 	ld	iy,#_fffaaa
   0310 FD 36 01 00         379 	ld	1 (iy),#0x00
                            380 ;--------------------------------------------------------
                            381 ; Home
                            382 ;--------------------------------------------------------
                            383 	.area _HOME
                            384 	.area _HOME
                            385 ;--------------------------------------------------------
                            386 ; code
                            387 ;--------------------------------------------------------
                            388 	.area _CODE
                            389 ;demo.c:46: int isNthBitSet (unsigned char c, int n) {
                            390 ;	---------------------------------
                            391 ; Function isNthBitSet
                            392 ; ---------------------------------
   0000                     393 _isNthBitSet_start::
   0000                     394 _isNthBitSet:
   0000 DD E5               395 	push	ix
   0002 DD 21 00 00         396 	ld	ix,#0
   0006 DD 39               397 	add	ix,sp
                            398 ;demo.c:48: return ((c & mask[n]) != 0);
   0008 3Er44               399 	ld	a,#<_isNthBitSet_mask_1_1
   000A DD 86 05            400 	add	a,5 (ix)
   000D 4F                  401 	ld	c,a
   000E 3Es40               402 	ld	a,#>_isNthBitSet_mask_1_1
   0010 DD 8E 06            403 	adc	a,6 (ix)
   0013 47                  404 	ld	b,a
   0014 0A                  405 	ld	a,(bc)
   0015 DD A6 04            406 	and	a,4 (ix)
   0018 20 04               407 	jr	NZ,00103$
   001A 3E 01               408 	ld	a,#0x01
   001C 18 01               409 	jr	00104$
   001E                     410 00103$:
   001E AF                  411 	xor	a,a
   001F                     412 00104$:
   001F B7                  413 	or	a,a
   0020 D6 01               414 	sub	a,#0x01
   0022 3E 00               415 	ld	a,#0x00
   0024 17                  416 	rla
   0025 4F                  417 	ld	c,a
   0026 69                  418 	ld	l,c
   0027 26 00               419 	ld	h,#0x00
   0029 DD E1               420 	pop	ix
   002B C9                  421 	ret
   002C                     422 _isNthBitSet_end::
   002C                     423 _sintabx:
   002C 78 00               424 	.dw #0x0078
   002E 7A 00               425 	.dw #0x007A
   0030 7D 00               426 	.dw #0x007D
   0032 80 00               427 	.dw #0x0080
   0034 83 00               428 	.dw #0x0083
   0036 86 00               429 	.dw #0x0086
   0038 89 00               430 	.dw #0x0089
   003A 8C 00               431 	.dw #0x008C
   003C 8F 00               432 	.dw #0x008F
   003E 92 00               433 	.dw #0x0092
   0040 95 00               434 	.dw #0x0095
   0042 98 00               435 	.dw #0x0098
   0044 9A 00               436 	.dw #0x009A
   0046 9D 00               437 	.dw #0x009D
   0048 A0 00               438 	.dw #0x00A0
   004A A3 00               439 	.dw #0x00A3
   004C A5 00               440 	.dw #0x00A5
   004E A8 00               441 	.dw #0x00A8
   0050 AB 00               442 	.dw #0x00AB
   0052 AD 00               443 	.dw #0x00AD
   0054 B0 00               444 	.dw #0x00B0
   0056 B3 00               445 	.dw #0x00B3
   0058 B5 00               446 	.dw #0x00B5
   005A B8 00               447 	.dw #0x00B8
   005C BA 00               448 	.dw #0x00BA
   005E BD 00               449 	.dw #0x00BD
   0060 BF 00               450 	.dw #0x00BF
   0062 C1 00               451 	.dw #0x00C1
   0064 C4 00               452 	.dw #0x00C4
   0066 C6 00               453 	.dw #0x00C6
   0068 C8 00               454 	.dw #0x00C8
   006A CA 00               455 	.dw #0x00CA
   006C CC 00               456 	.dw #0x00CC
   006E CE 00               457 	.dw #0x00CE
   0070 D0 00               458 	.dw #0x00D0
   0072 D2 00               459 	.dw #0x00D2
   0074 D4 00               460 	.dw #0x00D4
   0076 D6 00               461 	.dw #0x00D6
   0078 D8 00               462 	.dw #0x00D8
   007A DA 00               463 	.dw #0x00DA
   007C DB 00               464 	.dw #0x00DB
   007E DD 00               465 	.dw #0x00DD
   0080 DE 00               466 	.dw #0x00DE
   0082 E0 00               467 	.dw #0x00E0
   0084 E1 00               468 	.dw #0x00E1
   0086 E3 00               469 	.dw #0x00E3
   0088 E4 00               470 	.dw #0x00E4
   008A E5 00               471 	.dw #0x00E5
   008C E6 00               472 	.dw #0x00E6
   008E E7 00               473 	.dw #0x00E7
   0090 E8 00               474 	.dw #0x00E8
   0092 E9 00               475 	.dw #0x00E9
   0094 EA 00               476 	.dw #0x00EA
   0096 EB 00               477 	.dw #0x00EB
   0098 EC 00               478 	.dw #0x00EC
   009A ED 00               479 	.dw #0x00ED
   009C ED 00               480 	.dw #0x00ED
   009E EE 00               481 	.dw #0x00EE
   00A0 EE 00               482 	.dw #0x00EE
   00A2 EF 00               483 	.dw #0x00EF
   00A4 EF 00               484 	.dw #0x00EF
   00A6 EF 00               485 	.dw #0x00EF
   00A8 EF 00               486 	.dw #0x00EF
   00AA EF 00               487 	.dw #0x00EF
   00AC F0 00               488 	.dw #0x00F0
   00AE EF 00               489 	.dw #0x00EF
   00B0 EF 00               490 	.dw #0x00EF
   00B2 EF 00               491 	.dw #0x00EF
   00B4 EF 00               492 	.dw #0x00EF
   00B6 EF 00               493 	.dw #0x00EF
   00B8 EE 00               494 	.dw #0x00EE
   00BA EE 00               495 	.dw #0x00EE
   00BC ED 00               496 	.dw #0x00ED
   00BE ED 00               497 	.dw #0x00ED
   00C0 EC 00               498 	.dw #0x00EC
   00C2 EB 00               499 	.dw #0x00EB
   00C4 EA 00               500 	.dw #0x00EA
   00C6 E9 00               501 	.dw #0x00E9
   00C8 E8 00               502 	.dw #0x00E8
   00CA E7 00               503 	.dw #0x00E7
   00CC E6 00               504 	.dw #0x00E6
   00CE E5 00               505 	.dw #0x00E5
   00D0 E4 00               506 	.dw #0x00E4
   00D2 E3 00               507 	.dw #0x00E3
   00D4 E1 00               508 	.dw #0x00E1
   00D6 E0 00               509 	.dw #0x00E0
   00D8 DE 00               510 	.dw #0x00DE
   00DA DD 00               511 	.dw #0x00DD
   00DC DB 00               512 	.dw #0x00DB
   00DE DA 00               513 	.dw #0x00DA
   00E0 D8 00               514 	.dw #0x00D8
   00E2 D6 00               515 	.dw #0x00D6
   00E4 D4 00               516 	.dw #0x00D4
   00E6 D2 00               517 	.dw #0x00D2
   00E8 D0 00               518 	.dw #0x00D0
   00EA CE 00               519 	.dw #0x00CE
   00EC CC 00               520 	.dw #0x00CC
   00EE CA 00               521 	.dw #0x00CA
   00F0 C8 00               522 	.dw #0x00C8
   00F2 C6 00               523 	.dw #0x00C6
   00F4 C4 00               524 	.dw #0x00C4
   00F6 C1 00               525 	.dw #0x00C1
   00F8 BF 00               526 	.dw #0x00BF
   00FA BD 00               527 	.dw #0x00BD
   00FC BA 00               528 	.dw #0x00BA
   00FE B8 00               529 	.dw #0x00B8
   0100 B5 00               530 	.dw #0x00B5
   0102 B3 00               531 	.dw #0x00B3
   0104 B0 00               532 	.dw #0x00B0
   0106 AD 00               533 	.dw #0x00AD
   0108 AB 00               534 	.dw #0x00AB
   010A A8 00               535 	.dw #0x00A8
   010C A5 00               536 	.dw #0x00A5
   010E A3 00               537 	.dw #0x00A3
   0110 A0 00               538 	.dw #0x00A0
   0112 9D 00               539 	.dw #0x009D
   0114 9A 00               540 	.dw #0x009A
   0116 98 00               541 	.dw #0x0098
   0118 95 00               542 	.dw #0x0095
   011A 92 00               543 	.dw #0x0092
   011C 8F 00               544 	.dw #0x008F
   011E 8C 00               545 	.dw #0x008C
   0120 89 00               546 	.dw #0x0089
   0122 86 00               547 	.dw #0x0086
   0124 83 00               548 	.dw #0x0083
   0126 80 00               549 	.dw #0x0080
   0128 7D 00               550 	.dw #0x007D
   012A 7A 00               551 	.dw #0x007A
   012C 78 00               552 	.dw #0x0078
   012E 75 00               553 	.dw #0x0075
   0130 72 00               554 	.dw #0x0072
   0132 6F 00               555 	.dw #0x006F
   0134 6C 00               556 	.dw #0x006C
   0136 69 00               557 	.dw #0x0069
   0138 66 00               558 	.dw #0x0066
   013A 63 00               559 	.dw #0x0063
   013C 60 00               560 	.dw #0x0060
   013E 5D 00               561 	.dw #0x005D
   0140 5A 00               562 	.dw #0x005A
   0142 57 00               563 	.dw #0x0057
   0144 55 00               564 	.dw #0x0055
   0146 52 00               565 	.dw #0x0052
   0148 4F 00               566 	.dw #0x004F
   014A 4C 00               567 	.dw #0x004C
   014C 4A 00               568 	.dw #0x004A
   014E 47 00               569 	.dw #0x0047
   0150 44 00               570 	.dw #0x0044
   0152 42 00               571 	.dw #0x0042
   0154 3F 00               572 	.dw #0x003F
   0156 3C 00               573 	.dw #0x003C
   0158 3A 00               574 	.dw #0x003A
   015A 37 00               575 	.dw #0x0037
   015C 35 00               576 	.dw #0x0035
   015E 32 00               577 	.dw #0x0032
   0160 30 00               578 	.dw #0x0030
   0162 2E 00               579 	.dw #0x002E
   0164 2B 00               580 	.dw #0x002B
   0166 29 00               581 	.dw #0x0029
   0168 27 00               582 	.dw #0x0027
   016A 25 00               583 	.dw #0x0025
   016C 23 00               584 	.dw #0x0023
   016E 21 00               585 	.dw #0x0021
   0170 1F 00               586 	.dw #0x001F
   0172 1D 00               587 	.dw #0x001D
   0174 1B 00               588 	.dw #0x001B
   0176 19 00               589 	.dw #0x0019
   0178 17 00               590 	.dw #0x0017
   017A 15 00               591 	.dw #0x0015
   017C 14 00               592 	.dw #0x0014
   017E 12 00               593 	.dw #0x0012
   0180 11 00               594 	.dw #0x0011
   0182 0F 00               595 	.dw #0x000F
   0184 0E 00               596 	.dw #0x000E
   0186 0C 00               597 	.dw #0x000C
   0188 0B 00               598 	.dw #0x000B
   018A 0A 00               599 	.dw #0x000A
   018C 09 00               600 	.dw #0x0009
   018E 08 00               601 	.dw #0x0008
   0190 07 00               602 	.dw #0x0007
   0192 06 00               603 	.dw #0x0006
   0194 05 00               604 	.dw #0x0005
   0196 04 00               605 	.dw #0x0004
   0198 03 00               606 	.dw #0x0003
   019A 02 00               607 	.dw #0x0002
   019C 02 00               608 	.dw #0x0002
   019E 01 00               609 	.dw #0x0001
   01A0 01 00               610 	.dw #0x0001
   01A2 00 00               611 	.dw #0x0000
   01A4 00 00               612 	.dw #0x0000
   01A6 00 00               613 	.dw #0x0000
   01A8 00 00               614 	.dw #0x0000
   01AA 00 00               615 	.dw #0x0000
   01AC 00 00               616 	.dw #0x0000
   01AE 00 00               617 	.dw #0x0000
   01B0 00 00               618 	.dw #0x0000
   01B2 00 00               619 	.dw #0x0000
   01B4 00 00               620 	.dw #0x0000
   01B6 00 00               621 	.dw #0x0000
   01B8 01 00               622 	.dw #0x0001
   01BA 01 00               623 	.dw #0x0001
   01BC 02 00               624 	.dw #0x0002
   01BE 02 00               625 	.dw #0x0002
   01C0 03 00               626 	.dw #0x0003
   01C2 04 00               627 	.dw #0x0004
   01C4 05 00               628 	.dw #0x0005
   01C6 06 00               629 	.dw #0x0006
   01C8 07 00               630 	.dw #0x0007
   01CA 08 00               631 	.dw #0x0008
   01CC 09 00               632 	.dw #0x0009
   01CE 0A 00               633 	.dw #0x000A
   01D0 0B 00               634 	.dw #0x000B
   01D2 0C 00               635 	.dw #0x000C
   01D4 0E 00               636 	.dw #0x000E
   01D6 0F 00               637 	.dw #0x000F
   01D8 11 00               638 	.dw #0x0011
   01DA 12 00               639 	.dw #0x0012
   01DC 14 00               640 	.dw #0x0014
   01DE 15 00               641 	.dw #0x0015
   01E0 17 00               642 	.dw #0x0017
   01E2 19 00               643 	.dw #0x0019
   01E4 1B 00               644 	.dw #0x001B
   01E6 1D 00               645 	.dw #0x001D
   01E8 1F 00               646 	.dw #0x001F
   01EA 21 00               647 	.dw #0x0021
   01EC 23 00               648 	.dw #0x0023
   01EE 25 00               649 	.dw #0x0025
   01F0 27 00               650 	.dw #0x0027
   01F2 29 00               651 	.dw #0x0029
   01F4 2B 00               652 	.dw #0x002B
   01F6 2E 00               653 	.dw #0x002E
   01F8 30 00               654 	.dw #0x0030
   01FA 32 00               655 	.dw #0x0032
   01FC 35 00               656 	.dw #0x0035
   01FE 37 00               657 	.dw #0x0037
   0200 3A 00               658 	.dw #0x003A
   0202 3C 00               659 	.dw #0x003C
   0204 3F 00               660 	.dw #0x003F
   0206 42 00               661 	.dw #0x0042
   0208 44 00               662 	.dw #0x0044
   020A 47 00               663 	.dw #0x0047
   020C 4A 00               664 	.dw #0x004A
   020E 4C 00               665 	.dw #0x004C
   0210 4F 00               666 	.dw #0x004F
   0212 52 00               667 	.dw #0x0052
   0214 55 00               668 	.dw #0x0055
   0216 57 00               669 	.dw #0x0057
   0218 5A 00               670 	.dw #0x005A
   021A 5D 00               671 	.dw #0x005D
   021C 60 00               672 	.dw #0x0060
   021E 63 00               673 	.dw #0x0063
   0220 66 00               674 	.dw #0x0066
   0222 69 00               675 	.dw #0x0069
   0224 6C 00               676 	.dw #0x006C
   0226 6F 00               677 	.dw #0x006F
   0228 72 00               678 	.dw #0x0072
   022A 75 00               679 	.dw #0x0075
                            680 ;demo.c:55: void my_isr(void) interrupt
                            681 ;	---------------------------------
                            682 ; Function my_isr
                            683 ; ---------------------------------
   022C                     684 _my_isr_start::
   022C                     685 _my_isr:
   022C F5                  686 	push	af
   022D C5                  687 	push	bc
   022E D5                  688 	push	de
   022F E5                  689 	push	hl
   0230 FD E5               690 	push	iy
                            691 ;demo.c:57: DI;
   0232 F3                  692 		di 
                            693 ;demo.c:59: READ_VDP_STATUS;
   0233 DB 99               694 		in a,(#0x99) 
                            695 ;demo.c:61: PLY_Play();
   0235 CDr00s00            696 	call	_PLY_Play
                            697 ;demo.c:62: PLY_SendRegisters();
   0238 CDr00s00            698 	call	_PLY_SendRegisters
                            699 ;demo.c:64: vbicount+=2;
   023B 21r40s40            700 	ld	hl,#_vbicount
   023E 7E                  701 	ld	a,(hl)
   023F C6 02               702 	add	a,#0x02
   0241 23                  703 	inc	hl
   0242 2B                  704 	dec	hl
   0243 C5                  705 	push	bc
   0244 4F                  706 	ld	c, a
   0245 23                  707 	inc	hl
   0246 7E                  708 	ld	a, (hl)
   0247 47                  709 	ld	b, a
   0248 79                  710 	ld	a, c
   0249 2B                  711 	dec	hl
   024A 77                  712 	ld	(hl), a
   024B 78                  713 	ld	a, b
   024C C1                  714 	pop	bc
   024D CE 00               715 	adc	a,#0x00
   024F 23                  716 	inc	hl
   0250 77                  717 	ld	(hl),a
                            718 ;demo.c:65: tick++;
   0251 FD 21r42s40         719 	ld	iy,#_tick
   0255 FD 34 00            720 	inc	0 (iy)
   0258 20 07               721 	jr	NZ,00103$
   025A FD 21r42s40         722 	ld	iy,#_tick
   025E FD 34 01            723 	inc	1 (iy)
   0261                     724 00103$:
                            725 ;demo.c:67: EI;
   0261 FB                  726 		ei 
   0262 FD E1               727 	pop	iy
   0264 E1                  728 	pop	hl
   0265 D1                  729 	pop	de
   0266 C1                  730 	pop	bc
   0267 F1                  731 	pop	af
   0268 ED 4D               732 	reti
   026A                     733 _my_isr_end::
                            734 ;demo.c:70: void color_isr(void) interrupt
                            735 ;	---------------------------------
                            736 ; Function color_isr
                            737 ; ---------------------------------
   026A                     738 _color_isr_start::
   026A                     739 _color_isr:
   026A F5                  740 	push	af
   026B C5                  741 	push	bc
   026C D5                  742 	push	de
   026D E5                  743 	push	hl
   026E FD E5               744 	push	iy
                            745 ;demo.c:72: DI;
   0270 F3                  746 		di 
                            747 ;demo.c:74: if(isNthBitSet(vdp2_status(1),0)) {
   0271 3E 01               748 	ld	a,#0x01
   0273 F5                  749 	push	af
   0274 33                  750 	inc	sp
   0275 CDr00s00            751 	call	_vdp2_status
   0278 33                  752 	inc	sp
   0279 4D                  753 	ld	c,l
   027A 21 00 00            754 	ld	hl,#0x0000
   027D E5                  755 	push	hl
   027E 79                  756 	ld	a,c
   027F F5                  757 	push	af
   0280 33                  758 	inc	sp
   0281 CDr00s00            759 	call	_isNthBitSet
   0284 F1                  760 	pop	af
   0285 33                  761 	inc	sp
   0286 44                  762 	ld	b,h
   0287 4D                  763 	ld	c,l
   0288 79                  764 	ld	a,c
   0289 B0                  765 	or	a,b
   028A 28 19               766 	jr	Z,00102$
                            767 ;demo.c:75: vdp_register(VDP_VOFFSET,sintab[vbicount & 255]);
   028C 21r40s40            768 	ld	hl,#_vbicount + 0
   028F 4E                  769 	ld	c,(hl)
   0290 06 00               770 	ld	b,#0x00
   0292 21r00s00            771 	ld	hl,#_sintab
   0295 09                  772 	add	hl,bc
   0296 7E                  773 	ld	a,(hl)
   0297 F5                  774 	push	af
   0298 33                  775 	inc	sp
   0299 3E 17               776 	ld	a,#0x17
   029B F5                  777 	push	af
   029C 33                  778 	inc	sp
   029D CDr00s00            779 	call	_vdp_register
   02A0 F1                  780 	pop	af
                            781 ;demo.c:76: READ_VDP_STATUS;
   02A1 DB 99               782 		in a,(#0x99) 
   02A3 18 18               783 	jr	00103$
   02A5                     784 00102$:
                            785 ;demo.c:79: READ_VDP_STATUS;
   02A5 DB 99               786 		in a,(#0x99) 
                            787 ;demo.c:80: vbicount++;
   02A7 FD 21r40s40         788 	ld	iy,#_vbicount
   02AB FD 34 00            789 	inc	0 (iy)
   02AE 20 07               790 	jr	NZ,00107$
   02B0 FD 21r40s40         791 	ld	iy,#_vbicount
   02B4 FD 34 01            792 	inc	1 (iy)
   02B7                     793 00107$:
                            794 ;demo.c:83: PLY_Play();
   02B7 CDr00s00            795 	call	_PLY_Play
                            796 ;demo.c:84: PLY_SendRegisters();
   02BA CDr00s00            797 	call	_PLY_SendRegisters
   02BD                     798 00103$:
                            799 ;demo.c:87: EI;
   02BD FB                  800 		ei 
   02BE FD E1               801 	pop	iy
   02C0 E1                  802 	pop	hl
   02C1 D1                  803 	pop	de
   02C2 C1                  804 	pop	bc
   02C3 F1                  805 	pop	af
   02C4 ED 4D               806 	reti
   02C6                     807 _color_isr_end::
                            808 ;demo.c:94: uint8_t ge5_load(char *file_name, uint8_t vramh, uint16_t vraml) {
                            809 ;	---------------------------------
                            810 ; Function ge5_load
                            811 ; ---------------------------------
   02C6                     812 _ge5_load_start::
   02C6                     813 _ge5_load:
   02C6 DD E5               814 	push	ix
   02C8 DD 21 00 00         815 	ld	ix,#0
   02CC DD 39               816 	add	ix,sp
   02CE 21 D2 FF            817 	ld	hl,#-46
   02D1 39                  818 	add	hl,sp
   02D2 F9                  819 	ld	sp,hl
                            820 ;demo.c:98: memset((uint8_t *) &f, 0, sizeof(fcb));
   02D3 21 00 00            821 	ld	hl,#0x0000
   02D6 39                  822 	add	hl,sp
   02D7 4D                  823 	ld	c,l
   02D8 44                  824 	ld	b,h
   02D9 21 2E 00            825 	ld	hl,#0x002E
   02DC E5                  826 	push	hl
   02DD 3E 00               827 	ld	a,#0x00
   02DF F5                  828 	push	af
   02E0 33                  829 	inc	sp
   02E1 C5                  830 	push	bc
   02E2 CDr00s00            831 	call	_memset
   02E5 F1                  832 	pop	af
   02E6 F1                  833 	pop	af
   02E7 33                  834 	inc	sp
                            835 ;demo.c:100: f.record_size = 128;
   02E8 21 00 00            836 	ld	hl,#0x0000
   02EB 39                  837 	add	hl,sp
   02EC 4D                  838 	ld	c,l
   02ED 44                  839 	ld	b,h
   02EE 21 0F 00            840 	ld	hl,#0x000F
   02F1 09                  841 	add	hl,bc
   02F2 EB                  842 	ex	de,hl
   02F3 3E 80               843 	ld	a,#0x80
   02F5 12                  844 	ld	(de),a
                            845 ;demo.c:101: f.drive = 0;
   02F6 3E 00               846 	ld	a,#0x00
   02F8 02                  847 	ld	(bc),a
                            848 ;demo.c:103: memcpy(f.name, file_name, 11);
   02F9 DD 5E 04            849 	ld	e,4 (ix)
   02FC DD 56 05            850 	ld	d,5 (ix)
   02FF 03                  851 	inc	bc
   0300 21 0B 00            852 	ld	hl,#0x000B
   0303 E5                  853 	push	hl
   0304 D5                  854 	push	de
   0305 C5                  855 	push	bc
   0306 CDr00s00            856 	call	_memcpy
   0309 F1                  857 	pop	af
   030A F1                  858 	pop	af
   030B F1                  859 	pop	af
                            860 ;demo.c:105: if (open(&f) != 0) return 0;
   030C 21 00 00            861 	ld	hl,#0x0000
   030F 39                  862 	add	hl,sp
   0310 E5                  863 	push	hl
   0311 CDr00s00            864 	call	_open
   0314 F1                  865 	pop	af
   0315 AF                  866 	xor	a,a
   0316 B5                  867 	or	a,l
   0317 28 05               868 	jr	Z,00102$
   0319 2E 00               869 	ld	l,#0x00
   031B C3r92s03            870 	jp	00114$
   031E                     871 00102$:
                            872 ;demo.c:106: vdp_set_write_address(vramh, vraml);
   031E DD 6E 07            873 	ld	l,7 (ix)
   0321 DD 66 08            874 	ld	h,8 (ix)
   0324 E5                  875 	push	hl
   0325 DD 7E 06            876 	ld	a,6 (ix)
   0328 F5                  877 	push	af
   0329 33                  878 	inc	sp
   032A CDr00s00            879 	call	_vdp_set_write_address
   032D F1                  880 	pop	af
   032E 33                  881 	inc	sp
                            882 ;demo.c:108: for (i = 0; i < 213; i++) {
   032F 0E 00               883 	ld	c,#0x00
   0331                     884 00110$:
   0331 79                  885 	ld	a,c
   0332 D6 D5               886 	sub	a,#0xD5
   0334 D2r87s03            887 	jp	NC,00113$
                            888 ;demo.c:109: if (block_set_data_ptr(scratch) != 0) return 0;
   0337 C5                  889 	push	bc
   0338 21r80s3F            890 	ld	hl,#_scratch
   033B E5                  891 	push	hl
   033C CDr00s00            892 	call	_block_set_data_ptr
   033F F1                  893 	pop	af
   0340 7D                  894 	ld	a,l
   0341 C1                  895 	pop	bc
   0342 47                  896 	ld	b,a
   0343 B7                  897 	or	a,a
   0344 28 05               898 	jr	Z,00104$
   0346 2E 00               899 	ld	l,#0x00
   0348 C3r92s03            900 	jp	00114$
   034B                     901 00104$:
                            902 ;demo.c:110: if (block_read(&f) != 0) return 0;
   034B 21 00 00            903 	ld	hl,#0x0000
   034E 39                  904 	add	hl,sp
   034F C5                  905 	push	bc
   0350 E5                  906 	push	hl
   0351 CDr00s00            907 	call	_block_read
   0354 F1                  908 	pop	af
   0355 7D                  909 	ld	a,l
   0356 C1                  910 	pop	bc
   0357 47                  911 	ld	b,a
   0358 B7                  912 	or	a,a
   0359 28 04               913 	jr	Z,00106$
   035B 2E 00               914 	ld	l,#0x00
   035D 18 33               915 	jr	00114$
   035F                     916 00106$:
                            917 ;demo.c:112: if (i == 0) vdp_load_screen(scratch + 7, 121);   // to skip GE5 header
   035F AF                  918 	xor	a,a
   0360 B1                  919 	or	a,c
   0361 20 11               920 	jr	NZ,00108$
   0363 11r87s3F            921 	ld	de,#_scratch + 7
   0366 C5                  922 	push	bc
   0367 3E 79               923 	ld	a,#0x79
   0369 F5                  924 	push	af
   036A 33                  925 	inc	sp
   036B D5                  926 	push	de
   036C CDr00s00            927 	call	_vdp_load_screen
   036F F1                  928 	pop	af
   0370 33                  929 	inc	sp
   0371 C1                  930 	pop	bc
   0372 18 0F               931 	jr	00112$
   0374                     932 00108$:
                            933 ;demo.c:113: else vdp_load_screen(scratch, 128);
   0374 C5                  934 	push	bc
   0375 3E 80               935 	ld	a,#0x80
   0377 F5                  936 	push	af
   0378 33                  937 	inc	sp
   0379 21r80s3F            938 	ld	hl,#_scratch
   037C E5                  939 	push	hl
   037D CDr00s00            940 	call	_vdp_load_screen
   0380 F1                  941 	pop	af
   0381 33                  942 	inc	sp
   0382 C1                  943 	pop	bc
   0383                     944 00112$:
                            945 ;demo.c:108: for (i = 0; i < 213; i++) {
   0383 0C                  946 	inc	c
   0384 C3r31s03            947 	jp	00110$
   0387                     948 00113$:
                            949 ;demo.c:116: close(&f);
   0387 21 00 00            950 	ld	hl,#0x0000
   038A 39                  951 	add	hl,sp
   038B E5                  952 	push	hl
   038C CDr00s00            953 	call	_close
   038F F1                  954 	pop	af
                            955 ;demo.c:118: return 1;
   0390 2E 01               956 	ld	l,#0x01
   0392                     957 00114$:
   0392 DD F9               958 	ld	sp,ix
   0394 DD E1               959 	pop	ix
   0396 C9                  960 	ret
   0397                     961 _ge5_load_end::
                            962 ;demo.c:121: void scratch_clear() {
                            963 ;	---------------------------------
                            964 ; Function scratch_clear
                            965 ; ---------------------------------
   0397                     966 _scratch_clear_start::
   0397                     967 _scratch_clear:
                            968 ;demo.c:122: memset((uint8_t *) &scratch, 0, 128);
   0397 21 80 00            969 	ld	hl,#0x0080
   039A E5                  970 	push	hl
   039B 3E 00               971 	ld	a,#0x00
   039D F5                  972 	push	af
   039E 33                  973 	inc	sp
   039F 21r80s3F            974 	ld	hl,#_scratch
   03A2 E5                  975 	push	hl
   03A3 CDr00s00            976 	call	_memset
   03A6 F1                  977 	pop	af
   03A7 F1                  978 	pop	af
   03A8 33                  979 	inc	sp
   03A9 C9                  980 	ret
   03AA                     981 _scratch_clear_end::
                            982 ;demo.c:125: uint8_t pal_load(char *file_name, uint8_t ss) {
                            983 ;	---------------------------------
                            984 ; Function pal_load
                            985 ; ---------------------------------
   03AA                     986 _pal_load_start::
   03AA                     987 _pal_load:
   03AA DD E5               988 	push	ix
   03AC DD 21 00 00         989 	ld	ix,#0
   03B0 DD 39               990 	add	ix,sp
   03B2 21 D2 FF            991 	ld	hl,#-46
   03B5 39                  992 	add	hl,sp
   03B6 F9                  993 	ld	sp,hl
                            994 ;demo.c:128: memset((uint8_t *) &f, 0, sizeof(fcb));
   03B7 21 00 00            995 	ld	hl,#0x0000
   03BA 39                  996 	add	hl,sp
   03BB 4D                  997 	ld	c,l
   03BC 44                  998 	ld	b,h
   03BD 21 2E 00            999 	ld	hl,#0x002E
   03C0 E5                 1000 	push	hl
   03C1 3E 00              1001 	ld	a,#0x00
   03C3 F5                 1002 	push	af
   03C4 33                 1003 	inc	sp
   03C5 C5                 1004 	push	bc
   03C6 CDr00s00           1005 	call	_memset
   03C9 F1                 1006 	pop	af
   03CA F1                 1007 	pop	af
   03CB 33                 1008 	inc	sp
                           1009 ;demo.c:129: scratch_clear();
   03CC CDr97s03           1010 	call	_scratch_clear
                           1011 ;demo.c:131: f.record_size = ss;
   03CF 21 00 00           1012 	ld	hl,#0x0000
   03D2 39                 1013 	add	hl,sp
   03D3 4D                 1014 	ld	c,l
   03D4 44                 1015 	ld	b,h
   03D5 21 0F 00           1016 	ld	hl,#0x000F
   03D8 09                 1017 	add	hl,bc
   03D9 EB                 1018 	ex	de,hl
   03DA DD 7E 06           1019 	ld	a,6 (ix)
   03DD 12                 1020 	ld	(de),a
                           1021 ;demo.c:132: f.drive = 0;
   03DE 3E 00              1022 	ld	a,#0x00
   03E0 02                 1023 	ld	(bc),a
                           1024 ;demo.c:134: memcpy(f.name, file_name, 11);
   03E1 DD 5E 04           1025 	ld	e,4 (ix)
   03E4 DD 56 05           1026 	ld	d,5 (ix)
   03E7 03                 1027 	inc	bc
   03E8 21 0B 00           1028 	ld	hl,#0x000B
   03EB E5                 1029 	push	hl
   03EC D5                 1030 	push	de
   03ED C5                 1031 	push	bc
   03EE CDr00s00           1032 	call	_memcpy
   03F1 F1                 1033 	pop	af
   03F2 F1                 1034 	pop	af
   03F3 F1                 1035 	pop	af
                           1036 ;demo.c:136: if (open(&f) != 0) return 0;
   03F4 21 00 00           1037 	ld	hl,#0x0000
   03F7 39                 1038 	add	hl,sp
   03F8 E5                 1039 	push	hl
   03F9 CDr00s00           1040 	call	_open
   03FC F1                 1041 	pop	af
   03FD AF                 1042 	xor	a,a
   03FE B5                 1043 	or	a,l
   03FF 28 04              1044 	jr	Z,00102$
   0401 2E 00              1045 	ld	l,#0x00
   0403 18 40              1046 	jr	00107$
   0405                    1047 00102$:
                           1048 ;demo.c:137: if (block_set_data_ptr(scratch) != 0) return 0;
   0405 21r80s3F           1049 	ld	hl,#_scratch
   0408 E5                 1050 	push	hl
   0409 CDr00s00           1051 	call	_block_set_data_ptr
   040C F1                 1052 	pop	af
   040D AF                 1053 	xor	a,a
   040E B5                 1054 	or	a,l
   040F 28 04              1055 	jr	Z,00104$
   0411 2E 00              1056 	ld	l,#0x00
   0413 18 30              1057 	jr	00107$
   0415                    1058 00104$:
                           1059 ;demo.c:138: if (block_read(&f) != 0) return 0;
   0415 21 00 00           1060 	ld	hl,#0x0000
   0418 39                 1061 	add	hl,sp
   0419 E5                 1062 	push	hl
   041A CDr00s00           1063 	call	_block_read
   041D F1                 1064 	pop	af
   041E AF                 1065 	xor	a,a
   041F B5                 1066 	or	a,l
   0420 28 04              1067 	jr	Z,00106$
   0422 2E 00              1068 	ld	l,#0x00
   0424 18 1F              1069 	jr	00107$
   0426                    1070 00106$:
                           1071 ;demo.c:140: memcpy(cur_palette, scratch+7, ss);
   0426 DD 4E 06           1072 	ld	c,6 (ix)
   0429 06 00              1073 	ld	b,#0x00
   042B 11r87s3F           1074 	ld	de,#_scratch + 7
   042E C5                 1075 	push	bc
   042F D5                 1076 	push	de
   0430 21r00s40           1077 	ld	hl,#_cur_palette
   0433 E5                 1078 	push	hl
   0434 CDr00s00           1079 	call	_memcpy
   0437 F1                 1080 	pop	af
   0438 F1                 1081 	pop	af
   0439 F1                 1082 	pop	af
                           1083 ;demo.c:142: close(&f);
   043A 21 00 00           1084 	ld	hl,#0x0000
   043D 39                 1085 	add	hl,sp
   043E E5                 1086 	push	hl
   043F CDr00s00           1087 	call	_close
   0442 F1                 1088 	pop	af
                           1089 ;demo.c:143: return 1;
   0443 2E 01              1090 	ld	l,#0x01
   0445                    1091 00107$:
   0445 DD F9              1092 	ld	sp,ix
   0447 DD E1              1093 	pop	ix
   0449 C9                 1094 	ret
   044A                    1095 _pal_load_end::
                           1096 ;demo.c:147: void pause() {
                           1097 ;	---------------------------------
                           1098 ; Function pause
                           1099 ; ---------------------------------
   044A                    1100 _pause_start::
   044A                    1101 _pause:
                           1102 ;demo.c:148: uint8_t i,j,k = 0;
                           1103 ;demo.c:149: for (i = 0; i < 255; i++) {	
   044A 01 00 00           1104 	ld	bc,#0x0000
   044D                    1105 00104$:
   044D 78                 1106 	ld	a,b
   044E D6 FF              1107 	sub	a,#0xFF
   0450 D0                 1108 	ret	NC
                           1109 ;demo.c:150: for (j = 0; j < 255; j++) {
   0451 59                 1110 	ld	e,c
   0452 16 FF              1111 	ld	d,#0xFF
   0454                    1112 00103$:
                           1113 ;demo.c:151: k++;
   0454 1C                 1114 	inc	e
   0455 15                 1115 	dec	d
                           1116 ;demo.c:150: for (j = 0; j < 255; j++) {
   0456 AF                 1117 	xor	a,a
   0457 B2                 1118 	or	a,d
   0458 20 FA              1119 	jr	NZ,00103$
                           1120 ;demo.c:149: for (i = 0; i < 255; i++) {	
   045A 4B                 1121 	ld	c,e
   045B 04                 1122 	inc	b
   045C 18 EF              1123 	jr	00104$
   045E                    1124 _pause_end::
                           1125 ;demo.c:157: uint8_t raw_load(char *file_name, int size, char* buffer) {
                           1126 ;	---------------------------------
                           1127 ; Function raw_load
                           1128 ; ---------------------------------
   045E                    1129 _raw_load_start::
   045E                    1130 _raw_load:
   045E DD E5              1131 	push	ix
   0460 DD 21 00 00        1132 	ld	ix,#0
   0464 DD 39              1133 	add	ix,sp
   0466 21 D2 FF           1134 	ld	hl,#-46
   0469 39                 1135 	add	hl,sp
   046A F9                 1136 	ld	sp,hl
                           1137 ;demo.c:162: memset((uint8_t *) &f, 0, sizeof(fcb));
   046B 21 00 00           1138 	ld	hl,#0x0000
   046E 39                 1139 	add	hl,sp
   046F 4D                 1140 	ld	c,l
   0470 44                 1141 	ld	b,h
   0471 21 2E 00           1142 	ld	hl,#0x002E
   0474 E5                 1143 	push	hl
   0475 3E 00              1144 	ld	a,#0x00
   0477 F5                 1145 	push	af
   0478 33                 1146 	inc	sp
   0479 C5                 1147 	push	bc
   047A CDr00s00           1148 	call	_memset
   047D F1                 1149 	pop	af
   047E F1                 1150 	pop	af
   047F 33                 1151 	inc	sp
                           1152 ;demo.c:163: scratch_clear();
   0480 CDr97s03           1153 	call	_scratch_clear
                           1154 ;demo.c:165: f.record_size = 128;
   0483 21 00 00           1155 	ld	hl,#0x0000
   0486 39                 1156 	add	hl,sp
   0487 4D                 1157 	ld	c,l
   0488 44                 1158 	ld	b,h
   0489 21 0F 00           1159 	ld	hl,#0x000F
   048C 09                 1160 	add	hl,bc
   048D EB                 1161 	ex	de,hl
   048E 3E 80              1162 	ld	a,#0x80
   0490 12                 1163 	ld	(de),a
                           1164 ;demo.c:166: f.drive = 0;
   0491 3E 00              1165 	ld	a,#0x00
   0493 02                 1166 	ld	(bc),a
                           1167 ;demo.c:168: memcpy(f.name, file_name, 11);
   0494 DD 5E 04           1168 	ld	e,4 (ix)
   0497 DD 56 05           1169 	ld	d,5 (ix)
   049A 03                 1170 	inc	bc
   049B 21 0B 00           1171 	ld	hl,#0x000B
   049E E5                 1172 	push	hl
   049F D5                 1173 	push	de
   04A0 C5                 1174 	push	bc
   04A1 CDr00s00           1175 	call	_memcpy
   04A4 F1                 1176 	pop	af
   04A5 F1                 1177 	pop	af
   04A6 F1                 1178 	pop	af
                           1179 ;demo.c:170: if (open(&f) != 0) return 0;
   04A7 21 00 00           1180 	ld	hl,#0x0000
   04AA 39                 1181 	add	hl,sp
   04AB E5                 1182 	push	hl
   04AC CDr00s00           1183 	call	_open
   04AF F1                 1184 	pop	af
   04B0 AF                 1185 	xor	a,a
   04B1 B5                 1186 	or	a,l
   04B2 28 05              1187 	jr	Z,00116$
   04B4 2E 00              1188 	ld	l,#0x00
   04B6 C3r1Ds05           1189 	jp	00110$
                           1190 ;demo.c:172: while(total < size) {
   04B9                    1191 00116$:
   04B9 01 00 00           1192 	ld	bc,#0x0000
   04BC                    1193 00107$:
   04BC 79                 1194 	ld	a,c
   04BD DD 96 06           1195 	sub	a,6 (ix)
   04C0 78                 1196 	ld	a,b
   04C1 DD 9E 07           1197 	sbc	a,7 (ix)
   04C4 F2r12s05           1198 	jp	P,00109$
                           1199 ;demo.c:173: if (block_set_data_ptr(scratch) != 0) return 0;
   04C7 C5                 1200 	push	bc
   04C8 21r80s3F           1201 	ld	hl,#_scratch
   04CB E5                 1202 	push	hl
   04CC CDr00s00           1203 	call	_block_set_data_ptr
   04CF F1                 1204 	pop	af
   04D0 5D                 1205 	ld	e,l
   04D1 C1                 1206 	pop	bc
   04D2 AF                 1207 	xor	a,a
   04D3 B3                 1208 	or	a,e
   04D4 28 04              1209 	jr	Z,00104$
   04D6 2E 00              1210 	ld	l,#0x00
   04D8 18 43              1211 	jr	00110$
   04DA                    1212 00104$:
                           1213 ;demo.c:174: if (block_read(&f) != 0) return 0;
   04DA 21 00 00           1214 	ld	hl,#0x0000
   04DD 39                 1215 	add	hl,sp
   04DE C5                 1216 	push	bc
   04DF E5                 1217 	push	hl
   04E0 CDr00s00           1218 	call	_block_read
   04E3 F1                 1219 	pop	af
   04E4 5D                 1220 	ld	e,l
   04E5 C1                 1221 	pop	bc
   04E6 AF                 1222 	xor	a,a
   04E7 B3                 1223 	or	a,e
   04E8 28 04              1224 	jr	Z,00106$
   04EA 2E 00              1225 	ld	l,#0x00
   04EC 18 2F              1226 	jr	00110$
   04EE                    1227 00106$:
                           1228 ;demo.c:176: memcpy(buffer+total,scratch,incr);
   04EE DD 7E 08           1229 	ld	a,8 (ix)
   04F1 81                 1230 	add	a,c
   04F2 5F                 1231 	ld	e,a
   04F3 DD 7E 09           1232 	ld	a,9 (ix)
   04F6 88                 1233 	adc	a,b
   04F7 57                 1234 	ld	d,a
   04F8 C5                 1235 	push	bc
   04F9 21 80 00           1236 	ld	hl,#0x0080
   04FC E5                 1237 	push	hl
   04FD 21r80s3F           1238 	ld	hl,#_scratch
   0500 E5                 1239 	push	hl
   0501 D5                 1240 	push	de
   0502 CDr00s00           1241 	call	_memcpy
   0505 F1                 1242 	pop	af
   0506 F1                 1243 	pop	af
   0507 F1                 1244 	pop	af
   0508 C1                 1245 	pop	bc
                           1246 ;demo.c:178: total+=incr;
   0509 21 80 00           1247 	ld	hl,#0x0080
   050C 09                 1248 	add	hl,bc
   050D 4D                 1249 	ld	c,l
   050E 44                 1250 	ld	b,h
   050F C3rBCs04           1251 	jp	00107$
   0512                    1252 00109$:
                           1253 ;demo.c:181: close(&f);
   0512 21 00 00           1254 	ld	hl,#0x0000
   0515 39                 1255 	add	hl,sp
   0516 E5                 1256 	push	hl
   0517 CDr00s00           1257 	call	_close
   051A F1                 1258 	pop	af
                           1259 ;demo.c:183: return 1;
   051B 2E 01              1260 	ld	l,#0x01
   051D                    1261 00110$:
   051D DD F9              1262 	ld	sp,ix
   051F DD E1              1263 	pop	ix
   0521 C9                 1264 	ret
   0522                    1265 _raw_load_end::
                           1266 ;demo.c:186: void fadein() {
                           1267 ;	---------------------------------
                           1268 ; Function fadein
                           1269 ; ---------------------------------
   0522                    1270 _fadein_start::
   0522                    1271 _fadein:
   0522 DD E5              1272 	push	ix
   0524 DD 21 00 00        1273 	ld	ix,#0
   0528 DD 39              1274 	add	ix,sp
   052A F5                 1275 	push	af
                           1276 ;demo.c:189: if (tick < 4) return;
   052B 3Ar42s40           1277 	ld	a,(#_tick+0)
   052E D6 04              1278 	sub	a,#0x04
   0530 3Ar43s40           1279 	ld	a,(#_tick+1)
   0533 DE 00              1280 	sbc	a,#0x00
   0535 F2r3Bs05           1281 	jp	P,00102$
   0538 C3rE9s05           1282 	jp	00113$
   053B                    1283 00102$:
                           1284 ;demo.c:191: tick = 0;
   053B 21r42s40           1285 	ld	hl,#_tick + 0
   053E 36 00              1286 	ld	(hl), #0x00
   0540 21r43s40           1287 	ld	hl,#_tick + 1
   0543 36 00              1288 	ld	(hl), #0x00
                           1289 ;demo.c:193: for(i = 0; i < 32; i+=2) {
   0545 0E 00              1290 	ld	c,#0x00
   0547                    1291 00109$:
   0547 79                 1292 	ld	a,c
   0548 D6 20              1293 	sub	a,#0x20
   054A D2rE1s05           1294 	jp	NC,00112$
                           1295 ;demo.c:194: uint8_t r = scratch[i] >> 4;
   054D 3Er80              1296 	ld	a,#<_scratch
   054F 81                 1297 	add	a,c
   0550 5F                 1298 	ld	e,a
   0551 3Es3F              1299 	ld	a,#>_scratch
   0553 CE 00              1300 	adc	a,#0x00
   0555 57                 1301 	ld	d,a
   0556 1A                 1302 	ld	a,(de)
   0557 47                 1303 	ld	b,a
   0558 58                 1304 	ld	e,b
   0559 CB 3B              1305 	srl	e
   055B CB 3B              1306 	srl	e
   055D CB 3B              1307 	srl	e
   055F CB 3B              1308 	srl	e
                           1309 ;demo.c:195: uint8_t b = scratch[i] & 0xf;
   0561 78                 1310 	ld	a,b
   0562 E6 0F              1311 	and	a,#0x0F
   0564 DD 77 FF           1312 	ld	-1 (ix),a
                           1313 ;demo.c:196: uint8_t g = scratch[i+1];
   0567 51                 1314 	ld	d,c
   0568 14                 1315 	inc	d
   0569 3Er80              1316 	ld	a,#<_scratch
   056B 82                 1317 	add	a,d
   056C 6F                 1318 	ld	l,a
   056D 3Es3F              1319 	ld	a,#>_scratch
   056F CE 00              1320 	adc	a,#0x00
   0571 67                 1321 	ld	h,a
   0572 56                 1322 	ld	d,(hl)
   0573 DD 72 FE           1323 	ld	-2 (ix),d
                           1324 ;demo.c:198: if (r < (cur_palette[i] >> 4)) r++;
   0576 3Er00              1325 	ld	a,#<_cur_palette
   0578 81                 1326 	add	a,c
   0579 6F                 1327 	ld	l,a
   057A 3Es40              1328 	ld	a,#>_cur_palette
   057C CE 00              1329 	adc	a,#0x00
   057E 67                 1330 	ld	h,a
   057F 56                 1331 	ld	d,(hl)
   0580 CB 3A              1332 	srl	d
   0582 CB 3A              1333 	srl	d
   0584 CB 3A              1334 	srl	d
   0586 CB 3A              1335 	srl	d
   0588 7B                 1336 	ld	a,e
   0589 92                 1337 	sub	a,d
   058A 30 01              1338 	jr	NC,00104$
   058C 1C                 1339 	inc	e
   058D                    1340 00104$:
                           1341 ;demo.c:199: if (b < (cur_palette[i] & 0xf)) b++;
   058D 3Er00              1342 	ld	a,#<_cur_palette
   058F 81                 1343 	add	a,c
   0590 6F                 1344 	ld	l,a
   0591 3Es40              1345 	ld	a,#>_cur_palette
   0593 CE 00              1346 	adc	a,#0x00
   0595 67                 1347 	ld	h,a
   0596 7E                 1348 	ld	a,(hl)
   0597 E6 0F              1349 	and	a,#0x0F
   0599 47                 1350 	ld	b,a
   059A DD 7E FF           1351 	ld	a,-1 (ix)
   059D 90                 1352 	sub	a,b
   059E 30 03              1353 	jr	NC,00106$
   05A0 DD 34 FF           1354 	inc	-1 (ix)
   05A3                    1355 00106$:
                           1356 ;demo.c:201: scratch[i] = (r << 4) | b;
   05A3 3Er80              1357 	ld	a,#<_scratch
   05A5 81                 1358 	add	a,c
   05A6 47                 1359 	ld	b,a
   05A7 3Es3F              1360 	ld	a,#>_scratch
   05A9 CE 00              1361 	adc	a,#0x00
   05AB 57                 1362 	ld	d,a
   05AC 7B                 1363 	ld	a,e
   05AD 07                 1364 	rlca
   05AE 07                 1365 	rlca
   05AF 07                 1366 	rlca
   05B0 07                 1367 	rlca
   05B1 E6 F0              1368 	and	a,#0xF0
   05B3 DD B6 FF           1369 	or	a,-1 (ix)
   05B6 68                 1370 	ld	l,b
   05B7 62                 1371 	ld	h,d
   05B8 77                 1372 	ld	(hl),a
                           1373 ;demo.c:202: if (g < cur_palette[i+1]) scratch[i+1]++;
   05B9 41                 1374 	ld	b,c
   05BA 04                 1375 	inc	b
   05BB 3Er00              1376 	ld	a,#<_cur_palette
   05BD 80                 1377 	add	a,b
   05BE 5F                 1378 	ld	e,a
   05BF 3Es40              1379 	ld	a,#>_cur_palette
   05C1 CE 00              1380 	adc	a,#0x00
   05C3 57                 1381 	ld	d,a
   05C4 1A                 1382 	ld	a,(de)
   05C5 5F                 1383 	ld	e,a
   05C6 DD 7E FE           1384 	ld	a,-2 (ix)
   05C9 93                 1385 	sub	a,e
   05CA 30 10              1386 	jr	NC,00111$
   05CC 3Er80              1387 	ld	a,#<_scratch
   05CE 80                 1388 	add	a,b
   05CF 47                 1389 	ld	b,a
   05D0 3Es3F              1390 	ld	a,#>_scratch
   05D2 CE 00              1391 	adc	a,#0x00
   05D4 5F                 1392 	ld	e,a
   05D5 68                 1393 	ld	l,b
   05D6 67                 1394 	ld	h,a
   05D7 7E                 1395 	ld	a,(hl)
   05D8 3C                 1396 	inc	a
   05D9 68                 1397 	ld	l,b
   05DA 63                 1398 	ld	h,e
   05DB 77                 1399 	ld	(hl),a
   05DC                    1400 00111$:
                           1401 ;demo.c:193: for(i = 0; i < 32; i+=2) {
   05DC 0C                 1402 	inc	c
   05DD 0C                 1403 	inc	c
   05DE C3r47s05           1404 	jp	00109$
   05E1                    1405 00112$:
                           1406 ;demo.c:206: vdp_load_palette(scratch);
   05E1 21r80s3F           1407 	ld	hl,#_scratch
   05E4 E5                 1408 	push	hl
   05E5 CDr00s00           1409 	call	_vdp_load_palette
   05E8 F1                 1410 	pop	af
   05E9                    1411 00113$:
   05E9 DD F9              1412 	ld	sp,ix
   05EB DD E1              1413 	pop	ix
   05ED C9                 1414 	ret
   05EE                    1415 _fadein_end::
                           1416 ;demo.c:218: void do_ymmm() {
                           1417 ;	---------------------------------
                           1418 ; Function do_ymmm
                           1419 ; ---------------------------------
   05EE                    1420 _do_ymmm_start::
   05EE                    1421 _do_ymmm:
   05EE DD E5              1422 	push	ix
   05F0 DD 21 00 00        1423 	ld	ix,#0
   05F4 DD 39              1424 	add	ix,sp
   05F6 21 EB FF           1425 	ld	hl,#-21
   05F9 39                 1426 	add	hl,sp
   05FA F9                 1427 	ld	sp,hl
                           1428 ;demo.c:223: if (tick > 32) { tick = 0; flipper++;}
   05FB 3E 20              1429 	ld	a,#0x20
   05FD FD 21r42s40        1430 	ld	iy,#_tick
   0601 FD 96 00           1431 	sub	a,0 (iy)
   0604 3E 00              1432 	ld	a,#0x00
   0606 FD 21r42s40        1433 	ld	iy,#_tick
   060A FD 9E 01           1434 	sbc	a,1 (iy)
   060D F2r2As06           1435 	jp	P,00102$
   0610 21r42s40           1436 	ld	hl,#_tick + 0
   0613 36 00              1437 	ld	(hl), #0x00
   0615 21r43s40           1438 	ld	hl,#_tick + 1
   0618 36 00              1439 	ld	(hl), #0x00
   061A FD 21r4Es40        1440 	ld	iy,#_flipper
   061E FD 34 00           1441 	inc	0 (iy)
   0621 20 07              1442 	jr	NZ,00115$
   0623 FD 21r4Es40        1443 	ld	iy,#_flipper
   0627 FD 34 01           1444 	inc	1 (iy)
   062A                    1445 00115$:
   062A                    1446 00102$:
                           1447 ;demo.c:224: if (flipper > 10) { flipper = 0;}
   062A 3E 0A              1448 	ld	a,#0x0A
   062C FD 21r4Es40        1449 	ld	iy,#_flipper
   0630 FD 96 00           1450 	sub	a,0 (iy)
   0633 3E 00              1451 	ld	a,#0x00
   0635 FD 21r4Es40        1452 	ld	iy,#_flipper
   0639 FD 9E 01           1453 	sbc	a,1 (iy)
   063C F2r49s06           1454 	jp	P,00104$
   063F 21r4Es40           1455 	ld	hl,#_flipper + 0
   0642 36 00              1456 	ld	(hl), #0x00
   0644 21r4Fs40           1457 	ld	hl,#_flipper + 1
   0647 36 00              1458 	ld	(hl), #0x00
   0649                    1459 00104$:
                           1460 ;demo.c:226: ymmmf++;
   0649 FD 21r50s40        1461 	ld	iy,#_ymmmf
   064D FD 34 00           1462 	inc	0 (iy)
   0650 20 07              1463 	jr	NZ,00116$
   0652 FD 21r50s40        1464 	ld	iy,#_ymmmf
   0656 FD 34 01           1465 	inc	1 (iy)
   0659                    1466 00116$:
                           1467 ;demo.c:227: for (yofff = 0; yofff<212-step;yofff+=step) {
   0659 21r4Cs40           1468 	ld	hl,#_yofff + 0
   065C 36 00              1469 	ld	(hl), #0x00
   065E                    1470 00105$:
   065E 3Ar4Cs40           1471 	ld	a,(#_yofff+0)
   0661 DD 77 ED           1472 	ld	-19 (ix),a
   0664 DD 36 EE 00        1473 	ld	-18 (ix),#0x00
   0668 DD 7E ED           1474 	ld	a,-19 (ix)
   066B D6 D2              1475 	sub	a,#0xD2
   066D DD 7E EE           1476 	ld	a,-18 (ix)
   0670 DE 00              1477 	sbc	a,#0x00
   0672 F2r1Es07           1478 	jp	P,00109$
                           1479 ;demo.c:228: xo = (sintabx[(yofff+ymmmf) & 255]);
   0675 21r50s40           1480 	ld	hl,#_ymmmf
   0678 DD 7E ED           1481 	ld	a,-19 (ix)
   067B 86                 1482 	add	a,(hl)
   067C 5F                 1483 	ld	e,a
   067D DD 7E EE           1484 	ld	a,-18 (ix)
   0680 23                 1485 	inc	hl
   0681 8E                 1486 	adc	a,(hl)
   0682 16 00              1487 	ld	d,#0x00
   0684 CB 23              1488 	sla	e
   0686 CB 12              1489 	rl	d
   0688 21r2Cs00           1490 	ld	hl,#_sintabx
   068B 19                 1491 	add	hl,de
   068C 5E                 1492 	ld	e,(hl)
   068D 23                 1493 	inc	hl
   068E 56                 1494 	ld	d,(hl)
   068F DD 73 EF           1495 	ld	-17 (ix),e
   0692 DD 72 F0           1496 	ld	-16 (ix),d
                           1497 ;demo.c:231: cmd.source_x = 0;
   0695 21 06 00           1498 	ld	hl,#0x0006
   0698 39                 1499 	add	hl,sp
   0699 36 00              1500 	ld	(hl),#0x00
   069B 23                 1501 	inc	hl
   069C 36 00              1502 	ld	(hl),#0x00
                           1503 ;demo.c:232: cmd.source_y = 0+yofff;
   069E 21 06 00           1504 	ld	hl,#0x0006
   06A1 39                 1505 	add	hl,sp
   06A2 EB                 1506 	ex	de,hl
   06A3 4B                 1507 	ld	c,e
   06A4 42                 1508 	ld	b,d
   06A5 69                 1509 	ld	l,c
   06A6 60                 1510 	ld	h,b
   06A7 23                 1511 	inc	hl
   06A8 23                 1512 	inc	hl
   06A9 DD 7E ED           1513 	ld	a,-19 (ix)
   06AC 77                 1514 	ld	(hl),a
   06AD 23                 1515 	inc	hl
   06AE DD 7E EE           1516 	ld	a,-18 (ix)
   06B1 77                 1517 	ld	(hl),a
                           1518 ;demo.c:233: cmd.dest_x = xo;
   06B2 21 04 00           1519 	ld	hl,#0x0004
   06B5 19                 1520 	add	hl,de
   06B6 DD 7E EF           1521 	ld	a,-17 (ix)
   06B9 77                 1522 	ld	(hl),a
   06BA 23                 1523 	inc	hl
   06BB DD 7E F0           1524 	ld	a,-16 (ix)
   06BE 77                 1525 	ld	(hl),a
                           1526 ;demo.c:234: cmd.dest_y = 3+yofff;
   06BF 21 06 00           1527 	ld	hl,#0x0006
   06C2 19                 1528 	add	hl,de
   06C3 DD 75 EB           1529 	ld	-21 (ix),l
   06C6 DD 74 EC           1530 	ld	-20 (ix),h
   06C9 DD 7E ED           1531 	ld	a,-19 (ix)
   06CC C6 03              1532 	add	a,#0x03
   06CE 4F                 1533 	ld	c,a
   06CF DD 7E EE           1534 	ld	a,-18 (ix)
   06D2 CE 00              1535 	adc	a,#0x00
   06D4 47                 1536 	ld	b,a
   06D5 DD 6E EB           1537 	ld	l,-21 (ix)
   06D8 DD 66 EC           1538 	ld	h,-20 (ix)
   06DB 71                 1539 	ld	(hl),c
   06DC 23                 1540 	inc	hl
   06DD 70                 1541 	ld	(hl),b
                           1542 ;demo.c:235: cmd.size_x = 256;
   06DE 21 08 00           1543 	ld	hl,#0x0008
   06E1 19                 1544 	add	hl,de
   06E2 36 00              1545 	ld	(hl),#0x00
   06E4 23                 1546 	inc	hl
   06E5 36 01              1547 	ld	(hl),#0x01
                           1548 ;demo.c:236: cmd.size_y = 1;
   06E7 21 0A 00           1549 	ld	hl,#0x000A
   06EA 19                 1550 	add	hl,de
   06EB 36 01              1551 	ld	(hl),#0x01
   06ED 23                 1552 	inc	hl
   06EE 36 00              1553 	ld	(hl),#0x00
                           1554 ;demo.c:237: cmd.data = 0;
   06F0 21 0C 00           1555 	ld	hl,#0x000C
   06F3 19                 1556 	add	hl,de
   06F4 4D                 1557 	ld	c,l
   06F5 44                 1558 	ld	b,h
   06F6 3E 00              1559 	ld	a,#0x00
   06F8 02                 1560 	ld	(bc),a
                           1561 ;demo.c:238: cmd.argument = 0;
   06F9 21 0D 00           1562 	ld	hl,#0x000D
   06FC 19                 1563 	add	hl,de
   06FD 4D                 1564 	ld	c,l
   06FE 44                 1565 	ld	b,h
   06FF 3E 00              1566 	ld	a,#0x00
   0701 02                 1567 	ld	(bc),a
                           1568 ;demo.c:239: cmd.command = 0xD0;
   0702 21 0E 00           1569 	ld	hl,#0x000E
   0705 19                 1570 	add	hl,de
   0706 4D                 1571 	ld	c,l
   0707 44                 1572 	ld	b,h
   0708 3E D0              1573 	ld	a,#0xD0
   070A 02                 1574 	ld	(bc),a
                           1575 ;demo.c:242: vdp_copier(&cmd);
   070B D5                 1576 	push	de
   070C CDr00s00           1577 	call	_vdp_copier
   070F F1                 1578 	pop	af
                           1579 ;demo.c:227: for (yofff = 0; yofff<212-step;yofff+=step) {
   0710 21r4Cs40           1580 	ld	hl,#_yofff + 0
   0713 4E                 1581 	ld	c,(hl)
   0714 21r4Cs40           1582 	ld	hl,#_yofff
   0717 79                 1583 	ld	a,c
   0718 C6 02              1584 	add	a,#0x02
   071A 77                 1585 	ld	(hl),a
   071B C3r5Es06           1586 	jp	00105$
   071E                    1587 00109$:
   071E DD F9              1588 	ld	sp,ix
   0720 DD E1              1589 	pop	ix
   0722 C9                 1590 	ret
   0723                    1591 _do_ymmm_end::
                           1592 ;demo.c:259: void do_blocks() {
                           1593 ;	---------------------------------
                           1594 ; Function do_blocks
                           1595 ; ---------------------------------
   0723                    1596 _do_blocks_start::
   0723                    1597 _do_blocks:
   0723 DD E5              1598 	push	ix
   0725 DD 21 00 00        1599 	ld	ix,#0
   0729 DD 39              1600 	add	ix,sp
   072B 21 E9 FF           1601 	ld	hl,#-23
   072E 39                 1602 	add	hl,sp
   072F F9                 1603 	ld	sp,hl
                           1604 ;demo.c:262: int ys = 0;
   0730 DD 36 ED 00        1605 	ld	-19 (ix),#0x00
   0734 DD 36 EE 00        1606 	ld	-18 (ix),#0x00
                           1607 ;demo.c:263: int ye = 0;
   0738 DD 36 EB 00        1608 	ld	-21 (ix),#0x00
   073C DD 36 EC 00        1609 	ld	-20 (ix),#0x00
                           1610 ;demo.c:265: vdp_register(VDP_VOFFSET,0);
   0740 21 17 00           1611 	ld	hl,#0x0017
   0743 E5                 1612 	push	hl
   0744 CDr00s00           1613 	call	_vdp_register
   0747 F1                 1614 	pop	af
                           1615 ;demo.c:267: if (block_init == 0) {
   0748 AF                 1616 	xor	a,a
   0749 FD 21r52s40        1617 	ld	iy,#_block_init
   074D FD B6 00           1618 	or	a,0 (iy)
   0750 C2rB8s07           1619 	jp	NZ,00108$
                           1620 ;demo.c:269: vdp_set_screen5();
   0753 CDr00s00           1621 	call	_vdp_set_screen5
                           1622 ;demo.c:271: vdp_register(2, 0x5F);
   0756 21 02 5F           1623 	ld	hl,#0x5F02
   0759 E5                 1624 	push	hl
   075A CDr00s00           1625 	call	_vdp_register
   075D F1                 1626 	pop	af
                           1627 ;demo.c:273: for(i=0;i<16;i++) btab[i] = i*16;
   075E DD 36 EF 00        1628 	ld	-17 (ix),#0x00
   0762 DD 36 F0 00        1629 	ld	-16 (ix),#0x00
   0766                    1630 00110$:
   0766 DD 7E EF           1631 	ld	a,-17 (ix)
   0769 D6 10              1632 	sub	a,#0x10
   076B DD 7E F0           1633 	ld	a,-16 (ix)
   076E DE 00              1634 	sbc	a,#0x00
   0770 F2rA8s07           1635 	jp	P,00113$
   0773 DD 4E EF           1636 	ld	c,-17 (ix)
   0776 DD 46 F0           1637 	ld	b,-16 (ix)
   0779 CB 21              1638 	sla	c
   077B CB 10              1639 	rl	b
   077D 21r5Bs40           1640 	ld	hl,#_btab
   0780 09                 1641 	add	hl,bc
   0781 4D                 1642 	ld	c,l
   0782 44                 1643 	ld	b,h
   0783 DD 5E EF           1644 	ld	e,-17 (ix)
   0786 DD 56 F0           1645 	ld	d,-16 (ix)
   0789 CB 23              1646 	sla	e
   078B CB 12              1647 	rl	d
   078D CB 23              1648 	sla	e
   078F CB 12              1649 	rl	d
   0791 CB 23              1650 	sla	e
   0793 CB 12              1651 	rl	d
   0795 CB 23              1652 	sla	e
   0797 CB 12              1653 	rl	d
   0799 69                 1654 	ld	l,c
   079A 60                 1655 	ld	h,b
   079B 73                 1656 	ld	(hl),e
   079C 23                 1657 	inc	hl
   079D 72                 1658 	ld	(hl),d
   079E DD 34 EF           1659 	inc	-17 (ix)
   07A1 20 03              1660 	jr	NZ,00139$
   07A3 DD 34 F0           1661 	inc	-16 (ix)
   07A6                    1662 00139$:
   07A6 18 BE              1663 	jr	00110$
   07A8                    1664 00113$:
                           1665 ;demo.c:274: vdp_load_palette(block_palette);
   07A8 21r20s40           1666 	ld	hl,#_block_palette
   07AB E5                 1667 	push	hl
   07AC CDr00s00           1668 	call	_vdp_load_palette
   07AF F1                 1669 	pop	af
                           1670 ;demo.c:276: block_init = 1;
   07B0 21r52s40           1671 	ld	hl,#_block_init + 0
   07B3 36 01              1672 	ld	(hl), #0x01
   07B5 C3r77s09           1673 	jp	00122$
   07B8                    1674 00108$:
                           1675 ;demo.c:280: if (flof == 0) { ys = 0; ye = 8; }
   07B8 3Ar7Bs40           1676 	ld	a,(#_flof+0)
   07BB FD 21r7Bs40        1677 	ld	iy,#_flof
   07BF FD B6 01           1678 	or	a,1 (iy)
   07C2 20 10              1679 	jr	NZ,00102$
   07C4 DD 36 ED 00        1680 	ld	-19 (ix),#0x00
   07C8 DD 36 EE 00        1681 	ld	-18 (ix),#0x00
   07CC DD 36 EB 08        1682 	ld	-21 (ix),#0x08
   07D0 DD 36 EC 00        1683 	ld	-20 (ix),#0x00
   07D4                    1684 00102$:
                           1685 ;demo.c:281: if (flof == 1) { ys = 8; ye = 16; }
   07D4 3Ar7Bs40           1686 	ld	a,(#_flof+0)
   07D7 D6 01              1687 	sub	a,#0x01
   07D9 20 06              1688 	jr	NZ,00140$
   07DB 3Ar7Cs40           1689 	ld	a,(#_flof+1)
   07DE B7                 1690 	or	a,a
   07DF 28 02              1691 	jr	Z,00141$
   07E1                    1692 00140$:
   07E1 18 10              1693 	jr	00104$
   07E3                    1694 00141$:
   07E3 DD 36 ED 08        1695 	ld	-19 (ix),#0x08
   07E7 DD 36 EE 00        1696 	ld	-18 (ix),#0x00
   07EB DD 36 EB 10        1697 	ld	-21 (ix),#0x10
   07EF DD 36 EC 00        1698 	ld	-20 (ix),#0x00
   07F3                    1699 00104$:
                           1700 ;demo.c:283: for(bty=3;bty<11;bty++) {
   07F3 FD 21r59s40        1701 	ld	iy,#_bty
   07F7 FD 36 00 03        1702 	ld	0 (iy),#0x03
   07FB FD 21r59s40        1703 	ld	iy,#_bty
   07FF FD 36 01 00        1704 	ld	1 (iy),#0x00
   0803                    1705 00118$:
   0803 3Ar59s40           1706 	ld	a,(#_bty+0)
   0806 D6 0B              1707 	sub	a,#0x0B
   0808 3Ar5As40           1708 	ld	a,(#_bty+1)
   080B DE 00              1709 	sbc	a,#0x00
   080D F2r4Es09           1710 	jp	P,00121$
                           1711 ;demo.c:284: for(btx=ys;btx<ye;btx++) {
   0810 DD 7E ED           1712 	ld	a,-19 (ix)
   0813 FD 21r57s40        1713 	ld	iy,#_btx
   0817 FD 77 00           1714 	ld	0 (iy),a
   081A DD 7E EE           1715 	ld	a,-18 (ix)
   081D FD 21r57s40        1716 	ld	iy,#_btx
   0821 FD 77 01           1717 	ld	1 (iy),a
   0824                    1718 00114$:
   0824 3Ar57s40           1719 	ld	a,(#_btx+0)
   0827 DD 96 EB           1720 	sub	a,-21 (ix)
   082A 3Ar58s40           1721 	ld	a,(#_btx+1)
   082D DD 9E EC           1722 	sbc	a,-20 (ix)
   0830 F2r3Bs09           1723 	jp	P,00120$
                           1724 ;demo.c:285: bsx = (PLY_PSGReg8 & PLY_PSGReg9 | PLY_PSGReg10)>>1;
   0833 3Ar00s00           1725 	ld	a,(#_PLY_PSGReg8+0)
   0836 FD 21r00s00        1726 	ld	iy,#_PLY_PSGReg9
   083A FD A6 00           1727 	and	a,0 (iy)
   083D 21r00s00           1728 	ld	hl,#_PLY_PSGReg10 + 0
   0840 B6                 1729 	or	a,(hl)
   0841 4F                 1730 	ld	c,a
   0842 CB 39              1731 	srl	c
   0844 21r53s40           1732 	ld	hl,#_bsx + 0
   0847 71                 1733 	ld	(hl), c
   0848 21r54s40           1734 	ld	hl,#_bsx + 1
   084B 36 00              1735 	ld	(hl), #0x00
                           1736 ;demo.c:286: bsy = PLY_PSGReg10;
   084D 3Ar00s00           1737 	ld	a,(#_PLY_PSGReg10+0)
   0850 21r55s40           1738 	ld	hl,#_bsy + 0
   0853 77                 1739 	ld	(hl), a
   0854 21r56s40           1740 	ld	hl,#_bsy + 1
   0857 36 00              1741 	ld	(hl), #0x00
                           1742 ;demo.c:287: cmd.source_x = btab[bsx];
   0859 21 08 00           1743 	ld	hl,#0x0008
   085C 39                 1744 	add	hl,sp
   085D 4D                 1745 	ld	c,l
   085E 44                 1746 	ld	b,h
   085F 21r53s40           1747 	ld	hl,#_bsx + 0
   0862 5E                 1748 	ld	e,(hl)
   0863 21r54s40           1749 	ld	hl,#_bsx + 1
   0866 56                 1750 	ld	d,(hl)
   0867 CB 23              1751 	sla	e
   0869 CB 12              1752 	rl	d
   086B 21r5Bs40           1753 	ld	hl,#_btab
   086E 19                 1754 	add	hl,de
   086F 5E                 1755 	ld	e,(hl)
   0870 23                 1756 	inc	hl
   0871 56                 1757 	ld	d,(hl)
   0872 69                 1758 	ld	l,c
   0873 60                 1759 	ld	h,b
   0874 73                 1760 	ld	(hl),e
   0875 23                 1761 	inc	hl
   0876 72                 1762 	ld	(hl),d
                           1763 ;demo.c:288: cmd.source_y = 768+btab[bsy];
   0877 21 08 00           1764 	ld	hl,#0x0008
   087A 39                 1765 	add	hl,sp
   087B 4D                 1766 	ld	c,l
   087C 44                 1767 	ld	b,h
   087D 21 02 00           1768 	ld	hl,#0x0002
   0880 09                 1769 	add	hl,bc
   0881 DD 75 E9           1770 	ld	-23 (ix),l
   0884 DD 74 EA           1771 	ld	-22 (ix),h
   0887 21r55s40           1772 	ld	hl,#_bsy + 0
   088A 5E                 1773 	ld	e,(hl)
   088B 21r56s40           1774 	ld	hl,#_bsy + 1
   088E 56                 1775 	ld	d,(hl)
   088F CB 23              1776 	sla	e
   0891 CB 12              1777 	rl	d
   0893 21r5Bs40           1778 	ld	hl,#_btab
   0896 19                 1779 	add	hl,de
   0897 5E                 1780 	ld	e,(hl)
   0898 23                 1781 	inc	hl
   0899 56                 1782 	ld	d,(hl)
   089A 21 00 03           1783 	ld	hl,#0x0300
   089D 19                 1784 	add	hl,de
   089E EB                 1785 	ex	de,hl
   089F DD 6E E9           1786 	ld	l,-23 (ix)
   08A2 DD 66 EA           1787 	ld	h,-22 (ix)
   08A5 73                 1788 	ld	(hl),e
   08A6 23                 1789 	inc	hl
   08A7 72                 1790 	ld	(hl),d
                           1791 ;demo.c:289: cmd.dest_x = btab[btx];
   08A8 21 04 00           1792 	ld	hl,#0x0004
   08AB 09                 1793 	add	hl,bc
   08AC DD 75 E9           1794 	ld	-23 (ix),l
   08AF DD 74 EA           1795 	ld	-22 (ix),h
   08B2 21r57s40           1796 	ld	hl,#_btx + 0
   08B5 5E                 1797 	ld	e,(hl)
   08B6 21r58s40           1798 	ld	hl,#_btx + 1
   08B9 56                 1799 	ld	d,(hl)
   08BA CB 23              1800 	sla	e
   08BC CB 12              1801 	rl	d
   08BE 21r5Bs40           1802 	ld	hl,#_btab
   08C1 19                 1803 	add	hl,de
   08C2 5E                 1804 	ld	e,(hl)
   08C3 23                 1805 	inc	hl
   08C4 56                 1806 	ld	d,(hl)
   08C5 DD 6E E9           1807 	ld	l,-23 (ix)
   08C8 DD 66 EA           1808 	ld	h,-22 (ix)
   08CB 73                 1809 	ld	(hl),e
   08CC 23                 1810 	inc	hl
   08CD 72                 1811 	ld	(hl),d
                           1812 ;demo.c:290: cmd.dest_y = 512+btab[bty];
   08CE 21 06 00           1813 	ld	hl,#0x0006
   08D1 09                 1814 	add	hl,bc
   08D2 DD 75 E9           1815 	ld	-23 (ix),l
   08D5 DD 74 EA           1816 	ld	-22 (ix),h
   08D8 21r59s40           1817 	ld	hl,#_bty + 0
   08DB 5E                 1818 	ld	e,(hl)
   08DC 21r5As40           1819 	ld	hl,#_bty + 1
   08DF 56                 1820 	ld	d,(hl)
   08E0 CB 23              1821 	sla	e
   08E2 CB 12              1822 	rl	d
   08E4 21r5Bs40           1823 	ld	hl,#_btab
   08E7 19                 1824 	add	hl,de
   08E8 5E                 1825 	ld	e,(hl)
   08E9 23                 1826 	inc	hl
   08EA 56                 1827 	ld	d,(hl)
   08EB 21 00 02           1828 	ld	hl,#0x0200
   08EE 19                 1829 	add	hl,de
   08EF EB                 1830 	ex	de,hl
   08F0 DD 6E E9           1831 	ld	l,-23 (ix)
   08F3 DD 66 EA           1832 	ld	h,-22 (ix)
   08F6 73                 1833 	ld	(hl),e
   08F7 23                 1834 	inc	hl
   08F8 72                 1835 	ld	(hl),d
                           1836 ;demo.c:291: cmd.size_x = 16;
   08F9 21 08 00           1837 	ld	hl,#0x0008
   08FC 09                 1838 	add	hl,bc
   08FD 36 10              1839 	ld	(hl),#0x10
   08FF 23                 1840 	inc	hl
   0900 36 00              1841 	ld	(hl),#0x00
                           1842 ;demo.c:292: cmd.size_y = 16;
   0902 21 0A 00           1843 	ld	hl,#0x000A
   0905 09                 1844 	add	hl,bc
   0906 36 10              1845 	ld	(hl),#0x10
   0908 23                 1846 	inc	hl
   0909 36 00              1847 	ld	(hl),#0x00
                           1848 ;demo.c:293: cmd.data = 0;
   090B 21 0C 00           1849 	ld	hl,#0x000C
   090E 09                 1850 	add	hl,bc
   090F EB                 1851 	ex	de,hl
   0910 3E 00              1852 	ld	a,#0x00
   0912 12                 1853 	ld	(de),a
                           1854 ;demo.c:294: cmd.argument = 0x00;
   0913 21 0D 00           1855 	ld	hl,#0x000D
   0916 09                 1856 	add	hl,bc
   0917 EB                 1857 	ex	de,hl
   0918 3E 00              1858 	ld	a,#0x00
   091A 12                 1859 	ld	(de),a
                           1860 ;demo.c:295: cmd.command = 0xD0;
   091B 21 0E 00           1861 	ld	hl,#0x000E
   091E 09                 1862 	add	hl,bc
   091F EB                 1863 	ex	de,hl
   0920 3E D0              1864 	ld	a,#0xD0
   0922 12                 1865 	ld	(de),a
                           1866 ;demo.c:296: vdp_copier(&cmd);
   0923 C5                 1867 	push	bc
   0924 CDr00s00           1868 	call	_vdp_copier
   0927 F1                 1869 	pop	af
                           1870 ;demo.c:284: for(btx=ys;btx<ye;btx++) {
   0928 FD 21r57s40        1871 	ld	iy,#_btx
   092C FD 34 00           1872 	inc	0 (iy)
   092F 20 07              1873 	jr	NZ,00150$
   0931 FD 21r57s40        1874 	ld	iy,#_btx
   0935 FD 34 01           1875 	inc	1 (iy)
   0938                    1876 00150$:
   0938 C3r24s08           1877 	jp	00114$
   093B                    1878 00120$:
                           1879 ;demo.c:283: for(bty=3;bty<11;bty++) {
   093B FD 21r59s40        1880 	ld	iy,#_bty
   093F FD 34 00           1881 	inc	0 (iy)
   0942 20 07              1882 	jr	NZ,00151$
   0944 FD 21r59s40        1883 	ld	iy,#_bty
   0948 FD 34 01           1884 	inc	1 (iy)
   094B                    1885 00151$:
   094B C3r03s08           1886 	jp	00118$
   094E                    1887 00121$:
                           1888 ;demo.c:300: flof++;
   094E FD 21r7Bs40        1889 	ld	iy,#_flof
   0952 FD 34 00           1890 	inc	0 (iy)
   0955 20 07              1891 	jr	NZ,00152$
   0957 FD 21r7Bs40        1892 	ld	iy,#_flof
   095B FD 34 01           1893 	inc	1 (iy)
   095E                    1894 00152$:
                           1895 ;demo.c:301: if (flof == 2) flof = 0;
   095E 3Ar7Bs40           1896 	ld	a,(#_flof+0)
   0961 D6 02              1897 	sub	a,#0x02
   0963 20 06              1898 	jr	NZ,00153$
   0965 3Ar7Cs40           1899 	ld	a,(#_flof+1)
   0968 B7                 1900 	or	a,a
   0969 28 02              1901 	jr	Z,00154$
   096B                    1902 00153$:
   096B 18 0A              1903 	jr	00122$
   096D                    1904 00154$:
   096D 21r7Bs40           1905 	ld	hl,#_flof + 0
   0970 36 00              1906 	ld	(hl), #0x00
   0972 21r7Cs40           1907 	ld	hl,#_flof + 1
   0975 36 00              1908 	ld	(hl), #0x00
   0977                    1909 00122$:
   0977 DD F9              1910 	ld	sp,ix
   0979 DD E1              1911 	pop	ix
   097B C9                 1912 	ret
   097C                    1913 _do_blocks_end::
                           1914 ;demo.c:309: void raster_effu() {
                           1915 ;	---------------------------------
                           1916 ; Function raster_effu
                           1917 ; ---------------------------------
   097C                    1918 _raster_effu_start::
   097C                    1919 _raster_effu:
                           1920 ;demo.c:310: vdp_register(VDP_VOFFSET,0);
   097C 21 17 00           1921 	ld	hl,#0x0017
   097F E5                 1922 	push	hl
   0980 CDr00s00           1923 	call	_vdp_register
   0983 F1                 1924 	pop	af
                           1925 ;demo.c:311: waitVB();
   0984 76                 1926 		halt 
                           1927 ;demo.c:313: vdp_register(1,0x40); // disable vblank
   0985 21 01 40           1928 	ld	hl,#0x4001
   0988 E5                 1929 	push	hl
   0989 CDr00s00           1930 	call	_vdp_register
                           1931 ;demo.c:315: for (linenum = 40; linenum < 212; linenum+=4) {
   098C 3E 28              1932 	ld	a,#0x28
   098E 32r7Ds40           1933 	ld	(#_linenum + 0),a
   0991 F1                 1934 	pop	af
   0992 FD 21r7Ds40        1935 	ld	iy,#_linenum
   0996 FD 36 01 00        1936 	ld	1 (iy),#0x00
   099A                    1937 00101$:
   099A 3Ar7Ds40           1938 	ld	a,(#_linenum+0)
   099D D6 D4              1939 	sub	a,#0xD4
   099F 3Ar7Es40           1940 	ld	a,(#_linenum+1)
   09A2 DE 00              1941 	sbc	a,#0x00
   09A4 F2rD5s09           1942 	jp	P,00104$
                           1943 ;demo.c:316: vdp_register(19,linenum); // interrupt on line
   09A7 3Ar7Ds40           1944 	ld	a,(#_linenum+0)
   09AA F5                 1945 	push	af
   09AB 33                 1946 	inc	sp
   09AC 3E 13              1947 	ld	a,#0x13
   09AE F5                 1948 	push	af
   09AF 33                 1949 	inc	sp
   09B0 CDr00s00           1950 	call	_vdp_register
   09B3 F1                 1951 	pop	af
                           1952 ;demo.c:317: vdp_register(0,0x16); // mode SC5, IE1 interrupts on
   09B4 21 00 16           1953 	ld	hl,#0x1600
   09B7 E5                 1954 	push	hl
   09B8 CDr00s00           1955 	call	_vdp_register
   09BB F1                 1956 	pop	af
                           1957 ;demo.c:319: waitVB();
   09BC 76                 1958 		halt 
                           1959 ;demo.c:315: for (linenum = 40; linenum < 212; linenum+=4) {
   09BD 21r7Ds40           1960 	ld	hl,#_linenum
   09C0 7E                 1961 	ld	a,(hl)
   09C1 C6 04              1962 	add	a,#0x04
   09C3 23                 1963 	inc	hl
   09C4 2B                 1964 	dec	hl
   09C5 C5                 1965 	push	bc
   09C6 4F                 1966 	ld	c, a
   09C7 23                 1967 	inc	hl
   09C8 7E                 1968 	ld	a, (hl)
   09C9 47                 1969 	ld	b, a
   09CA 79                 1970 	ld	a, c
   09CB 2B                 1971 	dec	hl
   09CC 77                 1972 	ld	(hl), a
   09CD 78                 1973 	ld	a, b
   09CE C1                 1974 	pop	bc
   09CF CE 00              1975 	adc	a,#0x00
   09D1 23                 1976 	inc	hl
   09D2 77                 1977 	ld	(hl),a
   09D3 18 C5              1978 	jr	00101$
   09D5                    1979 00104$:
                           1980 ;demo.c:322: vdp_register(VDP_VOFFSET,0);
   09D5 21 17 00           1981 	ld	hl,#0x0017
   09D8 E5                 1982 	push	hl
   09D9 CDr00s00           1983 	call	_vdp_register
   09DC F1                 1984 	pop	af
                           1985 ;demo.c:336: vdp_register(0,0x6); // mode SC5, IE1 interrupts off
   09DD 21 00 06           1986 	ld	hl,#0x0600
   09E0 E5                 1987 	push	hl
   09E1 CDr00s00           1988 	call	_vdp_register
   09E4 F1                 1989 	pop	af
                           1990 ;demo.c:337: vdp_register(1,0x60); // enable vblank
   09E5 21 01 60           1991 	ld	hl,#0x6001
   09E8 E5                 1992 	push	hl
   09E9 CDr00s00           1993 	call	_vdp_register
   09EC F1                 1994 	pop	af
   09ED C9                 1995 	ret
   09EE                    1996 _raster_effu_end::
                           1997 ;demo.c:340: void twister() {
                           1998 ;	---------------------------------
                           1999 ; Function twister
                           2000 ; ---------------------------------
   09EE                    2001 _twister_start::
   09EE                    2002 _twister:
   09EE DD E5              2003 	push	ix
   09F0 DD 21 00 00        2004 	ld	ix,#0
   09F4 DD 39              2005 	add	ix,sp
   09F6 21 ED FF           2006 	ld	hl,#-19
   09F9 39                 2007 	add	hl,sp
   09FA F9                 2008 	ld	sp,hl
                           2009 ;demo.c:343: waitVB();
   09FB 76                 2010 		halt 
                           2011 ;demo.c:344: for (y = 0; y < 212; y+=4) {
   09FC DD 36 EF 00        2012 	ld	-17 (ix),#0x00
   0A00 DD 36 F0 00        2013 	ld	-16 (ix),#0x00
   0A04                    2014 00101$:
   0A04 DD 7E EF           2015 	ld	a,-17 (ix)
   0A07 D6 D4              2016 	sub	a,#0xD4
   0A09 DD 7E F0           2017 	ld	a,-16 (ix)
   0A0C DE 00              2018 	sbc	a,#0x00
   0A0E F2rB3s0A           2019 	jp	P,00105$
                           2020 ;demo.c:345: cmd.source_x = 0;
   0A11 21 04 00           2021 	ld	hl,#0x0004
   0A14 39                 2022 	add	hl,sp
   0A15 36 00              2023 	ld	(hl),#0x00
   0A17 23                 2024 	inc	hl
   0A18 36 00              2025 	ld	(hl),#0x00
                           2026 ;demo.c:346: sy = ((sintab[(vbicount+(y>>1)) & 255])>>1)+(256+64);
   0A1A DD 5E EF           2027 	ld	e,-17 (ix)
   0A1D DD 56 F0           2028 	ld	d,-16 (ix)
   0A20 CB 2A              2029 	sra	d
   0A22 CB 1B              2030 	rr	e
   0A24 3Ar40s40           2031 	ld	a,(#_vbicount+0)
   0A27 83                 2032 	add	a,e
   0A28 5F                 2033 	ld	e,a
   0A29 3Ar41s40           2034 	ld	a,(#_vbicount+1)
   0A2C 8A                 2035 	adc	a,d
   0A2D 16 00              2036 	ld	d,#0x00
   0A2F 21r00s00           2037 	ld	hl,#_sintab
   0A32 19                 2038 	add	hl,de
   0A33 5E                 2039 	ld	e,(hl)
   0A34 CB 2B              2040 	sra	e
   0A36 7B                 2041 	ld	a,e
   0A37 17                 2042 	rla	
   0A38 9F                 2043 	sbc	a,a
   0A39 57                 2044 	ld	d,a
   0A3A 21 40 01           2045 	ld	hl,#0x0140
   0A3D 19                 2046 	add	hl,de
   0A3E DD 75 ED           2047 	ld	-19 (ix),l
   0A41 DD 74 EE           2048 	ld	-18 (ix),h
                           2049 ;demo.c:347: cmd.source_y = sy;
   0A44 21 04 00           2050 	ld	hl,#0x0004
   0A47 39                 2051 	add	hl,sp
   0A48 EB                 2052 	ex	de,hl
   0A49 4B                 2053 	ld	c,e
   0A4A 42                 2054 	ld	b,d
   0A4B 69                 2055 	ld	l,c
   0A4C 60                 2056 	ld	h,b
   0A4D 23                 2057 	inc	hl
   0A4E 23                 2058 	inc	hl
   0A4F DD 7E ED           2059 	ld	a,-19 (ix)
   0A52 77                 2060 	ld	(hl),a
   0A53 23                 2061 	inc	hl
   0A54 DD 7E EE           2062 	ld	a,-18 (ix)
   0A57 77                 2063 	ld	(hl),a
                           2064 ;demo.c:348: cmd.dest_x = 0;
   0A58 21 04 00           2065 	ld	hl,#0x0004
   0A5B 19                 2066 	add	hl,de
   0A5C 36 00              2067 	ld	(hl),#0x00
   0A5E 23                 2068 	inc	hl
   0A5F 36 00              2069 	ld	(hl),#0x00
                           2070 ;demo.c:349: cmd.dest_y = y;
   0A61 21 06 00           2071 	ld	hl,#0x0006
   0A64 19                 2072 	add	hl,de
   0A65 DD 7E EF           2073 	ld	a,-17 (ix)
   0A68 77                 2074 	ld	(hl),a
   0A69 23                 2075 	inc	hl
   0A6A DD 7E F0           2076 	ld	a,-16 (ix)
   0A6D 77                 2077 	ld	(hl),a
                           2078 ;demo.c:350: cmd.size_x = 70;
   0A6E 21 08 00           2079 	ld	hl,#0x0008
   0A71 19                 2080 	add	hl,de
   0A72 36 46              2081 	ld	(hl),#0x46
   0A74 23                 2082 	inc	hl
   0A75 36 00              2083 	ld	(hl),#0x00
                           2084 ;demo.c:351: cmd.size_y = 4;
   0A77 21 0A 00           2085 	ld	hl,#0x000A
   0A7A 19                 2086 	add	hl,de
   0A7B 36 04              2087 	ld	(hl),#0x04
   0A7D 23                 2088 	inc	hl
   0A7E 36 00              2089 	ld	(hl),#0x00
                           2090 ;demo.c:352: cmd.data = 0;
   0A80 21 0C 00           2091 	ld	hl,#0x000C
   0A83 19                 2092 	add	hl,de
   0A84 4D                 2093 	ld	c,l
   0A85 44                 2094 	ld	b,h
   0A86 3E 00              2095 	ld	a,#0x00
   0A88 02                 2096 	ld	(bc),a
                           2097 ;demo.c:353: cmd.argument = 0x00;
   0A89 21 0D 00           2098 	ld	hl,#0x000D
   0A8C 19                 2099 	add	hl,de
   0A8D 4D                 2100 	ld	c,l
   0A8E 44                 2101 	ld	b,h
   0A8F 3E 00              2102 	ld	a,#0x00
   0A91 02                 2103 	ld	(bc),a
                           2104 ;demo.c:354: cmd.command = 0xd0; // logical vram to vram
   0A92 21 0E 00           2105 	ld	hl,#0x000E
   0A95 19                 2106 	add	hl,de
   0A96 4D                 2107 	ld	c,l
   0A97 44                 2108 	ld	b,h
   0A98 3E D0              2109 	ld	a,#0xD0
   0A9A 02                 2110 	ld	(bc),a
                           2111 ;demo.c:355: vdp_copier(&cmd);
   0A9B D5                 2112 	push	de
   0A9C CDr00s00           2113 	call	_vdp_copier
   0A9F F1                 2114 	pop	af
                           2115 ;demo.c:344: for (y = 0; y < 212; y+=4) {
   0AA0 DD 7E EF           2116 	ld	a,-17 (ix)
   0AA3 C6 04              2117 	add	a,#0x04
   0AA5 DD 77 EF           2118 	ld	-17 (ix),a
   0AA8 DD 7E F0           2119 	ld	a,-16 (ix)
   0AAB CE 00              2120 	adc	a,#0x00
   0AAD DD 77 F0           2121 	ld	-16 (ix),a
   0AB0 C3r04s0A           2122 	jp	00101$
   0AB3                    2123 00105$:
   0AB3 DD F9              2124 	ld	sp,ix
   0AB5 DD E1              2125 	pop	ix
   0AB7 C9                 2126 	ret
   0AB8                    2127 _twister_end::
                           2128 ;demo.c:365: void do_animplay() {
                           2129 ;	---------------------------------
                           2130 ; Function do_animplay
                           2131 ; ---------------------------------
   0AB8                    2132 _do_animplay_start::
   0AB8                    2133 _do_animplay:
   0AB8 DD E5              2134 	push	ix
   0ABA DD 21 00 00        2135 	ld	ix,#0
   0ABE DD 39              2136 	add	ix,sp
   0AC0 21 EC FF           2137 	ld	hl,#-20
   0AC3 39                 2138 	add	hl,sp
   0AC4 F9                 2139 	ld	sp,hl
                           2140 ;demo.c:371: for (y = 0; y < 106; y+=1) {
   0AC5 DD 36 FF 00        2141 	ld	-1 (ix),#0x00
   0AC9                    2142 00107$:
   0AC9 DD 7E FF           2143 	ld	a,-1 (ix)
   0ACC D6 6A              2144 	sub	a,#0x6A
   0ACE D2r7As0B           2145 	jp	NC,00110$
                           2146 ;demo.c:372: cmd.source_x = xo;
   0AD1 21 04 00           2147 	ld	hl,#0x0004
   0AD4 39                 2148 	add	hl,sp
   0AD5 EB                 2149 	ex	de,hl
   0AD6 ED 4Br7Fs40        2150 	ld	bc,(_xo)
   0ADA EB                 2151 	ex	de,hl
   0ADB 71                 2152 	ld	(hl),c
   0ADC 23                 2153 	inc	hl
   0ADD 70                 2154 	ld	(hl),b
                           2155 ;demo.c:373: cmd.source_y = 256+po+yo+(y>>1);
   0ADE 21 04 00           2156 	ld	hl,#0x0004
   0AE1 39                 2157 	add	hl,sp
   0AE2 4D                 2158 	ld	c,l
   0AE3 44                 2159 	ld	b,h
   0AE4 21 02 00           2160 	ld	hl,#0x0002
   0AE7 09                 2161 	add	hl,bc
   0AE8 DD 75 EE           2162 	ld	-18 (ix),l
   0AEB DD 74 EF           2163 	ld	-17 (ix),h
   0AEE 3Ar83s40           2164 	ld	a,(#_po+0)
   0AF1 5F                 2165 	ld	e,a
   0AF2 3Ar84s40           2166 	ld	a,(#_po+1)
   0AF5 C6 01              2167 	add	a,#0x01
   0AF7 57                 2168 	ld	d,a
   0AF8 21r81s40           2169 	ld	hl,#_yo
   0AFB 7B                 2170 	ld	a,e
   0AFC 86                 2171 	add	a,(hl)
   0AFD DD 77 EC           2172 	ld	-20 (ix),a
   0B00 7A                 2173 	ld	a,d
   0B01 23                 2174 	inc	hl
   0B02 8E                 2175 	adc	a,(hl)
   0B03 DD 77 ED           2176 	ld	-19 (ix),a
   0B06 DD 5E FF           2177 	ld	e,-1 (ix)
   0B09 CB 3B              2178 	srl	e
   0B0B 16 00              2179 	ld	d,#0x00
   0B0D DD 7E EC           2180 	ld	a,-20 (ix)
   0B10 83                 2181 	add	a,e
   0B11 5F                 2182 	ld	e,a
   0B12 DD 7E ED           2183 	ld	a,-19 (ix)
   0B15 8A                 2184 	adc	a,d
   0B16 57                 2185 	ld	d,a
   0B17 DD 6E EE           2186 	ld	l,-18 (ix)
   0B1A DD 66 EF           2187 	ld	h,-17 (ix)
   0B1D 73                 2188 	ld	(hl),e
   0B1E 23                 2189 	inc	hl
   0B1F 72                 2190 	ld	(hl),d
                           2191 ;demo.c:374: cmd.dest_x = 0;
   0B20 21 04 00           2192 	ld	hl,#0x0004
   0B23 09                 2193 	add	hl,bc
   0B24 36 00              2194 	ld	(hl),#0x00
   0B26 23                 2195 	inc	hl
   0B27 36 00              2196 	ld	(hl),#0x00
                           2197 ;demo.c:375: cmd.dest_y = (y<<1);
   0B29 21 06 00           2198 	ld	hl,#0x0006
   0B2C 09                 2199 	add	hl,bc
   0B2D DD 75 EC           2200 	ld	-20 (ix),l
   0B30 DD 74 ED           2201 	ld	-19 (ix),h
   0B33 DD 5E FF           2202 	ld	e,-1 (ix)
   0B36 16 00              2203 	ld	d,#0x00
   0B38 CB 23              2204 	sla	e
   0B3A CB 12              2205 	rl	d
   0B3C DD 6E EC           2206 	ld	l,-20 (ix)
   0B3F DD 66 ED           2207 	ld	h,-19 (ix)
   0B42 73                 2208 	ld	(hl),e
   0B43 23                 2209 	inc	hl
   0B44 72                 2210 	ld	(hl),d
                           2211 ;demo.c:376: cmd.size_x = 128;
   0B45 21 08 00           2212 	ld	hl,#0x0008
   0B48 09                 2213 	add	hl,bc
   0B49 36 80              2214 	ld	(hl),#0x80
   0B4B 23                 2215 	inc	hl
   0B4C 36 00              2216 	ld	(hl),#0x00
                           2217 ;demo.c:377: cmd.size_y = 1;
   0B4E 21 0A 00           2218 	ld	hl,#0x000A
   0B51 09                 2219 	add	hl,bc
   0B52 36 01              2220 	ld	(hl),#0x01
   0B54 23                 2221 	inc	hl
   0B55 36 00              2222 	ld	(hl),#0x00
                           2223 ;demo.c:378: cmd.data = 0;
   0B57 21 0C 00           2224 	ld	hl,#0x000C
   0B5A 09                 2225 	add	hl,bc
   0B5B EB                 2226 	ex	de,hl
   0B5C 3E 00              2227 	ld	a,#0x00
   0B5E 12                 2228 	ld	(de),a
                           2229 ;demo.c:379: cmd.argument = 0x00;
   0B5F 21 0D 00           2230 	ld	hl,#0x000D
   0B62 09                 2231 	add	hl,bc
   0B63 EB                 2232 	ex	de,hl
   0B64 3E 00              2233 	ld	a,#0x00
   0B66 12                 2234 	ld	(de),a
                           2235 ;demo.c:380: cmd.command = 0xD0;
   0B67 21 0E 00           2236 	ld	hl,#0x000E
   0B6A 09                 2237 	add	hl,bc
   0B6B EB                 2238 	ex	de,hl
   0B6C 3E D0              2239 	ld	a,#0xD0
   0B6E 12                 2240 	ld	(de),a
                           2241 ;demo.c:381: vdp_copier(&cmd);
   0B6F C5                 2242 	push	bc
   0B70 CDr00s00           2243 	call	_vdp_copier
   0B73 F1                 2244 	pop	af
                           2245 ;demo.c:371: for (y = 0; y < 106; y+=1) {
   0B74 DD 34 FF           2246 	inc	-1 (ix)
   0B77 C3rC9s0A           2247 	jp	00107$
   0B7A                    2248 00110$:
                           2249 ;demo.c:384: for (y = 0; y < 106; y+=1) {
   0B7A DD 36 FF 00        2250 	ld	-1 (ix),#0x00
   0B7E                    2251 00111$:
   0B7E DD 7E FF           2252 	ld	a,-1 (ix)
   0B81 D6 6A              2253 	sub	a,#0x6A
   0B83 D2r2Fs0C           2254 	jp	NC,00114$
                           2255 ;demo.c:385: cmd.source_x = xo;
   0B86 21 04 00           2256 	ld	hl,#0x0004
   0B89 39                 2257 	add	hl,sp
   0B8A EB                 2258 	ex	de,hl
   0B8B ED 4Br7Fs40        2259 	ld	bc,(_xo)
   0B8F EB                 2260 	ex	de,hl
   0B90 71                 2261 	ld	(hl),c
   0B91 23                 2262 	inc	hl
   0B92 70                 2263 	ld	(hl),b
                           2264 ;demo.c:386: cmd.source_y = 256+po+yo+(y>>1);
   0B93 21 04 00           2265 	ld	hl,#0x0004
   0B96 39                 2266 	add	hl,sp
   0B97 4D                 2267 	ld	c,l
   0B98 44                 2268 	ld	b,h
   0B99 21 02 00           2269 	ld	hl,#0x0002
   0B9C 09                 2270 	add	hl,bc
   0B9D DD 75 EC           2271 	ld	-20 (ix),l
   0BA0 DD 74 ED           2272 	ld	-19 (ix),h
   0BA3 3Ar83s40           2273 	ld	a,(#_po+0)
   0BA6 5F                 2274 	ld	e,a
   0BA7 3Ar84s40           2275 	ld	a,(#_po+1)
   0BAA C6 01              2276 	add	a,#0x01
   0BAC 57                 2277 	ld	d,a
   0BAD 21r81s40           2278 	ld	hl,#_yo
   0BB0 7B                 2279 	ld	a,e
   0BB1 86                 2280 	add	a,(hl)
   0BB2 DD 77 EE           2281 	ld	-18 (ix),a
   0BB5 7A                 2282 	ld	a,d
   0BB6 23                 2283 	inc	hl
   0BB7 8E                 2284 	adc	a,(hl)
   0BB8 DD 77 EF           2285 	ld	-17 (ix),a
   0BBB DD 5E FF           2286 	ld	e,-1 (ix)
   0BBE CB 3B              2287 	srl	e
   0BC0 16 00              2288 	ld	d,#0x00
   0BC2 DD 7E EE           2289 	ld	a,-18 (ix)
   0BC5 83                 2290 	add	a,e
   0BC6 5F                 2291 	ld	e,a
   0BC7 DD 7E EF           2292 	ld	a,-17 (ix)
   0BCA 8A                 2293 	adc	a,d
   0BCB 57                 2294 	ld	d,a
   0BCC DD 6E EC           2295 	ld	l,-20 (ix)
   0BCF DD 66 ED           2296 	ld	h,-19 (ix)
   0BD2 73                 2297 	ld	(hl),e
   0BD3 23                 2298 	inc	hl
   0BD4 72                 2299 	ld	(hl),d
                           2300 ;demo.c:387: cmd.dest_x = 128;
   0BD5 21 04 00           2301 	ld	hl,#0x0004
   0BD8 09                 2302 	add	hl,bc
   0BD9 36 80              2303 	ld	(hl),#0x80
   0BDB 23                 2304 	inc	hl
   0BDC 36 00              2305 	ld	(hl),#0x00
                           2306 ;demo.c:388: cmd.dest_y = (y<<1);
   0BDE 21 06 00           2307 	ld	hl,#0x0006
   0BE1 09                 2308 	add	hl,bc
   0BE2 DD 75 EC           2309 	ld	-20 (ix),l
   0BE5 DD 74 ED           2310 	ld	-19 (ix),h
   0BE8 DD 5E FF           2311 	ld	e,-1 (ix)
   0BEB 16 00              2312 	ld	d,#0x00
   0BED CB 23              2313 	sla	e
   0BEF CB 12              2314 	rl	d
   0BF1 DD 6E EC           2315 	ld	l,-20 (ix)
   0BF4 DD 66 ED           2316 	ld	h,-19 (ix)
   0BF7 73                 2317 	ld	(hl),e
   0BF8 23                 2318 	inc	hl
   0BF9 72                 2319 	ld	(hl),d
                           2320 ;demo.c:389: cmd.size_x = 128;
   0BFA 21 08 00           2321 	ld	hl,#0x0008
   0BFD 09                 2322 	add	hl,bc
   0BFE 36 80              2323 	ld	(hl),#0x80
   0C00 23                 2324 	inc	hl
   0C01 36 00              2325 	ld	(hl),#0x00
                           2326 ;demo.c:390: cmd.size_y = 1;
   0C03 21 0A 00           2327 	ld	hl,#0x000A
   0C06 09                 2328 	add	hl,bc
   0C07 36 01              2329 	ld	(hl),#0x01
   0C09 23                 2330 	inc	hl
   0C0A 36 00              2331 	ld	(hl),#0x00
                           2332 ;demo.c:391: cmd.data = 0;
   0C0C 21 0C 00           2333 	ld	hl,#0x000C
   0C0F 09                 2334 	add	hl,bc
   0C10 EB                 2335 	ex	de,hl
   0C11 3E 00              2336 	ld	a,#0x00
   0C13 12                 2337 	ld	(de),a
                           2338 ;demo.c:392: cmd.argument = 0x00;
   0C14 21 0D 00           2339 	ld	hl,#0x000D
   0C17 09                 2340 	add	hl,bc
   0C18 EB                 2341 	ex	de,hl
   0C19 3E 00              2342 	ld	a,#0x00
   0C1B 12                 2343 	ld	(de),a
                           2344 ;demo.c:393: cmd.command = 0xd2; // logical vram to vram, xor
   0C1C 21 0E 00           2345 	ld	hl,#0x000E
   0C1F 09                 2346 	add	hl,bc
   0C20 EB                 2347 	ex	de,hl
   0C21 3E D2              2348 	ld	a,#0xD2
   0C23 12                 2349 	ld	(de),a
                           2350 ;demo.c:394: vdp_copier(&cmd);
   0C24 C5                 2351 	push	bc
   0C25 CDr00s00           2352 	call	_vdp_copier
   0C28 F1                 2353 	pop	af
                           2354 ;demo.c:384: for (y = 0; y < 106; y+=1) {
   0C29 DD 34 FF           2355 	inc	-1 (ix)
   0C2C C3r7Es0B           2356 	jp	00111$
   0C2F                    2357 00114$:
                           2358 ;demo.c:398: xo+=128;
   0C2F 21r7Fs40           2359 	ld	hl,#_xo
   0C32 7E                 2360 	ld	a,(hl)
   0C33 C6 80              2361 	add	a,#0x80
   0C35 23                 2362 	inc	hl
   0C36 2B                 2363 	dec	hl
   0C37 C5                 2364 	push	bc
   0C38 4F                 2365 	ld	c, a
   0C39 23                 2366 	inc	hl
   0C3A 7E                 2367 	ld	a, (hl)
   0C3B 47                 2368 	ld	b, a
   0C3C 79                 2369 	ld	a, c
   0C3D 2B                 2370 	dec	hl
   0C3E 77                 2371 	ld	(hl), a
   0C3F 78                 2372 	ld	a, b
   0C40 C1                 2373 	pop	bc
   0C41 CE 00              2374 	adc	a,#0x00
   0C43 23                 2375 	inc	hl
   0C44 77                 2376 	ld	(hl),a
                           2377 ;demo.c:399: if (xo >= 256) {
   0C45 3Ar7Fs40           2378 	ld	a,(#_xo+0)
   0C48 D6 00              2379 	sub	a,#0x00
   0C4A 3Ar80s40           2380 	ld	a,(#_xo+1)
   0C4D DE 01              2381 	sbc	a,#0x01
   0C4F FArB6s0C           2382 	jp	M,00106$
                           2383 ;demo.c:400: xo = 0;
   0C52 21r7Fs40           2384 	ld	hl,#_xo + 0
   0C55 36 00              2385 	ld	(hl), #0x00
   0C57 21r80s40           2386 	ld	hl,#_xo + 1
   0C5A 36 00              2387 	ld	(hl), #0x00
                           2388 ;demo.c:401: yo+=53;
   0C5C 21r81s40           2389 	ld	hl,#_yo
   0C5F 7E                 2390 	ld	a,(hl)
   0C60 C6 35              2391 	add	a,#0x35
   0C62 23                 2392 	inc	hl
   0C63 2B                 2393 	dec	hl
   0C64 C5                 2394 	push	bc
   0C65 4F                 2395 	ld	c, a
   0C66 23                 2396 	inc	hl
   0C67 7E                 2397 	ld	a, (hl)
   0C68 47                 2398 	ld	b, a
   0C69 79                 2399 	ld	a, c
   0C6A 2B                 2400 	dec	hl
   0C6B 77                 2401 	ld	(hl), a
   0C6C 78                 2402 	ld	a, b
   0C6D C1                 2403 	pop	bc
   0C6E CE 00              2404 	adc	a,#0x00
   0C70 23                 2405 	inc	hl
   0C71 77                 2406 	ld	(hl),a
                           2407 ;demo.c:402: if (yo >= 212) { yo = 0; po+=256; }
   0C72 3Ar81s40           2408 	ld	a,(#_yo+0)
   0C75 D6 D4              2409 	sub	a,#0xD4
   0C77 3Ar82s40           2410 	ld	a,(#_yo+1)
   0C7A DE 00              2411 	sbc	a,#0x00
   0C7C FAr9Fs0C           2412 	jp	M,00102$
   0C7F 21r81s40           2413 	ld	hl,#_yo + 0
   0C82 36 00              2414 	ld	(hl), #0x00
   0C84 21r82s40           2415 	ld	hl,#_yo + 1
   0C87 36 00              2416 	ld	(hl), #0x00
   0C89 21r83s40           2417 	ld	hl,#_po
   0C8C 7E                 2418 	ld	a,(hl)
   0C8D C6 00              2419 	add	a,#0x00
   0C8F 23                 2420 	inc	hl
   0C90 2B                 2421 	dec	hl
   0C91 C5                 2422 	push	bc
   0C92 4F                 2423 	ld	c, a
   0C93 23                 2424 	inc	hl
   0C94 7E                 2425 	ld	a, (hl)
   0C95 47                 2426 	ld	b, a
   0C96 79                 2427 	ld	a, c
   0C97 2B                 2428 	dec	hl
   0C98 77                 2429 	ld	(hl), a
   0C99 78                 2430 	ld	a, b
   0C9A C1                 2431 	pop	bc
   0C9B CE 01              2432 	adc	a,#0x01
   0C9D 23                 2433 	inc	hl
   0C9E 77                 2434 	ld	(hl),a
   0C9F                    2435 00102$:
                           2436 ;demo.c:403: if (po >= 768) {
   0C9F 3Ar83s40           2437 	ld	a,(#_po+0)
   0CA2 D6 00              2438 	sub	a,#0x00
   0CA4 3Ar84s40           2439 	ld	a,(#_po+1)
   0CA7 DE 03              2440 	sbc	a,#0x03
   0CA9 FArB6s0C           2441 	jp	M,00106$
                           2442 ;demo.c:404: po = 0;
   0CAC 21r83s40           2443 	ld	hl,#_po + 0
   0CAF 36 00              2444 	ld	(hl), #0x00
   0CB1 21r84s40           2445 	ld	hl,#_po + 1
   0CB4 36 00              2446 	ld	(hl), #0x00
   0CB6                    2447 00106$:
                           2448 ;demo.c:409: msx2_palette(15,3+sintab[fffaaa & 255]>>5,3,4);
   0CB6 21r85s40           2449 	ld	hl,#_fffaaa + 0
   0CB9 4E                 2450 	ld	c,(hl)
   0CBA 06 00              2451 	ld	b,#0x00
   0CBC 21r00s00           2452 	ld	hl,#_sintab
   0CBF 09                 2453 	add	hl,bc
   0CC0 7E                 2454 	ld	a,(hl)
   0CC1 4F                 2455 	ld	c,a
   0CC2 17                 2456 	rla	
   0CC3 9F                 2457 	sbc	a,a
   0CC4 47                 2458 	ld	b,a
   0CC5 03                 2459 	inc	bc
   0CC6 03                 2460 	inc	bc
   0CC7 03                 2461 	inc	bc
   0CC8 CB 28              2462 	sra	b
   0CCA CB 19              2463 	rr	c
   0CCC CB 28              2464 	sra	b
   0CCE CB 19              2465 	rr	c
   0CD0 CB 28              2466 	sra	b
   0CD2 CB 19              2467 	rr	c
   0CD4 CB 28              2468 	sra	b
   0CD6 CB 19              2469 	rr	c
   0CD8 CB 28              2470 	sra	b
   0CDA CB 19              2471 	rr	c
   0CDC 21 03 04           2472 	ld	hl,#0x0403
   0CDF E5                 2473 	push	hl
   0CE0 41                 2474 	ld	b,c
   0CE1 0E 0F              2475 	ld	c,#0x0F
   0CE3 C5                 2476 	push	bc
   0CE4 CDr00s00           2477 	call	_msx2_palette
   0CE7 F1                 2478 	pop	af
   0CE8 F1                 2479 	pop	af
                           2480 ;demo.c:410: msx2_palette(3,2+sintab[fffaaa & 255]>>5,0,0);
   0CE9 21r85s40           2481 	ld	hl,#_fffaaa + 0
   0CEC 4E                 2482 	ld	c,(hl)
   0CED 06 00              2483 	ld	b,#0x00
   0CEF 21r00s00           2484 	ld	hl,#_sintab
   0CF2 09                 2485 	add	hl,bc
   0CF3 7E                 2486 	ld	a,(hl)
   0CF4 4F                 2487 	ld	c,a
   0CF5 17                 2488 	rla	
   0CF6 9F                 2489 	sbc	a,a
   0CF7 47                 2490 	ld	b,a
   0CF8 03                 2491 	inc	bc
   0CF9 03                 2492 	inc	bc
   0CFA CB 28              2493 	sra	b
   0CFC CB 19              2494 	rr	c
   0CFE CB 28              2495 	sra	b
   0D00 CB 19              2496 	rr	c
   0D02 CB 28              2497 	sra	b
   0D04 CB 19              2498 	rr	c
   0D06 CB 28              2499 	sra	b
   0D08 CB 19              2500 	rr	c
   0D0A CB 28              2501 	sra	b
   0D0C CB 19              2502 	rr	c
   0D0E 21 00 00           2503 	ld	hl,#0x0000
   0D11 E5                 2504 	push	hl
   0D12 41                 2505 	ld	b,c
   0D13 0E 03              2506 	ld	c,#0x03
   0D15 C5                 2507 	push	bc
   0D16 CDr00s00           2508 	call	_msx2_palette
   0D19 F1                 2509 	pop	af
   0D1A F1                 2510 	pop	af
                           2511 ;demo.c:411: fffaaa++;
   0D1B FD 21r85s40        2512 	ld	iy,#_fffaaa
   0D1F FD 34 00           2513 	inc	0 (iy)
   0D22 20 07              2514 	jr	NZ,00132$
   0D24 FD 21r85s40        2515 	ld	iy,#_fffaaa
   0D28 FD 34 01           2516 	inc	1 (iy)
   0D2B                    2517 00132$:
   0D2B DD F9              2518 	ld	sp,ix
   0D2D DD E1              2519 	pop	ix
   0D2F C9                 2520 	ret
   0D30                    2521 _do_animplay_end::
                           2522 ;demo.c:420: void main() {
                           2523 ;	---------------------------------
                           2524 ; Function main
                           2525 ; ---------------------------------
   0D30                    2526 _main_start::
   0D30                    2527 _main:
                           2528 ;demo.c:421: unsigned char quit=0;
   0D30 0E 00              2529 	ld	c,#0x00
                           2530 ;demo.c:422: int modes = 128; // interlace bit on
   0D32 11 80 00           2531 	ld	de,#0x0080
                           2532 ;demo.c:425: spindown();
   0D35 C5                 2533 	push	bc
   0D36 D5                 2534 	push	de
   0D37 CDr00s00           2535 	call	_spindown
   0D3A D1                 2536 	pop	de
   0D3B C1                 2537 	pop	bc
                           2538 ;demo.c:427: puts("demo init\r\n\r\n");
   0D3C C5                 2539 	push	bc
   0D3D D5                 2540 	push	de
   0D3E 21r56s0E           2541 	ld	hl,#__str_0
   0D41 E5                 2542 	push	hl
   0D42 CDr00s00           2543 	call	_puts
   0D45 F1                 2544 	pop	af
   0D46 D1                 2545 	pop	de
   0D47 C1                 2546 	pop	bc
                           2547 ;demo.c:440: puts("music init...");
   0D48 C5                 2548 	push	bc
   0D49 D5                 2549 	push	de
   0D4A 21r64s0E           2550 	ld	hl,#__str_1
   0D4D E5                 2551 	push	hl
   0D4E CDr00s00           2552 	call	_puts
   0D51 F1                 2553 	pop	af
   0D52 D1                 2554 	pop	de
   0D53 C1                 2555 	pop	bc
                           2556 ;demo.c:442: PLY_SongPtr = (char *)0x0103;
   0D54 21r00s00           2557 	ld	hl,#_PLY_SongPtr + 0
   0D57 36 03              2558 	ld	(hl), #0x03
   0D59 21r01s00           2559 	ld	hl,#_PLY_SongPtr + 1
   0D5C 36 01              2560 	ld	(hl), #0x01
                           2561 ;demo.c:443: PLY_Init();
   0D5E C5                 2562 	push	bc
   0D5F D5                 2563 	push	de
   0D60 CDr00s00           2564 	call	_PLY_Init
   0D63 D1                 2565 	pop	de
   0D64 C1                 2566 	pop	bc
                           2567 ;demo.c:444: puts("done.\n\n");
   0D65 C5                 2568 	push	bc
   0D66 D5                 2569 	push	de
   0D67 21r72s0E           2570 	ld	hl,#__str_2
   0D6A E5                 2571 	push	hl
   0D6B CDr00s00           2572 	call	_puts
   0D6E F1                 2573 	pop	af
   0D6F D1                 2574 	pop	de
   0D70 C1                 2575 	pop	bc
                           2576 ;demo.c:446: if(isvdp2())
   0D71 C5                 2577 	push	bc
   0D72 D5                 2578 	push	de
   0D73 CDr00s00           2579 	call	_isvdp2
   0D76 45                 2580 	ld	b,l
   0D77 D1                 2581 	pop	de
   0D78 78                 2582 	ld	a,b
   0D79 C1                 2583 	pop	bc
   0D7A 47                 2584 	ld	b,a
   0D7B B7                 2585 	or	a,a
   0D7C 28 03              2586 	jr	Z,00102$
                           2587 ;demo.c:448: modes+=2; // pal
   0D7E 11 82 00           2588 	ld	de,#0x0082
   0D81                    2589 00102$:
                           2590 ;demo.c:452: vdp_set_screen5();
   0D81 C5                 2591 	push	bc
   0D82 D5                 2592 	push	de
   0D83 CDr00s00           2593 	call	_vdp_set_screen5
   0D86 D1                 2594 	pop	de
   0D87 C1                 2595 	pop	bc
                           2596 ;demo.c:454: vdp_register(VDP_MODE3,modes); // interlace on, screen mode pal or ntsc
   0D88 43                 2597 	ld	b,e
   0D89 C5                 2598 	push	bc
   0D8A C5                 2599 	push	bc
   0D8B 33                 2600 	inc	sp
   0D8C 3E 09              2601 	ld	a,#0x09
   0D8E F5                 2602 	push	af
   0D8F 33                 2603 	inc	sp
   0D90 CDr00s00           2604 	call	_vdp_register
   0D93 F1                 2605 	pop	af
   0D94 C1                 2606 	pop	bc
                           2607 ;demo.c:456: puts("demo start\r\n");
   0D95 C5                 2608 	push	bc
   0D96 21r7As0E           2609 	ld	hl,#__str_3
   0D99 E5                 2610 	push	hl
   0D9A CDr00s00           2611 	call	_puts
   0D9D F1                 2612 	pop	af
   0D9E C1                 2613 	pop	bc
                           2614 ;demo.c:458: scratch_clear();
   0D9F C5                 2615 	push	bc
   0DA0 CDr97s03           2616 	call	_scratch_clear
   0DA3 C1                 2617 	pop	bc
                           2618 ;demo.c:459: vdp_load_palette(scratch);
   0DA4 C5                 2619 	push	bc
   0DA5 21r80s3F           2620 	ld	hl,#_scratch
   0DA8 E5                 2621 	push	hl
   0DA9 CDr00s00           2622 	call	_vdp_load_palette
   0DAC F1                 2623 	pop	af
   0DAD C1                 2624 	pop	bc
                           2625 ;demo.c:461: vdp_register(VDP_VOFFSET,0);
   0DAE C5                 2626 	push	bc
   0DAF 21 17 00           2627 	ld	hl,#0x0017
   0DB2 E5                 2628 	push	hl
   0DB3 CDr00s00           2629 	call	_vdp_register
   0DB6 F1                 2630 	pop	af
   0DB7 C1                 2631 	pop	bc
                           2632 ;demo.c:462: pal_load("TWISTER PL5",32);
   0DB8 C5                 2633 	push	bc
   0DB9 3E 20              2634 	ld	a,#0x20
   0DBB F5                 2635 	push	af
   0DBC 33                 2636 	inc	sp
   0DBD 21r87s0E           2637 	ld	hl,#__str_4
   0DC0 E5                 2638 	push	hl
   0DC1 CDrAAs03           2639 	call	_pal_load
   0DC4 F1                 2640 	pop	af
   0DC5 33                 2641 	inc	sp
   0DC6 C1                 2642 	pop	bc
                           2643 ;demo.c:463: vdp_load_palette(cur_palette);
   0DC7 C5                 2644 	push	bc
   0DC8 21r00s40           2645 	ld	hl,#_cur_palette
   0DCB E5                 2646 	push	hl
   0DCC CDr00s00           2647 	call	_vdp_load_palette
   0DCF F1                 2648 	pop	af
   0DD0 C1                 2649 	pop	bc
                           2650 ;demo.c:465: memset((uint8_t *) &packbuffer, 0, 3498);
   0DD1 C5                 2651 	push	bc
   0DD2 21 AA 0D           2652 	ld	hl,#0x0DAA
   0DD5 E5                 2653 	push	hl
   0DD6 3E 00              2654 	ld	a,#0x00
   0DD8 F5                 2655 	push	af
   0DD9 33                 2656 	inc	sp
   0DDA 21r00s01           2657 	ld	hl,#_packbuffer
   0DDD E5                 2658 	push	hl
   0DDE CDr00s00           2659 	call	_memset
   0DE1 F1                 2660 	pop	af
   0DE2 F1                 2661 	pop	af
   0DE3 33                 2662 	inc	sp
   0DE4 C1                 2663 	pop	bc
                           2664 ;demo.c:466: raw_load("TWISTER PCK", 3498, packbuffer);
   0DE5 C5                 2665 	push	bc
   0DE6 21r00s01           2666 	ld	hl,#_packbuffer
   0DE9 E5                 2667 	push	hl
   0DEA 21 AA 0D           2668 	ld	hl,#0x0DAA
   0DED E5                 2669 	push	hl
   0DEE 21r93s0E           2670 	ld	hl,#__str_5
   0DF1 E5                 2671 	push	hl
   0DF2 CDr5Es04           2672 	call	_raw_load
   0DF5 F1                 2673 	pop	af
   0DF6 F1                 2674 	pop	af
   0DF7 F1                 2675 	pop	af
   0DF8 C1                 2676 	pop	bc
                           2677 ;demo.c:467: bitbuster(packbuffer,0x8000,VRAM_0); // to page 0
   0DF9 C5                 2678 	push	bc
   0DFA 3E 01              2679 	ld	a,#0x01
   0DFC F5                 2680 	push	af
   0DFD 33                 2681 	inc	sp
   0DFE 21 00 80           2682 	ld	hl,#0x8000
   0E01 E5                 2683 	push	hl
   0E02 21r00s01           2684 	ld	hl,#_packbuffer
   0E05 E5                 2685 	push	hl
   0E06 CDr00s00           2686 	call	_bitbuster
   0E09 F1                 2687 	pop	af
   0E0A F1                 2688 	pop	af
   0E0B 33                 2689 	inc	sp
   0E0C C1                 2690 	pop	bc
                           2691 ;demo.c:497: install_isr(my_isr);
   0E0D C5                 2692 	push	bc
   0E0E 21r2Cs02           2693 	ld	hl,#_my_isr
   0E11 E5                 2694 	push	hl
   0E12 CDr00s00           2695 	call	_install_isr
   0E15 F1                 2696 	pop	af
   0E16 C1                 2697 	pop	bc
                           2698 ;demo.c:520: while (!quit) {
   0E17                    2699 00105$:
   0E17 AF                 2700 	xor	a,a
   0E18 B1                 2701 	or	a,c
   0E19 20 18              2702 	jr	NZ,00107$
                           2703 ;demo.c:524: twister();
   0E1B C5                 2704 	push	bc
   0E1C CDrEEs09           2705 	call	_twister
   0E1F C1                 2706 	pop	bc
                           2707 ;demo.c:535: if(space())
   0E20 C5                 2708 	push	bc
   0E21 21 08 01           2709 	ld	hl,#0x0108
   0E24 E5                 2710 	push	hl
   0E25 CDr00s00           2711 	call	_ispressed
   0E28 F1                 2712 	pop	af
   0E29 7D                 2713 	ld	a,l
   0E2A C1                 2714 	pop	bc
   0E2B 47                 2715 	ld	b,a
   0E2C B7                 2716 	or	a,a
   0E2D 28 E8              2717 	jr	Z,00105$
                           2718 ;demo.c:536: quit=1;
   0E2F 0E 01              2719 	ld	c,#0x01
   0E31 18 E4              2720 	jr	00105$
   0E33                    2721 00107$:
                           2722 ;demo.c:539: waitVB();
   0E33 76                 2723 		halt 
                           2724 ;demo.c:540: uninstall_isr();
   0E34 CDr00s00           2725 	call	_uninstall_isr
                           2726 ;demo.c:541: PLY_Stop();
   0E37 CDr00s00           2727 	call	_PLY_Stop
                           2728 ;demo.c:542: PLY_SendRegisters();
   0E3A CDr00s00           2729 	call	_PLY_SendRegisters
                           2730 ;demo.c:544: screen(0);
   0E3D 3E 00              2731 	ld	a,#0x00
   0E3F F5                 2732 	push	af
   0E40 33                 2733 	inc	sp
   0E41 CDr00s00           2734 	call	_screen
   0E44 33                 2735 	inc	sp
                           2736 ;demo.c:546: puts("demo exit\r\n\r\n");
   0E45 21r9Fs0E           2737 	ld	hl,#__str_6
   0E48 E5                 2738 	push	hl
   0E49 CDr00s00           2739 	call	_puts
   0E4C F1                 2740 	pop	af
                           2741 ;demo.c:548: exit(0);
   0E4D 3E 00              2742 	ld	a,#0x00
   0E4F F5                 2743 	push	af
   0E50 33                 2744 	inc	sp
   0E51 CDr00s00           2745 	call	_exit
   0E54 33                 2746 	inc	sp
   0E55 C9                 2747 	ret
   0E56                    2748 _main_end::
   0E56                    2749 __str_0:
   0E56 64 65 6D 6F 20 69  2750 	.ascii "demo init"
        6E 69 74
   0E5F 0D                 2751 	.db 0x0D
   0E60 0A                 2752 	.db 0x0A
   0E61 0D                 2753 	.db 0x0D
   0E62 0A                 2754 	.db 0x0A
   0E63 00                 2755 	.db 0x00
   0E64                    2756 __str_1:
   0E64 6D 75 73 69 63 20  2757 	.ascii "music init..."
        69 6E 69 74 2E 2E
        2E
   0E71 00                 2758 	.db 0x00
   0E72                    2759 __str_2:
   0E72 64 6F 6E 65 2E     2760 	.ascii "done."
   0E77 0A                 2761 	.db 0x0A
   0E78 0A                 2762 	.db 0x0A
   0E79 00                 2763 	.db 0x00
   0E7A                    2764 __str_3:
   0E7A 64 65 6D 6F 20 73  2765 	.ascii "demo start"
        74 61 72 74
   0E84 0D                 2766 	.db 0x0D
   0E85 0A                 2767 	.db 0x0A
   0E86 00                 2768 	.db 0x00
   0E87                    2769 __str_4:
   0E87 54 57 49 53 54 45  2770 	.ascii "TWISTER PL5"
        52 20 50 4C 35
   0E92 00                 2771 	.db 0x00
   0E93                    2772 __str_5:
   0E93 54 57 49 53 54 45  2773 	.ascii "TWISTER PCK"
        52 20 50 43 4B
   0E9E 00                 2774 	.db 0x00
   0E9F                    2775 __str_6:
   0E9F 64 65 6D 6F 20 65  2776 	.ascii "demo exit"
        78 69 74
   0EA8 0D                 2777 	.db 0x0D
   0EA9 0A                 2778 	.db 0x0A
   0EAA 0D                 2779 	.db 0x0D
   0EAB 0A                 2780 	.db 0x0A
   0EAC 00                 2781 	.db 0x00
                           2782 	.area _CODE
                           2783 	.area _CABS
