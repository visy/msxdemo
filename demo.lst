                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Mar 22 2009) (Mac OS X i386)
                              4 ; This file was generated Fri Feb 23 17:40:03 2018
                              5 ;--------------------------------------------------------
                              6 	.module demo
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _do_animplay
                             14 	.globl _font
                             15 	.globl _drawstr
                             16 	.globl _do_letter
                             17 	.globl _twister
                             18 	.globl _raster_effu
                             19 	.globl _do_blocks
                             20 	.globl _do_ymmm
                             21 	.globl _fadein
                             22 	.globl _raw_load
                             23 	.globl _pause
                             24 	.globl _pal_load
                             25 	.globl _scratch_clear
                             26 	.globl _ge5_load
                             27 	.globl _color_isr
                             28 	.globl _my_isr
                             29 	.globl _isNthBitSet
                             30 	.globl _ly
                             31 	.globl _lx
                             32 	.globl _linenum
                             33 	.globl _flof
                             34 	.globl _btab
                             35 	.globl _bty
                             36 	.globl _btx
                             37 	.globl _bsy
                             38 	.globl _bsx
                             39 	.globl _block_init
                             40 	.globl _cc
                             41 	.globl _yofff
                             42 	.globl _tick
                             43 	.globl _vbicount
                             44 	.globl _block_palette
                             45 	.globl _cur_palette
                             46 	.globl _scratch
                             47 	.globl _packbuffer
                             48 	.globl _sintab
                             49 	.globl _font_w
                             50 	.globl _font_y
                             51 	.globl _font_x
                             52 	.globl _sintabx
                             53 ;--------------------------------------------------------
                             54 ; special function registers
                             55 ;--------------------------------------------------------
                             56 ;--------------------------------------------------------
                             57 ;  ram data
                             58 ;--------------------------------------------------------
                             59 	.area _DATA
   0000                      60 _sintab::
   0000                      61 	.ds 256
   0100                      62 _packbuffer::
   0100                      63 	.ds 16000
   3F80                      64 _scratch::
   3F80                      65 	.ds 128
   4000                      66 _cur_palette::
   4000                      67 	.ds 32
   4020                      68 _block_palette::
   4020                      69 	.ds 32
   4040                      70 _vbicount::
   4040                      71 	.ds 2
   4042                      72 _tick::
   4042                      73 	.ds 2
   4044                      74 _isNthBitSet_mask_1_1:
   4044                      75 	.ds 8
   404C                      76 _yofff::
   404C                      77 	.ds 1
   404D                      78 _cc::
   404D                      79 	.ds 1
   404E                      80 _flipper:
   404E                      81 	.ds 2
   4050                      82 _ymmmf:
   4050                      83 	.ds 2
   4052                      84 _block_init::
   4052                      85 	.ds 1
   4053                      86 _bsx::
   4053                      87 	.ds 2
   4055                      88 _bsy::
   4055                      89 	.ds 2
   4057                      90 _btx::
   4057                      91 	.ds 2
   4059                      92 _bty::
   4059                      93 	.ds 2
   405B                      94 _btab::
   405B                      95 	.ds 32
   407B                      96 _flof::
   407B                      97 	.ds 2
   407D                      98 _linenum::
   407D                      99 	.ds 2
   407F                     100 _lx::
   407F                     101 	.ds 1
   4080                     102 _ly::
   4080                     103 	.ds 1
   4081                     104 _xo:
   4081                     105 	.ds 2
   4083                     106 _yo:
   4083                     107 	.ds 2
   4085                     108 _po:
   4085                     109 	.ds 2
   4087                     110 _fffaaa:
   4087                     111 	.ds 2
                            112 ;--------------------------------------------------------
                            113 ; overlayable items in  ram 
                            114 ;--------------------------------------------------------
                            115 	.area _OVERLAY
                            116 ;--------------------------------------------------------
                            117 ; external initialized ram data
                            118 ;--------------------------------------------------------
                            119 ;--------------------------------------------------------
                            120 ; global & static initialisations
                            121 ;--------------------------------------------------------
                            122 	.area _HOME
                            123 	.area _GSINIT
                            124 	.area _GSFINAL
                            125 	.area _GSINIT
                            126 ;demo.c:47: static unsigned char mask[] = {1, 2, 4, 8, 16, 32, 64, 128};
   0000 21r44s40            127 	ld	hl,#_isNthBitSet_mask_1_1
   0003 CDr00s00            128 	call	__initrleblock
   0006 08                  129 	.db	8
   0007 01 02 04 08 10 20   130 	.db	0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80
        40 80
   000F 00                  131 	.db	0
                            132 ;types.h:27: signed char sintab[256]={
   0010 21r00s00            133 	ld	hl,#_sintab
   0013 CDr00s00            134 	call	__initrleblock
   0016 3B                  135 	.db	59
   0017 00 03 06 09 0C 0F   136 	.db	0x00, 0x03, 0x06, 0x09, 0x0C, 0x0F, 0x12, 0x15
        12 15
   001F 18 1B 1E 21 24 27   137 	.db	0x18, 0x1B, 0x1E, 0x21, 0x24, 0x27, 0x2A, 0x2D
        2A 2D
   0027 30 33 36 39 3B 3E   138 	.db	0x30, 0x33, 0x36, 0x39, 0x3B, 0x3E, 0x41, 0x43
        41 43
   002F 46 49 4B 4E 50 52   139 	.db	0x46, 0x49, 0x4B, 0x4E, 0x50, 0x52, 0x55, 0x57
        55 57
   0037 59 5B 5E 60 62 64   140 	.db	0x59, 0x5B, 0x5E, 0x60, 0x62, 0x64, 0x66, 0x67
        66 67
   003F 69 6B 6C 6E 70 71   141 	.db	0x69, 0x6B, 0x6C, 0x6E, 0x70, 0x71, 0x72, 0x74
        72 74
   0047 75 76 77 78 79 7A   142 	.db	0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7B
        7B 7B
   004F 7C 7D 7D            143 	.db	0x7C, 0x7D, 0x7D
   0052 FB 7E               144 	.db	#-5,#0x7E
   0054 01                  145 	.db	1
   0055 7F                  146 	.db	0x7F
   0056 FB 7E               147 	.db	#-5,#0x7E
   0058 75                  148 	.db	117
   0059 7D 7D 7C 7B 7B 7A   149 	.db	0x7D, 0x7D, 0x7C, 0x7B, 0x7B, 0x7A, 0x79, 0x78
        79 78
   0061 77 76 75 74 72 71   150 	.db	0x77, 0x76, 0x75, 0x74, 0x72, 0x71, 0x70, 0x6E
        70 6E
   0069 6C 6B 69 67 66 64   151 	.db	0x6C, 0x6B, 0x69, 0x67, 0x66, 0x64, 0x62, 0x60
        62 60
   0071 5E 5B 59 57 55 52   152 	.db	0x5E, 0x5B, 0x59, 0x57, 0x55, 0x52, 0x50, 0x4E
        50 4E
   0079 4B 49 46 43 41 3E   153 	.db	0x4B, 0x49, 0x46, 0x43, 0x41, 0x3E, 0x3B, 0x39
        3B 39
   0081 36 33 30 2D 2A 27   154 	.db	0x36, 0x33, 0x30, 0x2D, 0x2A, 0x27, 0x24, 0x21
        24 21
   0089 1E 1B 18 15 12 0F   155 	.db	0x1E, 0x1B, 0x18, 0x15, 0x12, 0x0F, 0x0C, 0x09
        0C 09
   0091 06 03 00 FD FA F7   156 	.db	0x06, 0x03, 0x00, 0xFD, 0xFA, 0xF7, 0xF4, 0xF1
        F4 F1
   0099 EE EB E8 E5 E2 DF   157 	.db	0xEE, 0xEB, 0xE8, 0xE5, 0xE2, 0xDF, 0xDC, 0xD9
        DC D9
   00A1 D6 D3 D0 CD CA C7   158 	.db	0xD6, 0xD3, 0xD0, 0xCD, 0xCA, 0xC7, 0xC5, 0xC2
        C5 C2
   00A9 BF BD BA B7 B5 B2   159 	.db	0xBF, 0xBD, 0xBA, 0xB7, 0xB5, 0xB2, 0xB0, 0xAE
        B0 AE
   00B1 AB A9 A7 A5 A2 A0   160 	.db	0xAB, 0xA9, 0xA7, 0xA5, 0xA2, 0xA0, 0x9E, 0x9C
        9E 9C
   00B9 9A 99 97 95 94 92   161 	.db	0x9A, 0x99, 0x97, 0x95, 0x94, 0x92, 0x90, 0x8F
        90 8F
   00C1 8E 8C 8B 8A 89 88   162 	.db	0x8E, 0x8C, 0x8B, 0x8A, 0x89, 0x88, 0x87, 0x86
        87 86
   00C9 85 85 84 83 83      163 	.db	0x85, 0x85, 0x84, 0x83, 0x83
   00CE FB 82               164 	.db	#-5,#0x82
   00D0 01                  165 	.db	1
   00D1 81                  166 	.db	0x81
   00D2 FB 82               167 	.db	#-5,#0x82
   00D4 3A                  168 	.db	58
   00D5 83 83 84 85 85 86   169 	.db	0x83, 0x83, 0x84, 0x85, 0x85, 0x86, 0x87, 0x88
        87 88
   00DD 89 8A 8B 8C 8E 8F   170 	.db	0x89, 0x8A, 0x8B, 0x8C, 0x8E, 0x8F, 0x90, 0x92
        90 92
   00E5 94 95 97 99 9A 9C   171 	.db	0x94, 0x95, 0x97, 0x99, 0x9A, 0x9C, 0x9E, 0xA0
        9E A0
   00ED A2 A5 A7 A9 AB AE   172 	.db	0xA2, 0xA5, 0xA7, 0xA9, 0xAB, 0xAE, 0xB0, 0xB2
        B0 B2
   00F5 B5 B7 BA BD BF C2   173 	.db	0xB5, 0xB7, 0xBA, 0xBD, 0xBF, 0xC2, 0xC5, 0xC7
        C5 C7
   00FD CA CD D0 D3 D6 D9   174 	.db	0xCA, 0xCD, 0xD0, 0xD3, 0xD6, 0xD9, 0xDC, 0xDF
        DC DF
   0105 E2 E5 E8 EB EE F1   175 	.db	0xE2, 0xE5, 0xE8, 0xEB, 0xEE, 0xF1, 0xF4, 0xF7
        F4 F7
   010D FA FD               176 	.db	0xFA, 0xFD
   010F 00                  177 	.db	0
                            178 ;demo.c:36: uint8_t packbuffer[16000] = {0};
   0110 21r00s01            179 	ld	hl,#_packbuffer
   0113 CDr00s00            180 	call	__initrleblock
   0116 81 00               181 	.db	#-127,#0x00
   0118 81 00               182 	.db	#-127,#0x00
   011A 81 00               183 	.db	#-127,#0x00
   011C 81 00               184 	.db	#-127,#0x00
   011E 81 00               185 	.db	#-127,#0x00
   0120 81 00               186 	.db	#-127,#0x00
   0122 81 00               187 	.db	#-127,#0x00
   0124 81 00               188 	.db	#-127,#0x00
   0126 81 00               189 	.db	#-127,#0x00
   0128 81 00               190 	.db	#-127,#0x00
   012A 81 00               191 	.db	#-127,#0x00
   012C 81 00               192 	.db	#-127,#0x00
   012E 81 00               193 	.db	#-127,#0x00
   0130 81 00               194 	.db	#-127,#0x00
   0132 81 00               195 	.db	#-127,#0x00
   0134 81 00               196 	.db	#-127,#0x00
   0136 81 00               197 	.db	#-127,#0x00
   0138 81 00               198 	.db	#-127,#0x00
   013A 81 00               199 	.db	#-127,#0x00
   013C 81 00               200 	.db	#-127,#0x00
   013E 81 00               201 	.db	#-127,#0x00
   0140 81 00               202 	.db	#-127,#0x00
   0142 81 00               203 	.db	#-127,#0x00
   0144 81 00               204 	.db	#-127,#0x00
   0146 81 00               205 	.db	#-127,#0x00
   0148 81 00               206 	.db	#-127,#0x00
   014A 81 00               207 	.db	#-127,#0x00
   014C 81 00               208 	.db	#-127,#0x00
   014E 81 00               209 	.db	#-127,#0x00
   0150 81 00               210 	.db	#-127,#0x00
   0152 81 00               211 	.db	#-127,#0x00
   0154 81 00               212 	.db	#-127,#0x00
   0156 81 00               213 	.db	#-127,#0x00
   0158 81 00               214 	.db	#-127,#0x00
   015A 81 00               215 	.db	#-127,#0x00
   015C 81 00               216 	.db	#-127,#0x00
   015E 81 00               217 	.db	#-127,#0x00
   0160 81 00               218 	.db	#-127,#0x00
   0162 81 00               219 	.db	#-127,#0x00
   0164 81 00               220 	.db	#-127,#0x00
   0166 81 00               221 	.db	#-127,#0x00
   0168 81 00               222 	.db	#-127,#0x00
   016A 81 00               223 	.db	#-127,#0x00
   016C 81 00               224 	.db	#-127,#0x00
   016E 81 00               225 	.db	#-127,#0x00
   0170 81 00               226 	.db	#-127,#0x00
   0172 81 00               227 	.db	#-127,#0x00
   0174 81 00               228 	.db	#-127,#0x00
   0176 81 00               229 	.db	#-127,#0x00
   0178 81 00               230 	.db	#-127,#0x00
   017A 81 00               231 	.db	#-127,#0x00
   017C 81 00               232 	.db	#-127,#0x00
   017E 81 00               233 	.db	#-127,#0x00
   0180 81 00               234 	.db	#-127,#0x00
   0182 81 00               235 	.db	#-127,#0x00
   0184 81 00               236 	.db	#-127,#0x00
   0186 81 00               237 	.db	#-127,#0x00
   0188 81 00               238 	.db	#-127,#0x00
   018A 81 00               239 	.db	#-127,#0x00
   018C 81 00               240 	.db	#-127,#0x00
   018E 81 00               241 	.db	#-127,#0x00
   0190 81 00               242 	.db	#-127,#0x00
   0192 81 00               243 	.db	#-127,#0x00
   0194 81 00               244 	.db	#-127,#0x00
   0196 81 00               245 	.db	#-127,#0x00
   0198 81 00               246 	.db	#-127,#0x00
   019A 81 00               247 	.db	#-127,#0x00
   019C 81 00               248 	.db	#-127,#0x00
   019E 81 00               249 	.db	#-127,#0x00
   01A0 81 00               250 	.db	#-127,#0x00
   01A2 81 00               251 	.db	#-127,#0x00
   01A4 81 00               252 	.db	#-127,#0x00
   01A6 81 00               253 	.db	#-127,#0x00
   01A8 81 00               254 	.db	#-127,#0x00
   01AA 81 00               255 	.db	#-127,#0x00
   01AC 81 00               256 	.db	#-127,#0x00
   01AE 81 00               257 	.db	#-127,#0x00
   01B0 81 00               258 	.db	#-127,#0x00
   01B2 81 00               259 	.db	#-127,#0x00
   01B4 81 00               260 	.db	#-127,#0x00
   01B6 81 00               261 	.db	#-127,#0x00
   01B8 81 00               262 	.db	#-127,#0x00
   01BA 81 00               263 	.db	#-127,#0x00
   01BC 81 00               264 	.db	#-127,#0x00
   01BE 81 00               265 	.db	#-127,#0x00
   01C0 81 00               266 	.db	#-127,#0x00
   01C2 81 00               267 	.db	#-127,#0x00
   01C4 81 00               268 	.db	#-127,#0x00
   01C6 81 00               269 	.db	#-127,#0x00
   01C8 81 00               270 	.db	#-127,#0x00
   01CA 81 00               271 	.db	#-127,#0x00
   01CC 81 00               272 	.db	#-127,#0x00
   01CE 81 00               273 	.db	#-127,#0x00
   01D0 81 00               274 	.db	#-127,#0x00
   01D2 81 00               275 	.db	#-127,#0x00
   01D4 81 00               276 	.db	#-127,#0x00
   01D6 81 00               277 	.db	#-127,#0x00
   01D8 81 00               278 	.db	#-127,#0x00
   01DA 81 00               279 	.db	#-127,#0x00
   01DC 81 00               280 	.db	#-127,#0x00
   01DE 81 00               281 	.db	#-127,#0x00
   01E0 81 00               282 	.db	#-127,#0x00
   01E2 81 00               283 	.db	#-127,#0x00
   01E4 81 00               284 	.db	#-127,#0x00
   01E6 81 00               285 	.db	#-127,#0x00
   01E8 81 00               286 	.db	#-127,#0x00
   01EA 81 00               287 	.db	#-127,#0x00
   01EC 81 00               288 	.db	#-127,#0x00
   01EE 81 00               289 	.db	#-127,#0x00
   01F0 81 00               290 	.db	#-127,#0x00
   01F2 81 00               291 	.db	#-127,#0x00
   01F4 81 00               292 	.db	#-127,#0x00
   01F6 81 00               293 	.db	#-127,#0x00
   01F8 81 00               294 	.db	#-127,#0x00
   01FA 81 00               295 	.db	#-127,#0x00
   01FC 81 00               296 	.db	#-127,#0x00
   01FE 81 00               297 	.db	#-127,#0x00
   0200 81 00               298 	.db	#-127,#0x00
   0202 81 00               299 	.db	#-127,#0x00
   0204 81 00               300 	.db	#-127,#0x00
   0206 81 00               301 	.db	#-127,#0x00
   0208 81 00               302 	.db	#-127,#0x00
   020A 81 00               303 	.db	#-127,#0x00
   020C 81 00               304 	.db	#-127,#0x00
   020E 81 00               305 	.db	#-127,#0x00
   0210 83 00               306 	.db	#-125,#0x00
   0212 00                  307 	.db	0
                            308 ;demo.c:42: volatile int vbicount=0;
   0213 FD 21r40s40         309 	ld	iy,#_vbicount
   0217 FD 36 00 00         310 	ld	0 (iy),#0x00
   021B FD 21r40s40         311 	ld	iy,#_vbicount
   021F FD 36 01 00         312 	ld	1 (iy),#0x00
                            313 ;demo.c:43: volatile int tick=0;
   0223 FD 21r42s40         314 	ld	iy,#_tick
   0227 FD 36 00 00         315 	ld	0 (iy),#0x00
   022B FD 21r42s40         316 	ld	iy,#_tick
   022F FD 36 01 00         317 	ld	1 (iy),#0x00
                            318 ;demo.c:213: uint8_t yofff = 0;
   0233 FD 21r4Cs40         319 	ld	iy,#_yofff
   0237 FD 36 00 00         320 	ld	0 (iy),#0x00
                            321 ;demo.c:214: uint8_t cc = 0;
   023B FD 21r4Ds40         322 	ld	iy,#_cc
   023F FD 36 00 00         323 	ld	0 (iy),#0x00
                            324 ;demo.c:215: static int flipper = 0;
   0243 FD 21r4Es40         325 	ld	iy,#_flipper
   0247 FD 36 00 00         326 	ld	0 (iy),#0x00
   024B FD 21r4Es40         327 	ld	iy,#_flipper
   024F FD 36 01 00         328 	ld	1 (iy),#0x00
                            329 ;demo.c:216: static int ymmmf = 0;
   0253 FD 21r50s40         330 	ld	iy,#_ymmmf
   0257 FD 36 00 00         331 	ld	0 (iy),#0x00
   025B FD 21r50s40         332 	ld	iy,#_ymmmf
   025F FD 36 01 00         333 	ld	1 (iy),#0x00
                            334 ;demo.c:248: char block_init = 0;
   0263 FD 21r52s40         335 	ld	iy,#_block_init
   0267 FD 36 00 00         336 	ld	0 (iy),#0x00
                            337 ;demo.c:250: int bsx = 0;
   026B FD 21r53s40         338 	ld	iy,#_bsx
   026F FD 36 00 00         339 	ld	0 (iy),#0x00
   0273 FD 21r53s40         340 	ld	iy,#_bsx
   0277 FD 36 01 00         341 	ld	1 (iy),#0x00
                            342 ;demo.c:251: int bsy = 0;
   027B FD 21r55s40         343 	ld	iy,#_bsy
   027F FD 36 00 00         344 	ld	0 (iy),#0x00
   0283 FD 21r55s40         345 	ld	iy,#_bsy
   0287 FD 36 01 00         346 	ld	1 (iy),#0x00
                            347 ;demo.c:252: int btx = 0;
   028B FD 21r57s40         348 	ld	iy,#_btx
   028F FD 36 00 00         349 	ld	0 (iy),#0x00
   0293 FD 21r57s40         350 	ld	iy,#_btx
   0297 FD 36 01 00         351 	ld	1 (iy),#0x00
                            352 ;demo.c:253: int bty = 0;
   029B FD 21r59s40         353 	ld	iy,#_bty
   029F FD 36 00 00         354 	ld	0 (iy),#0x00
   02A3 FD 21r59s40         355 	ld	iy,#_bty
   02A7 FD 36 01 00         356 	ld	1 (iy),#0x00
                            357 ;demo.c:255: int btab[16] = {0};
   02AB 21r5Bs40            358 	ld	hl,#_btab
   02AE CDr00s00            359 	call	__initrleblock
   02B1 E0 00               360 	.db	#-32,#0x00
   02B3 00                  361 	.db	0
                            362 ;demo.c:257: int flof = 0;
   02B4 FD 21r7Bs40         363 	ld	iy,#_flof
   02B8 FD 36 00 00         364 	ld	0 (iy),#0x00
   02BC FD 21r7Bs40         365 	ld	iy,#_flof
   02C0 FD 36 01 00         366 	ld	1 (iy),#0x00
                            367 ;demo.c:307: int linenum = 0;
   02C4 FD 21r7Ds40         368 	ld	iy,#_linenum
   02C8 FD 36 00 00         369 	ld	0 (iy),#0x00
   02CC FD 21r7Ds40         370 	ld	iy,#_linenum
   02D0 FD 36 01 00         371 	ld	1 (iy),#0x00
                            372 ;demo.c:381: uint8_t lx = 0;
   02D4 FD 21r7Fs40         373 	ld	iy,#_lx
   02D8 FD 36 00 00         374 	ld	0 (iy),#0x00
                            375 ;demo.c:382: uint8_t ly = 0;
   02DC FD 21r80s40         376 	ld	iy,#_ly
   02E0 FD 36 00 00         377 	ld	0 (iy),#0x00
                            378 ;demo.c:422: static int xo = 0;
   02E4 FD 21r81s40         379 	ld	iy,#_xo
   02E8 FD 36 00 00         380 	ld	0 (iy),#0x00
   02EC FD 21r81s40         381 	ld	iy,#_xo
   02F0 FD 36 01 00         382 	ld	1 (iy),#0x00
                            383 ;demo.c:423: static int yo = 0;
   02F4 FD 21r83s40         384 	ld	iy,#_yo
   02F8 FD 36 00 00         385 	ld	0 (iy),#0x00
   02FC FD 21r83s40         386 	ld	iy,#_yo
   0300 FD 36 01 00         387 	ld	1 (iy),#0x00
                            388 ;demo.c:424: static int po = 0;
   0304 FD 21r85s40         389 	ld	iy,#_po
   0308 FD 36 00 00         390 	ld	0 (iy),#0x00
   030C FD 21r85s40         391 	ld	iy,#_po
   0310 FD 36 01 00         392 	ld	1 (iy),#0x00
                            393 ;demo.c:425: static int fffaaa = 0;
   0314 FD 21r87s40         394 	ld	iy,#_fffaaa
   0318 FD 36 00 00         395 	ld	0 (iy),#0x00
   031C FD 21r87s40         396 	ld	iy,#_fffaaa
   0320 FD 36 01 00         397 	ld	1 (iy),#0x00
                            398 ;--------------------------------------------------------
                            399 ; Home
                            400 ;--------------------------------------------------------
                            401 	.area _HOME
                            402 	.area _HOME
                            403 ;--------------------------------------------------------
                            404 ; code
                            405 ;--------------------------------------------------------
                            406 	.area _CODE
                            407 ;demo.c:46: int isNthBitSet (unsigned char c, int n) {
                            408 ;	---------------------------------
                            409 ; Function isNthBitSet
                            410 ; ---------------------------------
   0000                     411 _isNthBitSet_start::
   0000                     412 _isNthBitSet:
   0000 DD E5               413 	push	ix
   0002 DD 21 00 00         414 	ld	ix,#0
   0006 DD 39               415 	add	ix,sp
                            416 ;demo.c:48: return ((c & mask[n]) != 0);
   0008 3Er44               417 	ld	a,#<_isNthBitSet_mask_1_1
   000A DD 86 05            418 	add	a,5 (ix)
   000D 4F                  419 	ld	c,a
   000E 3Es40               420 	ld	a,#>_isNthBitSet_mask_1_1
   0010 DD 8E 06            421 	adc	a,6 (ix)
   0013 47                  422 	ld	b,a
   0014 0A                  423 	ld	a,(bc)
   0015 DD A6 04            424 	and	a,4 (ix)
   0018 20 04               425 	jr	NZ,00103$
   001A 3E 01               426 	ld	a,#0x01
   001C 18 01               427 	jr	00104$
   001E                     428 00103$:
   001E AF                  429 	xor	a,a
   001F                     430 00104$:
   001F B7                  431 	or	a,a
   0020 D6 01               432 	sub	a,#0x01
   0022 3E 00               433 	ld	a,#0x00
   0024 17                  434 	rla
   0025 4F                  435 	ld	c,a
   0026 69                  436 	ld	l,c
   0027 26 00               437 	ld	h,#0x00
   0029 DD E1               438 	pop	ix
   002B C9                  439 	ret
   002C                     440 _isNthBitSet_end::
   002C                     441 _sintabx:
   002C 78 00               442 	.dw #0x0078
   002E 7A 00               443 	.dw #0x007A
   0030 7D 00               444 	.dw #0x007D
   0032 80 00               445 	.dw #0x0080
   0034 83 00               446 	.dw #0x0083
   0036 86 00               447 	.dw #0x0086
   0038 89 00               448 	.dw #0x0089
   003A 8C 00               449 	.dw #0x008C
   003C 8F 00               450 	.dw #0x008F
   003E 92 00               451 	.dw #0x0092
   0040 95 00               452 	.dw #0x0095
   0042 98 00               453 	.dw #0x0098
   0044 9A 00               454 	.dw #0x009A
   0046 9D 00               455 	.dw #0x009D
   0048 A0 00               456 	.dw #0x00A0
   004A A3 00               457 	.dw #0x00A3
   004C A5 00               458 	.dw #0x00A5
   004E A8 00               459 	.dw #0x00A8
   0050 AB 00               460 	.dw #0x00AB
   0052 AD 00               461 	.dw #0x00AD
   0054 B0 00               462 	.dw #0x00B0
   0056 B3 00               463 	.dw #0x00B3
   0058 B5 00               464 	.dw #0x00B5
   005A B8 00               465 	.dw #0x00B8
   005C BA 00               466 	.dw #0x00BA
   005E BD 00               467 	.dw #0x00BD
   0060 BF 00               468 	.dw #0x00BF
   0062 C1 00               469 	.dw #0x00C1
   0064 C4 00               470 	.dw #0x00C4
   0066 C6 00               471 	.dw #0x00C6
   0068 C8 00               472 	.dw #0x00C8
   006A CA 00               473 	.dw #0x00CA
   006C CC 00               474 	.dw #0x00CC
   006E CE 00               475 	.dw #0x00CE
   0070 D0 00               476 	.dw #0x00D0
   0072 D2 00               477 	.dw #0x00D2
   0074 D4 00               478 	.dw #0x00D4
   0076 D6 00               479 	.dw #0x00D6
   0078 D8 00               480 	.dw #0x00D8
   007A DA 00               481 	.dw #0x00DA
   007C DB 00               482 	.dw #0x00DB
   007E DD 00               483 	.dw #0x00DD
   0080 DE 00               484 	.dw #0x00DE
   0082 E0 00               485 	.dw #0x00E0
   0084 E1 00               486 	.dw #0x00E1
   0086 E3 00               487 	.dw #0x00E3
   0088 E4 00               488 	.dw #0x00E4
   008A E5 00               489 	.dw #0x00E5
   008C E6 00               490 	.dw #0x00E6
   008E E7 00               491 	.dw #0x00E7
   0090 E8 00               492 	.dw #0x00E8
   0092 E9 00               493 	.dw #0x00E9
   0094 EA 00               494 	.dw #0x00EA
   0096 EB 00               495 	.dw #0x00EB
   0098 EC 00               496 	.dw #0x00EC
   009A ED 00               497 	.dw #0x00ED
   009C ED 00               498 	.dw #0x00ED
   009E EE 00               499 	.dw #0x00EE
   00A0 EE 00               500 	.dw #0x00EE
   00A2 EF 00               501 	.dw #0x00EF
   00A4 EF 00               502 	.dw #0x00EF
   00A6 EF 00               503 	.dw #0x00EF
   00A8 EF 00               504 	.dw #0x00EF
   00AA EF 00               505 	.dw #0x00EF
   00AC F0 00               506 	.dw #0x00F0
   00AE EF 00               507 	.dw #0x00EF
   00B0 EF 00               508 	.dw #0x00EF
   00B2 EF 00               509 	.dw #0x00EF
   00B4 EF 00               510 	.dw #0x00EF
   00B6 EF 00               511 	.dw #0x00EF
   00B8 EE 00               512 	.dw #0x00EE
   00BA EE 00               513 	.dw #0x00EE
   00BC ED 00               514 	.dw #0x00ED
   00BE ED 00               515 	.dw #0x00ED
   00C0 EC 00               516 	.dw #0x00EC
   00C2 EB 00               517 	.dw #0x00EB
   00C4 EA 00               518 	.dw #0x00EA
   00C6 E9 00               519 	.dw #0x00E9
   00C8 E8 00               520 	.dw #0x00E8
   00CA E7 00               521 	.dw #0x00E7
   00CC E6 00               522 	.dw #0x00E6
   00CE E5 00               523 	.dw #0x00E5
   00D0 E4 00               524 	.dw #0x00E4
   00D2 E3 00               525 	.dw #0x00E3
   00D4 E1 00               526 	.dw #0x00E1
   00D6 E0 00               527 	.dw #0x00E0
   00D8 DE 00               528 	.dw #0x00DE
   00DA DD 00               529 	.dw #0x00DD
   00DC DB 00               530 	.dw #0x00DB
   00DE DA 00               531 	.dw #0x00DA
   00E0 D8 00               532 	.dw #0x00D8
   00E2 D6 00               533 	.dw #0x00D6
   00E4 D4 00               534 	.dw #0x00D4
   00E6 D2 00               535 	.dw #0x00D2
   00E8 D0 00               536 	.dw #0x00D0
   00EA CE 00               537 	.dw #0x00CE
   00EC CC 00               538 	.dw #0x00CC
   00EE CA 00               539 	.dw #0x00CA
   00F0 C8 00               540 	.dw #0x00C8
   00F2 C6 00               541 	.dw #0x00C6
   00F4 C4 00               542 	.dw #0x00C4
   00F6 C1 00               543 	.dw #0x00C1
   00F8 BF 00               544 	.dw #0x00BF
   00FA BD 00               545 	.dw #0x00BD
   00FC BA 00               546 	.dw #0x00BA
   00FE B8 00               547 	.dw #0x00B8
   0100 B5 00               548 	.dw #0x00B5
   0102 B3 00               549 	.dw #0x00B3
   0104 B0 00               550 	.dw #0x00B0
   0106 AD 00               551 	.dw #0x00AD
   0108 AB 00               552 	.dw #0x00AB
   010A A8 00               553 	.dw #0x00A8
   010C A5 00               554 	.dw #0x00A5
   010E A3 00               555 	.dw #0x00A3
   0110 A0 00               556 	.dw #0x00A0
   0112 9D 00               557 	.dw #0x009D
   0114 9A 00               558 	.dw #0x009A
   0116 98 00               559 	.dw #0x0098
   0118 95 00               560 	.dw #0x0095
   011A 92 00               561 	.dw #0x0092
   011C 8F 00               562 	.dw #0x008F
   011E 8C 00               563 	.dw #0x008C
   0120 89 00               564 	.dw #0x0089
   0122 86 00               565 	.dw #0x0086
   0124 83 00               566 	.dw #0x0083
   0126 80 00               567 	.dw #0x0080
   0128 7D 00               568 	.dw #0x007D
   012A 7A 00               569 	.dw #0x007A
   012C 78 00               570 	.dw #0x0078
   012E 75 00               571 	.dw #0x0075
   0130 72 00               572 	.dw #0x0072
   0132 6F 00               573 	.dw #0x006F
   0134 6C 00               574 	.dw #0x006C
   0136 69 00               575 	.dw #0x0069
   0138 66 00               576 	.dw #0x0066
   013A 63 00               577 	.dw #0x0063
   013C 60 00               578 	.dw #0x0060
   013E 5D 00               579 	.dw #0x005D
   0140 5A 00               580 	.dw #0x005A
   0142 57 00               581 	.dw #0x0057
   0144 55 00               582 	.dw #0x0055
   0146 52 00               583 	.dw #0x0052
   0148 4F 00               584 	.dw #0x004F
   014A 4C 00               585 	.dw #0x004C
   014C 4A 00               586 	.dw #0x004A
   014E 47 00               587 	.dw #0x0047
   0150 44 00               588 	.dw #0x0044
   0152 42 00               589 	.dw #0x0042
   0154 3F 00               590 	.dw #0x003F
   0156 3C 00               591 	.dw #0x003C
   0158 3A 00               592 	.dw #0x003A
   015A 37 00               593 	.dw #0x0037
   015C 35 00               594 	.dw #0x0035
   015E 32 00               595 	.dw #0x0032
   0160 30 00               596 	.dw #0x0030
   0162 2E 00               597 	.dw #0x002E
   0164 2B 00               598 	.dw #0x002B
   0166 29 00               599 	.dw #0x0029
   0168 27 00               600 	.dw #0x0027
   016A 25 00               601 	.dw #0x0025
   016C 23 00               602 	.dw #0x0023
   016E 21 00               603 	.dw #0x0021
   0170 1F 00               604 	.dw #0x001F
   0172 1D 00               605 	.dw #0x001D
   0174 1B 00               606 	.dw #0x001B
   0176 19 00               607 	.dw #0x0019
   0178 17 00               608 	.dw #0x0017
   017A 15 00               609 	.dw #0x0015
   017C 14 00               610 	.dw #0x0014
   017E 12 00               611 	.dw #0x0012
   0180 11 00               612 	.dw #0x0011
   0182 0F 00               613 	.dw #0x000F
   0184 0E 00               614 	.dw #0x000E
   0186 0C 00               615 	.dw #0x000C
   0188 0B 00               616 	.dw #0x000B
   018A 0A 00               617 	.dw #0x000A
   018C 09 00               618 	.dw #0x0009
   018E 08 00               619 	.dw #0x0008
   0190 07 00               620 	.dw #0x0007
   0192 06 00               621 	.dw #0x0006
   0194 05 00               622 	.dw #0x0005
   0196 04 00               623 	.dw #0x0004
   0198 03 00               624 	.dw #0x0003
   019A 02 00               625 	.dw #0x0002
   019C 02 00               626 	.dw #0x0002
   019E 01 00               627 	.dw #0x0001
   01A0 01 00               628 	.dw #0x0001
   01A2 00 00               629 	.dw #0x0000
   01A4 00 00               630 	.dw #0x0000
   01A6 00 00               631 	.dw #0x0000
   01A8 00 00               632 	.dw #0x0000
   01AA 00 00               633 	.dw #0x0000
   01AC 00 00               634 	.dw #0x0000
   01AE 00 00               635 	.dw #0x0000
   01B0 00 00               636 	.dw #0x0000
   01B2 00 00               637 	.dw #0x0000
   01B4 00 00               638 	.dw #0x0000
   01B6 00 00               639 	.dw #0x0000
   01B8 01 00               640 	.dw #0x0001
   01BA 01 00               641 	.dw #0x0001
   01BC 02 00               642 	.dw #0x0002
   01BE 02 00               643 	.dw #0x0002
   01C0 03 00               644 	.dw #0x0003
   01C2 04 00               645 	.dw #0x0004
   01C4 05 00               646 	.dw #0x0005
   01C6 06 00               647 	.dw #0x0006
   01C8 07 00               648 	.dw #0x0007
   01CA 08 00               649 	.dw #0x0008
   01CC 09 00               650 	.dw #0x0009
   01CE 0A 00               651 	.dw #0x000A
   01D0 0B 00               652 	.dw #0x000B
   01D2 0C 00               653 	.dw #0x000C
   01D4 0E 00               654 	.dw #0x000E
   01D6 0F 00               655 	.dw #0x000F
   01D8 11 00               656 	.dw #0x0011
   01DA 12 00               657 	.dw #0x0012
   01DC 14 00               658 	.dw #0x0014
   01DE 15 00               659 	.dw #0x0015
   01E0 17 00               660 	.dw #0x0017
   01E2 19 00               661 	.dw #0x0019
   01E4 1B 00               662 	.dw #0x001B
   01E6 1D 00               663 	.dw #0x001D
   01E8 1F 00               664 	.dw #0x001F
   01EA 21 00               665 	.dw #0x0021
   01EC 23 00               666 	.dw #0x0023
   01EE 25 00               667 	.dw #0x0025
   01F0 27 00               668 	.dw #0x0027
   01F2 29 00               669 	.dw #0x0029
   01F4 2B 00               670 	.dw #0x002B
   01F6 2E 00               671 	.dw #0x002E
   01F8 30 00               672 	.dw #0x0030
   01FA 32 00               673 	.dw #0x0032
   01FC 35 00               674 	.dw #0x0035
   01FE 37 00               675 	.dw #0x0037
   0200 3A 00               676 	.dw #0x003A
   0202 3C 00               677 	.dw #0x003C
   0204 3F 00               678 	.dw #0x003F
   0206 42 00               679 	.dw #0x0042
   0208 44 00               680 	.dw #0x0044
   020A 47 00               681 	.dw #0x0047
   020C 4A 00               682 	.dw #0x004A
   020E 4C 00               683 	.dw #0x004C
   0210 4F 00               684 	.dw #0x004F
   0212 52 00               685 	.dw #0x0052
   0214 55 00               686 	.dw #0x0055
   0216 57 00               687 	.dw #0x0057
   0218 5A 00               688 	.dw #0x005A
   021A 5D 00               689 	.dw #0x005D
   021C 60 00               690 	.dw #0x0060
   021E 63 00               691 	.dw #0x0063
   0220 66 00               692 	.dw #0x0066
   0222 69 00               693 	.dw #0x0069
   0224 6C 00               694 	.dw #0x006C
   0226 6F 00               695 	.dw #0x006F
   0228 72 00               696 	.dw #0x0072
   022A 75 00               697 	.dw #0x0075
                            698 ;demo.c:55: void my_isr(void) interrupt
                            699 ;	---------------------------------
                            700 ; Function my_isr
                            701 ; ---------------------------------
   022C                     702 _my_isr_start::
   022C                     703 _my_isr:
   022C F5                  704 	push	af
   022D C5                  705 	push	bc
   022E D5                  706 	push	de
   022F E5                  707 	push	hl
   0230 FD E5               708 	push	iy
                            709 ;demo.c:57: DI;
   0232 F3                  710 		di 
                            711 ;demo.c:59: READ_VDP_STATUS;
   0233 DB 99               712 		in a,(#0x99) 
                            713 ;demo.c:61: PLY_Play();
   0235 CDr00s00            714 	call	_PLY_Play
                            715 ;demo.c:62: PLY_SendRegisters();
   0238 CDr00s00            716 	call	_PLY_SendRegisters
                            717 ;demo.c:64: vbicount+=2;
   023B 21r40s40            718 	ld	hl,#_vbicount
   023E 7E                  719 	ld	a,(hl)
   023F C6 02               720 	add	a,#0x02
   0241 23                  721 	inc	hl
   0242 2B                  722 	dec	hl
   0243 C5                  723 	push	bc
   0244 4F                  724 	ld	c, a
   0245 23                  725 	inc	hl
   0246 7E                  726 	ld	a, (hl)
   0247 47                  727 	ld	b, a
   0248 79                  728 	ld	a, c
   0249 2B                  729 	dec	hl
   024A 77                  730 	ld	(hl), a
   024B 78                  731 	ld	a, b
   024C C1                  732 	pop	bc
   024D CE 00               733 	adc	a,#0x00
   024F 23                  734 	inc	hl
   0250 77                  735 	ld	(hl),a
                            736 ;demo.c:65: tick++;
   0251 FD 21r42s40         737 	ld	iy,#_tick
   0255 FD 34 00            738 	inc	0 (iy)
   0258 20 07               739 	jr	NZ,00103$
   025A FD 21r42s40         740 	ld	iy,#_tick
   025E FD 34 01            741 	inc	1 (iy)
   0261                     742 00103$:
                            743 ;demo.c:67: EI;
   0261 FB                  744 		ei 
   0262 FD E1               745 	pop	iy
   0264 E1                  746 	pop	hl
   0265 D1                  747 	pop	de
   0266 C1                  748 	pop	bc
   0267 F1                  749 	pop	af
   0268 ED 4D               750 	reti
   026A                     751 _my_isr_end::
                            752 ;demo.c:70: void color_isr(void) interrupt
                            753 ;	---------------------------------
                            754 ; Function color_isr
                            755 ; ---------------------------------
   026A                     756 _color_isr_start::
   026A                     757 _color_isr:
   026A F5                  758 	push	af
   026B C5                  759 	push	bc
   026C D5                  760 	push	de
   026D E5                  761 	push	hl
   026E FD E5               762 	push	iy
                            763 ;demo.c:72: DI;
   0270 F3                  764 		di 
                            765 ;demo.c:74: if(isNthBitSet(vdp2_status(1),0)) {
   0271 3E 01               766 	ld	a,#0x01
   0273 F5                  767 	push	af
   0274 33                  768 	inc	sp
   0275 CDr00s00            769 	call	_vdp2_status
   0278 33                  770 	inc	sp
   0279 4D                  771 	ld	c,l
   027A 21 00 00            772 	ld	hl,#0x0000
   027D E5                  773 	push	hl
   027E 79                  774 	ld	a,c
   027F F5                  775 	push	af
   0280 33                  776 	inc	sp
   0281 CDr00s00            777 	call	_isNthBitSet
   0284 F1                  778 	pop	af
   0285 33                  779 	inc	sp
   0286 44                  780 	ld	b,h
   0287 4D                  781 	ld	c,l
   0288 79                  782 	ld	a,c
   0289 B0                  783 	or	a,b
   028A 28 19               784 	jr	Z,00102$
                            785 ;demo.c:75: vdp_register(VDP_VOFFSET,sintab[vbicount & 255]);
   028C 21r40s40            786 	ld	hl,#_vbicount + 0
   028F 4E                  787 	ld	c,(hl)
   0290 06 00               788 	ld	b,#0x00
   0292 21r00s00            789 	ld	hl,#_sintab
   0295 09                  790 	add	hl,bc
   0296 7E                  791 	ld	a,(hl)
   0297 F5                  792 	push	af
   0298 33                  793 	inc	sp
   0299 3E 17               794 	ld	a,#0x17
   029B F5                  795 	push	af
   029C 33                  796 	inc	sp
   029D CDr00s00            797 	call	_vdp_register
   02A0 F1                  798 	pop	af
                            799 ;demo.c:76: READ_VDP_STATUS;
   02A1 DB 99               800 		in a,(#0x99) 
   02A3 18 18               801 	jr	00103$
   02A5                     802 00102$:
                            803 ;demo.c:79: READ_VDP_STATUS;
   02A5 DB 99               804 		in a,(#0x99) 
                            805 ;demo.c:80: vbicount++;
   02A7 FD 21r40s40         806 	ld	iy,#_vbicount
   02AB FD 34 00            807 	inc	0 (iy)
   02AE 20 07               808 	jr	NZ,00107$
   02B0 FD 21r40s40         809 	ld	iy,#_vbicount
   02B4 FD 34 01            810 	inc	1 (iy)
   02B7                     811 00107$:
                            812 ;demo.c:83: PLY_Play();
   02B7 CDr00s00            813 	call	_PLY_Play
                            814 ;demo.c:84: PLY_SendRegisters();
   02BA CDr00s00            815 	call	_PLY_SendRegisters
   02BD                     816 00103$:
                            817 ;demo.c:87: EI;
   02BD FB                  818 		ei 
   02BE FD E1               819 	pop	iy
   02C0 E1                  820 	pop	hl
   02C1 D1                  821 	pop	de
   02C2 C1                  822 	pop	bc
   02C3 F1                  823 	pop	af
   02C4 ED 4D               824 	reti
   02C6                     825 _color_isr_end::
                            826 ;demo.c:94: uint8_t ge5_load(char *file_name, uint8_t vramh, uint16_t vraml) {
                            827 ;	---------------------------------
                            828 ; Function ge5_load
                            829 ; ---------------------------------
   02C6                     830 _ge5_load_start::
   02C6                     831 _ge5_load:
   02C6 DD E5               832 	push	ix
   02C8 DD 21 00 00         833 	ld	ix,#0
   02CC DD 39               834 	add	ix,sp
   02CE 21 D2 FF            835 	ld	hl,#-46
   02D1 39                  836 	add	hl,sp
   02D2 F9                  837 	ld	sp,hl
                            838 ;demo.c:98: memset((uint8_t *) &f, 0, sizeof(fcb));
   02D3 21 00 00            839 	ld	hl,#0x0000
   02D6 39                  840 	add	hl,sp
   02D7 4D                  841 	ld	c,l
   02D8 44                  842 	ld	b,h
   02D9 21 2E 00            843 	ld	hl,#0x002E
   02DC E5                  844 	push	hl
   02DD 3E 00               845 	ld	a,#0x00
   02DF F5                  846 	push	af
   02E0 33                  847 	inc	sp
   02E1 C5                  848 	push	bc
   02E2 CDr00s00            849 	call	_memset
   02E5 F1                  850 	pop	af
   02E6 F1                  851 	pop	af
   02E7 33                  852 	inc	sp
                            853 ;demo.c:100: f.record_size = 128;
   02E8 21 00 00            854 	ld	hl,#0x0000
   02EB 39                  855 	add	hl,sp
   02EC 4D                  856 	ld	c,l
   02ED 44                  857 	ld	b,h
   02EE 21 0F 00            858 	ld	hl,#0x000F
   02F1 09                  859 	add	hl,bc
   02F2 EB                  860 	ex	de,hl
   02F3 3E 80               861 	ld	a,#0x80
   02F5 12                  862 	ld	(de),a
                            863 ;demo.c:101: f.drive = 0;
   02F6 3E 00               864 	ld	a,#0x00
   02F8 02                  865 	ld	(bc),a
                            866 ;demo.c:103: memcpy(f.name, file_name, 11);
   02F9 DD 5E 04            867 	ld	e,4 (ix)
   02FC DD 56 05            868 	ld	d,5 (ix)
   02FF 03                  869 	inc	bc
   0300 21 0B 00            870 	ld	hl,#0x000B
   0303 E5                  871 	push	hl
   0304 D5                  872 	push	de
   0305 C5                  873 	push	bc
   0306 CDr00s00            874 	call	_memcpy
   0309 F1                  875 	pop	af
   030A F1                  876 	pop	af
   030B F1                  877 	pop	af
                            878 ;demo.c:105: if (open(&f) != 0) return 0;
   030C 21 00 00            879 	ld	hl,#0x0000
   030F 39                  880 	add	hl,sp
   0310 E5                  881 	push	hl
   0311 CDr00s00            882 	call	_open
   0314 F1                  883 	pop	af
   0315 AF                  884 	xor	a,a
   0316 B5                  885 	or	a,l
   0317 28 05               886 	jr	Z,00102$
   0319 2E 00               887 	ld	l,#0x00
   031B C3r92s03            888 	jp	00114$
   031E                     889 00102$:
                            890 ;demo.c:106: vdp_set_write_address(vramh, vraml);
   031E DD 6E 07            891 	ld	l,7 (ix)
   0321 DD 66 08            892 	ld	h,8 (ix)
   0324 E5                  893 	push	hl
   0325 DD 7E 06            894 	ld	a,6 (ix)
   0328 F5                  895 	push	af
   0329 33                  896 	inc	sp
   032A CDr00s00            897 	call	_vdp_set_write_address
   032D F1                  898 	pop	af
   032E 33                  899 	inc	sp
                            900 ;demo.c:108: for (i = 0; i < 213; i++) {
   032F 0E 00               901 	ld	c,#0x00
   0331                     902 00110$:
   0331 79                  903 	ld	a,c
   0332 D6 D5               904 	sub	a,#0xD5
   0334 D2r87s03            905 	jp	NC,00113$
                            906 ;demo.c:109: if (block_set_data_ptr(scratch) != 0) return 0;
   0337 C5                  907 	push	bc
   0338 21r80s3F            908 	ld	hl,#_scratch
   033B E5                  909 	push	hl
   033C CDr00s00            910 	call	_block_set_data_ptr
   033F F1                  911 	pop	af
   0340 7D                  912 	ld	a,l
   0341 C1                  913 	pop	bc
   0342 47                  914 	ld	b,a
   0343 B7                  915 	or	a,a
   0344 28 05               916 	jr	Z,00104$
   0346 2E 00               917 	ld	l,#0x00
   0348 C3r92s03            918 	jp	00114$
   034B                     919 00104$:
                            920 ;demo.c:110: if (block_read(&f) != 0) return 0;
   034B 21 00 00            921 	ld	hl,#0x0000
   034E 39                  922 	add	hl,sp
   034F C5                  923 	push	bc
   0350 E5                  924 	push	hl
   0351 CDr00s00            925 	call	_block_read
   0354 F1                  926 	pop	af
   0355 7D                  927 	ld	a,l
   0356 C1                  928 	pop	bc
   0357 47                  929 	ld	b,a
   0358 B7                  930 	or	a,a
   0359 28 04               931 	jr	Z,00106$
   035B 2E 00               932 	ld	l,#0x00
   035D 18 33               933 	jr	00114$
   035F                     934 00106$:
                            935 ;demo.c:112: if (i == 0) vdp_load_screen(scratch + 7, 121);   // to skip GE5 header
   035F AF                  936 	xor	a,a
   0360 B1                  937 	or	a,c
   0361 20 11               938 	jr	NZ,00108$
   0363 11r87s3F            939 	ld	de,#_scratch + 7
   0366 C5                  940 	push	bc
   0367 3E 79               941 	ld	a,#0x79
   0369 F5                  942 	push	af
   036A 33                  943 	inc	sp
   036B D5                  944 	push	de
   036C CDr00s00            945 	call	_vdp_load_screen
   036F F1                  946 	pop	af
   0370 33                  947 	inc	sp
   0371 C1                  948 	pop	bc
   0372 18 0F               949 	jr	00112$
   0374                     950 00108$:
                            951 ;demo.c:113: else vdp_load_screen(scratch, 128);
   0374 C5                  952 	push	bc
   0375 3E 80               953 	ld	a,#0x80
   0377 F5                  954 	push	af
   0378 33                  955 	inc	sp
   0379 21r80s3F            956 	ld	hl,#_scratch
   037C E5                  957 	push	hl
   037D CDr00s00            958 	call	_vdp_load_screen
   0380 F1                  959 	pop	af
   0381 33                  960 	inc	sp
   0382 C1                  961 	pop	bc
   0383                     962 00112$:
                            963 ;demo.c:108: for (i = 0; i < 213; i++) {
   0383 0C                  964 	inc	c
   0384 C3r31s03            965 	jp	00110$
   0387                     966 00113$:
                            967 ;demo.c:116: close(&f);
   0387 21 00 00            968 	ld	hl,#0x0000
   038A 39                  969 	add	hl,sp
   038B E5                  970 	push	hl
   038C CDr00s00            971 	call	_close
   038F F1                  972 	pop	af
                            973 ;demo.c:118: return 1;
   0390 2E 01               974 	ld	l,#0x01
   0392                     975 00114$:
   0392 DD F9               976 	ld	sp,ix
   0394 DD E1               977 	pop	ix
   0396 C9                  978 	ret
   0397                     979 _ge5_load_end::
                            980 ;demo.c:121: void scratch_clear() {
                            981 ;	---------------------------------
                            982 ; Function scratch_clear
                            983 ; ---------------------------------
   0397                     984 _scratch_clear_start::
   0397                     985 _scratch_clear:
                            986 ;demo.c:122: memset((uint8_t *) &scratch, 0, 128);
   0397 21 80 00            987 	ld	hl,#0x0080
   039A E5                  988 	push	hl
   039B 3E 00               989 	ld	a,#0x00
   039D F5                  990 	push	af
   039E 33                  991 	inc	sp
   039F 21r80s3F            992 	ld	hl,#_scratch
   03A2 E5                  993 	push	hl
   03A3 CDr00s00            994 	call	_memset
   03A6 F1                  995 	pop	af
   03A7 F1                  996 	pop	af
   03A8 33                  997 	inc	sp
   03A9 C9                  998 	ret
   03AA                     999 _scratch_clear_end::
                           1000 ;demo.c:125: uint8_t pal_load(char *file_name, uint8_t ss) {
                           1001 ;	---------------------------------
                           1002 ; Function pal_load
                           1003 ; ---------------------------------
   03AA                    1004 _pal_load_start::
   03AA                    1005 _pal_load:
   03AA DD E5              1006 	push	ix
   03AC DD 21 00 00        1007 	ld	ix,#0
   03B0 DD 39              1008 	add	ix,sp
   03B2 21 D2 FF           1009 	ld	hl,#-46
   03B5 39                 1010 	add	hl,sp
   03B6 F9                 1011 	ld	sp,hl
                           1012 ;demo.c:128: memset((uint8_t *) &f, 0, sizeof(fcb));
   03B7 21 00 00           1013 	ld	hl,#0x0000
   03BA 39                 1014 	add	hl,sp
   03BB 4D                 1015 	ld	c,l
   03BC 44                 1016 	ld	b,h
   03BD 21 2E 00           1017 	ld	hl,#0x002E
   03C0 E5                 1018 	push	hl
   03C1 3E 00              1019 	ld	a,#0x00
   03C3 F5                 1020 	push	af
   03C4 33                 1021 	inc	sp
   03C5 C5                 1022 	push	bc
   03C6 CDr00s00           1023 	call	_memset
   03C9 F1                 1024 	pop	af
   03CA F1                 1025 	pop	af
   03CB 33                 1026 	inc	sp
                           1027 ;demo.c:129: scratch_clear();
   03CC CDr97s03           1028 	call	_scratch_clear
                           1029 ;demo.c:131: f.record_size = ss;
   03CF 21 00 00           1030 	ld	hl,#0x0000
   03D2 39                 1031 	add	hl,sp
   03D3 4D                 1032 	ld	c,l
   03D4 44                 1033 	ld	b,h
   03D5 21 0F 00           1034 	ld	hl,#0x000F
   03D8 09                 1035 	add	hl,bc
   03D9 EB                 1036 	ex	de,hl
   03DA DD 7E 06           1037 	ld	a,6 (ix)
   03DD 12                 1038 	ld	(de),a
                           1039 ;demo.c:132: f.drive = 0;
   03DE 3E 00              1040 	ld	a,#0x00
   03E0 02                 1041 	ld	(bc),a
                           1042 ;demo.c:134: memcpy(f.name, file_name, 11);
   03E1 DD 5E 04           1043 	ld	e,4 (ix)
   03E4 DD 56 05           1044 	ld	d,5 (ix)
   03E7 03                 1045 	inc	bc
   03E8 21 0B 00           1046 	ld	hl,#0x000B
   03EB E5                 1047 	push	hl
   03EC D5                 1048 	push	de
   03ED C5                 1049 	push	bc
   03EE CDr00s00           1050 	call	_memcpy
   03F1 F1                 1051 	pop	af
   03F2 F1                 1052 	pop	af
   03F3 F1                 1053 	pop	af
                           1054 ;demo.c:136: if (open(&f) != 0) return 0;
   03F4 21 00 00           1055 	ld	hl,#0x0000
   03F7 39                 1056 	add	hl,sp
   03F8 E5                 1057 	push	hl
   03F9 CDr00s00           1058 	call	_open
   03FC F1                 1059 	pop	af
   03FD AF                 1060 	xor	a,a
   03FE B5                 1061 	or	a,l
   03FF 28 04              1062 	jr	Z,00102$
   0401 2E 00              1063 	ld	l,#0x00
   0403 18 40              1064 	jr	00107$
   0405                    1065 00102$:
                           1066 ;demo.c:137: if (block_set_data_ptr(scratch) != 0) return 0;
   0405 21r80s3F           1067 	ld	hl,#_scratch
   0408 E5                 1068 	push	hl
   0409 CDr00s00           1069 	call	_block_set_data_ptr
   040C F1                 1070 	pop	af
   040D AF                 1071 	xor	a,a
   040E B5                 1072 	or	a,l
   040F 28 04              1073 	jr	Z,00104$
   0411 2E 00              1074 	ld	l,#0x00
   0413 18 30              1075 	jr	00107$
   0415                    1076 00104$:
                           1077 ;demo.c:138: if (block_read(&f) != 0) return 0;
   0415 21 00 00           1078 	ld	hl,#0x0000
   0418 39                 1079 	add	hl,sp
   0419 E5                 1080 	push	hl
   041A CDr00s00           1081 	call	_block_read
   041D F1                 1082 	pop	af
   041E AF                 1083 	xor	a,a
   041F B5                 1084 	or	a,l
   0420 28 04              1085 	jr	Z,00106$
   0422 2E 00              1086 	ld	l,#0x00
   0424 18 1F              1087 	jr	00107$
   0426                    1088 00106$:
                           1089 ;demo.c:140: memcpy(cur_palette, scratch+7, ss);
   0426 DD 4E 06           1090 	ld	c,6 (ix)
   0429 06 00              1091 	ld	b,#0x00
   042B 11r87s3F           1092 	ld	de,#_scratch + 7
   042E C5                 1093 	push	bc
   042F D5                 1094 	push	de
   0430 21r00s40           1095 	ld	hl,#_cur_palette
   0433 E5                 1096 	push	hl
   0434 CDr00s00           1097 	call	_memcpy
   0437 F1                 1098 	pop	af
   0438 F1                 1099 	pop	af
   0439 F1                 1100 	pop	af
                           1101 ;demo.c:142: close(&f);
   043A 21 00 00           1102 	ld	hl,#0x0000
   043D 39                 1103 	add	hl,sp
   043E E5                 1104 	push	hl
   043F CDr00s00           1105 	call	_close
   0442 F1                 1106 	pop	af
                           1107 ;demo.c:143: return 1;
   0443 2E 01              1108 	ld	l,#0x01
   0445                    1109 00107$:
   0445 DD F9              1110 	ld	sp,ix
   0447 DD E1              1111 	pop	ix
   0449 C9                 1112 	ret
   044A                    1113 _pal_load_end::
                           1114 ;demo.c:147: void pause() {
                           1115 ;	---------------------------------
                           1116 ; Function pause
                           1117 ; ---------------------------------
   044A                    1118 _pause_start::
   044A                    1119 _pause:
                           1120 ;demo.c:148: uint8_t i,j,k = 0;
                           1121 ;demo.c:149: for (i = 0; i < 255; i++) {	
   044A 01 00 00           1122 	ld	bc,#0x0000
   044D                    1123 00104$:
   044D 78                 1124 	ld	a,b
   044E D6 FF              1125 	sub	a,#0xFF
   0450 D0                 1126 	ret	NC
                           1127 ;demo.c:150: for (j = 0; j < 255; j++) {
   0451 59                 1128 	ld	e,c
   0452 16 FF              1129 	ld	d,#0xFF
   0454                    1130 00103$:
                           1131 ;demo.c:151: k++;
   0454 1C                 1132 	inc	e
   0455 15                 1133 	dec	d
                           1134 ;demo.c:150: for (j = 0; j < 255; j++) {
   0456 AF                 1135 	xor	a,a
   0457 B2                 1136 	or	a,d
   0458 20 FA              1137 	jr	NZ,00103$
                           1138 ;demo.c:149: for (i = 0; i < 255; i++) {	
   045A 4B                 1139 	ld	c,e
   045B 04                 1140 	inc	b
   045C 18 EF              1141 	jr	00104$
   045E                    1142 _pause_end::
                           1143 ;demo.c:157: uint8_t raw_load(char *file_name, int size, char* buffer) {
                           1144 ;	---------------------------------
                           1145 ; Function raw_load
                           1146 ; ---------------------------------
   045E                    1147 _raw_load_start::
   045E                    1148 _raw_load:
   045E DD E5              1149 	push	ix
   0460 DD 21 00 00        1150 	ld	ix,#0
   0464 DD 39              1151 	add	ix,sp
   0466 21 D2 FF           1152 	ld	hl,#-46
   0469 39                 1153 	add	hl,sp
   046A F9                 1154 	ld	sp,hl
                           1155 ;demo.c:162: memset((uint8_t *) &f, 0, sizeof(fcb));
   046B 21 00 00           1156 	ld	hl,#0x0000
   046E 39                 1157 	add	hl,sp
   046F 4D                 1158 	ld	c,l
   0470 44                 1159 	ld	b,h
   0471 21 2E 00           1160 	ld	hl,#0x002E
   0474 E5                 1161 	push	hl
   0475 3E 00              1162 	ld	a,#0x00
   0477 F5                 1163 	push	af
   0478 33                 1164 	inc	sp
   0479 C5                 1165 	push	bc
   047A CDr00s00           1166 	call	_memset
   047D F1                 1167 	pop	af
   047E F1                 1168 	pop	af
   047F 33                 1169 	inc	sp
                           1170 ;demo.c:163: scratch_clear();
   0480 CDr97s03           1171 	call	_scratch_clear
                           1172 ;demo.c:165: f.record_size = 128;
   0483 21 00 00           1173 	ld	hl,#0x0000
   0486 39                 1174 	add	hl,sp
   0487 4D                 1175 	ld	c,l
   0488 44                 1176 	ld	b,h
   0489 21 0F 00           1177 	ld	hl,#0x000F
   048C 09                 1178 	add	hl,bc
   048D EB                 1179 	ex	de,hl
   048E 3E 80              1180 	ld	a,#0x80
   0490 12                 1181 	ld	(de),a
                           1182 ;demo.c:166: f.drive = 0;
   0491 3E 00              1183 	ld	a,#0x00
   0493 02                 1184 	ld	(bc),a
                           1185 ;demo.c:168: memcpy(f.name, file_name, 11);
   0494 DD 5E 04           1186 	ld	e,4 (ix)
   0497 DD 56 05           1187 	ld	d,5 (ix)
   049A 03                 1188 	inc	bc
   049B 21 0B 00           1189 	ld	hl,#0x000B
   049E E5                 1190 	push	hl
   049F D5                 1191 	push	de
   04A0 C5                 1192 	push	bc
   04A1 CDr00s00           1193 	call	_memcpy
   04A4 F1                 1194 	pop	af
   04A5 F1                 1195 	pop	af
   04A6 F1                 1196 	pop	af
                           1197 ;demo.c:170: if (open(&f) != 0) return 0;
   04A7 21 00 00           1198 	ld	hl,#0x0000
   04AA 39                 1199 	add	hl,sp
   04AB E5                 1200 	push	hl
   04AC CDr00s00           1201 	call	_open
   04AF F1                 1202 	pop	af
   04B0 AF                 1203 	xor	a,a
   04B1 B5                 1204 	or	a,l
   04B2 28 05              1205 	jr	Z,00116$
   04B4 2E 00              1206 	ld	l,#0x00
   04B6 C3r1Ds05           1207 	jp	00110$
                           1208 ;demo.c:172: while(total < size) {
   04B9                    1209 00116$:
   04B9 01 00 00           1210 	ld	bc,#0x0000
   04BC                    1211 00107$:
   04BC 79                 1212 	ld	a,c
   04BD DD 96 06           1213 	sub	a,6 (ix)
   04C0 78                 1214 	ld	a,b
   04C1 DD 9E 07           1215 	sbc	a,7 (ix)
   04C4 F2r12s05           1216 	jp	P,00109$
                           1217 ;demo.c:173: if (block_set_data_ptr(scratch) != 0) return 0;
   04C7 C5                 1218 	push	bc
   04C8 21r80s3F           1219 	ld	hl,#_scratch
   04CB E5                 1220 	push	hl
   04CC CDr00s00           1221 	call	_block_set_data_ptr
   04CF F1                 1222 	pop	af
   04D0 5D                 1223 	ld	e,l
   04D1 C1                 1224 	pop	bc
   04D2 AF                 1225 	xor	a,a
   04D3 B3                 1226 	or	a,e
   04D4 28 04              1227 	jr	Z,00104$
   04D6 2E 00              1228 	ld	l,#0x00
   04D8 18 43              1229 	jr	00110$
   04DA                    1230 00104$:
                           1231 ;demo.c:174: if (block_read(&f) != 0) return 0;
   04DA 21 00 00           1232 	ld	hl,#0x0000
   04DD 39                 1233 	add	hl,sp
   04DE C5                 1234 	push	bc
   04DF E5                 1235 	push	hl
   04E0 CDr00s00           1236 	call	_block_read
   04E3 F1                 1237 	pop	af
   04E4 5D                 1238 	ld	e,l
   04E5 C1                 1239 	pop	bc
   04E6 AF                 1240 	xor	a,a
   04E7 B3                 1241 	or	a,e
   04E8 28 04              1242 	jr	Z,00106$
   04EA 2E 00              1243 	ld	l,#0x00
   04EC 18 2F              1244 	jr	00110$
   04EE                    1245 00106$:
                           1246 ;demo.c:176: memcpy(buffer+total,scratch,incr);
   04EE DD 7E 08           1247 	ld	a,8 (ix)
   04F1 81                 1248 	add	a,c
   04F2 5F                 1249 	ld	e,a
   04F3 DD 7E 09           1250 	ld	a,9 (ix)
   04F6 88                 1251 	adc	a,b
   04F7 57                 1252 	ld	d,a
   04F8 C5                 1253 	push	bc
   04F9 21 80 00           1254 	ld	hl,#0x0080
   04FC E5                 1255 	push	hl
   04FD 21r80s3F           1256 	ld	hl,#_scratch
   0500 E5                 1257 	push	hl
   0501 D5                 1258 	push	de
   0502 CDr00s00           1259 	call	_memcpy
   0505 F1                 1260 	pop	af
   0506 F1                 1261 	pop	af
   0507 F1                 1262 	pop	af
   0508 C1                 1263 	pop	bc
                           1264 ;demo.c:178: total+=incr;
   0509 21 80 00           1265 	ld	hl,#0x0080
   050C 09                 1266 	add	hl,bc
   050D 4D                 1267 	ld	c,l
   050E 44                 1268 	ld	b,h
   050F C3rBCs04           1269 	jp	00107$
   0512                    1270 00109$:
                           1271 ;demo.c:181: close(&f);
   0512 21 00 00           1272 	ld	hl,#0x0000
   0515 39                 1273 	add	hl,sp
   0516 E5                 1274 	push	hl
   0517 CDr00s00           1275 	call	_close
   051A F1                 1276 	pop	af
                           1277 ;demo.c:183: return 1;
   051B 2E 01              1278 	ld	l,#0x01
   051D                    1279 00110$:
   051D DD F9              1280 	ld	sp,ix
   051F DD E1              1281 	pop	ix
   0521 C9                 1282 	ret
   0522                    1283 _raw_load_end::
                           1284 ;demo.c:186: void fadein() {
                           1285 ;	---------------------------------
                           1286 ; Function fadein
                           1287 ; ---------------------------------
   0522                    1288 _fadein_start::
   0522                    1289 _fadein:
   0522 DD E5              1290 	push	ix
   0524 DD 21 00 00        1291 	ld	ix,#0
   0528 DD 39              1292 	add	ix,sp
   052A F5                 1293 	push	af
                           1294 ;demo.c:189: if (tick < 4) return;
   052B 3Ar42s40           1295 	ld	a,(#_tick+0)
   052E D6 04              1296 	sub	a,#0x04
   0530 3Ar43s40           1297 	ld	a,(#_tick+1)
   0533 DE 00              1298 	sbc	a,#0x00
   0535 F2r3Bs05           1299 	jp	P,00102$
   0538 C3rE9s05           1300 	jp	00113$
   053B                    1301 00102$:
                           1302 ;demo.c:191: tick = 0;
   053B 21r42s40           1303 	ld	hl,#_tick + 0
   053E 36 00              1304 	ld	(hl), #0x00
   0540 21r43s40           1305 	ld	hl,#_tick + 1
   0543 36 00              1306 	ld	(hl), #0x00
                           1307 ;demo.c:193: for(i = 0; i < 32; i+=2) {
   0545 0E 00              1308 	ld	c,#0x00
   0547                    1309 00109$:
   0547 79                 1310 	ld	a,c
   0548 D6 20              1311 	sub	a,#0x20
   054A D2rE1s05           1312 	jp	NC,00112$
                           1313 ;demo.c:194: uint8_t r = scratch[i] >> 4;
   054D 3Er80              1314 	ld	a,#<_scratch
   054F 81                 1315 	add	a,c
   0550 5F                 1316 	ld	e,a
   0551 3Es3F              1317 	ld	a,#>_scratch
   0553 CE 00              1318 	adc	a,#0x00
   0555 57                 1319 	ld	d,a
   0556 1A                 1320 	ld	a,(de)
   0557 47                 1321 	ld	b,a
   0558 58                 1322 	ld	e,b
   0559 CB 3B              1323 	srl	e
   055B CB 3B              1324 	srl	e
   055D CB 3B              1325 	srl	e
   055F CB 3B              1326 	srl	e
                           1327 ;demo.c:195: uint8_t b = scratch[i] & 0xf;
   0561 78                 1328 	ld	a,b
   0562 E6 0F              1329 	and	a,#0x0F
   0564 DD 77 FF           1330 	ld	-1 (ix),a
                           1331 ;demo.c:196: uint8_t g = scratch[i+1];
   0567 51                 1332 	ld	d,c
   0568 14                 1333 	inc	d
   0569 3Er80              1334 	ld	a,#<_scratch
   056B 82                 1335 	add	a,d
   056C 6F                 1336 	ld	l,a
   056D 3Es3F              1337 	ld	a,#>_scratch
   056F CE 00              1338 	adc	a,#0x00
   0571 67                 1339 	ld	h,a
   0572 56                 1340 	ld	d,(hl)
   0573 DD 72 FE           1341 	ld	-2 (ix),d
                           1342 ;demo.c:198: if (r < (cur_palette[i] >> 4)) r++;
   0576 3Er00              1343 	ld	a,#<_cur_palette
   0578 81                 1344 	add	a,c
   0579 6F                 1345 	ld	l,a
   057A 3Es40              1346 	ld	a,#>_cur_palette
   057C CE 00              1347 	adc	a,#0x00
   057E 67                 1348 	ld	h,a
   057F 56                 1349 	ld	d,(hl)
   0580 CB 3A              1350 	srl	d
   0582 CB 3A              1351 	srl	d
   0584 CB 3A              1352 	srl	d
   0586 CB 3A              1353 	srl	d
   0588 7B                 1354 	ld	a,e
   0589 92                 1355 	sub	a,d
   058A 30 01              1356 	jr	NC,00104$
   058C 1C                 1357 	inc	e
   058D                    1358 00104$:
                           1359 ;demo.c:199: if (b < (cur_palette[i] & 0xf)) b++;
   058D 3Er00              1360 	ld	a,#<_cur_palette
   058F 81                 1361 	add	a,c
   0590 6F                 1362 	ld	l,a
   0591 3Es40              1363 	ld	a,#>_cur_palette
   0593 CE 00              1364 	adc	a,#0x00
   0595 67                 1365 	ld	h,a
   0596 7E                 1366 	ld	a,(hl)
   0597 E6 0F              1367 	and	a,#0x0F
   0599 47                 1368 	ld	b,a
   059A DD 7E FF           1369 	ld	a,-1 (ix)
   059D 90                 1370 	sub	a,b
   059E 30 03              1371 	jr	NC,00106$
   05A0 DD 34 FF           1372 	inc	-1 (ix)
   05A3                    1373 00106$:
                           1374 ;demo.c:201: scratch[i] = (r << 4) | b;
   05A3 3Er80              1375 	ld	a,#<_scratch
   05A5 81                 1376 	add	a,c
   05A6 47                 1377 	ld	b,a
   05A7 3Es3F              1378 	ld	a,#>_scratch
   05A9 CE 00              1379 	adc	a,#0x00
   05AB 57                 1380 	ld	d,a
   05AC 7B                 1381 	ld	a,e
   05AD 07                 1382 	rlca
   05AE 07                 1383 	rlca
   05AF 07                 1384 	rlca
   05B0 07                 1385 	rlca
   05B1 E6 F0              1386 	and	a,#0xF0
   05B3 DD B6 FF           1387 	or	a,-1 (ix)
   05B6 68                 1388 	ld	l,b
   05B7 62                 1389 	ld	h,d
   05B8 77                 1390 	ld	(hl),a
                           1391 ;demo.c:202: if (g < cur_palette[i+1]) scratch[i+1]++;
   05B9 41                 1392 	ld	b,c
   05BA 04                 1393 	inc	b
   05BB 3Er00              1394 	ld	a,#<_cur_palette
   05BD 80                 1395 	add	a,b
   05BE 5F                 1396 	ld	e,a
   05BF 3Es40              1397 	ld	a,#>_cur_palette
   05C1 CE 00              1398 	adc	a,#0x00
   05C3 57                 1399 	ld	d,a
   05C4 1A                 1400 	ld	a,(de)
   05C5 5F                 1401 	ld	e,a
   05C6 DD 7E FE           1402 	ld	a,-2 (ix)
   05C9 93                 1403 	sub	a,e
   05CA 30 10              1404 	jr	NC,00111$
   05CC 3Er80              1405 	ld	a,#<_scratch
   05CE 80                 1406 	add	a,b
   05CF 47                 1407 	ld	b,a
   05D0 3Es3F              1408 	ld	a,#>_scratch
   05D2 CE 00              1409 	adc	a,#0x00
   05D4 5F                 1410 	ld	e,a
   05D5 68                 1411 	ld	l,b
   05D6 67                 1412 	ld	h,a
   05D7 7E                 1413 	ld	a,(hl)
   05D8 3C                 1414 	inc	a
   05D9 68                 1415 	ld	l,b
   05DA 63                 1416 	ld	h,e
   05DB 77                 1417 	ld	(hl),a
   05DC                    1418 00111$:
                           1419 ;demo.c:193: for(i = 0; i < 32; i+=2) {
   05DC 0C                 1420 	inc	c
   05DD 0C                 1421 	inc	c
   05DE C3r47s05           1422 	jp	00109$
   05E1                    1423 00112$:
                           1424 ;demo.c:206: vdp_load_palette(scratch);
   05E1 21r80s3F           1425 	ld	hl,#_scratch
   05E4 E5                 1426 	push	hl
   05E5 CDr00s00           1427 	call	_vdp_load_palette
   05E8 F1                 1428 	pop	af
   05E9                    1429 00113$:
   05E9 DD F9              1430 	ld	sp,ix
   05EB DD E1              1431 	pop	ix
   05ED C9                 1432 	ret
   05EE                    1433 _fadein_end::
                           1434 ;demo.c:218: void do_ymmm() {
                           1435 ;	---------------------------------
                           1436 ; Function do_ymmm
                           1437 ; ---------------------------------
   05EE                    1438 _do_ymmm_start::
   05EE                    1439 _do_ymmm:
   05EE DD E5              1440 	push	ix
   05F0 DD 21 00 00        1441 	ld	ix,#0
   05F4 DD 39              1442 	add	ix,sp
   05F6 21 EB FF           1443 	ld	hl,#-21
   05F9 39                 1444 	add	hl,sp
   05FA F9                 1445 	ld	sp,hl
                           1446 ;demo.c:223: if (tick > 32) { tick = 0; flipper++;}
   05FB 3E 20              1447 	ld	a,#0x20
   05FD FD 21r42s40        1448 	ld	iy,#_tick
   0601 FD 96 00           1449 	sub	a,0 (iy)
   0604 3E 00              1450 	ld	a,#0x00
   0606 FD 21r42s40        1451 	ld	iy,#_tick
   060A FD 9E 01           1452 	sbc	a,1 (iy)
   060D F2r2As06           1453 	jp	P,00102$
   0610 21r42s40           1454 	ld	hl,#_tick + 0
   0613 36 00              1455 	ld	(hl), #0x00
   0615 21r43s40           1456 	ld	hl,#_tick + 1
   0618 36 00              1457 	ld	(hl), #0x00
   061A FD 21r4Es40        1458 	ld	iy,#_flipper
   061E FD 34 00           1459 	inc	0 (iy)
   0621 20 07              1460 	jr	NZ,00115$
   0623 FD 21r4Es40        1461 	ld	iy,#_flipper
   0627 FD 34 01           1462 	inc	1 (iy)
   062A                    1463 00115$:
   062A                    1464 00102$:
                           1465 ;demo.c:224: if (flipper > 10) { flipper = 0;}
   062A 3E 0A              1466 	ld	a,#0x0A
   062C FD 21r4Es40        1467 	ld	iy,#_flipper
   0630 FD 96 00           1468 	sub	a,0 (iy)
   0633 3E 00              1469 	ld	a,#0x00
   0635 FD 21r4Es40        1470 	ld	iy,#_flipper
   0639 FD 9E 01           1471 	sbc	a,1 (iy)
   063C F2r49s06           1472 	jp	P,00104$
   063F 21r4Es40           1473 	ld	hl,#_flipper + 0
   0642 36 00              1474 	ld	(hl), #0x00
   0644 21r4Fs40           1475 	ld	hl,#_flipper + 1
   0647 36 00              1476 	ld	(hl), #0x00
   0649                    1477 00104$:
                           1478 ;demo.c:226: ymmmf++;
   0649 FD 21r50s40        1479 	ld	iy,#_ymmmf
   064D FD 34 00           1480 	inc	0 (iy)
   0650 20 07              1481 	jr	NZ,00116$
   0652 FD 21r50s40        1482 	ld	iy,#_ymmmf
   0656 FD 34 01           1483 	inc	1 (iy)
   0659                    1484 00116$:
                           1485 ;demo.c:227: for (yofff = 0; yofff<212-step;yofff+=step) {
   0659 21r4Cs40           1486 	ld	hl,#_yofff + 0
   065C 36 00              1487 	ld	(hl), #0x00
   065E                    1488 00105$:
   065E 3Ar4Cs40           1489 	ld	a,(#_yofff+0)
   0661 DD 77 ED           1490 	ld	-19 (ix),a
   0664 DD 36 EE 00        1491 	ld	-18 (ix),#0x00
   0668 DD 7E ED           1492 	ld	a,-19 (ix)
   066B D6 D2              1493 	sub	a,#0xD2
   066D DD 7E EE           1494 	ld	a,-18 (ix)
   0670 DE 00              1495 	sbc	a,#0x00
   0672 F2r1Es07           1496 	jp	P,00109$
                           1497 ;demo.c:228: xo = (sintabx[(yofff+ymmmf) & 255]);
   0675 21r50s40           1498 	ld	hl,#_ymmmf
   0678 DD 7E ED           1499 	ld	a,-19 (ix)
   067B 86                 1500 	add	a,(hl)
   067C 5F                 1501 	ld	e,a
   067D DD 7E EE           1502 	ld	a,-18 (ix)
   0680 23                 1503 	inc	hl
   0681 8E                 1504 	adc	a,(hl)
   0682 16 00              1505 	ld	d,#0x00
   0684 CB 23              1506 	sla	e
   0686 CB 12              1507 	rl	d
   0688 21r2Cs00           1508 	ld	hl,#_sintabx
   068B 19                 1509 	add	hl,de
   068C 5E                 1510 	ld	e,(hl)
   068D 23                 1511 	inc	hl
   068E 56                 1512 	ld	d,(hl)
   068F DD 73 EF           1513 	ld	-17 (ix),e
   0692 DD 72 F0           1514 	ld	-16 (ix),d
                           1515 ;demo.c:231: cmd.source_x = 0;
   0695 21 06 00           1516 	ld	hl,#0x0006
   0698 39                 1517 	add	hl,sp
   0699 36 00              1518 	ld	(hl),#0x00
   069B 23                 1519 	inc	hl
   069C 36 00              1520 	ld	(hl),#0x00
                           1521 ;demo.c:232: cmd.source_y = 0+yofff;
   069E 21 06 00           1522 	ld	hl,#0x0006
   06A1 39                 1523 	add	hl,sp
   06A2 EB                 1524 	ex	de,hl
   06A3 4B                 1525 	ld	c,e
   06A4 42                 1526 	ld	b,d
   06A5 69                 1527 	ld	l,c
   06A6 60                 1528 	ld	h,b
   06A7 23                 1529 	inc	hl
   06A8 23                 1530 	inc	hl
   06A9 DD 7E ED           1531 	ld	a,-19 (ix)
   06AC 77                 1532 	ld	(hl),a
   06AD 23                 1533 	inc	hl
   06AE DD 7E EE           1534 	ld	a,-18 (ix)
   06B1 77                 1535 	ld	(hl),a
                           1536 ;demo.c:233: cmd.dest_x = xo;
   06B2 21 04 00           1537 	ld	hl,#0x0004
   06B5 19                 1538 	add	hl,de
   06B6 DD 7E EF           1539 	ld	a,-17 (ix)
   06B9 77                 1540 	ld	(hl),a
   06BA 23                 1541 	inc	hl
   06BB DD 7E F0           1542 	ld	a,-16 (ix)
   06BE 77                 1543 	ld	(hl),a
                           1544 ;demo.c:234: cmd.dest_y = 3+yofff;
   06BF 21 06 00           1545 	ld	hl,#0x0006
   06C2 19                 1546 	add	hl,de
   06C3 DD 75 EB           1547 	ld	-21 (ix),l
   06C6 DD 74 EC           1548 	ld	-20 (ix),h
   06C9 DD 7E ED           1549 	ld	a,-19 (ix)
   06CC C6 03              1550 	add	a,#0x03
   06CE 4F                 1551 	ld	c,a
   06CF DD 7E EE           1552 	ld	a,-18 (ix)
   06D2 CE 00              1553 	adc	a,#0x00
   06D4 47                 1554 	ld	b,a
   06D5 DD 6E EB           1555 	ld	l,-21 (ix)
   06D8 DD 66 EC           1556 	ld	h,-20 (ix)
   06DB 71                 1557 	ld	(hl),c
   06DC 23                 1558 	inc	hl
   06DD 70                 1559 	ld	(hl),b
                           1560 ;demo.c:235: cmd.size_x = 256;
   06DE 21 08 00           1561 	ld	hl,#0x0008
   06E1 19                 1562 	add	hl,de
   06E2 36 00              1563 	ld	(hl),#0x00
   06E4 23                 1564 	inc	hl
   06E5 36 01              1565 	ld	(hl),#0x01
                           1566 ;demo.c:236: cmd.size_y = 1;
   06E7 21 0A 00           1567 	ld	hl,#0x000A
   06EA 19                 1568 	add	hl,de
   06EB 36 01              1569 	ld	(hl),#0x01
   06ED 23                 1570 	inc	hl
   06EE 36 00              1571 	ld	(hl),#0x00
                           1572 ;demo.c:237: cmd.data = 0;
   06F0 21 0C 00           1573 	ld	hl,#0x000C
   06F3 19                 1574 	add	hl,de
   06F4 4D                 1575 	ld	c,l
   06F5 44                 1576 	ld	b,h
   06F6 3E 00              1577 	ld	a,#0x00
   06F8 02                 1578 	ld	(bc),a
                           1579 ;demo.c:238: cmd.argument = 0;
   06F9 21 0D 00           1580 	ld	hl,#0x000D
   06FC 19                 1581 	add	hl,de
   06FD 4D                 1582 	ld	c,l
   06FE 44                 1583 	ld	b,h
   06FF 3E 00              1584 	ld	a,#0x00
   0701 02                 1585 	ld	(bc),a
                           1586 ;demo.c:239: cmd.command = 0xD0;
   0702 21 0E 00           1587 	ld	hl,#0x000E
   0705 19                 1588 	add	hl,de
   0706 4D                 1589 	ld	c,l
   0707 44                 1590 	ld	b,h
   0708 3E D0              1591 	ld	a,#0xD0
   070A 02                 1592 	ld	(bc),a
                           1593 ;demo.c:242: vdp_copier(&cmd);
   070B D5                 1594 	push	de
   070C CDr00s00           1595 	call	_vdp_copier
   070F F1                 1596 	pop	af
                           1597 ;demo.c:227: for (yofff = 0; yofff<212-step;yofff+=step) {
   0710 21r4Cs40           1598 	ld	hl,#_yofff + 0
   0713 4E                 1599 	ld	c,(hl)
   0714 21r4Cs40           1600 	ld	hl,#_yofff
   0717 79                 1601 	ld	a,c
   0718 C6 02              1602 	add	a,#0x02
   071A 77                 1603 	ld	(hl),a
   071B C3r5Es06           1604 	jp	00105$
   071E                    1605 00109$:
   071E DD F9              1606 	ld	sp,ix
   0720 DD E1              1607 	pop	ix
   0722 C9                 1608 	ret
   0723                    1609 _do_ymmm_end::
                           1610 ;demo.c:259: void do_blocks() {
                           1611 ;	---------------------------------
                           1612 ; Function do_blocks
                           1613 ; ---------------------------------
   0723                    1614 _do_blocks_start::
   0723                    1615 _do_blocks:
   0723 DD E5              1616 	push	ix
   0725 DD 21 00 00        1617 	ld	ix,#0
   0729 DD 39              1618 	add	ix,sp
   072B 21 E9 FF           1619 	ld	hl,#-23
   072E 39                 1620 	add	hl,sp
   072F F9                 1621 	ld	sp,hl
                           1622 ;demo.c:262: int ys = 0;
   0730 DD 36 ED 00        1623 	ld	-19 (ix),#0x00
   0734 DD 36 EE 00        1624 	ld	-18 (ix),#0x00
                           1625 ;demo.c:263: int ye = 0;
   0738 DD 36 EB 00        1626 	ld	-21 (ix),#0x00
   073C DD 36 EC 00        1627 	ld	-20 (ix),#0x00
                           1628 ;demo.c:265: vdp_register(VDP_VOFFSET,0);
   0740 21 17 00           1629 	ld	hl,#0x0017
   0743 E5                 1630 	push	hl
   0744 CDr00s00           1631 	call	_vdp_register
   0747 F1                 1632 	pop	af
                           1633 ;demo.c:267: if (block_init == 0) {
   0748 AF                 1634 	xor	a,a
   0749 FD 21r52s40        1635 	ld	iy,#_block_init
   074D FD B6 00           1636 	or	a,0 (iy)
   0750 C2rB8s07           1637 	jp	NZ,00108$
                           1638 ;demo.c:269: vdp_set_screen5();
   0753 CDr00s00           1639 	call	_vdp_set_screen5
                           1640 ;demo.c:271: vdp_register(2, 0x5F);
   0756 21 02 5F           1641 	ld	hl,#0x5F02
   0759 E5                 1642 	push	hl
   075A CDr00s00           1643 	call	_vdp_register
   075D F1                 1644 	pop	af
                           1645 ;demo.c:273: for(i=0;i<16;i++) btab[i] = i*16;
   075E DD 36 EF 00        1646 	ld	-17 (ix),#0x00
   0762 DD 36 F0 00        1647 	ld	-16 (ix),#0x00
   0766                    1648 00110$:
   0766 DD 7E EF           1649 	ld	a,-17 (ix)
   0769 D6 10              1650 	sub	a,#0x10
   076B DD 7E F0           1651 	ld	a,-16 (ix)
   076E DE 00              1652 	sbc	a,#0x00
   0770 F2rA8s07           1653 	jp	P,00113$
   0773 DD 4E EF           1654 	ld	c,-17 (ix)
   0776 DD 46 F0           1655 	ld	b,-16 (ix)
   0779 CB 21              1656 	sla	c
   077B CB 10              1657 	rl	b
   077D 21r5Bs40           1658 	ld	hl,#_btab
   0780 09                 1659 	add	hl,bc
   0781 4D                 1660 	ld	c,l
   0782 44                 1661 	ld	b,h
   0783 DD 5E EF           1662 	ld	e,-17 (ix)
   0786 DD 56 F0           1663 	ld	d,-16 (ix)
   0789 CB 23              1664 	sla	e
   078B CB 12              1665 	rl	d
   078D CB 23              1666 	sla	e
   078F CB 12              1667 	rl	d
   0791 CB 23              1668 	sla	e
   0793 CB 12              1669 	rl	d
   0795 CB 23              1670 	sla	e
   0797 CB 12              1671 	rl	d
   0799 69                 1672 	ld	l,c
   079A 60                 1673 	ld	h,b
   079B 73                 1674 	ld	(hl),e
   079C 23                 1675 	inc	hl
   079D 72                 1676 	ld	(hl),d
   079E DD 34 EF           1677 	inc	-17 (ix)
   07A1 20 03              1678 	jr	NZ,00139$
   07A3 DD 34 F0           1679 	inc	-16 (ix)
   07A6                    1680 00139$:
   07A6 18 BE              1681 	jr	00110$
   07A8                    1682 00113$:
                           1683 ;demo.c:274: vdp_load_palette(block_palette);
   07A8 21r20s40           1684 	ld	hl,#_block_palette
   07AB E5                 1685 	push	hl
   07AC CDr00s00           1686 	call	_vdp_load_palette
   07AF F1                 1687 	pop	af
                           1688 ;demo.c:276: block_init = 1;
   07B0 21r52s40           1689 	ld	hl,#_block_init + 0
   07B3 36 01              1690 	ld	(hl), #0x01
   07B5 C3r77s09           1691 	jp	00122$
   07B8                    1692 00108$:
                           1693 ;demo.c:280: if (flof == 0) { ys = 0; ye = 8; }
   07B8 3Ar7Bs40           1694 	ld	a,(#_flof+0)
   07BB FD 21r7Bs40        1695 	ld	iy,#_flof
   07BF FD B6 01           1696 	or	a,1 (iy)
   07C2 20 10              1697 	jr	NZ,00102$
   07C4 DD 36 ED 00        1698 	ld	-19 (ix),#0x00
   07C8 DD 36 EE 00        1699 	ld	-18 (ix),#0x00
   07CC DD 36 EB 08        1700 	ld	-21 (ix),#0x08
   07D0 DD 36 EC 00        1701 	ld	-20 (ix),#0x00
   07D4                    1702 00102$:
                           1703 ;demo.c:281: if (flof == 1) { ys = 8; ye = 16; }
   07D4 3Ar7Bs40           1704 	ld	a,(#_flof+0)
   07D7 D6 01              1705 	sub	a,#0x01
   07D9 20 06              1706 	jr	NZ,00140$
   07DB 3Ar7Cs40           1707 	ld	a,(#_flof+1)
   07DE B7                 1708 	or	a,a
   07DF 28 02              1709 	jr	Z,00141$
   07E1                    1710 00140$:
   07E1 18 10              1711 	jr	00104$
   07E3                    1712 00141$:
   07E3 DD 36 ED 08        1713 	ld	-19 (ix),#0x08
   07E7 DD 36 EE 00        1714 	ld	-18 (ix),#0x00
   07EB DD 36 EB 10        1715 	ld	-21 (ix),#0x10
   07EF DD 36 EC 00        1716 	ld	-20 (ix),#0x00
   07F3                    1717 00104$:
                           1718 ;demo.c:283: for(bty=3;bty<11;bty++) {
   07F3 FD 21r59s40        1719 	ld	iy,#_bty
   07F7 FD 36 00 03        1720 	ld	0 (iy),#0x03
   07FB FD 21r59s40        1721 	ld	iy,#_bty
   07FF FD 36 01 00        1722 	ld	1 (iy),#0x00
   0803                    1723 00118$:
   0803 3Ar59s40           1724 	ld	a,(#_bty+0)
   0806 D6 0B              1725 	sub	a,#0x0B
   0808 3Ar5As40           1726 	ld	a,(#_bty+1)
   080B DE 00              1727 	sbc	a,#0x00
   080D F2r4Es09           1728 	jp	P,00121$
                           1729 ;demo.c:284: for(btx=ys;btx<ye;btx++) {
   0810 DD 7E ED           1730 	ld	a,-19 (ix)
   0813 FD 21r57s40        1731 	ld	iy,#_btx
   0817 FD 77 00           1732 	ld	0 (iy),a
   081A DD 7E EE           1733 	ld	a,-18 (ix)
   081D FD 21r57s40        1734 	ld	iy,#_btx
   0821 FD 77 01           1735 	ld	1 (iy),a
   0824                    1736 00114$:
   0824 3Ar57s40           1737 	ld	a,(#_btx+0)
   0827 DD 96 EB           1738 	sub	a,-21 (ix)
   082A 3Ar58s40           1739 	ld	a,(#_btx+1)
   082D DD 9E EC           1740 	sbc	a,-20 (ix)
   0830 F2r3Bs09           1741 	jp	P,00120$
                           1742 ;demo.c:285: bsx = (PLY_PSGReg8 & PLY_PSGReg9 | PLY_PSGReg10)>>1;
   0833 3Ar00s00           1743 	ld	a,(#_PLY_PSGReg8+0)
   0836 FD 21r00s00        1744 	ld	iy,#_PLY_PSGReg9
   083A FD A6 00           1745 	and	a,0 (iy)
   083D 21r00s00           1746 	ld	hl,#_PLY_PSGReg10 + 0
   0840 B6                 1747 	or	a,(hl)
   0841 4F                 1748 	ld	c,a
   0842 CB 39              1749 	srl	c
   0844 21r53s40           1750 	ld	hl,#_bsx + 0
   0847 71                 1751 	ld	(hl), c
   0848 21r54s40           1752 	ld	hl,#_bsx + 1
   084B 36 00              1753 	ld	(hl), #0x00
                           1754 ;demo.c:286: bsy = PLY_PSGReg10;
   084D 3Ar00s00           1755 	ld	a,(#_PLY_PSGReg10+0)
   0850 21r55s40           1756 	ld	hl,#_bsy + 0
   0853 77                 1757 	ld	(hl), a
   0854 21r56s40           1758 	ld	hl,#_bsy + 1
   0857 36 00              1759 	ld	(hl), #0x00
                           1760 ;demo.c:287: cmd.source_x = btab[bsx];
   0859 21 08 00           1761 	ld	hl,#0x0008
   085C 39                 1762 	add	hl,sp
   085D 4D                 1763 	ld	c,l
   085E 44                 1764 	ld	b,h
   085F 21r53s40           1765 	ld	hl,#_bsx + 0
   0862 5E                 1766 	ld	e,(hl)
   0863 21r54s40           1767 	ld	hl,#_bsx + 1
   0866 56                 1768 	ld	d,(hl)
   0867 CB 23              1769 	sla	e
   0869 CB 12              1770 	rl	d
   086B 21r5Bs40           1771 	ld	hl,#_btab
   086E 19                 1772 	add	hl,de
   086F 5E                 1773 	ld	e,(hl)
   0870 23                 1774 	inc	hl
   0871 56                 1775 	ld	d,(hl)
   0872 69                 1776 	ld	l,c
   0873 60                 1777 	ld	h,b
   0874 73                 1778 	ld	(hl),e
   0875 23                 1779 	inc	hl
   0876 72                 1780 	ld	(hl),d
                           1781 ;demo.c:288: cmd.source_y = 768+btab[bsy];
   0877 21 08 00           1782 	ld	hl,#0x0008
   087A 39                 1783 	add	hl,sp
   087B 4D                 1784 	ld	c,l
   087C 44                 1785 	ld	b,h
   087D 21 02 00           1786 	ld	hl,#0x0002
   0880 09                 1787 	add	hl,bc
   0881 DD 75 E9           1788 	ld	-23 (ix),l
   0884 DD 74 EA           1789 	ld	-22 (ix),h
   0887 21r55s40           1790 	ld	hl,#_bsy + 0
   088A 5E                 1791 	ld	e,(hl)
   088B 21r56s40           1792 	ld	hl,#_bsy + 1
   088E 56                 1793 	ld	d,(hl)
   088F CB 23              1794 	sla	e
   0891 CB 12              1795 	rl	d
   0893 21r5Bs40           1796 	ld	hl,#_btab
   0896 19                 1797 	add	hl,de
   0897 5E                 1798 	ld	e,(hl)
   0898 23                 1799 	inc	hl
   0899 56                 1800 	ld	d,(hl)
   089A 21 00 03           1801 	ld	hl,#0x0300
   089D 19                 1802 	add	hl,de
   089E EB                 1803 	ex	de,hl
   089F DD 6E E9           1804 	ld	l,-23 (ix)
   08A2 DD 66 EA           1805 	ld	h,-22 (ix)
   08A5 73                 1806 	ld	(hl),e
   08A6 23                 1807 	inc	hl
   08A7 72                 1808 	ld	(hl),d
                           1809 ;demo.c:289: cmd.dest_x = btab[btx];
   08A8 21 04 00           1810 	ld	hl,#0x0004
   08AB 09                 1811 	add	hl,bc
   08AC DD 75 E9           1812 	ld	-23 (ix),l
   08AF DD 74 EA           1813 	ld	-22 (ix),h
   08B2 21r57s40           1814 	ld	hl,#_btx + 0
   08B5 5E                 1815 	ld	e,(hl)
   08B6 21r58s40           1816 	ld	hl,#_btx + 1
   08B9 56                 1817 	ld	d,(hl)
   08BA CB 23              1818 	sla	e
   08BC CB 12              1819 	rl	d
   08BE 21r5Bs40           1820 	ld	hl,#_btab
   08C1 19                 1821 	add	hl,de
   08C2 5E                 1822 	ld	e,(hl)
   08C3 23                 1823 	inc	hl
   08C4 56                 1824 	ld	d,(hl)
   08C5 DD 6E E9           1825 	ld	l,-23 (ix)
   08C8 DD 66 EA           1826 	ld	h,-22 (ix)
   08CB 73                 1827 	ld	(hl),e
   08CC 23                 1828 	inc	hl
   08CD 72                 1829 	ld	(hl),d
                           1830 ;demo.c:290: cmd.dest_y = 512+btab[bty];
   08CE 21 06 00           1831 	ld	hl,#0x0006
   08D1 09                 1832 	add	hl,bc
   08D2 DD 75 E9           1833 	ld	-23 (ix),l
   08D5 DD 74 EA           1834 	ld	-22 (ix),h
   08D8 21r59s40           1835 	ld	hl,#_bty + 0
   08DB 5E                 1836 	ld	e,(hl)
   08DC 21r5As40           1837 	ld	hl,#_bty + 1
   08DF 56                 1838 	ld	d,(hl)
   08E0 CB 23              1839 	sla	e
   08E2 CB 12              1840 	rl	d
   08E4 21r5Bs40           1841 	ld	hl,#_btab
   08E7 19                 1842 	add	hl,de
   08E8 5E                 1843 	ld	e,(hl)
   08E9 23                 1844 	inc	hl
   08EA 56                 1845 	ld	d,(hl)
   08EB 21 00 02           1846 	ld	hl,#0x0200
   08EE 19                 1847 	add	hl,de
   08EF EB                 1848 	ex	de,hl
   08F0 DD 6E E9           1849 	ld	l,-23 (ix)
   08F3 DD 66 EA           1850 	ld	h,-22 (ix)
   08F6 73                 1851 	ld	(hl),e
   08F7 23                 1852 	inc	hl
   08F8 72                 1853 	ld	(hl),d
                           1854 ;demo.c:291: cmd.size_x = 16;
   08F9 21 08 00           1855 	ld	hl,#0x0008
   08FC 09                 1856 	add	hl,bc
   08FD 36 10              1857 	ld	(hl),#0x10
   08FF 23                 1858 	inc	hl
   0900 36 00              1859 	ld	(hl),#0x00
                           1860 ;demo.c:292: cmd.size_y = 16;
   0902 21 0A 00           1861 	ld	hl,#0x000A
   0905 09                 1862 	add	hl,bc
   0906 36 10              1863 	ld	(hl),#0x10
   0908 23                 1864 	inc	hl
   0909 36 00              1865 	ld	(hl),#0x00
                           1866 ;demo.c:293: cmd.data = 0;
   090B 21 0C 00           1867 	ld	hl,#0x000C
   090E 09                 1868 	add	hl,bc
   090F EB                 1869 	ex	de,hl
   0910 3E 00              1870 	ld	a,#0x00
   0912 12                 1871 	ld	(de),a
                           1872 ;demo.c:294: cmd.argument = 0x00;
   0913 21 0D 00           1873 	ld	hl,#0x000D
   0916 09                 1874 	add	hl,bc
   0917 EB                 1875 	ex	de,hl
   0918 3E 00              1876 	ld	a,#0x00
   091A 12                 1877 	ld	(de),a
                           1878 ;demo.c:295: cmd.command = 0xD0;
   091B 21 0E 00           1879 	ld	hl,#0x000E
   091E 09                 1880 	add	hl,bc
   091F EB                 1881 	ex	de,hl
   0920 3E D0              1882 	ld	a,#0xD0
   0922 12                 1883 	ld	(de),a
                           1884 ;demo.c:296: vdp_copier(&cmd);
   0923 C5                 1885 	push	bc
   0924 CDr00s00           1886 	call	_vdp_copier
   0927 F1                 1887 	pop	af
                           1888 ;demo.c:284: for(btx=ys;btx<ye;btx++) {
   0928 FD 21r57s40        1889 	ld	iy,#_btx
   092C FD 34 00           1890 	inc	0 (iy)
   092F 20 07              1891 	jr	NZ,00150$
   0931 FD 21r57s40        1892 	ld	iy,#_btx
   0935 FD 34 01           1893 	inc	1 (iy)
   0938                    1894 00150$:
   0938 C3r24s08           1895 	jp	00114$
   093B                    1896 00120$:
                           1897 ;demo.c:283: for(bty=3;bty<11;bty++) {
   093B FD 21r59s40        1898 	ld	iy,#_bty
   093F FD 34 00           1899 	inc	0 (iy)
   0942 20 07              1900 	jr	NZ,00151$
   0944 FD 21r59s40        1901 	ld	iy,#_bty
   0948 FD 34 01           1902 	inc	1 (iy)
   094B                    1903 00151$:
   094B C3r03s08           1904 	jp	00118$
   094E                    1905 00121$:
                           1906 ;demo.c:300: flof++;
   094E FD 21r7Bs40        1907 	ld	iy,#_flof
   0952 FD 34 00           1908 	inc	0 (iy)
   0955 20 07              1909 	jr	NZ,00152$
   0957 FD 21r7Bs40        1910 	ld	iy,#_flof
   095B FD 34 01           1911 	inc	1 (iy)
   095E                    1912 00152$:
                           1913 ;demo.c:301: if (flof == 2) flof = 0;
   095E 3Ar7Bs40           1914 	ld	a,(#_flof+0)
   0961 D6 02              1915 	sub	a,#0x02
   0963 20 06              1916 	jr	NZ,00153$
   0965 3Ar7Cs40           1917 	ld	a,(#_flof+1)
   0968 B7                 1918 	or	a,a
   0969 28 02              1919 	jr	Z,00154$
   096B                    1920 00153$:
   096B 18 0A              1921 	jr	00122$
   096D                    1922 00154$:
   096D 21r7Bs40           1923 	ld	hl,#_flof + 0
   0970 36 00              1924 	ld	(hl), #0x00
   0972 21r7Cs40           1925 	ld	hl,#_flof + 1
   0975 36 00              1926 	ld	(hl), #0x00
   0977                    1927 00122$:
   0977 DD F9              1928 	ld	sp,ix
   0979 DD E1              1929 	pop	ix
   097B C9                 1930 	ret
   097C                    1931 _do_blocks_end::
                           1932 ;demo.c:309: void raster_effu() {
                           1933 ;	---------------------------------
                           1934 ; Function raster_effu
                           1935 ; ---------------------------------
   097C                    1936 _raster_effu_start::
   097C                    1937 _raster_effu:
                           1938 ;demo.c:310: vdp_register(VDP_VOFFSET,0);
   097C 21 17 00           1939 	ld	hl,#0x0017
   097F E5                 1940 	push	hl
   0980 CDr00s00           1941 	call	_vdp_register
   0983 F1                 1942 	pop	af
                           1943 ;demo.c:311: waitVB();
   0984 76                 1944 		halt 
                           1945 ;demo.c:313: vdp_register(1,0x40); // disable vblank
   0985 21 01 40           1946 	ld	hl,#0x4001
   0988 E5                 1947 	push	hl
   0989 CDr00s00           1948 	call	_vdp_register
                           1949 ;demo.c:315: for (linenum = 40; linenum < 212; linenum+=4) {
   098C 3E 28              1950 	ld	a,#0x28
   098E 32r7Ds40           1951 	ld	(#_linenum + 0),a
   0991 F1                 1952 	pop	af
   0992 FD 21r7Ds40        1953 	ld	iy,#_linenum
   0996 FD 36 01 00        1954 	ld	1 (iy),#0x00
   099A                    1955 00101$:
   099A 3Ar7Ds40           1956 	ld	a,(#_linenum+0)
   099D D6 D4              1957 	sub	a,#0xD4
   099F 3Ar7Es40           1958 	ld	a,(#_linenum+1)
   09A2 DE 00              1959 	sbc	a,#0x00
   09A4 F2rD5s09           1960 	jp	P,00104$
                           1961 ;demo.c:316: vdp_register(19,linenum); // interrupt on line
   09A7 3Ar7Ds40           1962 	ld	a,(#_linenum+0)
   09AA F5                 1963 	push	af
   09AB 33                 1964 	inc	sp
   09AC 3E 13              1965 	ld	a,#0x13
   09AE F5                 1966 	push	af
   09AF 33                 1967 	inc	sp
   09B0 CDr00s00           1968 	call	_vdp_register
   09B3 F1                 1969 	pop	af
                           1970 ;demo.c:317: vdp_register(0,0x16); // mode SC5, IE1 interrupts on
   09B4 21 00 16           1971 	ld	hl,#0x1600
   09B7 E5                 1972 	push	hl
   09B8 CDr00s00           1973 	call	_vdp_register
   09BB F1                 1974 	pop	af
                           1975 ;demo.c:319: waitVB();
   09BC 76                 1976 		halt 
                           1977 ;demo.c:315: for (linenum = 40; linenum < 212; linenum+=4) {
   09BD 21r7Ds40           1978 	ld	hl,#_linenum
   09C0 7E                 1979 	ld	a,(hl)
   09C1 C6 04              1980 	add	a,#0x04
   09C3 23                 1981 	inc	hl
   09C4 2B                 1982 	dec	hl
   09C5 C5                 1983 	push	bc
   09C6 4F                 1984 	ld	c, a
   09C7 23                 1985 	inc	hl
   09C8 7E                 1986 	ld	a, (hl)
   09C9 47                 1987 	ld	b, a
   09CA 79                 1988 	ld	a, c
   09CB 2B                 1989 	dec	hl
   09CC 77                 1990 	ld	(hl), a
   09CD 78                 1991 	ld	a, b
   09CE C1                 1992 	pop	bc
   09CF CE 00              1993 	adc	a,#0x00
   09D1 23                 1994 	inc	hl
   09D2 77                 1995 	ld	(hl),a
   09D3 18 C5              1996 	jr	00101$
   09D5                    1997 00104$:
                           1998 ;demo.c:322: vdp_register(VDP_VOFFSET,0);
   09D5 21 17 00           1999 	ld	hl,#0x0017
   09D8 E5                 2000 	push	hl
   09D9 CDr00s00           2001 	call	_vdp_register
   09DC F1                 2002 	pop	af
                           2003 ;demo.c:336: vdp_register(0,0x6); // mode SC5, IE1 interrupts off
   09DD 21 00 06           2004 	ld	hl,#0x0600
   09E0 E5                 2005 	push	hl
   09E1 CDr00s00           2006 	call	_vdp_register
   09E4 F1                 2007 	pop	af
                           2008 ;demo.c:337: vdp_register(1,0x60); // enable vblank
   09E5 21 01 60           2009 	ld	hl,#0x6001
   09E8 E5                 2010 	push	hl
   09E9 CDr00s00           2011 	call	_vdp_register
   09EC F1                 2012 	pop	af
   09ED C9                 2013 	ret
   09EE                    2014 _raster_effu_end::
                           2015 ;demo.c:340: void twister() {
                           2016 ;	---------------------------------
                           2017 ; Function twister
                           2018 ; ---------------------------------
   09EE                    2019 _twister_start::
   09EE                    2020 _twister:
   09EE DD E5              2021 	push	ix
   09F0 DD 21 00 00        2022 	ld	ix,#0
   09F4 DD 39              2023 	add	ix,sp
   09F6 21 ED FF           2024 	ld	hl,#-19
   09F9 39                 2025 	add	hl,sp
   09FA F9                 2026 	ld	sp,hl
                           2027 ;demo.c:343: waitVB();
   09FB 76                 2028 		halt 
                           2029 ;demo.c:344: for (y = 0; y < 212; y+=4) {
   09FC DD 36 EF 00        2030 	ld	-17 (ix),#0x00
   0A00 DD 36 F0 00        2031 	ld	-16 (ix),#0x00
   0A04                    2032 00101$:
   0A04 DD 7E EF           2033 	ld	a,-17 (ix)
   0A07 D6 D4              2034 	sub	a,#0xD4
   0A09 DD 7E F0           2035 	ld	a,-16 (ix)
   0A0C DE 00              2036 	sbc	a,#0x00
   0A0E F2rB3s0A           2037 	jp	P,00104$
                           2038 ;demo.c:345: cmd.source_x = 0;
   0A11 21 04 00           2039 	ld	hl,#0x0004
   0A14 39                 2040 	add	hl,sp
   0A15 36 00              2041 	ld	(hl),#0x00
   0A17 23                 2042 	inc	hl
   0A18 36 00              2043 	ld	(hl),#0x00
                           2044 ;demo.c:346: sy = ((sintab[(vbicount+(y>>1)) & 255])>>1)+(256+64);
   0A1A DD 5E EF           2045 	ld	e,-17 (ix)
   0A1D DD 56 F0           2046 	ld	d,-16 (ix)
   0A20 CB 2A              2047 	sra	d
   0A22 CB 1B              2048 	rr	e
   0A24 3Ar40s40           2049 	ld	a,(#_vbicount+0)
   0A27 83                 2050 	add	a,e
   0A28 5F                 2051 	ld	e,a
   0A29 3Ar41s40           2052 	ld	a,(#_vbicount+1)
   0A2C 8A                 2053 	adc	a,d
   0A2D 16 00              2054 	ld	d,#0x00
   0A2F 21r00s00           2055 	ld	hl,#_sintab
   0A32 19                 2056 	add	hl,de
   0A33 5E                 2057 	ld	e,(hl)
   0A34 CB 2B              2058 	sra	e
   0A36 7B                 2059 	ld	a,e
   0A37 17                 2060 	rla	
   0A38 9F                 2061 	sbc	a,a
   0A39 57                 2062 	ld	d,a
   0A3A 21 40 01           2063 	ld	hl,#0x0140
   0A3D 19                 2064 	add	hl,de
   0A3E DD 75 ED           2065 	ld	-19 (ix),l
   0A41 DD 74 EE           2066 	ld	-18 (ix),h
                           2067 ;demo.c:347: cmd.source_y = sy;
   0A44 21 04 00           2068 	ld	hl,#0x0004
   0A47 39                 2069 	add	hl,sp
   0A48 EB                 2070 	ex	de,hl
   0A49 4B                 2071 	ld	c,e
   0A4A 42                 2072 	ld	b,d
   0A4B 69                 2073 	ld	l,c
   0A4C 60                 2074 	ld	h,b
   0A4D 23                 2075 	inc	hl
   0A4E 23                 2076 	inc	hl
   0A4F DD 7E ED           2077 	ld	a,-19 (ix)
   0A52 77                 2078 	ld	(hl),a
   0A53 23                 2079 	inc	hl
   0A54 DD 7E EE           2080 	ld	a,-18 (ix)
   0A57 77                 2081 	ld	(hl),a
                           2082 ;demo.c:348: cmd.dest_x = 0;
   0A58 21 04 00           2083 	ld	hl,#0x0004
   0A5B 19                 2084 	add	hl,de
   0A5C 36 00              2085 	ld	(hl),#0x00
   0A5E 23                 2086 	inc	hl
   0A5F 36 00              2087 	ld	(hl),#0x00
                           2088 ;demo.c:349: cmd.dest_y = y;
   0A61 21 06 00           2089 	ld	hl,#0x0006
   0A64 19                 2090 	add	hl,de
   0A65 DD 7E EF           2091 	ld	a,-17 (ix)
   0A68 77                 2092 	ld	(hl),a
   0A69 23                 2093 	inc	hl
   0A6A DD 7E F0           2094 	ld	a,-16 (ix)
   0A6D 77                 2095 	ld	(hl),a
                           2096 ;demo.c:350: cmd.size_x = 70;
   0A6E 21 08 00           2097 	ld	hl,#0x0008
   0A71 19                 2098 	add	hl,de
   0A72 36 46              2099 	ld	(hl),#0x46
   0A74 23                 2100 	inc	hl
   0A75 36 00              2101 	ld	(hl),#0x00
                           2102 ;demo.c:351: cmd.size_y = 4;
   0A77 21 0A 00           2103 	ld	hl,#0x000A
   0A7A 19                 2104 	add	hl,de
   0A7B 36 04              2105 	ld	(hl),#0x04
   0A7D 23                 2106 	inc	hl
   0A7E 36 00              2107 	ld	(hl),#0x00
                           2108 ;demo.c:352: cmd.data = 0;
   0A80 21 0C 00           2109 	ld	hl,#0x000C
   0A83 19                 2110 	add	hl,de
   0A84 4D                 2111 	ld	c,l
   0A85 44                 2112 	ld	b,h
   0A86 3E 00              2113 	ld	a,#0x00
   0A88 02                 2114 	ld	(bc),a
                           2115 ;demo.c:353: cmd.argument = 0x00;
   0A89 21 0D 00           2116 	ld	hl,#0x000D
   0A8C 19                 2117 	add	hl,de
   0A8D 4D                 2118 	ld	c,l
   0A8E 44                 2119 	ld	b,h
   0A8F 3E 00              2120 	ld	a,#0x00
   0A91 02                 2121 	ld	(bc),a
                           2122 ;demo.c:354: cmd.command = 0xd0; // logical vram to vram
   0A92 21 0E 00           2123 	ld	hl,#0x000E
   0A95 19                 2124 	add	hl,de
   0A96 4D                 2125 	ld	c,l
   0A97 44                 2126 	ld	b,h
   0A98 3E D0              2127 	ld	a,#0xD0
   0A9A 02                 2128 	ld	(bc),a
                           2129 ;demo.c:355: vdp_copier(&cmd);
   0A9B D5                 2130 	push	de
   0A9C CDr00s00           2131 	call	_vdp_copier
   0A9F F1                 2132 	pop	af
                           2133 ;demo.c:344: for (y = 0; y < 212; y+=4) {
   0AA0 DD 7E EF           2134 	ld	a,-17 (ix)
   0AA3 C6 04              2135 	add	a,#0x04
   0AA5 DD 77 EF           2136 	ld	-17 (ix),a
   0AA8 DD 7E F0           2137 	ld	a,-16 (ix)
   0AAB CE 00              2138 	adc	a,#0x00
   0AAD DD 77 F0           2139 	ld	-16 (ix),a
   0AB0 C3r04s0A           2140 	jp	00101$
   0AB3                    2141 00104$:
                           2142 ;demo.c:358: msx2_palette(4,vbicount>>2,vbicount>>3,vbicount>>2);
   0AB3 21r40s40           2143 	ld	hl,#_vbicount + 0
   0AB6 4E                 2144 	ld	c,(hl)
   0AB7 21r41s40           2145 	ld	hl,#_vbicount + 1
   0ABA 46                 2146 	ld	b,(hl)
   0ABB CB 28              2147 	sra	b
   0ABD CB 19              2148 	rr	c
   0ABF CB 28              2149 	sra	b
   0AC1 CB 19              2150 	rr	c
   0AC3 21r40s40           2151 	ld	hl,#_vbicount + 0
   0AC6 5E                 2152 	ld	e,(hl)
   0AC7 21r41s40           2153 	ld	hl,#_vbicount + 1
   0ACA 56                 2154 	ld	d,(hl)
   0ACB CB 2A              2155 	sra	d
   0ACD CB 1B              2156 	rr	e
   0ACF CB 2A              2157 	sra	d
   0AD1 CB 1B              2158 	rr	e
   0AD3 CB 2A              2159 	sra	d
   0AD5 CB 1B              2160 	rr	e
   0AD7 43                 2161 	ld	b,e
   0AD8 21r40s40           2162 	ld	hl,#_vbicount + 0
   0ADB 5E                 2163 	ld	e,(hl)
   0ADC 21r41s40           2164 	ld	hl,#_vbicount + 1
   0ADF 56                 2165 	ld	d,(hl)
   0AE0 CB 2A              2166 	sra	d
   0AE2 CB 1B              2167 	rr	e
   0AE4 CB 2A              2168 	sra	d
   0AE6 CB 1B              2169 	rr	e
   0AE8 79                 2170 	ld	a,c
   0AE9 F5                 2171 	push	af
   0AEA 33                 2172 	inc	sp
   0AEB C5                 2173 	push	bc
   0AEC 33                 2174 	inc	sp
   0AED 53                 2175 	ld	d,e
   0AEE 1E 04              2176 	ld	e,#0x04
   0AF0 D5                 2177 	push	de
   0AF1 CDr00s00           2178 	call	_msx2_palette
   0AF4 F1                 2179 	pop	af
   0AF5 F1                 2180 	pop	af
   0AF6 DD F9              2181 	ld	sp,ix
   0AF8 DD E1              2182 	pop	ix
   0AFA C9                 2183 	ret
   0AFB                    2184 _twister_end::
                           2185 ;demo.c:384: void do_letter(char cc) {
                           2186 ;	---------------------------------
                           2187 ; Function do_letter
                           2188 ; ---------------------------------
   0AFB                    2189 _do_letter_start::
   0AFB                    2190 _do_letter:
   0AFB DD E5              2191 	push	ix
   0AFD DD 21 00 00        2192 	ld	ix,#0
   0B01 DD 39              2193 	add	ix,sp
   0B03 21 ED FF           2194 	ld	hl,#-19
   0B06 39                 2195 	add	hl,sp
   0B07 F9                 2196 	ld	sp,hl
                           2197 ;demo.c:386: int cidx = cc - 65;
   0B08 DD 4E 04           2198 	ld	c,4 (ix)
   0B0B DD 7E 04           2199 	ld	a,4 (ix)
   0B0E 17                 2200 	rla	
   0B0F 9F                 2201 	sbc	a,a
   0B10 47                 2202 	ld	b,a
   0B11 79                 2203 	ld	a,c
   0B12 C6 BF              2204 	add	a,#0xBF
   0B14 DD 77 EF           2205 	ld	-17 (ix),a
   0B17 78                 2206 	ld	a,b
   0B18 CE FF              2207 	adc	a,#0xFF
   0B1A DD 77 F0           2208 	ld	-16 (ix),a
                           2209 ;demo.c:387: cmd.source_x = 127+font_x[cidx];
   0B1D 21 04 00           2210 	ld	hl,#0x0004
   0B20 39                 2211 	add	hl,sp
   0B21 EB                 2212 	ex	de,hl
   0B22 3ErF7              2213 	ld	a,#<_font_x
   0B24 DD 86 EF           2214 	add	a,-17 (ix)
   0B27 4F                 2215 	ld	c,a
   0B28 3Es0B              2216 	ld	a,#>_font_x
   0B2A DD 8E F0           2217 	adc	a,-16 (ix)
   0B2D 47                 2218 	ld	b,a
   0B2E 0A                 2219 	ld	a,(bc)
   0B2F 4F                 2220 	ld	c,a
   0B30 06 00              2221 	ld	b,#0x00
   0B32 21 7F 00           2222 	ld	hl,#0x007F
   0B35 09                 2223 	add	hl,bc
   0B36 4D                 2224 	ld	c,l
   0B37 44                 2225 	ld	b,h
   0B38 EB                 2226 	ex	de,hl
   0B39 71                 2227 	ld	(hl),c
   0B3A 23                 2228 	inc	hl
   0B3B 70                 2229 	ld	(hl),b
                           2230 ;demo.c:388: cmd.source_y = 256+font_y[cidx];
   0B3C 21 04 00           2231 	ld	hl,#0x0004
   0B3F 39                 2232 	add	hl,sp
   0B40 4D                 2233 	ld	c,l
   0B41 44                 2234 	ld	b,h
   0B42 21 02 00           2235 	ld	hl,#0x0002
   0B45 09                 2236 	add	hl,bc
   0B46 DD 75 ED           2237 	ld	-19 (ix),l
   0B49 DD 74 EE           2238 	ld	-18 (ix),h
   0B4C 3Er37              2239 	ld	a,#<_font_y
   0B4E DD 86 EF           2240 	add	a,-17 (ix)
   0B51 5F                 2241 	ld	e,a
   0B52 3Es0C              2242 	ld	a,#>_font_y
   0B54 DD 8E F0           2243 	adc	a,-16 (ix)
   0B57 57                 2244 	ld	d,a
   0B58 1A                 2245 	ld	a,(de)
   0B59 5F                 2246 	ld	e,a
   0B5A 16 00              2247 	ld	d,#0x00
   0B5C 21 00 01           2248 	ld	hl,#0x0100
   0B5F 19                 2249 	add	hl,de
   0B60 EB                 2250 	ex	de,hl
   0B61 DD 6E ED           2251 	ld	l,-19 (ix)
   0B64 DD 66 EE           2252 	ld	h,-18 (ix)
   0B67 73                 2253 	ld	(hl),e
   0B68 23                 2254 	inc	hl
   0B69 72                 2255 	ld	(hl),d
                           2256 ;demo.c:389: cmd.dest_x = lx;
   0B6A 21 04 00           2257 	ld	hl,#0x0004
   0B6D 09                 2258 	add	hl,bc
   0B6E DD 75 ED           2259 	ld	-19 (ix),l
   0B71 DD 74 EE           2260 	ld	-18 (ix),h
   0B74 21r7Fs40           2261 	ld	hl,#_lx + 0
   0B77 5E                 2262 	ld	e,(hl)
   0B78 16 00              2263 	ld	d,#0x00
   0B7A DD 6E ED           2264 	ld	l,-19 (ix)
   0B7D DD 66 EE           2265 	ld	h,-18 (ix)
   0B80 73                 2266 	ld	(hl),e
   0B81 23                 2267 	inc	hl
   0B82 72                 2268 	ld	(hl),d
                           2269 ;demo.c:390: cmd.dest_y = ly;
   0B83 21 06 00           2270 	ld	hl,#0x0006
   0B86 09                 2271 	add	hl,bc
   0B87 DD 75 ED           2272 	ld	-19 (ix),l
   0B8A DD 74 EE           2273 	ld	-18 (ix),h
   0B8D 21r80s40           2274 	ld	hl,#_ly + 0
   0B90 5E                 2275 	ld	e,(hl)
   0B91 16 00              2276 	ld	d,#0x00
   0B93 DD 6E ED           2277 	ld	l,-19 (ix)
   0B96 DD 66 EE           2278 	ld	h,-18 (ix)
   0B99 73                 2279 	ld	(hl),e
   0B9A 23                 2280 	inc	hl
   0B9B 72                 2281 	ld	(hl),d
                           2282 ;demo.c:391: cmd.size_x = font_w[cidx];
   0B9C 21 08 00           2283 	ld	hl,#0x0008
   0B9F 09                 2284 	add	hl,bc
   0BA0 DD 75 ED           2285 	ld	-19 (ix),l
   0BA3 DD 74 EE           2286 	ld	-18 (ix),h
   0BA6 3Er77              2287 	ld	a,#<_font_w
   0BA8 DD 86 EF           2288 	add	a,-17 (ix)
   0BAB 5F                 2289 	ld	e,a
   0BAC 3Es0C              2290 	ld	a,#>_font_w
   0BAE DD 8E F0           2291 	adc	a,-16 (ix)
   0BB1 57                 2292 	ld	d,a
   0BB2 1A                 2293 	ld	a,(de)
   0BB3 5F                 2294 	ld	e,a
   0BB4 16 00              2295 	ld	d,#0x00
   0BB6 DD 6E ED           2296 	ld	l,-19 (ix)
   0BB9 DD 66 EE           2297 	ld	h,-18 (ix)
   0BBC 73                 2298 	ld	(hl),e
   0BBD 23                 2299 	inc	hl
   0BBE 72                 2300 	ld	(hl),d
                           2301 ;demo.c:392: cmd.size_y = 8;
   0BBF 21 0A 00           2302 	ld	hl,#0x000A
   0BC2 09                 2303 	add	hl,bc
   0BC3 36 08              2304 	ld	(hl),#0x08
   0BC5 23                 2305 	inc	hl
   0BC6 36 00              2306 	ld	(hl),#0x00
                           2307 ;demo.c:393: cmd.argument = 0x00;
   0BC8 21 0D 00           2308 	ld	hl,#0x000D
   0BCB 09                 2309 	add	hl,bc
   0BCC EB                 2310 	ex	de,hl
   0BCD 3E 00              2311 	ld	a,#0x00
   0BCF 12                 2312 	ld	(de),a
                           2313 ;demo.c:394: cmd.command = 0x90; // logical vram to vram
   0BD0 21 0E 00           2314 	ld	hl,#0x000E
   0BD3 09                 2315 	add	hl,bc
   0BD4 EB                 2316 	ex	de,hl
   0BD5 3E 90              2317 	ld	a,#0x90
   0BD7 12                 2318 	ld	(de),a
                           2319 ;demo.c:395: vdp_copier(&cmd);
   0BD8 C5                 2320 	push	bc
   0BD9 CDr00s00           2321 	call	_vdp_copier
   0BDC F1                 2322 	pop	af
                           2323 ;demo.c:396: lx+=font_w[cidx]-1;
   0BDD 3Er77              2324 	ld	a,#<_font_w
   0BDF DD 86 EF           2325 	add	a,-17 (ix)
   0BE2 4F                 2326 	ld	c,a
   0BE3 3Es0C              2327 	ld	a,#>_font_w
   0BE5 DD 8E F0           2328 	adc	a,-16 (ix)
   0BE8 47                 2329 	ld	b,a
   0BE9 0A                 2330 	ld	a,(bc)
   0BEA 4F                 2331 	ld	c,a
   0BEB 0D                 2332 	dec	c
   0BEC 21r7Fs40           2333 	ld	hl,#_lx
   0BEF 7E                 2334 	ld	a,(hl)
   0BF0 81                 2335 	add	a,c
   0BF1 77                 2336 	ld	(hl),a
   0BF2 DD F9              2337 	ld	sp,ix
   0BF4 DD E1              2338 	pop	ix
   0BF6 C9                 2339 	ret
   0BF7                    2340 _do_letter_end::
   0BF7                    2341 _font_x:
   0BF7 01                 2342 	.db #0x01
   0BF8 09                 2343 	.db #0x09
   0BF9 11                 2344 	.db #0x11
   0BFA 19                 2345 	.db #0x19
   0BFB 21                 2346 	.db #0x21
   0BFC 29                 2347 	.db #0x29
   0BFD 31                 2348 	.db #0x31
   0BFE 39                 2349 	.db #0x39
   0BFF 41                 2350 	.db #0x41
   0C00 46                 2351 	.db #0x46
   0C01 4E                 2352 	.db #0x4E
   0C02 56                 2353 	.db #0x56
   0C03 5E                 2354 	.db #0x5E
   0C04 01                 2355 	.db #0x01
   0C05 0A                 2356 	.db #0x0A
   0C06 12                 2357 	.db #0x12
   0C07 1A                 2358 	.db #0x1A
   0C08 23                 2359 	.db #0x23
   0C09 2B                 2360 	.db #0x2B
   0C0A 33                 2361 	.db #0x33
   0C0B 3C                 2362 	.db #0x3C
   0C0C 44                 2363 	.db #0x44
   0C0D 4C                 2364 	.db #0x4C
   0C0E 56                 2365 	.db #0x56
   0C0F 5E                 2366 	.db #0x5E
   0C10 67                 2367 	.db #0x67
   0C11 00                 2368 	.db #0x00
   0C12 00                 2369 	.db #0x00
   0C13 00                 2370 	.db #0x00
   0C14 00                 2371 	.db #0x00
   0C15 00                 2372 	.db #0x00
   0C16 00                 2373 	.db #0x00
   0C17 01                 2374 	.db #0x01
   0C18 09                 2375 	.db #0x09
   0C19 11                 2376 	.db #0x11
   0C1A 18                 2377 	.db #0x18
   0C1B 20                 2378 	.db #0x20
   0C1C 28                 2379 	.db #0x28
   0C1D 2F                 2380 	.db #0x2F
   0C1E 37                 2381 	.db #0x37
   0C1F 3F                 2382 	.db #0x3F
   0C20 45                 2383 	.db #0x45
   0C21 4C                 2384 	.db #0x4C
   0C22 54                 2385 	.db #0x54
   0C23 5A                 2386 	.db #0x5A
   0C24 64                 2387 	.db #0x64
   0C25 01                 2388 	.db #0x01
   0C26 09                 2389 	.db #0x09
   0C27 11                 2390 	.db #0x11
   0C28 19                 2391 	.db #0x19
   0C29 21                 2392 	.db #0x21
   0C2A 29                 2393 	.db #0x29
   0C2B 30                 2394 	.db #0x30
   0C2C 38                 2395 	.db #0x38
   0C2D 40                 2396 	.db #0x40
   0C2E 4A                 2397 	.db #0x4A
   0C2F 52                 2398 	.db #0x52
   0C30 5A                 2399 	.db #0x5A
   0C31 00                 2400 	.db 0x00
   0C32 00                 2401 	.db 0x00
   0C33 00                 2402 	.db 0x00
   0C34 00                 2403 	.db 0x00
   0C35 00                 2404 	.db 0x00
   0C36 00                 2405 	.db 0x00
   0C37                    2406 _font_y:
   0C37 1C                 2407 	.db #0x1C
   0C38 1C                 2408 	.db #0x1C
   0C39 1C                 2409 	.db #0x1C
   0C3A 1C                 2410 	.db #0x1C
   0C3B 1C                 2411 	.db #0x1C
   0C3C 1C                 2412 	.db #0x1C
   0C3D 1C                 2413 	.db #0x1C
   0C3E 1C                 2414 	.db #0x1C
   0C3F 1C                 2415 	.db #0x1C
   0C40 1C                 2416 	.db #0x1C
   0C41 1C                 2417 	.db #0x1C
   0C42 1C                 2418 	.db #0x1C
   0C43 1C                 2419 	.db #0x1C
   0C44 25                 2420 	.db #0x25
   0C45 25                 2421 	.db #0x25
   0C46 25                 2422 	.db #0x25
   0C47 25                 2423 	.db #0x25
   0C48 25                 2424 	.db #0x25
   0C49 25                 2425 	.db #0x25
   0C4A 25                 2426 	.db #0x25
   0C4B 25                 2427 	.db #0x25
   0C4C 25                 2428 	.db #0x25
   0C4D 25                 2429 	.db #0x25
   0C4E 25                 2430 	.db #0x25
   0C4F 25                 2431 	.db #0x25
   0C50 25                 2432 	.db #0x25
   0C51 00                 2433 	.db #0x00
   0C52 00                 2434 	.db #0x00
   0C53 00                 2435 	.db #0x00
   0C54 00                 2436 	.db #0x00
   0C55 00                 2437 	.db #0x00
   0C56 00                 2438 	.db #0x00
   0C57 37                 2439 	.db #0x37
   0C58 37                 2440 	.db #0x37
   0C59 37                 2441 	.db #0x37
   0C5A 37                 2442 	.db #0x37
   0C5B 37                 2443 	.db #0x37
   0C5C 37                 2444 	.db #0x37
   0C5D 37                 2445 	.db #0x37
   0C5E 37                 2446 	.db #0x37
   0C5F 37                 2447 	.db #0x37
   0C60 37                 2448 	.db #0x37
   0C61 37                 2449 	.db #0x37
   0C62 37                 2450 	.db #0x37
   0C63 37                 2451 	.db #0x37
   0C64 37                 2452 	.db #0x37
   0C65 40                 2453 	.db #0x40
   0C66 40                 2454 	.db #0x40
   0C67 40                 2455 	.db #0x40
   0C68 40                 2456 	.db #0x40
   0C69 40                 2457 	.db #0x40
   0C6A 40                 2458 	.db #0x40
   0C6B 40                 2459 	.db #0x40
   0C6C 40                 2460 	.db #0x40
   0C6D 40                 2461 	.db #0x40
   0C6E 40                 2462 	.db #0x40
   0C6F 40                 2463 	.db #0x40
   0C70 40                 2464 	.db #0x40
   0C71 00                 2465 	.db 0x00
   0C72 00                 2466 	.db 0x00
   0C73 00                 2467 	.db 0x00
   0C74 00                 2468 	.db 0x00
   0C75 00                 2469 	.db 0x00
   0C76 00                 2470 	.db 0x00
   0C77                    2471 _font_w:
   0C77 07                 2472 	.db #0x07
   0C78 07                 2473 	.db #0x07
   0C79 07                 2474 	.db #0x07
   0C7A 07                 2475 	.db #0x07
   0C7B 07                 2476 	.db #0x07
   0C7C 07                 2477 	.db #0x07
   0C7D 07                 2478 	.db #0x07
   0C7E 07                 2479 	.db #0x07
   0C7F 04                 2480 	.db #0x04
   0C80 07                 2481 	.db #0x07
   0C81 07                 2482 	.db #0x07
   0C82 07                 2483 	.db #0x07
   0C83 09                 2484 	.db #0x09
   0C84 08                 2485 	.db #0x08
   0C85 07                 2486 	.db #0x07
   0C86 07                 2487 	.db #0x07
   0C87 08                 2488 	.db #0x08
   0C88 07                 2489 	.db #0x07
   0C89 07                 2490 	.db #0x07
   0C8A 08                 2491 	.db #0x08
   0C8B 07                 2492 	.db #0x07
   0C8C 07                 2493 	.db #0x07
   0C8D 09                 2494 	.db #0x09
   0C8E 07                 2495 	.db #0x07
   0C8F 08                 2496 	.db #0x08
   0C90 07                 2497 	.db #0x07
   0C91 00                 2498 	.db #0x00
   0C92 00                 2499 	.db #0x00
   0C93 00                 2500 	.db #0x00
   0C94 00                 2501 	.db #0x00
   0C95 00                 2502 	.db #0x00
   0C96 00                 2503 	.db #0x00
   0C97 07                 2504 	.db #0x07
   0C98 07                 2505 	.db #0x07
   0C99 06                 2506 	.db #0x06
   0C9A 07                 2507 	.db #0x07
   0C9B 07                 2508 	.db #0x07
   0C9C 07                 2509 	.db #0x07
   0C9D 07                 2510 	.db #0x07
   0C9E 07                 2511 	.db #0x07
   0C9F 05                 2512 	.db #0x05
   0CA0 06                 2513 	.db #0x06
   0CA1 07                 2514 	.db #0x07
   0CA2 05                 2515 	.db #0x05
   0CA3 09                 2516 	.db #0x09
   0CA4 07                 2517 	.db #0x07
   0CA5 07                 2518 	.db #0x07
   0CA6 07                 2519 	.db #0x07
   0CA7 07                 2520 	.db #0x07
   0CA8 07                 2521 	.db #0x07
   0CA9 07                 2522 	.db #0x07
   0CAA 06                 2523 	.db #0x06
   0CAB 07                 2524 	.db #0x07
   0CAC 07                 2525 	.db #0x07
   0CAD 09                 2526 	.db #0x09
   0CAE 07                 2527 	.db #0x07
   0CAF 07                 2528 	.db #0x07
   0CB0 07                 2529 	.db #0x07
   0CB1 00                 2530 	.db 0x00
   0CB2 00                 2531 	.db 0x00
   0CB3 00                 2532 	.db 0x00
   0CB4 00                 2533 	.db 0x00
   0CB5 00                 2534 	.db 0x00
   0CB6 00                 2535 	.db 0x00
                           2536 ;demo.c:399: void drawstr(char* str, uint8_t x, uint8_t y) {
                           2537 ;	---------------------------------
                           2538 ; Function drawstr
                           2539 ; ---------------------------------
   0CB7                    2540 _drawstr_start::
   0CB7                    2541 _drawstr:
   0CB7 DD E5              2542 	push	ix
   0CB9 DD 21 00 00        2543 	ld	ix,#0
   0CBD DD 39              2544 	add	ix,sp
                           2545 ;demo.c:400: char* c = str;
   0CBF DD 4E 04           2546 	ld	c,4 (ix)
   0CC2 DD 46 05           2547 	ld	b,5 (ix)
                           2548 ;demo.c:401: lx = x;
   0CC5 DD 5E 06           2549 	ld	e,6 (ix)
   0CC8 21r7Fs40           2550 	ld	hl,#_lx + 0
   0CCB 73                 2551 	ld	(hl), e
                           2552 ;demo.c:402: ly = y;
   0CCC DD 7E 07           2553 	ld	a,7 (ix)
   0CCF 21r80s40           2554 	ld	hl,#_ly + 0
   0CD2 77                 2555 	ld	(hl), a
                           2556 ;demo.c:403: while (*c) {
   0CD3                    2557 00107$:
   0CD3 0A                 2558 	ld	a,(bc)
   0CD4 57                 2559 	ld	d,a
   0CD5 B7                 2560 	or	a,a
   0CD6 28 42              2561 	jr	Z,00110$
                           2562 ;demo.c:404: char ltr = *c++; 
   0CD8 03                 2563 	inc	bc
                           2564 ;demo.c:405: if (ltr == ' ') lx+=4;
   0CD9 7A                 2565 	ld	a,d
   0CDA D6 20              2566 	sub	a,#0x20
   0CDC 20 1E              2567 	jr	NZ,00105$
   0CDE FD 21r7Fs40        2568 	ld	iy,#_lx
   0CE2 FD 34 00           2569 	inc	0 (iy)
   0CE5 FD 21r7Fs40        2570 	ld	iy,#_lx
   0CE9 FD 34 00           2571 	inc	0 (iy)
   0CEC FD 21r7Fs40        2572 	ld	iy,#_lx
   0CF0 FD 34 00           2573 	inc	0 (iy)
   0CF3 FD 21r7Fs40        2574 	ld	iy,#_lx
   0CF7 FD 34 00           2575 	inc	0 (iy)
   0CFA 18 D7              2576 	jr	00107$
   0CFC                    2577 00105$:
                           2578 ;demo.c:406: else if (ltr == '_') { ly+=9; lx = x; }
   0CFC 7A                 2579 	ld	a,d
   0CFD D6 5F              2580 	sub	a,#0x5F
   0CFF 20 0D              2581 	jr	NZ,00102$
   0D01 21r80s40           2582 	ld	hl,#_ly
   0D04 7E                 2583 	ld	a,(hl)
   0D05 C6 09              2584 	add	a,#0x09
   0D07 77                 2585 	ld	(hl),a
   0D08 21r7Fs40           2586 	ld	hl,#_lx + 0
   0D0B 73                 2587 	ld	(hl), e
   0D0C 18 C5              2588 	jr	00107$
   0D0E                    2589 00102$:
                           2590 ;demo.c:407: else do_letter(ltr);
   0D0E C5                 2591 	push	bc
   0D0F D5                 2592 	push	de
   0D10 D5                 2593 	push	de
   0D11 33                 2594 	inc	sp
   0D12 CDrFBs0A           2595 	call	_do_letter
   0D15 33                 2596 	inc	sp
   0D16 D1                 2597 	pop	de
   0D17 C1                 2598 	pop	bc
   0D18 18 B9              2599 	jr	00107$
   0D1A                    2600 00110$:
   0D1A DD E1              2601 	pop	ix
   0D1C C9                 2602 	ret
   0D1D                    2603 _drawstr_end::
                           2604 ;demo.c:411: void font() {
                           2605 ;	---------------------------------
                           2606 ; Function font
                           2607 ; ---------------------------------
   0D1D                    2608 _font_start::
   0D1D                    2609 _font:
                           2610 ;demo.c:412: drawstr("THE QUICK BROWN FOX",70,40);
   0D1D 21 46 28           2611 	ld	hl,#0x2846
   0D20 E5                 2612 	push	hl
   0D21 21r5Fs0D           2613 	ld	hl,#__str_0
   0D24 E5                 2614 	push	hl
   0D25 CDrB7s0C           2615 	call	_drawstr
   0D28 F1                 2616 	pop	af
   0D29 F1                 2617 	pop	af
                           2618 ;demo.c:413: drawstr("JUMPS OVER THE LAZY DOG",70,49);
   0D2A 21 46 31           2619 	ld	hl,#0x3146
   0D2D E5                 2620 	push	hl
   0D2E 21r73s0D           2621 	ld	hl,#__str_1
   0D31 E5                 2622 	push	hl
   0D32 CDrB7s0C           2623 	call	_drawstr
   0D35 F1                 2624 	pop	af
   0D36 F1                 2625 	pop	af
                           2626 ;demo.c:415: drawstr("the quick brown fox",70,60);
   0D37 21 46 3C           2627 	ld	hl,#0x3C46
   0D3A E5                 2628 	push	hl
   0D3B 21r8Bs0D           2629 	ld	hl,#__str_2
   0D3E E5                 2630 	push	hl
   0D3F CDrB7s0C           2631 	call	_drawstr
   0D42 F1                 2632 	pop	af
   0D43 F1                 2633 	pop	af
                           2634 ;demo.c:416: drawstr("jumps over the lazy dog",70,69);
   0D44 21 46 45           2635 	ld	hl,#0x4546
   0D47 E5                 2636 	push	hl
   0D48 21r9Fs0D           2637 	ld	hl,#__str_3
   0D4B E5                 2638 	push	hl
   0D4C CDrB7s0C           2639 	call	_drawstr
   0D4F F1                 2640 	pop	af
   0D50 F1                 2641 	pop	af
                           2642 ;demo.c:418: drawstr("This is a test of the_emergency alert system__This is only a test__Please locate your_nearest exit and proceed_to your gate at once",70,100);
   0D51 21 46 64           2643 	ld	hl,#0x6446
   0D54 E5                 2644 	push	hl
   0D55 21rB7s0D           2645 	ld	hl,#__str_4
   0D58 E5                 2646 	push	hl
   0D59 CDrB7s0C           2647 	call	_drawstr
   0D5C F1                 2648 	pop	af
   0D5D F1                 2649 	pop	af
   0D5E C9                 2650 	ret
   0D5F                    2651 _font_end::
   0D5F                    2652 __str_0:
   0D5F 54 48 45 20 51 55  2653 	.ascii "THE QUICK BROWN FOX"
        49 43 4B 20 42 52
        4F 57 4E 20 46 4F
        58
   0D72 00                 2654 	.db 0x00
   0D73                    2655 __str_1:
   0D73 4A 55 4D 50 53 20  2656 	.ascii "JUMPS OVER THE LAZY DOG"
        4F 56 45 52 20 54
        48 45 20 4C 41 5A
        59 20 44 4F 47
   0D8A 00                 2657 	.db 0x00
   0D8B                    2658 __str_2:
   0D8B 74 68 65 20 71 75  2659 	.ascii "the quick brown fox"
        69 63 6B 20 62 72
        6F 77 6E 20 66 6F
        78
   0D9E 00                 2660 	.db 0x00
   0D9F                    2661 __str_3:
   0D9F 6A 75 6D 70 73 20  2662 	.ascii "jumps over the lazy dog"
        6F 76 65 72 20 74
        68 65 20 6C 61 7A
        79 20 64 6F 67
   0DB6 00                 2663 	.db 0x00
   0DB7                    2664 __str_4:
   0DB7 54 68 69 73 20 69  2665 	.ascii "This is a test of the_emergency alert system__This is only a"
        73 20 61 20 74 65
        73 74 20 6F 66 20
        74 68 65 5F 65 6D
        65 72 67 65 6E 63
        79 20 61 6C 65 72
        74 20 73 79 73 74
        65 6D 5F 5F 54 68
        69 73 20 69 73 20
        6F 6E 6C 79 20 61
   0DF3 20 74 65 73 74 5F  2666 	.ascii " test__Please locate your_nearest exit and proceed_to your g"
        5F 50 6C 65 61 73
        65 20 6C 6F 63 61
        74 65 20 79 6F 75
        72 5F 6E 65 61 72
        65 73 74 20 65 78
        69 74 20 61 6E 64
        20 70 72 6F 63 65
        65 64 5F 74 6F 20
        79 6F 75 72 20 67
   0E2F 61 74 65 20 61 74  2667 	.ascii "ate at once"
        20 6F 6E 63 65
   0E3A 00                 2668 	.db 0x00
                           2669 ;demo.c:426: void do_animplay() {
                           2670 ;	---------------------------------
                           2671 ; Function do_animplay
                           2672 ; ---------------------------------
   0E3B                    2673 _do_animplay_start::
   0E3B                    2674 _do_animplay:
   0E3B DD E5              2675 	push	ix
   0E3D DD 21 00 00        2676 	ld	ix,#0
   0E41 DD 39              2677 	add	ix,sp
   0E43 21 EC FF           2678 	ld	hl,#-20
   0E46 39                 2679 	add	hl,sp
   0E47 F9                 2680 	ld	sp,hl
                           2681 ;demo.c:432: for (y = 0; y < 106; y+=1) {
   0E48 DD 36 FF 00        2682 	ld	-1 (ix),#0x00
   0E4C                    2683 00107$:
   0E4C DD 7E FF           2684 	ld	a,-1 (ix)
   0E4F D6 6A              2685 	sub	a,#0x6A
   0E51 D2rFDs0E           2686 	jp	NC,00110$
                           2687 ;demo.c:433: cmd.source_x = xo;
   0E54 21 04 00           2688 	ld	hl,#0x0004
   0E57 39                 2689 	add	hl,sp
   0E58 EB                 2690 	ex	de,hl
   0E59 ED 4Br81s40        2691 	ld	bc,(_xo)
   0E5D EB                 2692 	ex	de,hl
   0E5E 71                 2693 	ld	(hl),c
   0E5F 23                 2694 	inc	hl
   0E60 70                 2695 	ld	(hl),b
                           2696 ;demo.c:434: cmd.source_y = 256+po+yo+(y>>1);
   0E61 21 04 00           2697 	ld	hl,#0x0004
   0E64 39                 2698 	add	hl,sp
   0E65 4D                 2699 	ld	c,l
   0E66 44                 2700 	ld	b,h
   0E67 21 02 00           2701 	ld	hl,#0x0002
   0E6A 09                 2702 	add	hl,bc
   0E6B DD 75 EE           2703 	ld	-18 (ix),l
   0E6E DD 74 EF           2704 	ld	-17 (ix),h
   0E71 3Ar85s40           2705 	ld	a,(#_po+0)
   0E74 5F                 2706 	ld	e,a
   0E75 3Ar86s40           2707 	ld	a,(#_po+1)
   0E78 C6 01              2708 	add	a,#0x01
   0E7A 57                 2709 	ld	d,a
   0E7B 21r83s40           2710 	ld	hl,#_yo
   0E7E 7B                 2711 	ld	a,e
   0E7F 86                 2712 	add	a,(hl)
   0E80 DD 77 EC           2713 	ld	-20 (ix),a
   0E83 7A                 2714 	ld	a,d
   0E84 23                 2715 	inc	hl
   0E85 8E                 2716 	adc	a,(hl)
   0E86 DD 77 ED           2717 	ld	-19 (ix),a
   0E89 DD 5E FF           2718 	ld	e,-1 (ix)
   0E8C CB 3B              2719 	srl	e
   0E8E 16 00              2720 	ld	d,#0x00
   0E90 DD 7E EC           2721 	ld	a,-20 (ix)
   0E93 83                 2722 	add	a,e
   0E94 5F                 2723 	ld	e,a
   0E95 DD 7E ED           2724 	ld	a,-19 (ix)
   0E98 8A                 2725 	adc	a,d
   0E99 57                 2726 	ld	d,a
   0E9A DD 6E EE           2727 	ld	l,-18 (ix)
   0E9D DD 66 EF           2728 	ld	h,-17 (ix)
   0EA0 73                 2729 	ld	(hl),e
   0EA1 23                 2730 	inc	hl
   0EA2 72                 2731 	ld	(hl),d
                           2732 ;demo.c:435: cmd.dest_x = 0;
   0EA3 21 04 00           2733 	ld	hl,#0x0004
   0EA6 09                 2734 	add	hl,bc
   0EA7 36 00              2735 	ld	(hl),#0x00
   0EA9 23                 2736 	inc	hl
   0EAA 36 00              2737 	ld	(hl),#0x00
                           2738 ;demo.c:436: cmd.dest_y = (y<<1);
   0EAC 21 06 00           2739 	ld	hl,#0x0006
   0EAF 09                 2740 	add	hl,bc
   0EB0 DD 75 EC           2741 	ld	-20 (ix),l
   0EB3 DD 74 ED           2742 	ld	-19 (ix),h
   0EB6 DD 5E FF           2743 	ld	e,-1 (ix)
   0EB9 16 00              2744 	ld	d,#0x00
   0EBB CB 23              2745 	sla	e
   0EBD CB 12              2746 	rl	d
   0EBF DD 6E EC           2747 	ld	l,-20 (ix)
   0EC2 DD 66 ED           2748 	ld	h,-19 (ix)
   0EC5 73                 2749 	ld	(hl),e
   0EC6 23                 2750 	inc	hl
   0EC7 72                 2751 	ld	(hl),d
                           2752 ;demo.c:437: cmd.size_x = 128;
   0EC8 21 08 00           2753 	ld	hl,#0x0008
   0ECB 09                 2754 	add	hl,bc
   0ECC 36 80              2755 	ld	(hl),#0x80
   0ECE 23                 2756 	inc	hl
   0ECF 36 00              2757 	ld	(hl),#0x00
                           2758 ;demo.c:438: cmd.size_y = 1;
   0ED1 21 0A 00           2759 	ld	hl,#0x000A
   0ED4 09                 2760 	add	hl,bc
   0ED5 36 01              2761 	ld	(hl),#0x01
   0ED7 23                 2762 	inc	hl
   0ED8 36 00              2763 	ld	(hl),#0x00
                           2764 ;demo.c:439: cmd.data = 0;
   0EDA 21 0C 00           2765 	ld	hl,#0x000C
   0EDD 09                 2766 	add	hl,bc
   0EDE EB                 2767 	ex	de,hl
   0EDF 3E 00              2768 	ld	a,#0x00
   0EE1 12                 2769 	ld	(de),a
                           2770 ;demo.c:440: cmd.argument = 0x00;
   0EE2 21 0D 00           2771 	ld	hl,#0x000D
   0EE5 09                 2772 	add	hl,bc
   0EE6 EB                 2773 	ex	de,hl
   0EE7 3E 00              2774 	ld	a,#0x00
   0EE9 12                 2775 	ld	(de),a
                           2776 ;demo.c:441: cmd.command = 0xD0;
   0EEA 21 0E 00           2777 	ld	hl,#0x000E
   0EED 09                 2778 	add	hl,bc
   0EEE EB                 2779 	ex	de,hl
   0EEF 3E D0              2780 	ld	a,#0xD0
   0EF1 12                 2781 	ld	(de),a
                           2782 ;demo.c:442: vdp_copier(&cmd);
   0EF2 C5                 2783 	push	bc
   0EF3 CDr00s00           2784 	call	_vdp_copier
   0EF6 F1                 2785 	pop	af
                           2786 ;demo.c:432: for (y = 0; y < 106; y+=1) {
   0EF7 DD 34 FF           2787 	inc	-1 (ix)
   0EFA C3r4Cs0E           2788 	jp	00107$
   0EFD                    2789 00110$:
                           2790 ;demo.c:445: for (y = 0; y < 106; y+=1) {
   0EFD DD 36 FF 00        2791 	ld	-1 (ix),#0x00
   0F01                    2792 00111$:
   0F01 DD 7E FF           2793 	ld	a,-1 (ix)
   0F04 D6 6A              2794 	sub	a,#0x6A
   0F06 D2rB2s0F           2795 	jp	NC,00114$
                           2796 ;demo.c:446: cmd.source_x = xo;
   0F09 21 04 00           2797 	ld	hl,#0x0004
   0F0C 39                 2798 	add	hl,sp
   0F0D EB                 2799 	ex	de,hl
   0F0E ED 4Br81s40        2800 	ld	bc,(_xo)
   0F12 EB                 2801 	ex	de,hl
   0F13 71                 2802 	ld	(hl),c
   0F14 23                 2803 	inc	hl
   0F15 70                 2804 	ld	(hl),b
                           2805 ;demo.c:447: cmd.source_y = 256+po+yo+(y>>1);
   0F16 21 04 00           2806 	ld	hl,#0x0004
   0F19 39                 2807 	add	hl,sp
   0F1A 4D                 2808 	ld	c,l
   0F1B 44                 2809 	ld	b,h
   0F1C 21 02 00           2810 	ld	hl,#0x0002
   0F1F 09                 2811 	add	hl,bc
   0F20 DD 75 EC           2812 	ld	-20 (ix),l
   0F23 DD 74 ED           2813 	ld	-19 (ix),h
   0F26 3Ar85s40           2814 	ld	a,(#_po+0)
   0F29 5F                 2815 	ld	e,a
   0F2A 3Ar86s40           2816 	ld	a,(#_po+1)
   0F2D C6 01              2817 	add	a,#0x01
   0F2F 57                 2818 	ld	d,a
   0F30 21r83s40           2819 	ld	hl,#_yo
   0F33 7B                 2820 	ld	a,e
   0F34 86                 2821 	add	a,(hl)
   0F35 DD 77 EE           2822 	ld	-18 (ix),a
   0F38 7A                 2823 	ld	a,d
   0F39 23                 2824 	inc	hl
   0F3A 8E                 2825 	adc	a,(hl)
   0F3B DD 77 EF           2826 	ld	-17 (ix),a
   0F3E DD 5E FF           2827 	ld	e,-1 (ix)
   0F41 CB 3B              2828 	srl	e
   0F43 16 00              2829 	ld	d,#0x00
   0F45 DD 7E EE           2830 	ld	a,-18 (ix)
   0F48 83                 2831 	add	a,e
   0F49 5F                 2832 	ld	e,a
   0F4A DD 7E EF           2833 	ld	a,-17 (ix)
   0F4D 8A                 2834 	adc	a,d
   0F4E 57                 2835 	ld	d,a
   0F4F DD 6E EC           2836 	ld	l,-20 (ix)
   0F52 DD 66 ED           2837 	ld	h,-19 (ix)
   0F55 73                 2838 	ld	(hl),e
   0F56 23                 2839 	inc	hl
   0F57 72                 2840 	ld	(hl),d
                           2841 ;demo.c:448: cmd.dest_x = 128;
   0F58 21 04 00           2842 	ld	hl,#0x0004
   0F5B 09                 2843 	add	hl,bc
   0F5C 36 80              2844 	ld	(hl),#0x80
   0F5E 23                 2845 	inc	hl
   0F5F 36 00              2846 	ld	(hl),#0x00
                           2847 ;demo.c:449: cmd.dest_y = (y<<1);
   0F61 21 06 00           2848 	ld	hl,#0x0006
   0F64 09                 2849 	add	hl,bc
   0F65 DD 75 EC           2850 	ld	-20 (ix),l
   0F68 DD 74 ED           2851 	ld	-19 (ix),h
   0F6B DD 5E FF           2852 	ld	e,-1 (ix)
   0F6E 16 00              2853 	ld	d,#0x00
   0F70 CB 23              2854 	sla	e
   0F72 CB 12              2855 	rl	d
   0F74 DD 6E EC           2856 	ld	l,-20 (ix)
   0F77 DD 66 ED           2857 	ld	h,-19 (ix)
   0F7A 73                 2858 	ld	(hl),e
   0F7B 23                 2859 	inc	hl
   0F7C 72                 2860 	ld	(hl),d
                           2861 ;demo.c:450: cmd.size_x = 128;
   0F7D 21 08 00           2862 	ld	hl,#0x0008
   0F80 09                 2863 	add	hl,bc
   0F81 36 80              2864 	ld	(hl),#0x80
   0F83 23                 2865 	inc	hl
   0F84 36 00              2866 	ld	(hl),#0x00
                           2867 ;demo.c:451: cmd.size_y = 1;
   0F86 21 0A 00           2868 	ld	hl,#0x000A
   0F89 09                 2869 	add	hl,bc
   0F8A 36 01              2870 	ld	(hl),#0x01
   0F8C 23                 2871 	inc	hl
   0F8D 36 00              2872 	ld	(hl),#0x00
                           2873 ;demo.c:452: cmd.data = 0;
   0F8F 21 0C 00           2874 	ld	hl,#0x000C
   0F92 09                 2875 	add	hl,bc
   0F93 EB                 2876 	ex	de,hl
   0F94 3E 00              2877 	ld	a,#0x00
   0F96 12                 2878 	ld	(de),a
                           2879 ;demo.c:453: cmd.argument = 0x00;
   0F97 21 0D 00           2880 	ld	hl,#0x000D
   0F9A 09                 2881 	add	hl,bc
   0F9B EB                 2882 	ex	de,hl
   0F9C 3E 00              2883 	ld	a,#0x00
   0F9E 12                 2884 	ld	(de),a
                           2885 ;demo.c:454: cmd.command = 0xd2; // logical vram to vram, xor
   0F9F 21 0E 00           2886 	ld	hl,#0x000E
   0FA2 09                 2887 	add	hl,bc
   0FA3 EB                 2888 	ex	de,hl
   0FA4 3E D2              2889 	ld	a,#0xD2
   0FA6 12                 2890 	ld	(de),a
                           2891 ;demo.c:455: vdp_copier(&cmd);
   0FA7 C5                 2892 	push	bc
   0FA8 CDr00s00           2893 	call	_vdp_copier
   0FAB F1                 2894 	pop	af
                           2895 ;demo.c:445: for (y = 0; y < 106; y+=1) {
   0FAC DD 34 FF           2896 	inc	-1 (ix)
   0FAF C3r01s0F           2897 	jp	00111$
   0FB2                    2898 00114$:
                           2899 ;demo.c:459: xo+=128;
   0FB2 21r81s40           2900 	ld	hl,#_xo
   0FB5 7E                 2901 	ld	a,(hl)
   0FB6 C6 80              2902 	add	a,#0x80
   0FB8 23                 2903 	inc	hl
   0FB9 2B                 2904 	dec	hl
   0FBA C5                 2905 	push	bc
   0FBB 4F                 2906 	ld	c, a
   0FBC 23                 2907 	inc	hl
   0FBD 7E                 2908 	ld	a, (hl)
   0FBE 47                 2909 	ld	b, a
   0FBF 79                 2910 	ld	a, c
   0FC0 2B                 2911 	dec	hl
   0FC1 77                 2912 	ld	(hl), a
   0FC2 78                 2913 	ld	a, b
   0FC3 C1                 2914 	pop	bc
   0FC4 CE 00              2915 	adc	a,#0x00
   0FC6 23                 2916 	inc	hl
   0FC7 77                 2917 	ld	(hl),a
                           2918 ;demo.c:460: if (xo >= 256) {
   0FC8 3Ar81s40           2919 	ld	a,(#_xo+0)
   0FCB D6 00              2920 	sub	a,#0x00
   0FCD 3Ar82s40           2921 	ld	a,(#_xo+1)
   0FD0 DE 01              2922 	sbc	a,#0x01
   0FD2 FAr39s10           2923 	jp	M,00106$
                           2924 ;demo.c:461: xo = 0;
   0FD5 21r81s40           2925 	ld	hl,#_xo + 0
   0FD8 36 00              2926 	ld	(hl), #0x00
   0FDA 21r82s40           2927 	ld	hl,#_xo + 1
   0FDD 36 00              2928 	ld	(hl), #0x00
                           2929 ;demo.c:462: yo+=53;
   0FDF 21r83s40           2930 	ld	hl,#_yo
   0FE2 7E                 2931 	ld	a,(hl)
   0FE3 C6 35              2932 	add	a,#0x35
   0FE5 23                 2933 	inc	hl
   0FE6 2B                 2934 	dec	hl
   0FE7 C5                 2935 	push	bc
   0FE8 4F                 2936 	ld	c, a
   0FE9 23                 2937 	inc	hl
   0FEA 7E                 2938 	ld	a, (hl)
   0FEB 47                 2939 	ld	b, a
   0FEC 79                 2940 	ld	a, c
   0FED 2B                 2941 	dec	hl
   0FEE 77                 2942 	ld	(hl), a
   0FEF 78                 2943 	ld	a, b
   0FF0 C1                 2944 	pop	bc
   0FF1 CE 00              2945 	adc	a,#0x00
   0FF3 23                 2946 	inc	hl
   0FF4 77                 2947 	ld	(hl),a
                           2948 ;demo.c:463: if (yo >= 212) { yo = 0; po+=256; }
   0FF5 3Ar83s40           2949 	ld	a,(#_yo+0)
   0FF8 D6 D4              2950 	sub	a,#0xD4
   0FFA 3Ar84s40           2951 	ld	a,(#_yo+1)
   0FFD DE 00              2952 	sbc	a,#0x00
   0FFF FAr22s10           2953 	jp	M,00102$
   1002 21r83s40           2954 	ld	hl,#_yo + 0
   1005 36 00              2955 	ld	(hl), #0x00
   1007 21r84s40           2956 	ld	hl,#_yo + 1
   100A 36 00              2957 	ld	(hl), #0x00
   100C 21r85s40           2958 	ld	hl,#_po
   100F 7E                 2959 	ld	a,(hl)
   1010 C6 00              2960 	add	a,#0x00
   1012 23                 2961 	inc	hl
   1013 2B                 2962 	dec	hl
   1014 C5                 2963 	push	bc
   1015 4F                 2964 	ld	c, a
   1016 23                 2965 	inc	hl
   1017 7E                 2966 	ld	a, (hl)
   1018 47                 2967 	ld	b, a
   1019 79                 2968 	ld	a, c
   101A 2B                 2969 	dec	hl
   101B 77                 2970 	ld	(hl), a
   101C 78                 2971 	ld	a, b
   101D C1                 2972 	pop	bc
   101E CE 01              2973 	adc	a,#0x01
   1020 23                 2974 	inc	hl
   1021 77                 2975 	ld	(hl),a
   1022                    2976 00102$:
                           2977 ;demo.c:464: if (po >= 768) {
   1022 3Ar85s40           2978 	ld	a,(#_po+0)
   1025 D6 00              2979 	sub	a,#0x00
   1027 3Ar86s40           2980 	ld	a,(#_po+1)
   102A DE 03              2981 	sbc	a,#0x03
   102C FAr39s10           2982 	jp	M,00106$
                           2983 ;demo.c:465: po = 0;
   102F 21r85s40           2984 	ld	hl,#_po + 0
   1032 36 00              2985 	ld	(hl), #0x00
   1034 21r86s40           2986 	ld	hl,#_po + 1
   1037 36 00              2987 	ld	(hl), #0x00
   1039                    2988 00106$:
                           2989 ;demo.c:470: msx2_palette(15,3+sintab[fffaaa & 255]>>5,3,4);
   1039 21r87s40           2990 	ld	hl,#_fffaaa + 0
   103C 4E                 2991 	ld	c,(hl)
   103D 06 00              2992 	ld	b,#0x00
   103F 21r00s00           2993 	ld	hl,#_sintab
   1042 09                 2994 	add	hl,bc
   1043 7E                 2995 	ld	a,(hl)
   1044 4F                 2996 	ld	c,a
   1045 17                 2997 	rla	
   1046 9F                 2998 	sbc	a,a
   1047 47                 2999 	ld	b,a
   1048 03                 3000 	inc	bc
   1049 03                 3001 	inc	bc
   104A 03                 3002 	inc	bc
   104B CB 28              3003 	sra	b
   104D CB 19              3004 	rr	c
   104F CB 28              3005 	sra	b
   1051 CB 19              3006 	rr	c
   1053 CB 28              3007 	sra	b
   1055 CB 19              3008 	rr	c
   1057 CB 28              3009 	sra	b
   1059 CB 19              3010 	rr	c
   105B CB 28              3011 	sra	b
   105D CB 19              3012 	rr	c
   105F 21 03 04           3013 	ld	hl,#0x0403
   1062 E5                 3014 	push	hl
   1063 41                 3015 	ld	b,c
   1064 0E 0F              3016 	ld	c,#0x0F
   1066 C5                 3017 	push	bc
   1067 CDr00s00           3018 	call	_msx2_palette
   106A F1                 3019 	pop	af
   106B F1                 3020 	pop	af
                           3021 ;demo.c:471: msx2_palette(3,2+sintab[fffaaa & 255]>>5,0,0);
   106C 21r87s40           3022 	ld	hl,#_fffaaa + 0
   106F 4E                 3023 	ld	c,(hl)
   1070 06 00              3024 	ld	b,#0x00
   1072 21r00s00           3025 	ld	hl,#_sintab
   1075 09                 3026 	add	hl,bc
   1076 7E                 3027 	ld	a,(hl)
   1077 4F                 3028 	ld	c,a
   1078 17                 3029 	rla	
   1079 9F                 3030 	sbc	a,a
   107A 47                 3031 	ld	b,a
   107B 03                 3032 	inc	bc
   107C 03                 3033 	inc	bc
   107D CB 28              3034 	sra	b
   107F CB 19              3035 	rr	c
   1081 CB 28              3036 	sra	b
   1083 CB 19              3037 	rr	c
   1085 CB 28              3038 	sra	b
   1087 CB 19              3039 	rr	c
   1089 CB 28              3040 	sra	b
   108B CB 19              3041 	rr	c
   108D CB 28              3042 	sra	b
   108F CB 19              3043 	rr	c
   1091 21 00 00           3044 	ld	hl,#0x0000
   1094 E5                 3045 	push	hl
   1095 41                 3046 	ld	b,c
   1096 0E 03              3047 	ld	c,#0x03
   1098 C5                 3048 	push	bc
   1099 CDr00s00           3049 	call	_msx2_palette
   109C F1                 3050 	pop	af
   109D F1                 3051 	pop	af
                           3052 ;demo.c:472: fffaaa++;
   109E FD 21r87s40        3053 	ld	iy,#_fffaaa
   10A2 FD 34 00           3054 	inc	0 (iy)
   10A5 20 07              3055 	jr	NZ,00132$
   10A7 FD 21r87s40        3056 	ld	iy,#_fffaaa
   10AB FD 34 01           3057 	inc	1 (iy)
   10AE                    3058 00132$:
   10AE DD F9              3059 	ld	sp,ix
   10B0 DD E1              3060 	pop	ix
   10B2 C9                 3061 	ret
   10B3                    3062 _do_animplay_end::
                           3063 ;demo.c:481: void main() {
                           3064 ;	---------------------------------
                           3065 ; Function main
                           3066 ; ---------------------------------
   10B3                    3067 _main_start::
   10B3                    3068 _main:
                           3069 ;demo.c:482: unsigned char quit=0;
   10B3 0E 00              3070 	ld	c,#0x00
                           3071 ;demo.c:483: int modes = 128; // interlace bit on
   10B5 11 80 00           3072 	ld	de,#0x0080
                           3073 ;demo.c:487: spindown();
   10B8 C5                 3074 	push	bc
   10B9 D5                 3075 	push	de
   10BA CDr00s00           3076 	call	_spindown
   10BD D1                 3077 	pop	de
   10BE C1                 3078 	pop	bc
                           3079 ;demo.c:489: puts("demo init\r\n\r\n");
   10BF C5                 3080 	push	bc
   10C0 D5                 3081 	push	de
   10C1 21r1Fs12           3082 	ld	hl,#__str_5
   10C4 E5                 3083 	push	hl
   10C5 CDr00s00           3084 	call	_puts
   10C8 F1                 3085 	pop	af
   10C9 D1                 3086 	pop	de
   10CA C1                 3087 	pop	bc
                           3088 ;demo.c:502: puts("music init...");
   10CB C5                 3089 	push	bc
   10CC D5                 3090 	push	de
   10CD 21r2Ds12           3091 	ld	hl,#__str_6
   10D0 E5                 3092 	push	hl
   10D1 CDr00s00           3093 	call	_puts
   10D4 F1                 3094 	pop	af
   10D5 D1                 3095 	pop	de
   10D6 C1                 3096 	pop	bc
                           3097 ;demo.c:504: PLY_SongPtr = (char *)0x0103;
   10D7 21r00s00           3098 	ld	hl,#_PLY_SongPtr + 0
   10DA 36 03              3099 	ld	(hl), #0x03
   10DC 21r01s00           3100 	ld	hl,#_PLY_SongPtr + 1
   10DF 36 01              3101 	ld	(hl), #0x01
                           3102 ;demo.c:505: PLY_Init();
   10E1 C5                 3103 	push	bc
   10E2 D5                 3104 	push	de
   10E3 CDr00s00           3105 	call	_PLY_Init
   10E6 D1                 3106 	pop	de
   10E7 C1                 3107 	pop	bc
                           3108 ;demo.c:506: puts("done.\n\n");
   10E8 C5                 3109 	push	bc
   10E9 D5                 3110 	push	de
   10EA 21r3Bs12           3111 	ld	hl,#__str_7
   10ED E5                 3112 	push	hl
   10EE CDr00s00           3113 	call	_puts
   10F1 F1                 3114 	pop	af
   10F2 D1                 3115 	pop	de
   10F3 C1                 3116 	pop	bc
                           3117 ;demo.c:508: if(isvdp2())
   10F4 C5                 3118 	push	bc
   10F5 D5                 3119 	push	de
   10F6 CDr00s00           3120 	call	_isvdp2
   10F9 45                 3121 	ld	b,l
   10FA D1                 3122 	pop	de
   10FB 78                 3123 	ld	a,b
   10FC C1                 3124 	pop	bc
   10FD 47                 3125 	ld	b,a
   10FE B7                 3126 	or	a,a
   10FF 28 03              3127 	jr	Z,00102$
                           3128 ;demo.c:510: modes+=2; // pal
   1101 11 82 00           3129 	ld	de,#0x0082
   1104                    3130 00102$:
                           3131 ;demo.c:514: vdp_set_screen5();
   1104 C5                 3132 	push	bc
   1105 D5                 3133 	push	de
   1106 CDr00s00           3134 	call	_vdp_set_screen5
   1109 D1                 3135 	pop	de
   110A C1                 3136 	pop	bc
                           3137 ;demo.c:516: vdp_register(VDP_MODE3,modes); // interlace on, screen mode pal or ntsc
   110B 43                 3138 	ld	b,e
   110C C5                 3139 	push	bc
   110D C5                 3140 	push	bc
   110E 33                 3141 	inc	sp
   110F 3E 09              3142 	ld	a,#0x09
   1111 F5                 3143 	push	af
   1112 33                 3144 	inc	sp
   1113 CDr00s00           3145 	call	_vdp_register
   1116 F1                 3146 	pop	af
   1117 C1                 3147 	pop	bc
                           3148 ;demo.c:518: puts("demo start\r\n");
   1118 C5                 3149 	push	bc
   1119 21r43s12           3150 	ld	hl,#__str_8
   111C E5                 3151 	push	hl
   111D CDr00s00           3152 	call	_puts
   1120 F1                 3153 	pop	af
   1121 C1                 3154 	pop	bc
                           3155 ;demo.c:520: scratch_clear();
   1122 C5                 3156 	push	bc
   1123 CDr97s03           3157 	call	_scratch_clear
   1126 C1                 3158 	pop	bc
                           3159 ;demo.c:521: vdp_load_palette(scratch);
   1127 C5                 3160 	push	bc
   1128 21r80s3F           3161 	ld	hl,#_scratch
   112B E5                 3162 	push	hl
   112C CDr00s00           3163 	call	_vdp_load_palette
   112F F1                 3164 	pop	af
   1130 C1                 3165 	pop	bc
                           3166 ;demo.c:523: vdp_register(VDP_VOFFSET,0);
   1131 C5                 3167 	push	bc
   1132 21 17 00           3168 	ld	hl,#0x0017
   1135 E5                 3169 	push	hl
   1136 CDr00s00           3170 	call	_vdp_register
   1139 F1                 3171 	pop	af
   113A C1                 3172 	pop	bc
                           3173 ;demo.c:524: pal_load("TWISTER PL5",32);
   113B C5                 3174 	push	bc
   113C 3E 20              3175 	ld	a,#0x20
   113E F5                 3176 	push	af
   113F 33                 3177 	inc	sp
   1140 21r50s12           3178 	ld	hl,#__str_9
   1143 E5                 3179 	push	hl
   1144 CDrAAs03           3180 	call	_pal_load
   1147 F1                 3181 	pop	af
   1148 33                 3182 	inc	sp
   1149 C1                 3183 	pop	bc
                           3184 ;demo.c:525: vdp_load_palette(cur_palette);
   114A C5                 3185 	push	bc
   114B 21r00s40           3186 	ld	hl,#_cur_palette
   114E E5                 3187 	push	hl
   114F CDr00s00           3188 	call	_vdp_load_palette
   1152 F1                 3189 	pop	af
   1153 C1                 3190 	pop	bc
                           3191 ;demo.c:527: memset((uint8_t *) &packbuffer, 0, 4032);
   1154 C5                 3192 	push	bc
   1155 21 C0 0F           3193 	ld	hl,#0x0FC0
   1158 E5                 3194 	push	hl
   1159 3E 00              3195 	ld	a,#0x00
   115B F5                 3196 	push	af
   115C 33                 3197 	inc	sp
   115D 21r00s01           3198 	ld	hl,#_packbuffer
   1160 E5                 3199 	push	hl
   1161 CDr00s00           3200 	call	_memset
   1164 F1                 3201 	pop	af
   1165 F1                 3202 	pop	af
   1166 33                 3203 	inc	sp
   1167 C1                 3204 	pop	bc
                           3205 ;demo.c:528: raw_load("TWISTER PCK", 4032, packbuffer);
   1168 C5                 3206 	push	bc
   1169 21r00s01           3207 	ld	hl,#_packbuffer
   116C E5                 3208 	push	hl
   116D 21 C0 0F           3209 	ld	hl,#0x0FC0
   1170 E5                 3210 	push	hl
   1171 21r5Cs12           3211 	ld	hl,#__str_10
   1174 E5                 3212 	push	hl
   1175 CDr5Es04           3213 	call	_raw_load
   1178 F1                 3214 	pop	af
   1179 F1                 3215 	pop	af
   117A F1                 3216 	pop	af
   117B C1                 3217 	pop	bc
                           3218 ;demo.c:529: bitbuster(packbuffer,0x8000,VRAM_0); // to page 1
   117C C5                 3219 	push	bc
   117D 3E 01              3220 	ld	a,#0x01
   117F F5                 3221 	push	af
   1180 33                 3222 	inc	sp
   1181 21 00 80           3223 	ld	hl,#0x8000
   1184 E5                 3224 	push	hl
   1185 21r00s01           3225 	ld	hl,#_packbuffer
   1188 E5                 3226 	push	hl
   1189 CDr00s00           3227 	call	_bitbuster
   118C F1                 3228 	pop	af
   118D F1                 3229 	pop	af
   118E 33                 3230 	inc	sp
   118F C1                 3231 	pop	bc
                           3232 ;demo.c:532: vdp_set_write_address(0, 0);
   1190 C5                 3233 	push	bc
   1191 21 00 00           3234 	ld	hl,#0x0000
   1194 E5                 3235 	push	hl
   1195 3E 00              3236 	ld	a,#0x00
   1197 F5                 3237 	push	af
   1198 33                 3238 	inc	sp
   1199 CDr00s00           3239 	call	_vdp_set_write_address
   119C F1                 3240 	pop	af
   119D 33                 3241 	inc	sp
   119E C1                 3242 	pop	bc
                           3243 ;demo.c:533: memset((uint8_t *) &scratch, 0, 256);
   119F C5                 3244 	push	bc
   11A0 21 00 01           3245 	ld	hl,#0x0100
   11A3 E5                 3246 	push	hl
   11A4 3E 00              3247 	ld	a,#0x00
   11A6 F5                 3248 	push	af
   11A7 33                 3249 	inc	sp
   11A8 21r80s3F           3250 	ld	hl,#_scratch
   11AB E5                 3251 	push	hl
   11AC CDr00s00           3252 	call	_memset
   11AF F1                 3253 	pop	af
   11B0 F1                 3254 	pop	af
   11B1 33                 3255 	inc	sp
   11B2 C1                 3256 	pop	bc
                           3257 ;demo.c:535: for (i = 0; i < 213; i++) {		
   11B3 11 D5 00           3258 	ld	de,#0x00D5
   11B6                    3259 00110$:
                           3260 ;demo.c:536: vdp_load_screen(scratch, 128);
   11B6 C5                 3261 	push	bc
   11B7 D5                 3262 	push	de
   11B8 3E 80              3263 	ld	a,#0x80
   11BA F5                 3264 	push	af
   11BB 33                 3265 	inc	sp
   11BC 21r80s3F           3266 	ld	hl,#_scratch
   11BF E5                 3267 	push	hl
   11C0 CDr00s00           3268 	call	_vdp_load_screen
   11C3 F1                 3269 	pop	af
   11C4 33                 3270 	inc	sp
   11C5 D1                 3271 	pop	de
   11C6 C1                 3272 	pop	bc
   11C7 1B                 3273 	dec	de
                           3274 ;demo.c:535: for (i = 0; i < 213; i++) {		
   11C8 7B                 3275 	ld	a,e
   11C9 B2                 3276 	or	a,d
   11CA 20 EA              3277 	jr	NZ,00110$
                           3278 ;demo.c:567: install_isr(my_isr);
   11CC C5                 3279 	push	bc
   11CD 21r2Cs02           3280 	ld	hl,#_my_isr
   11D0 E5                 3281 	push	hl
   11D1 CDr00s00           3282 	call	_install_isr
   11D4 F1                 3283 	pop	af
   11D5 C1                 3284 	pop	bc
                           3285 ;demo.c:589: twister();
   11D6 C5                 3286 	push	bc
   11D7 CDrEEs09           3287 	call	_twister
   11DA C1                 3288 	pop	bc
                           3289 ;demo.c:590: font();
   11DB C5                 3290 	push	bc
   11DC CDr1Ds0D           3291 	call	_font
   11DF C1                 3292 	pop	bc
                           3293 ;demo.c:592: while (!quit) {
   11E0                    3294 00105$:
   11E0 AF                 3295 	xor	a,a
   11E1 B1                 3296 	or	a,c
   11E2 20 18              3297 	jr	NZ,00107$
                           3298 ;demo.c:596: twister();
   11E4 C5                 3299 	push	bc
   11E5 CDrEEs09           3300 	call	_twister
   11E8 C1                 3301 	pop	bc
                           3302 ;demo.c:607: if(space())
   11E9 C5                 3303 	push	bc
   11EA 21 08 01           3304 	ld	hl,#0x0108
   11ED E5                 3305 	push	hl
   11EE CDr00s00           3306 	call	_ispressed
   11F1 F1                 3307 	pop	af
   11F2 7D                 3308 	ld	a,l
   11F3 C1                 3309 	pop	bc
   11F4 47                 3310 	ld	b,a
   11F5 B7                 3311 	or	a,a
   11F6 28 E8              3312 	jr	Z,00105$
                           3313 ;demo.c:608: quit=1;
   11F8 0E 01              3314 	ld	c,#0x01
   11FA 18 E4              3315 	jr	00105$
   11FC                    3316 00107$:
                           3317 ;demo.c:611: waitVB();
   11FC 76                 3318 		halt 
                           3319 ;demo.c:612: uninstall_isr();
   11FD CDr00s00           3320 	call	_uninstall_isr
                           3321 ;demo.c:613: PLY_Stop();
   1200 CDr00s00           3322 	call	_PLY_Stop
                           3323 ;demo.c:614: PLY_SendRegisters();
   1203 CDr00s00           3324 	call	_PLY_SendRegisters
                           3325 ;demo.c:616: screen(0);
   1206 3E 00              3326 	ld	a,#0x00
   1208 F5                 3327 	push	af
   1209 33                 3328 	inc	sp
   120A CDr00s00           3329 	call	_screen
   120D 33                 3330 	inc	sp
                           3331 ;demo.c:618: puts("demo exit\r\n\r\n");
   120E 21r68s12           3332 	ld	hl,#__str_11
   1211 E5                 3333 	push	hl
   1212 CDr00s00           3334 	call	_puts
   1215 F1                 3335 	pop	af
                           3336 ;demo.c:620: exit(0);
   1216 3E 00              3337 	ld	a,#0x00
   1218 F5                 3338 	push	af
   1219 33                 3339 	inc	sp
   121A CDr00s00           3340 	call	_exit
   121D 33                 3341 	inc	sp
   121E C9                 3342 	ret
   121F                    3343 _main_end::
   121F                    3344 __str_5:
   121F 64 65 6D 6F 20 69  3345 	.ascii "demo init"
        6E 69 74
   1228 0D                 3346 	.db 0x0D
   1229 0A                 3347 	.db 0x0A
   122A 0D                 3348 	.db 0x0D
   122B 0A                 3349 	.db 0x0A
   122C 00                 3350 	.db 0x00
   122D                    3351 __str_6:
   122D 6D 75 73 69 63 20  3352 	.ascii "music init..."
        69 6E 69 74 2E 2E
        2E
   123A 00                 3353 	.db 0x00
   123B                    3354 __str_7:
   123B 64 6F 6E 65 2E     3355 	.ascii "done."
   1240 0A                 3356 	.db 0x0A
   1241 0A                 3357 	.db 0x0A
   1242 00                 3358 	.db 0x00
   1243                    3359 __str_8:
   1243 64 65 6D 6F 20 73  3360 	.ascii "demo start"
        74 61 72 74
   124D 0D                 3361 	.db 0x0D
   124E 0A                 3362 	.db 0x0A
   124F 00                 3363 	.db 0x00
   1250                    3364 __str_9:
   1250 54 57 49 53 54 45  3365 	.ascii "TWISTER PL5"
        52 20 50 4C 35
   125B 00                 3366 	.db 0x00
   125C                    3367 __str_10:
   125C 54 57 49 53 54 45  3368 	.ascii "TWISTER PCK"
        52 20 50 43 4B
   1267 00                 3369 	.db 0x00
   1268                    3370 __str_11:
   1268 64 65 6D 6F 20 65  3371 	.ascii "demo exit"
        78 69 74
   1271 0D                 3372 	.db 0x0D
   1272 0A                 3373 	.db 0x0A
   1273 0D                 3374 	.db 0x0D
   1274 0A                 3375 	.db 0x0A
   1275 00                 3376 	.db 0x00
                           3377 	.area _CODE
                           3378 	.area _CABS
