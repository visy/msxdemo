

    .area _DATA


_storage::
    .dw 1
_storage2::
    .dw 1


    .area _CODE


;-------------------------------------
; Resets the PSG
;-------------------------------------
reset_psg::
        xor     a
        ld      bc,#0xffa1
        out     (0xa0),a
        inc     a
        out     (c),b
        out     (0xa0),a
        inc     a
        out     (c),b
        out     (0xa0),a
        inc     a
        out     (c),b
        out     (0xa0),a
        inc     a
        out     (c),b
        out     (0xa0),a
        inc     a
        out     (c),b
        out     (0xa0),a
        inc     a
        out     (c),b
        out     (0xa0),a
        inc     a
        out     (c),b
        out     (0xa0),a
        ld      b,#0xbf
        out     (c),b
        ret




_play_sample::

        ld (_storage),ix
        ld (_storage2),sp
        push ix

        ld ix,#0
        add ix,sp

        ; src
        ld l,4(ix)
        ld h,5(ix)

        ; dest
        ld e,6(ix)
        ld d,7(ix)

        call reset_psg


;-------------------------------------
; Include the replayer core
;-------------------------------------

;----------------------------------------------------------------------------
; Copyright (C) 2006 Arturo Ragozini and Daniel Vik
;
;  This software is provided 'as-is', without any express or implied
;  warranty.  In no event will the authors be held liable for any damages
;  arising from the use of this software.
;
;  Permission is granted to anyone to use this software for any purpose,
;  including commercial applications, and to alter it and redistribute it
;  freely, subject to the following restrictions:
;
;  1. The origin of this software must not be misrepresented; you must not
;     claim that you wrote the original software. If you use this software
;     in a product, an acknowledgment in the product documentation would be
;     appreciated but is not required.
;  2. Altered source versions must be plainly marked as such, and must not be
;     misrepresented as being the original software.
;  3. This notice may not be removed or altered from any source distribution.
;----------------------------------------------------------------------------

;
; Replayer core to play RLE encoded 11.025kHz samples generated by pcmenc
;
; pcmenc should use the following command line arguments:
;
;    pcmenc -dt1 32 -dt2 27 -dt3 265 file.wav
;
; and optionally -r to split sample into 8kB blocks for rom replayer
;


;-------------------------------------
; Plays one sample
; IN   HL - Encoded sample start address
;      DE - Sample length (#pcm samples)
;-------------------------------------
        ld      c,#0xa1
        push    hl
        ex      de,hl
        inc     h
        exx
        pop     hl
        ld      bc,#0x0010
        ld      de,#0x0000
        exx
        
PsgLoop:
        exx                 ; 5     -> 5

; Calculate channel A volume
        ld      a,b         ; 5
        sub     c           ; 5
        jr      nc,PsgWaitA ; 8/13
        ld      a,(hl)      ; 8
        ld      b,a         ; 5
        and     #0x0f         ; 8
        inc     hl          ; 7
        exx                 ; 5
        ld      b,a         ; 5
        exx                 ; 5     -> 61
PsgDoneA:
        
; Calculate channel B volume
        ld      a,d         ; 5
        sub     c           ; 5
        jr      nc,PsgWaitB ; 8/13
        ld      a,(hl)      ; 8
        ld      d,a         ; 5
        and     #0x0f         ; 8
        inc     hl          ; 7
        exx                 ; 5
        ld      d,a         ; 5
        exx                 ; 5     -> 61
PsgDoneB:
        
; Calculate channel C volume
        ld      a,e         ; 5
        sub     c           ; 5
        jr      nc,PsgWaitC ; 8/13
        ld      a,(hl)      ; 8
        ld      e,a         ; 5        
        and     #0x0f         ; 8
        inc     hl          ; 7
        exx                 ; 5
        ld      e,a         ; 5     -> 56
PsgDoneC:

        ; Output channels
        ld      a,#8          ; 8
        out     (#0xa0),a      ; 12
        inc     a            ; 5
        out     (c),b        ; 15
        out     (#0xa0),a      ; 12
        inc     a            ; 5
        out     (c),d        ; 15
        out     (#0xa0),a      ; 12
        out     (c),e        ; 15   -> 99
        
        ; Wait 25 t-cycles
        nop                  ; 5
        nop                  ; 5
        nop                  ; 5
        nop                  ; 5
        nop                  ; 5
        
        ; Decrement length and return if zero
        dec     l           ; 5
        jr      nz,PsgLoop  ; 8/13   -> 18   Total: 325
        dec     h           ; 5
        jp      nz,PsgLoop  ; 11

        ld ix,(_storage)
        ld sp,(_storage2)

        ret

        
PsgWaitA:
        ld      b,a         ; 5
        nop                 ; 5
        nop                 ; 5
        nop                 ; 5
        nop                 ; 5
        jr      PsgDoneA    ; 13   -> 51 including branch
        
PsgWaitB:
        ld      d,a         ; 5
        nop                 ; 5
        nop                 ; 5
        nop                 ; 5
        nop                 ; 5
        jr      PsgDoneB    ; 13   -> 51 including branch
        
PsgWaitC:
        ld      e,a         ; 5
        exx                 ; 5
        nop                 ; 5
        nop                 ; 5
        nop                 ; 5
        jr      PsgDoneC    ; 11   -> 51 including branch

